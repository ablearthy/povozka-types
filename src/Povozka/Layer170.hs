module Povozka.Layer170 where
import qualified Data.Binary
import qualified Data.Binary.Get
import qualified Data.Binary.Put

import qualified GHC.Base
import qualified Data.Maybe
import qualified GHC.Maybe

import Prelude hiding (String, Bool, True)

import Povozka.Primitives
import qualified Povozka.Utils as Data.Binary

instance Data.Binary.Binary AccountDaysTTL'
    where {get = do {_days_0 <- Data.Binary.get;
                     GHC.Base.pure (AccountDaysTTL' _days_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._days}
data AccountDaysTTL = AccountDaysTTL !AccountDaysTTL'
data AccountDaysTTL' = AccountDaysTTL' {_days :: !Int'}
instance Data.Binary.Binary AccountDaysTTL
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3100684255 -> fmap AccountDaysTTL Data.Binary.get}};
           put (AccountDaysTTL tmp_1) = do {Data.Binary.Put.putWord32le 3100684255;
                                            Data.Binary.put tmp_1}}
instance Data.Binary.Binary AppWebViewResultUrl'
    where {get = do {_url_0 <- Data.Binary.get;
                     GHC.Base.pure (AppWebViewResultUrl' _url_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._url}
data AppWebViewResult = AppWebViewResultUrl !AppWebViewResultUrl'
data AppWebViewResultUrl' = AppWebViewResultUrl' {_url :: !String'}
instance Data.Binary.Binary AppWebViewResult
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1008422669 -> fmap AppWebViewResultUrl Data.Binary.get}};
           put (AppWebViewResultUrl tmp_1) = do {Data.Binary.Put.putWord32le 1008422669;
                                                 Data.Binary.put tmp_1}}
instance Data.Binary.Binary AttachMenuBot'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _inactive_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _has_settings_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _request_write_access_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _show_in_attach_menu_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     _show_in_side_menu_5 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 4);
                     _side_menu_disclaimer_needed_6 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 5);
                     _bot_id_7 <- Data.Binary.get;
                     _short_name_8 <- Data.Binary.get;
                     _peer_types_9 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     _icons_10 <- Data.Binary.get;
                     GHC.Base.pure (AttachMenuBot' _inactive_1 _has_settings_2 _request_write_access_3 _show_in_attach_menu_4 _show_in_side_menu_5 _side_menu_disclaimer_needed_6 _bot_id_7 _short_name_8 _peer_types_9 _icons_10)};
           put to_be_encoded_11 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_11._peer_types,
                                                               3),
                                                              (Data.Maybe.isJust to_be_encoded_11._side_menu_disclaimer_needed,
                                                               5),
                                                              (Data.Maybe.isJust to_be_encoded_11._show_in_side_menu,
                                                               4),
                                                              (Data.Maybe.isJust to_be_encoded_11._show_in_attach_menu,
                                                               3),
                                                              (Data.Maybe.isJust to_be_encoded_11._request_write_access,
                                                               2),
                                                              (Data.Maybe.isJust to_be_encoded_11._has_settings,
                                                               1),
                                                              (Data.Maybe.isJust to_be_encoded_11._inactive,
                                                               0)];
                                      Data.Binary.put to_be_encoded_11._inactive;
                                      Data.Binary.put to_be_encoded_11._has_settings;
                                      Data.Binary.put to_be_encoded_11._request_write_access;
                                      Data.Binary.put to_be_encoded_11._show_in_attach_menu;
                                      Data.Binary.put to_be_encoded_11._show_in_side_menu;
                                      Data.Binary.put to_be_encoded_11._side_menu_disclaimer_needed;
                                      Data.Binary.put to_be_encoded_11._bot_id;
                                      Data.Binary.put to_be_encoded_11._short_name;
                                      Data.Binary.put to_be_encoded_11._peer_types;
                                      Data.Binary.put to_be_encoded_11._icons}}
data AttachMenuBot = AttachMenuBot !AttachMenuBot'
data AttachMenuBot'
    = AttachMenuBot' {_inactive :: !(Maybe True'),
                      _has_settings :: !(Maybe True'),
                      _request_write_access :: !(Maybe True'),
                      _show_in_attach_menu :: !(Maybe True'),
                      _show_in_side_menu :: !(Maybe True'),
                      _side_menu_disclaimer_needed :: !(Maybe True'),
                      _bot_id :: !Long',
                      _short_name :: !String',
                      _peer_types :: !(Maybe (Vector AttachMenuPeerType)),
                      _icons :: !(Vector AttachMenuBotIcon)}
instance Data.Binary.Binary AttachMenuBot
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3641544190 -> fmap AttachMenuBot Data.Binary.get}};
           put (AttachMenuBot tmp_1) = do {Data.Binary.Put.putWord32le 3641544190;
                                           Data.Binary.put tmp_1}}
instance Data.Binary.Binary AttachMenuBotIcon'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _name_1 <- Data.Binary.get;
                     _icon_2 <- Data.Binary.get;
                     _colors_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     GHC.Base.pure (AttachMenuBotIcon' _name_1 _icon_2 _colors_3)};
           put to_be_encoded_4 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_4._colors,
                                                              0)];
                                     Data.Binary.put to_be_encoded_4._name;
                                     Data.Binary.put to_be_encoded_4._icon;
                                     Data.Binary.put to_be_encoded_4._colors}}
data AttachMenuBotIcon = AttachMenuBotIcon !AttachMenuBotIcon'
data AttachMenuBotIcon'
    = AttachMenuBotIcon' {_name :: !String',
                          _icon :: !Document,
                          _colors :: !(Maybe (Vector AttachMenuBotIconColor))}
instance Data.Binary.Binary AttachMenuBotIcon
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2997303403 -> fmap AttachMenuBotIcon Data.Binary.get}};
           put (AttachMenuBotIcon tmp_1) = do {Data.Binary.Put.putWord32le 2997303403;
                                               Data.Binary.put tmp_1}}
instance Data.Binary.Binary AttachMenuBotIconColor'
    where {get = do {_name_0 <- Data.Binary.get;
                     _color_1 <- Data.Binary.get;
                     GHC.Base.pure (AttachMenuBotIconColor' _name_0 _color_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._name;
                                     Data.Binary.put to_be_encoded_2._color}}
data AttachMenuBotIconColor
    = AttachMenuBotIconColor !AttachMenuBotIconColor'
data AttachMenuBotIconColor'
    = AttachMenuBotIconColor' {_name :: !String', _color :: !Int'}
instance Data.Binary.Binary AttachMenuBotIconColor
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1165423600 -> fmap AttachMenuBotIconColor Data.Binary.get}};
           put (AttachMenuBotIconColor tmp_1) = do {Data.Binary.Put.putWord32le 1165423600;
                                                    Data.Binary.put tmp_1}}
instance Data.Binary.Binary AttachMenuBots'
    where {get = do {_hash_0 <- Data.Binary.get;
                     _bots_1 <- Data.Binary.get;
                     _users_2 <- Data.Binary.get;
                     GHC.Base.pure (AttachMenuBots' _hash_0 _bots_1 _users_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._hash;
                                     Data.Binary.put to_be_encoded_3._bots;
                                     Data.Binary.put to_be_encoded_3._users}}
instance Data.Binary.Binary AttachMenuBotsNotModified'
    where {get = GHC.Base.pure AttachMenuBotsNotModified';
           put to_be_encoded_0 = do GHC.Base.pure ()}
data AttachMenuBots
    = AttachMenuBots !AttachMenuBots'
    | AttachMenuBotsNotModified !AttachMenuBotsNotModified'
data AttachMenuBots'
    = AttachMenuBots' {_hash :: !Long',
                       _bots :: !(Vector AttachMenuBot),
                       _users :: !(Vector User)}
data AttachMenuBotsNotModified' = AttachMenuBotsNotModified' {}
instance Data.Binary.Binary AttachMenuBots
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1011024320 -> fmap AttachMenuBots Data.Binary.get;
                      4057500252 -> fmap AttachMenuBotsNotModified Data.Binary.get}};
           put (AttachMenuBots tmp_1) = do {Data.Binary.Put.putWord32le 1011024320;
                                            Data.Binary.put tmp_1};
           put (AttachMenuBotsNotModified tmp_2) = do {Data.Binary.Put.putWord32le 4057500252;
                                                       Data.Binary.put tmp_2}}
instance Data.Binary.Binary AttachMenuBotsBot'
    where {get = do {_bot_0 <- Data.Binary.get;
                     _users_1 <- Data.Binary.get;
                     GHC.Base.pure (AttachMenuBotsBot' _bot_0 _users_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._bot;
                                     Data.Binary.put to_be_encoded_2._users}}
data AttachMenuBotsBot = AttachMenuBotsBot !AttachMenuBotsBot'
data AttachMenuBotsBot'
    = AttachMenuBotsBot' {_bot :: !AttachMenuBot,
                          _users :: !(Vector User)}
instance Data.Binary.Binary AttachMenuBotsBot
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2478794367 -> fmap AttachMenuBotsBot Data.Binary.get}};
           put (AttachMenuBotsBot tmp_1) = do {Data.Binary.Put.putWord32le 2478794367;
                                               Data.Binary.put tmp_1}}
instance Data.Binary.Binary AttachMenuPeerTypeBotPM'
    where {get = GHC.Base.pure AttachMenuPeerTypeBotPM';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary AttachMenuPeerTypeBroadcast'
    where {get = GHC.Base.pure AttachMenuPeerTypeBroadcast';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary AttachMenuPeerTypeChat'
    where {get = GHC.Base.pure AttachMenuPeerTypeChat';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary AttachMenuPeerTypePM'
    where {get = GHC.Base.pure AttachMenuPeerTypePM';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary AttachMenuPeerTypeSameBotPM'
    where {get = GHC.Base.pure AttachMenuPeerTypeSameBotPM';
           put to_be_encoded_0 = do GHC.Base.pure ()}
data AttachMenuPeerType
    = AttachMenuPeerTypeBotPM !AttachMenuPeerTypeBotPM'
    | AttachMenuPeerTypeBroadcast !AttachMenuPeerTypeBroadcast'
    | AttachMenuPeerTypeChat !AttachMenuPeerTypeChat'
    | AttachMenuPeerTypePM !AttachMenuPeerTypePM'
    | AttachMenuPeerTypeSameBotPM !AttachMenuPeerTypeSameBotPM'
data AttachMenuPeerTypeBotPM' = AttachMenuPeerTypeBotPM' {}
data AttachMenuPeerTypeBroadcast' = AttachMenuPeerTypeBroadcast' {}
data AttachMenuPeerTypeChat' = AttachMenuPeerTypeChat' {}
data AttachMenuPeerTypePM' = AttachMenuPeerTypePM' {}
data AttachMenuPeerTypeSameBotPM' = AttachMenuPeerTypeSameBotPM' {}
instance Data.Binary.Binary AttachMenuPeerType
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3274439194 -> fmap AttachMenuPeerTypeBotPM Data.Binary.get;
                      2080104188 -> fmap AttachMenuPeerTypeBroadcast Data.Binary.get;
                      84480319 -> fmap AttachMenuPeerTypeChat Data.Binary.get;
                      4047950623 -> fmap AttachMenuPeerTypePM Data.Binary.get;
                      2104224014 -> fmap AttachMenuPeerTypeSameBotPM Data.Binary.get}};
           put (AttachMenuPeerTypeBotPM tmp_1) = do {Data.Binary.Put.putWord32le 3274439194;
                                                     Data.Binary.put tmp_1};
           put (AttachMenuPeerTypeBroadcast tmp_2) = do {Data.Binary.Put.putWord32le 2080104188;
                                                         Data.Binary.put tmp_2};
           put (AttachMenuPeerTypeChat tmp_3) = do {Data.Binary.Put.putWord32le 84480319;
                                                    Data.Binary.put tmp_3};
           put (AttachMenuPeerTypePM tmp_4) = do {Data.Binary.Put.putWord32le 4047950623;
                                                  Data.Binary.put tmp_4};
           put (AttachMenuPeerTypeSameBotPM tmp_5) = do {Data.Binary.Put.putWord32le 2104224014;
                                                         Data.Binary.put tmp_5}}
instance Data.Binary.Binary Authorization'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _current_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _official_app_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _password_pending_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _encrypted_requests_disabled_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     _call_requests_disabled_5 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 4);
                     _unconfirmed_6 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 5);
                     _hash_7 <- Data.Binary.get;
                     _device_model_8 <- Data.Binary.get;
                     _platform_9 <- Data.Binary.get;
                     _system_version_10 <- Data.Binary.get;
                     _api_id_11 <- Data.Binary.get;
                     _app_name_12 <- Data.Binary.get;
                     _app_version_13 <- Data.Binary.get;
                     _date_created_14 <- Data.Binary.get;
                     _date_active_15 <- Data.Binary.get;
                     _ip_16 <- Data.Binary.get;
                     _country_17 <- Data.Binary.get;
                     _region_18 <- Data.Binary.get;
                     GHC.Base.pure (Authorization' _current_1 _official_app_2 _password_pending_3 _encrypted_requests_disabled_4 _call_requests_disabled_5 _unconfirmed_6 _hash_7 _device_model_8 _platform_9 _system_version_10 _api_id_11 _app_name_12 _app_version_13 _date_created_14 _date_active_15 _ip_16 _country_17 _region_18)};
           put to_be_encoded_19 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_19._unconfirmed,
                                                               5),
                                                              (Data.Maybe.isJust to_be_encoded_19._call_requests_disabled,
                                                               4),
                                                              (Data.Maybe.isJust to_be_encoded_19._encrypted_requests_disabled,
                                                               3),
                                                              (Data.Maybe.isJust to_be_encoded_19._password_pending,
                                                               2),
                                                              (Data.Maybe.isJust to_be_encoded_19._official_app,
                                                               1),
                                                              (Data.Maybe.isJust to_be_encoded_19._current,
                                                               0)];
                                      Data.Binary.put to_be_encoded_19._current;
                                      Data.Binary.put to_be_encoded_19._official_app;
                                      Data.Binary.put to_be_encoded_19._password_pending;
                                      Data.Binary.put to_be_encoded_19._encrypted_requests_disabled;
                                      Data.Binary.put to_be_encoded_19._call_requests_disabled;
                                      Data.Binary.put to_be_encoded_19._unconfirmed;
                                      Data.Binary.put to_be_encoded_19._hash;
                                      Data.Binary.put to_be_encoded_19._device_model;
                                      Data.Binary.put to_be_encoded_19._platform;
                                      Data.Binary.put to_be_encoded_19._system_version;
                                      Data.Binary.put to_be_encoded_19._api_id;
                                      Data.Binary.put to_be_encoded_19._app_name;
                                      Data.Binary.put to_be_encoded_19._app_version;
                                      Data.Binary.put to_be_encoded_19._date_created;
                                      Data.Binary.put to_be_encoded_19._date_active;
                                      Data.Binary.put to_be_encoded_19._ip;
                                      Data.Binary.put to_be_encoded_19._country;
                                      Data.Binary.put to_be_encoded_19._region}}
data Authorization = Authorization !Authorization'
data Authorization'
    = Authorization' {_current :: !(Maybe True'),
                      _official_app :: !(Maybe True'),
                      _password_pending :: !(Maybe True'),
                      _encrypted_requests_disabled :: !(Maybe True'),
                      _call_requests_disabled :: !(Maybe True'),
                      _unconfirmed :: !(Maybe True'),
                      _hash :: !Long',
                      _device_model :: !String',
                      _platform :: !String',
                      _system_version :: !String',
                      _api_id :: !Int',
                      _app_name :: !String',
                      _app_version :: !String',
                      _date_created :: !Int',
                      _date_active :: !Int',
                      _ip :: !String',
                      _country :: !String',
                      _region :: !String'}
instance Data.Binary.Binary Authorization
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2902578717 -> fmap Authorization Data.Binary.get}};
           put (Authorization tmp_1) = do {Data.Binary.Put.putWord32le 2902578717;
                                           Data.Binary.put tmp_1}}
instance Data.Binary.Binary AutoDownloadSettings'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _disabled_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _video_preload_large_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _audio_preload_next_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _phonecalls_less_data_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     _stories_preload_5 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 4);
                     _photo_size_max_6 <- Data.Binary.get;
                     _video_size_max_7 <- Data.Binary.get;
                     _file_size_max_8 <- Data.Binary.get;
                     _video_upload_maxbitrate_9 <- Data.Binary.get;
                     _small_queue_active_operations_max_10 <- Data.Binary.get;
                     _large_queue_active_operations_max_11 <- Data.Binary.get;
                     GHC.Base.pure (AutoDownloadSettings' _disabled_1 _video_preload_large_2 _audio_preload_next_3 _phonecalls_less_data_4 _stories_preload_5 _photo_size_max_6 _video_size_max_7 _file_size_max_8 _video_upload_maxbitrate_9 _small_queue_active_operations_max_10 _large_queue_active_operations_max_11)};
           put to_be_encoded_12 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_12._stories_preload,
                                                               4),
                                                              (Data.Maybe.isJust to_be_encoded_12._phonecalls_less_data,
                                                               3),
                                                              (Data.Maybe.isJust to_be_encoded_12._audio_preload_next,
                                                               2),
                                                              (Data.Maybe.isJust to_be_encoded_12._video_preload_large,
                                                               1),
                                                              (Data.Maybe.isJust to_be_encoded_12._disabled,
                                                               0)];
                                      Data.Binary.put to_be_encoded_12._disabled;
                                      Data.Binary.put to_be_encoded_12._video_preload_large;
                                      Data.Binary.put to_be_encoded_12._audio_preload_next;
                                      Data.Binary.put to_be_encoded_12._phonecalls_less_data;
                                      Data.Binary.put to_be_encoded_12._stories_preload;
                                      Data.Binary.put to_be_encoded_12._photo_size_max;
                                      Data.Binary.put to_be_encoded_12._video_size_max;
                                      Data.Binary.put to_be_encoded_12._file_size_max;
                                      Data.Binary.put to_be_encoded_12._video_upload_maxbitrate;
                                      Data.Binary.put to_be_encoded_12._small_queue_active_operations_max;
                                      Data.Binary.put to_be_encoded_12._large_queue_active_operations_max}}
data AutoDownloadSettings
    = AutoDownloadSettings !AutoDownloadSettings'
data AutoDownloadSettings'
    = AutoDownloadSettings' {_disabled :: !(Maybe True'),
                             _video_preload_large :: !(Maybe True'),
                             _audio_preload_next :: !(Maybe True'),
                             _phonecalls_less_data :: !(Maybe True'),
                             _stories_preload :: !(Maybe True'),
                             _photo_size_max :: !Int',
                             _video_size_max :: !Long',
                             _file_size_max :: !Long',
                             _video_upload_maxbitrate :: !Int',
                             _small_queue_active_operations_max :: !Int',
                             _large_queue_active_operations_max :: !Int'}
instance Data.Binary.Binary AutoDownloadSettings
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3131405864 -> fmap AutoDownloadSettings Data.Binary.get}};
           put (AutoDownloadSettings tmp_1) = do {Data.Binary.Put.putWord32le 3131405864;
                                                  Data.Binary.put tmp_1}}
instance Data.Binary.Binary AutoSaveException'
    where {get = do {_peer_0 <- Data.Binary.get;
                     _settings_1 <- Data.Binary.get;
                     GHC.Base.pure (AutoSaveException' _peer_0 _settings_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._peer;
                                     Data.Binary.put to_be_encoded_2._settings}}
data AutoSaveException = AutoSaveException !AutoSaveException'
data AutoSaveException'
    = AutoSaveException' {_peer :: !Peer,
                          _settings :: !AutoSaveSettings}
instance Data.Binary.Binary AutoSaveException
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2170563911 -> fmap AutoSaveException Data.Binary.get}};
           put (AutoSaveException tmp_1) = do {Data.Binary.Put.putWord32le 2170563911;
                                               Data.Binary.put tmp_1}}
instance Data.Binary.Binary AutoSaveSettings'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _photos_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _videos_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _video_max_size_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     GHC.Base.pure (AutoSaveSettings' _photos_1 _videos_2 _video_max_size_3)};
           put to_be_encoded_4 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_4._video_max_size,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_4._videos,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_4._photos,
                                                              0)];
                                     Data.Binary.put to_be_encoded_4._photos;
                                     Data.Binary.put to_be_encoded_4._videos;
                                     Data.Binary.put to_be_encoded_4._video_max_size}}
data AutoSaveSettings = AutoSaveSettings !AutoSaveSettings'
data AutoSaveSettings'
    = AutoSaveSettings' {_photos :: !(Maybe True'),
                         _videos :: !(Maybe True'),
                         _video_max_size :: !(Maybe Long')}
instance Data.Binary.Binary AutoSaveSettings
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3360175310 -> fmap AutoSaveSettings Data.Binary.get}};
           put (AutoSaveSettings tmp_1) = do {Data.Binary.Put.putWord32le 3360175310;
                                              Data.Binary.put tmp_1}}
instance Data.Binary.Binary AvailableReaction'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _inactive_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _premium_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _reaction_3 <- Data.Binary.get;
                     _title_4 <- Data.Binary.get;
                     _static_icon_5 <- Data.Binary.get;
                     _appear_animation_6 <- Data.Binary.get;
                     _select_animation_7 <- Data.Binary.get;
                     _activate_animation_8 <- Data.Binary.get;
                     _effect_animation_9 <- Data.Binary.get;
                     _around_animation_10 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _center_icon_11 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     GHC.Base.pure (AvailableReaction' _inactive_1 _premium_2 _reaction_3 _title_4 _static_icon_5 _appear_animation_6 _select_animation_7 _activate_animation_8 _effect_animation_9 _around_animation_10 _center_icon_11)};
           put to_be_encoded_12 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_12._center_icon,
                                                               1),
                                                              (Data.Maybe.isJust to_be_encoded_12._around_animation,
                                                               1),
                                                              (Data.Maybe.isJust to_be_encoded_12._premium,
                                                               2),
                                                              (Data.Maybe.isJust to_be_encoded_12._inactive,
                                                               0)];
                                      Data.Binary.put to_be_encoded_12._inactive;
                                      Data.Binary.put to_be_encoded_12._premium;
                                      Data.Binary.put to_be_encoded_12._reaction;
                                      Data.Binary.put to_be_encoded_12._title;
                                      Data.Binary.put to_be_encoded_12._static_icon;
                                      Data.Binary.put to_be_encoded_12._appear_animation;
                                      Data.Binary.put to_be_encoded_12._select_animation;
                                      Data.Binary.put to_be_encoded_12._activate_animation;
                                      Data.Binary.put to_be_encoded_12._effect_animation;
                                      Data.Binary.put to_be_encoded_12._around_animation;
                                      Data.Binary.put to_be_encoded_12._center_icon}}
data AvailableReaction = AvailableReaction !AvailableReaction'
data AvailableReaction'
    = AvailableReaction' {_inactive :: !(Maybe True'),
                          _premium :: !(Maybe True'),
                          _reaction :: !String',
                          _title :: !String',
                          _static_icon :: !Document,
                          _appear_animation :: !Document,
                          _select_animation :: !Document,
                          _activate_animation :: !Document,
                          _effect_animation :: !Document,
                          _around_animation :: !(Maybe Document),
                          _center_icon :: !(Maybe Document)}
instance Data.Binary.Binary AvailableReaction
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3229084673 -> fmap AvailableReaction Data.Binary.get}};
           put (AvailableReaction tmp_1) = do {Data.Binary.Put.putWord32le 3229084673;
                                               Data.Binary.put tmp_1}}
instance Data.Binary.Binary BankCardOpenUrl'
    where {get = do {_url_0 <- Data.Binary.get;
                     _name_1 <- Data.Binary.get;
                     GHC.Base.pure (BankCardOpenUrl' _url_0 _name_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._url;
                                     Data.Binary.put to_be_encoded_2._name}}
data BankCardOpenUrl = BankCardOpenUrl !BankCardOpenUrl'
data BankCardOpenUrl'
    = BankCardOpenUrl' {_url :: !String', _name :: !String'}
instance Data.Binary.Binary BankCardOpenUrl
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {4117234314 -> fmap BankCardOpenUrl Data.Binary.get}};
           put (BankCardOpenUrl tmp_1) = do {Data.Binary.Put.putWord32le 4117234314;
                                             Data.Binary.put tmp_1}}
instance Data.Binary.Binary BaseThemeArctic'
    where {get = GHC.Base.pure BaseThemeArctic';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary BaseThemeClassic'
    where {get = GHC.Base.pure BaseThemeClassic';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary BaseThemeDay'
    where {get = GHC.Base.pure BaseThemeDay';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary BaseThemeNight'
    where {get = GHC.Base.pure BaseThemeNight';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary BaseThemeTinted'
    where {get = GHC.Base.pure BaseThemeTinted';
           put to_be_encoded_0 = do GHC.Base.pure ()}
data BaseTheme
    = BaseThemeArctic !BaseThemeArctic'
    | BaseThemeClassic !BaseThemeClassic'
    | BaseThemeDay !BaseThemeDay'
    | BaseThemeNight !BaseThemeNight'
    | BaseThemeTinted !BaseThemeTinted'
data BaseThemeArctic' = BaseThemeArctic' {}
data BaseThemeClassic' = BaseThemeClassic' {}
data BaseThemeDay' = BaseThemeDay' {}
data BaseThemeNight' = BaseThemeNight' {}
data BaseThemeTinted' = BaseThemeTinted' {}
instance Data.Binary.Binary BaseTheme
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1527845466 -> fmap BaseThemeArctic Data.Binary.get;
                      3282117730 -> fmap BaseThemeClassic Data.Binary.get;
                      4225242760 -> fmap BaseThemeDay Data.Binary.get;
                      3081969320 -> fmap BaseThemeNight Data.Binary.get;
                      1834973166 -> fmap BaseThemeTinted Data.Binary.get}};
           put (BaseThemeArctic tmp_1) = do {Data.Binary.Put.putWord32le 1527845466;
                                             Data.Binary.put tmp_1};
           put (BaseThemeClassic tmp_2) = do {Data.Binary.Put.putWord32le 3282117730;
                                              Data.Binary.put tmp_2};
           put (BaseThemeDay tmp_3) = do {Data.Binary.Put.putWord32le 4225242760;
                                          Data.Binary.put tmp_3};
           put (BaseThemeNight tmp_4) = do {Data.Binary.Put.putWord32le 3081969320;
                                            Data.Binary.put tmp_4};
           put (BaseThemeTinted tmp_5) = do {Data.Binary.Put.putWord32le 1834973166;
                                             Data.Binary.put tmp_5}}
instance Data.Binary.Binary BoolFalse'
    where {get = GHC.Base.pure BoolFalse';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary BoolTrue'
    where {get = GHC.Base.pure BoolTrue';
           put to_be_encoded_0 = do GHC.Base.pure ()}
data Bool
    = BoolFalse !BoolFalse'
    | BoolTrue !BoolTrue'
data BoolFalse' = BoolFalse' {}
data BoolTrue' = BoolTrue' {}
instance Data.Binary.Binary Bool
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3162085175 -> fmap BoolFalse Data.Binary.get;
                      2574415285 -> fmap BoolTrue Data.Binary.get}};
           put (BoolFalse tmp_1) = do {Data.Binary.Put.putWord32le 3162085175;
                                       Data.Binary.put tmp_1};
           put (BoolTrue tmp_2) = do {Data.Binary.Put.putWord32le 2574415285;
                                      Data.Binary.put tmp_2}}
instance Data.Binary.Binary Boost'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _gift_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _giveaway_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _unclaimed_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     _id_4 <- Data.Binary.get;
                     _user_id_5 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _giveaway_msg_id_6 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _date_7 <- Data.Binary.get;
                     _expires_8 <- Data.Binary.get;
                     _used_gift_slug_9 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 4);
                     _multiplier_10 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 5);
                     GHC.Base.pure (Boost' _gift_1 _giveaway_2 _unclaimed_3 _id_4 _user_id_5 _giveaway_msg_id_6 _date_7 _expires_8 _used_gift_slug_9 _multiplier_10)};
           put to_be_encoded_11 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_11._multiplier,
                                                               5),
                                                              (Data.Maybe.isJust to_be_encoded_11._used_gift_slug,
                                                               4),
                                                              (Data.Maybe.isJust to_be_encoded_11._giveaway_msg_id,
                                                               2),
                                                              (Data.Maybe.isJust to_be_encoded_11._user_id,
                                                               0),
                                                              (Data.Maybe.isJust to_be_encoded_11._unclaimed,
                                                               3),
                                                              (Data.Maybe.isJust to_be_encoded_11._giveaway,
                                                               2),
                                                              (Data.Maybe.isJust to_be_encoded_11._gift,
                                                               1)];
                                      Data.Binary.put to_be_encoded_11._gift;
                                      Data.Binary.put to_be_encoded_11._giveaway;
                                      Data.Binary.put to_be_encoded_11._unclaimed;
                                      Data.Binary.put to_be_encoded_11._id;
                                      Data.Binary.put to_be_encoded_11._user_id;
                                      Data.Binary.put to_be_encoded_11._giveaway_msg_id;
                                      Data.Binary.put to_be_encoded_11._date;
                                      Data.Binary.put to_be_encoded_11._expires;
                                      Data.Binary.put to_be_encoded_11._used_gift_slug;
                                      Data.Binary.put to_be_encoded_11._multiplier}}
data Boost = Boost !Boost'
data Boost'
    = Boost' {_gift :: !(Maybe True'),
              _giveaway :: !(Maybe True'),
              _unclaimed :: !(Maybe True'),
              _id :: !String',
              _user_id :: !(Maybe Long'),
              _giveaway_msg_id :: !(Maybe Int'),
              _date :: !Int',
              _expires :: !Int',
              _used_gift_slug :: !(Maybe String'),
              _multiplier :: !(Maybe Int')}
instance Data.Binary.Binary Boost
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {706514033 -> fmap Boost Data.Binary.get}};
           put (Boost tmp_1) = do {Data.Binary.Put.putWord32le 706514033;
                                   Data.Binary.put tmp_1}}
instance Data.Binary.Binary BotApp'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _id_1 <- Data.Binary.get;
                     _access_hash_2 <- Data.Binary.get;
                     _short_name_3 <- Data.Binary.get;
                     _title_4 <- Data.Binary.get;
                     _description_5 <- Data.Binary.get;
                     _photo_6 <- Data.Binary.get;
                     _document_7 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _hash_8 <- Data.Binary.get;
                     GHC.Base.pure (BotApp' _id_1 _access_hash_2 _short_name_3 _title_4 _description_5 _photo_6 _document_7 _hash_8)};
           put to_be_encoded_9 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_9._document,
                                                              0)];
                                     Data.Binary.put to_be_encoded_9._id;
                                     Data.Binary.put to_be_encoded_9._access_hash;
                                     Data.Binary.put to_be_encoded_9._short_name;
                                     Data.Binary.put to_be_encoded_9._title;
                                     Data.Binary.put to_be_encoded_9._description;
                                     Data.Binary.put to_be_encoded_9._photo;
                                     Data.Binary.put to_be_encoded_9._document;
                                     Data.Binary.put to_be_encoded_9._hash}}
instance Data.Binary.Binary BotAppNotModified'
    where {get = GHC.Base.pure BotAppNotModified';
           put to_be_encoded_0 = do GHC.Base.pure ()}
data BotApp
    = BotApp !BotApp'
    | BotAppNotModified !BotAppNotModified'
data BotApp'
    = BotApp' {_id :: !Long',
               _access_hash :: !Long',
               _short_name :: !String',
               _title :: !String',
               _description :: !String',
               _photo :: !Photo,
               _document :: !(Maybe Document),
               _hash :: !Long'}
data BotAppNotModified' = BotAppNotModified' {}
instance Data.Binary.Binary BotApp
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2516373974 -> fmap BotApp Data.Binary.get;
                      1571189943 -> fmap BotAppNotModified Data.Binary.get}};
           put (BotApp tmp_1) = do {Data.Binary.Put.putWord32le 2516373974;
                                    Data.Binary.put tmp_1};
           put (BotAppNotModified tmp_2) = do {Data.Binary.Put.putWord32le 1571189943;
                                               Data.Binary.put tmp_2}}
instance Data.Binary.Binary BotCommand'
    where {get = do {_command_0 <- Data.Binary.get;
                     _description_1 <- Data.Binary.get;
                     GHC.Base.pure (BotCommand' _command_0 _description_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._command;
                                     Data.Binary.put to_be_encoded_2._description}}
data BotCommand = BotCommand !BotCommand'
data BotCommand'
    = BotCommand' {_command :: !String', _description :: !String'}
instance Data.Binary.Binary BotCommand
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3262826695 -> fmap BotCommand Data.Binary.get}};
           put (BotCommand tmp_1) = do {Data.Binary.Put.putWord32le 3262826695;
                                        Data.Binary.put tmp_1}}
instance Data.Binary.Binary BotCommandScopeChatAdmins'
    where {get = GHC.Base.pure BotCommandScopeChatAdmins';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary BotCommandScopeChats'
    where {get = GHC.Base.pure BotCommandScopeChats';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary BotCommandScopeDefault'
    where {get = GHC.Base.pure BotCommandScopeDefault';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary BotCommandScopePeer'
    where {get = do {_peer_0 <- Data.Binary.get;
                     GHC.Base.pure (BotCommandScopePeer' _peer_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._peer}
instance Data.Binary.Binary BotCommandScopePeerAdmins'
    where {get = do {_peer_0 <- Data.Binary.get;
                     GHC.Base.pure (BotCommandScopePeerAdmins' _peer_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._peer}
instance Data.Binary.Binary BotCommandScopePeerUser'
    where {get = do {_peer_0 <- Data.Binary.get;
                     _user_id_1 <- Data.Binary.get;
                     GHC.Base.pure (BotCommandScopePeerUser' _peer_0 _user_id_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._peer;
                                     Data.Binary.put to_be_encoded_2._user_id}}
instance Data.Binary.Binary BotCommandScopeUsers'
    where {get = GHC.Base.pure BotCommandScopeUsers';
           put to_be_encoded_0 = do GHC.Base.pure ()}
data BotCommandScope
    = BotCommandScopeChatAdmins !BotCommandScopeChatAdmins'
    | BotCommandScopeChats !BotCommandScopeChats'
    | BotCommandScopeDefault !BotCommandScopeDefault'
    | BotCommandScopePeer !BotCommandScopePeer'
    | BotCommandScopePeerAdmins !BotCommandScopePeerAdmins'
    | BotCommandScopePeerUser !BotCommandScopePeerUser'
    | BotCommandScopeUsers !BotCommandScopeUsers'
data BotCommandScopeChatAdmins' = BotCommandScopeChatAdmins' {}
data BotCommandScopeChats' = BotCommandScopeChats' {}
data BotCommandScopeDefault' = BotCommandScopeDefault' {}
data BotCommandScopePeer'
    = BotCommandScopePeer' {_peer :: !InputPeer}
data BotCommandScopePeerAdmins'
    = BotCommandScopePeerAdmins' {_peer :: !InputPeer}
data BotCommandScopePeerUser'
    = BotCommandScopePeerUser' {_peer :: !InputPeer,
                                _user_id :: !InputUser}
data BotCommandScopeUsers' = BotCommandScopeUsers' {}
instance Data.Binary.Binary BotCommandScope
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3114950762 -> fmap BotCommandScopeChatAdmins Data.Binary.get;
                      1877059713 -> fmap BotCommandScopeChats Data.Binary.get;
                      795652779 -> fmap BotCommandScopeDefault Data.Binary.get;
                      3684534653 -> fmap BotCommandScopePeer Data.Binary.get;
                      1071145937 -> fmap BotCommandScopePeerAdmins Data.Binary.get;
                      169026035 -> fmap BotCommandScopePeerUser Data.Binary.get;
                      1011811544 -> fmap BotCommandScopeUsers Data.Binary.get}};
           put (BotCommandScopeChatAdmins tmp_1) = do {Data.Binary.Put.putWord32le 3114950762;
                                                       Data.Binary.put tmp_1};
           put (BotCommandScopeChats tmp_2) = do {Data.Binary.Put.putWord32le 1877059713;
                                                  Data.Binary.put tmp_2};
           put (BotCommandScopeDefault tmp_3) = do {Data.Binary.Put.putWord32le 795652779;
                                                    Data.Binary.put tmp_3};
           put (BotCommandScopePeer tmp_4) = do {Data.Binary.Put.putWord32le 3684534653;
                                                 Data.Binary.put tmp_4};
           put (BotCommandScopePeerAdmins tmp_5) = do {Data.Binary.Put.putWord32le 1071145937;
                                                       Data.Binary.put tmp_5};
           put (BotCommandScopePeerUser tmp_6) = do {Data.Binary.Put.putWord32le 169026035;
                                                     Data.Binary.put tmp_6};
           put (BotCommandScopeUsers tmp_7) = do {Data.Binary.Put.putWord32le 1011811544;
                                                  Data.Binary.put tmp_7}}
instance Data.Binary.Binary BotInfo'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _user_id_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _description_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _description_photo_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 4);
                     _description_document_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 5);
                     _commands_5 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _menu_button_6 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     GHC.Base.pure (BotInfo' _user_id_1 _description_2 _description_photo_3 _description_document_4 _commands_5 _menu_button_6)};
           put to_be_encoded_7 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_7._menu_button,
                                                              3),
                                                             (Data.Maybe.isJust to_be_encoded_7._commands,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_7._description_document,
                                                              5),
                                                             (Data.Maybe.isJust to_be_encoded_7._description_photo,
                                                              4),
                                                             (Data.Maybe.isJust to_be_encoded_7._description,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_7._user_id,
                                                              0)];
                                     Data.Binary.put to_be_encoded_7._user_id;
                                     Data.Binary.put to_be_encoded_7._description;
                                     Data.Binary.put to_be_encoded_7._description_photo;
                                     Data.Binary.put to_be_encoded_7._description_document;
                                     Data.Binary.put to_be_encoded_7._commands;
                                     Data.Binary.put to_be_encoded_7._menu_button}}
data BotInfo = BotInfo !BotInfo'
data BotInfo'
    = BotInfo' {_user_id :: !(Maybe Long'),
                _description :: !(Maybe String'),
                _description_photo :: !(Maybe Photo),
                _description_document :: !(Maybe Document),
                _commands :: !(Maybe (Vector BotCommand)),
                _menu_button :: !(Maybe BotMenuButton)}
instance Data.Binary.Binary BotInfo
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2402290519 -> fmap BotInfo Data.Binary.get}};
           put (BotInfo tmp_1) = do {Data.Binary.Put.putWord32le 2402290519;
                                     Data.Binary.put tmp_1}}
instance Data.Binary.Binary BotInlineMessageMediaAuto'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _invert_media_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     _message_2 <- Data.Binary.get;
                     _entities_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _reply_markup_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     GHC.Base.pure (BotInlineMessageMediaAuto' _invert_media_1 _message_2 _entities_3 _reply_markup_4)};
           put to_be_encoded_5 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_5._reply_markup,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_5._entities,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_5._invert_media,
                                                              3)];
                                     Data.Binary.put to_be_encoded_5._invert_media;
                                     Data.Binary.put to_be_encoded_5._message;
                                     Data.Binary.put to_be_encoded_5._entities;
                                     Data.Binary.put to_be_encoded_5._reply_markup}}
instance Data.Binary.Binary BotInlineMessageMediaContact'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _phone_number_1 <- Data.Binary.get;
                     _first_name_2 <- Data.Binary.get;
                     _last_name_3 <- Data.Binary.get;
                     _vcard_4 <- Data.Binary.get;
                     _reply_markup_5 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     GHC.Base.pure (BotInlineMessageMediaContact' _phone_number_1 _first_name_2 _last_name_3 _vcard_4 _reply_markup_5)};
           put to_be_encoded_6 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_6._reply_markup,
                                                              2)];
                                     Data.Binary.put to_be_encoded_6._phone_number;
                                     Data.Binary.put to_be_encoded_6._first_name;
                                     Data.Binary.put to_be_encoded_6._last_name;
                                     Data.Binary.put to_be_encoded_6._vcard;
                                     Data.Binary.put to_be_encoded_6._reply_markup}}
instance Data.Binary.Binary BotInlineMessageMediaGeo'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _geo_1 <- Data.Binary.get;
                     _heading_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _period_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _proximity_notification_radius_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     _reply_markup_5 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     GHC.Base.pure (BotInlineMessageMediaGeo' _geo_1 _heading_2 _period_3 _proximity_notification_radius_4 _reply_markup_5)};
           put to_be_encoded_6 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_6._reply_markup,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_6._proximity_notification_radius,
                                                              3),
                                                             (Data.Maybe.isJust to_be_encoded_6._period,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_6._heading,
                                                              0)];
                                     Data.Binary.put to_be_encoded_6._geo;
                                     Data.Binary.put to_be_encoded_6._heading;
                                     Data.Binary.put to_be_encoded_6._period;
                                     Data.Binary.put to_be_encoded_6._proximity_notification_radius;
                                     Data.Binary.put to_be_encoded_6._reply_markup}}
instance Data.Binary.Binary BotInlineMessageMediaInvoice'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _shipping_address_requested_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _test_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     _title_3 <- Data.Binary.get;
                     _description_4 <- Data.Binary.get;
                     _photo_5 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _currency_6 <- Data.Binary.get;
                     _total_amount_7 <- Data.Binary.get;
                     _reply_markup_8 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     GHC.Base.pure (BotInlineMessageMediaInvoice' _shipping_address_requested_1 _test_2 _title_3 _description_4 _photo_5 _currency_6 _total_amount_7 _reply_markup_8)};
           put to_be_encoded_9 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_9._reply_markup,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_9._photo,
                                                              0),
                                                             (Data.Maybe.isJust to_be_encoded_9._test,
                                                              3),
                                                             (Data.Maybe.isJust to_be_encoded_9._shipping_address_requested,
                                                              1)];
                                     Data.Binary.put to_be_encoded_9._shipping_address_requested;
                                     Data.Binary.put to_be_encoded_9._test;
                                     Data.Binary.put to_be_encoded_9._title;
                                     Data.Binary.put to_be_encoded_9._description;
                                     Data.Binary.put to_be_encoded_9._photo;
                                     Data.Binary.put to_be_encoded_9._currency;
                                     Data.Binary.put to_be_encoded_9._total_amount;
                                     Data.Binary.put to_be_encoded_9._reply_markup}}
instance Data.Binary.Binary BotInlineMessageMediaVenue'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _geo_1 <- Data.Binary.get;
                     _title_2 <- Data.Binary.get;
                     _address_3 <- Data.Binary.get;
                     _provider_4 <- Data.Binary.get;
                     _venue_id_5 <- Data.Binary.get;
                     _venue_type_6 <- Data.Binary.get;
                     _reply_markup_7 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     GHC.Base.pure (BotInlineMessageMediaVenue' _geo_1 _title_2 _address_3 _provider_4 _venue_id_5 _venue_type_6 _reply_markup_7)};
           put to_be_encoded_8 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_8._reply_markup,
                                                              2)];
                                     Data.Binary.put to_be_encoded_8._geo;
                                     Data.Binary.put to_be_encoded_8._title;
                                     Data.Binary.put to_be_encoded_8._address;
                                     Data.Binary.put to_be_encoded_8._provider;
                                     Data.Binary.put to_be_encoded_8._venue_id;
                                     Data.Binary.put to_be_encoded_8._venue_type;
                                     Data.Binary.put to_be_encoded_8._reply_markup}}
instance Data.Binary.Binary BotInlineMessageMediaWebPage'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _invert_media_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     _force_large_media_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 4);
                     _force_small_media_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 5);
                     _manual_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 7);
                     _safe_5 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 8);
                     _message_6 <- Data.Binary.get;
                     _entities_7 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _url_8 <- Data.Binary.get;
                     _reply_markup_9 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     GHC.Base.pure (BotInlineMessageMediaWebPage' _invert_media_1 _force_large_media_2 _force_small_media_3 _manual_4 _safe_5 _message_6 _entities_7 _url_8 _reply_markup_9)};
           put to_be_encoded_10 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_10._reply_markup,
                                                               2),
                                                              (Data.Maybe.isJust to_be_encoded_10._entities,
                                                               1),
                                                              (Data.Maybe.isJust to_be_encoded_10._safe,
                                                               8),
                                                              (Data.Maybe.isJust to_be_encoded_10._manual,
                                                               7),
                                                              (Data.Maybe.isJust to_be_encoded_10._force_small_media,
                                                               5),
                                                              (Data.Maybe.isJust to_be_encoded_10._force_large_media,
                                                               4),
                                                              (Data.Maybe.isJust to_be_encoded_10._invert_media,
                                                               3)];
                                      Data.Binary.put to_be_encoded_10._invert_media;
                                      Data.Binary.put to_be_encoded_10._force_large_media;
                                      Data.Binary.put to_be_encoded_10._force_small_media;
                                      Data.Binary.put to_be_encoded_10._manual;
                                      Data.Binary.put to_be_encoded_10._safe;
                                      Data.Binary.put to_be_encoded_10._message;
                                      Data.Binary.put to_be_encoded_10._entities;
                                      Data.Binary.put to_be_encoded_10._url;
                                      Data.Binary.put to_be_encoded_10._reply_markup}}
instance Data.Binary.Binary BotInlineMessageText'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _no_webpage_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _invert_media_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     _message_3 <- Data.Binary.get;
                     _entities_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _reply_markup_5 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     GHC.Base.pure (BotInlineMessageText' _no_webpage_1 _invert_media_2 _message_3 _entities_4 _reply_markup_5)};
           put to_be_encoded_6 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_6._reply_markup,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_6._entities,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_6._invert_media,
                                                              3),
                                                             (Data.Maybe.isJust to_be_encoded_6._no_webpage,
                                                              0)];
                                     Data.Binary.put to_be_encoded_6._no_webpage;
                                     Data.Binary.put to_be_encoded_6._invert_media;
                                     Data.Binary.put to_be_encoded_6._message;
                                     Data.Binary.put to_be_encoded_6._entities;
                                     Data.Binary.put to_be_encoded_6._reply_markup}}
data BotInlineMessage
    = BotInlineMessageMediaAuto !BotInlineMessageMediaAuto'
    | BotInlineMessageMediaContact !BotInlineMessageMediaContact'
    | BotInlineMessageMediaGeo !BotInlineMessageMediaGeo'
    | BotInlineMessageMediaInvoice !BotInlineMessageMediaInvoice'
    | BotInlineMessageMediaVenue !BotInlineMessageMediaVenue'
    | BotInlineMessageMediaWebPage !BotInlineMessageMediaWebPage'
    | BotInlineMessageText !BotInlineMessageText'
data BotInlineMessageMediaAuto'
    = BotInlineMessageMediaAuto' {_invert_media :: !(Maybe True'),
                                  _message :: !String',
                                  _entities :: !(Maybe (Vector MessageEntity)),
                                  _reply_markup :: !(Maybe ReplyMarkup)}
data BotInlineMessageMediaContact'
    = BotInlineMessageMediaContact' {_phone_number :: !String',
                                     _first_name :: !String',
                                     _last_name :: !String',
                                     _vcard :: !String',
                                     _reply_markup :: !(Maybe ReplyMarkup)}
data BotInlineMessageMediaGeo'
    = BotInlineMessageMediaGeo' {_geo :: !GeoPoint,
                                 _heading :: !(Maybe Int'),
                                 _period :: !(Maybe Int'),
                                 _proximity_notification_radius :: !(Maybe Int'),
                                 _reply_markup :: !(Maybe ReplyMarkup)}
data BotInlineMessageMediaInvoice'
    = BotInlineMessageMediaInvoice' {_shipping_address_requested :: !(Maybe True'),
                                     _test :: !(Maybe True'),
                                     _title :: !String',
                                     _description :: !String',
                                     _photo :: !(Maybe WebDocument),
                                     _currency :: !String',
                                     _total_amount :: !Long',
                                     _reply_markup :: !(Maybe ReplyMarkup)}
data BotInlineMessageMediaVenue'
    = BotInlineMessageMediaVenue' {_geo :: !GeoPoint,
                                   _title :: !String',
                                   _address :: !String',
                                   _provider :: !String',
                                   _venue_id :: !String',
                                   _venue_type :: !String',
                                   _reply_markup :: !(Maybe ReplyMarkup)}
data BotInlineMessageMediaWebPage'
    = BotInlineMessageMediaWebPage' {_invert_media :: !(Maybe True'),
                                     _force_large_media :: !(Maybe True'),
                                     _force_small_media :: !(Maybe True'),
                                     _manual :: !(Maybe True'),
                                     _safe :: !(Maybe True'),
                                     _message :: !String',
                                     _entities :: !(Maybe (Vector MessageEntity)),
                                     _url :: !String',
                                     _reply_markup :: !(Maybe ReplyMarkup)}
data BotInlineMessageText'
    = BotInlineMessageText' {_no_webpage :: !(Maybe True'),
                             _invert_media :: !(Maybe True'),
                             _message :: !String',
                             _entities :: !(Maybe (Vector MessageEntity)),
                             _reply_markup :: !(Maybe ReplyMarkup)}
instance Data.Binary.Binary BotInlineMessage
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1984755728 -> fmap BotInlineMessageMediaAuto Data.Binary.get;
                      416402882 -> fmap BotInlineMessageMediaContact Data.Binary.get;
                      85477117 -> fmap BotInlineMessageMediaGeo Data.Binary.get;
                      894081801 -> fmap BotInlineMessageMediaInvoice Data.Binary.get;
                      2324063644 -> fmap BotInlineMessageMediaVenue Data.Binary.get;
                      2157631910 -> fmap BotInlineMessageMediaWebPage Data.Binary.get;
                      2357159394 -> fmap BotInlineMessageText Data.Binary.get}};
           put (BotInlineMessageMediaAuto tmp_1) = do {Data.Binary.Put.putWord32le 1984755728;
                                                       Data.Binary.put tmp_1};
           put (BotInlineMessageMediaContact tmp_2) = do {Data.Binary.Put.putWord32le 416402882;
                                                          Data.Binary.put tmp_2};
           put (BotInlineMessageMediaGeo tmp_3) = do {Data.Binary.Put.putWord32le 85477117;
                                                      Data.Binary.put tmp_3};
           put (BotInlineMessageMediaInvoice tmp_4) = do {Data.Binary.Put.putWord32le 894081801;
                                                          Data.Binary.put tmp_4};
           put (BotInlineMessageMediaVenue tmp_5) = do {Data.Binary.Put.putWord32le 2324063644;
                                                        Data.Binary.put tmp_5};
           put (BotInlineMessageMediaWebPage tmp_6) = do {Data.Binary.Put.putWord32le 2157631910;
                                                          Data.Binary.put tmp_6};
           put (BotInlineMessageText tmp_7) = do {Data.Binary.Put.putWord32le 2357159394;
                                                  Data.Binary.put tmp_7}}
instance Data.Binary.Binary BotInlineMediaResult'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _id_1 <- Data.Binary.get;
                     _type_2 <- Data.Binary.get;
                     _photo_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _document_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _title_5 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _description_6 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     _send_message_7 <- Data.Binary.get;
                     GHC.Base.pure (BotInlineMediaResult' _id_1 _type_2 _photo_3 _document_4 _title_5 _description_6 _send_message_7)};
           put to_be_encoded_8 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_8._description,
                                                              3),
                                                             (Data.Maybe.isJust to_be_encoded_8._title,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_8._document,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_8._photo,
                                                              0)];
                                     Data.Binary.put to_be_encoded_8._id;
                                     Data.Binary.put to_be_encoded_8._type;
                                     Data.Binary.put to_be_encoded_8._photo;
                                     Data.Binary.put to_be_encoded_8._document;
                                     Data.Binary.put to_be_encoded_8._title;
                                     Data.Binary.put to_be_encoded_8._description;
                                     Data.Binary.put to_be_encoded_8._send_message}}
instance Data.Binary.Binary BotInlineResult'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _id_1 <- Data.Binary.get;
                     _type_2 <- Data.Binary.get;
                     _title_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _description_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _url_5 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     _thumb_6 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 4);
                     _content_7 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 5);
                     _send_message_8 <- Data.Binary.get;
                     GHC.Base.pure (BotInlineResult' _id_1 _type_2 _title_3 _description_4 _url_5 _thumb_6 _content_7 _send_message_8)};
           put to_be_encoded_9 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_9._content,
                                                              5),
                                                             (Data.Maybe.isJust to_be_encoded_9._thumb,
                                                              4),
                                                             (Data.Maybe.isJust to_be_encoded_9._url,
                                                              3),
                                                             (Data.Maybe.isJust to_be_encoded_9._description,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_9._title,
                                                              1)];
                                     Data.Binary.put to_be_encoded_9._id;
                                     Data.Binary.put to_be_encoded_9._type;
                                     Data.Binary.put to_be_encoded_9._title;
                                     Data.Binary.put to_be_encoded_9._description;
                                     Data.Binary.put to_be_encoded_9._url;
                                     Data.Binary.put to_be_encoded_9._thumb;
                                     Data.Binary.put to_be_encoded_9._content;
                                     Data.Binary.put to_be_encoded_9._send_message}}
data BotInlineResult
    = BotInlineMediaResult !BotInlineMediaResult'
    | BotInlineResult !BotInlineResult'
data BotInlineMediaResult'
    = BotInlineMediaResult' {_id :: !String',
                             _type :: !String',
                             _photo :: !(Maybe Photo),
                             _document :: !(Maybe Document),
                             _title :: !(Maybe String'),
                             _description :: !(Maybe String'),
                             _send_message :: !BotInlineMessage}
data BotInlineResult'
    = BotInlineResult' {_id :: !String',
                        _type :: !String',
                        _title :: !(Maybe String'),
                        _description :: !(Maybe String'),
                        _url :: !(Maybe String'),
                        _thumb :: !(Maybe WebDocument),
                        _content :: !(Maybe WebDocument),
                        _send_message :: !BotInlineMessage}
instance Data.Binary.Binary BotInlineResult
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {400266251 -> fmap BotInlineMediaResult Data.Binary.get;
                      295067450 -> fmap BotInlineResult Data.Binary.get}};
           put (BotInlineMediaResult tmp_1) = do {Data.Binary.Put.putWord32le 400266251;
                                                  Data.Binary.put tmp_1};
           put (BotInlineResult tmp_2) = do {Data.Binary.Put.putWord32le 295067450;
                                             Data.Binary.put tmp_2}}
instance Data.Binary.Binary BotMenuButton'
    where {get = do {_text_0 <- Data.Binary.get;
                     _url_1 <- Data.Binary.get;
                     GHC.Base.pure (BotMenuButton' _text_0 _url_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._text;
                                     Data.Binary.put to_be_encoded_2._url}}
instance Data.Binary.Binary BotMenuButtonCommands'
    where {get = GHC.Base.pure BotMenuButtonCommands';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary BotMenuButtonDefault'
    where {get = GHC.Base.pure BotMenuButtonDefault';
           put to_be_encoded_0 = do GHC.Base.pure ()}
data BotMenuButton
    = BotMenuButton !BotMenuButton'
    | BotMenuButtonCommands !BotMenuButtonCommands'
    | BotMenuButtonDefault !BotMenuButtonDefault'
data BotMenuButton'
    = BotMenuButton' {_text :: !String', _url :: !String'}
data BotMenuButtonCommands' = BotMenuButtonCommands' {}
data BotMenuButtonDefault' = BotMenuButtonDefault' {}
instance Data.Binary.Binary BotMenuButton
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3350559974 -> fmap BotMenuButton Data.Binary.get;
                      1113113093 -> fmap BotMenuButtonCommands Data.Binary.get;
                      1966318984 -> fmap BotMenuButtonDefault Data.Binary.get}};
           put (BotMenuButton tmp_1) = do {Data.Binary.Put.putWord32le 3350559974;
                                           Data.Binary.put tmp_1};
           put (BotMenuButtonCommands tmp_2) = do {Data.Binary.Put.putWord32le 1113113093;
                                                   Data.Binary.put tmp_2};
           put (BotMenuButtonDefault tmp_3) = do {Data.Binary.Put.putWord32le 1966318984;
                                                  Data.Binary.put tmp_3}}
instance Data.Binary.Binary CdnConfig'
    where {get = do {_public_keys_0 <- Data.Binary.get;
                     GHC.Base.pure (CdnConfig' _public_keys_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._public_keys}
data CdnConfig = CdnConfig !CdnConfig'
data CdnConfig'
    = CdnConfig' {_public_keys :: !(Vector CdnPublicKey)}
instance Data.Binary.Binary CdnConfig
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1462101002 -> fmap CdnConfig Data.Binary.get}};
           put (CdnConfig tmp_1) = do {Data.Binary.Put.putWord32le 1462101002;
                                       Data.Binary.put tmp_1}}
instance Data.Binary.Binary CdnPublicKey'
    where {get = do {_dc_id_0 <- Data.Binary.get;
                     _public_key_1 <- Data.Binary.get;
                     GHC.Base.pure (CdnPublicKey' _dc_id_0 _public_key_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._dc_id;
                                     Data.Binary.put to_be_encoded_2._public_key}}
data CdnPublicKey = CdnPublicKey !CdnPublicKey'
data CdnPublicKey'
    = CdnPublicKey' {_dc_id :: !Int', _public_key :: !String'}
instance Data.Binary.Binary CdnPublicKey
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3380800186 -> fmap CdnPublicKey Data.Binary.get}};
           put (CdnPublicKey tmp_1) = do {Data.Binary.Put.putWord32le 3380800186;
                                          Data.Binary.put tmp_1}}
instance Data.Binary.Binary ChannelAdminLogEvent'
    where {get = do {_id_0 <- Data.Binary.get;
                     _date_1 <- Data.Binary.get;
                     _user_id_2 <- Data.Binary.get;
                     _action_3 <- Data.Binary.get;
                     GHC.Base.pure (ChannelAdminLogEvent' _id_0 _date_1 _user_id_2 _action_3)};
           put to_be_encoded_4 = do {Data.Binary.put to_be_encoded_4._id;
                                     Data.Binary.put to_be_encoded_4._date;
                                     Data.Binary.put to_be_encoded_4._user_id;
                                     Data.Binary.put to_be_encoded_4._action}}
data ChannelAdminLogEvent
    = ChannelAdminLogEvent !ChannelAdminLogEvent'
data ChannelAdminLogEvent'
    = ChannelAdminLogEvent' {_id :: !Long',
                             _date :: !Int',
                             _user_id :: !Long',
                             _action :: !ChannelAdminLogEventAction}
instance Data.Binary.Binary ChannelAdminLogEvent
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {531458253 -> fmap ChannelAdminLogEvent Data.Binary.get}};
           put (ChannelAdminLogEvent tmp_1) = do {Data.Binary.Put.putWord32le 531458253;
                                                  Data.Binary.put tmp_1}}
instance Data.Binary.Binary ChannelAdminLogEventActionChangeAbout'
    where {get = do {_prev_value_0 <- Data.Binary.get;
                     _new_value_1 <- Data.Binary.get;
                     GHC.Base.pure (ChannelAdminLogEventActionChangeAbout' _prev_value_0 _new_value_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._prev_value;
                                     Data.Binary.put to_be_encoded_2._new_value}}
instance Data.Binary.Binary ChannelAdminLogEventActionChangeAvailableReactions'
    where {get = do {_prev_value_0 <- Data.Binary.get;
                     _new_value_1 <- Data.Binary.get;
                     GHC.Base.pure (ChannelAdminLogEventActionChangeAvailableReactions' _prev_value_0 _new_value_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._prev_value;
                                     Data.Binary.put to_be_encoded_2._new_value}}
instance Data.Binary.Binary ChannelAdminLogEventActionChangeEmojiStatus'
    where {get = do {_prev_value_0 <- Data.Binary.get;
                     _new_value_1 <- Data.Binary.get;
                     GHC.Base.pure (ChannelAdminLogEventActionChangeEmojiStatus' _prev_value_0 _new_value_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._prev_value;
                                     Data.Binary.put to_be_encoded_2._new_value}}
instance Data.Binary.Binary ChannelAdminLogEventActionChangeHistoryTTL'
    where {get = do {_prev_value_0 <- Data.Binary.get;
                     _new_value_1 <- Data.Binary.get;
                     GHC.Base.pure (ChannelAdminLogEventActionChangeHistoryTTL' _prev_value_0 _new_value_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._prev_value;
                                     Data.Binary.put to_be_encoded_2._new_value}}
instance Data.Binary.Binary ChannelAdminLogEventActionChangeLinkedChat'
    where {get = do {_prev_value_0 <- Data.Binary.get;
                     _new_value_1 <- Data.Binary.get;
                     GHC.Base.pure (ChannelAdminLogEventActionChangeLinkedChat' _prev_value_0 _new_value_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._prev_value;
                                     Data.Binary.put to_be_encoded_2._new_value}}
instance Data.Binary.Binary ChannelAdminLogEventActionChangeLocation'
    where {get = do {_prev_value_0 <- Data.Binary.get;
                     _new_value_1 <- Data.Binary.get;
                     GHC.Base.pure (ChannelAdminLogEventActionChangeLocation' _prev_value_0 _new_value_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._prev_value;
                                     Data.Binary.put to_be_encoded_2._new_value}}
instance Data.Binary.Binary ChannelAdminLogEventActionChangePeerColor'
    where {get = do {_prev_value_0 <- Data.Binary.get;
                     _new_value_1 <- Data.Binary.get;
                     GHC.Base.pure (ChannelAdminLogEventActionChangePeerColor' _prev_value_0 _new_value_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._prev_value;
                                     Data.Binary.put to_be_encoded_2._new_value}}
instance Data.Binary.Binary ChannelAdminLogEventActionChangePhoto'
    where {get = do {_prev_photo_0 <- Data.Binary.get;
                     _new_photo_1 <- Data.Binary.get;
                     GHC.Base.pure (ChannelAdminLogEventActionChangePhoto' _prev_photo_0 _new_photo_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._prev_photo;
                                     Data.Binary.put to_be_encoded_2._new_photo}}
instance Data.Binary.Binary ChannelAdminLogEventActionChangeProfilePeerColor'
    where {get = do {_prev_value_0 <- Data.Binary.get;
                     _new_value_1 <- Data.Binary.get;
                     GHC.Base.pure (ChannelAdminLogEventActionChangeProfilePeerColor' _prev_value_0 _new_value_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._prev_value;
                                     Data.Binary.put to_be_encoded_2._new_value}}
instance Data.Binary.Binary ChannelAdminLogEventActionChangeStickerSet'
    where {get = do {_prev_stickerset_0 <- Data.Binary.get;
                     _new_stickerset_1 <- Data.Binary.get;
                     GHC.Base.pure (ChannelAdminLogEventActionChangeStickerSet' _prev_stickerset_0 _new_stickerset_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._prev_stickerset;
                                     Data.Binary.put to_be_encoded_2._new_stickerset}}
instance Data.Binary.Binary ChannelAdminLogEventActionChangeTitle'
    where {get = do {_prev_value_0 <- Data.Binary.get;
                     _new_value_1 <- Data.Binary.get;
                     GHC.Base.pure (ChannelAdminLogEventActionChangeTitle' _prev_value_0 _new_value_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._prev_value;
                                     Data.Binary.put to_be_encoded_2._new_value}}
instance Data.Binary.Binary ChannelAdminLogEventActionChangeUsername'
    where {get = do {_prev_value_0 <- Data.Binary.get;
                     _new_value_1 <- Data.Binary.get;
                     GHC.Base.pure (ChannelAdminLogEventActionChangeUsername' _prev_value_0 _new_value_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._prev_value;
                                     Data.Binary.put to_be_encoded_2._new_value}}
instance Data.Binary.Binary ChannelAdminLogEventActionChangeUsernames'
    where {get = do {_prev_value_0 <- Data.Binary.get;
                     _new_value_1 <- Data.Binary.get;
                     GHC.Base.pure (ChannelAdminLogEventActionChangeUsernames' _prev_value_0 _new_value_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._prev_value;
                                     Data.Binary.put to_be_encoded_2._new_value}}
instance Data.Binary.Binary ChannelAdminLogEventActionChangeWallpaper'
    where {get = do {_prev_value_0 <- Data.Binary.get;
                     _new_value_1 <- Data.Binary.get;
                     GHC.Base.pure (ChannelAdminLogEventActionChangeWallpaper' _prev_value_0 _new_value_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._prev_value;
                                     Data.Binary.put to_be_encoded_2._new_value}}
instance Data.Binary.Binary ChannelAdminLogEventActionCreateTopic'
    where {get = do {_topic_0 <- Data.Binary.get;
                     GHC.Base.pure (ChannelAdminLogEventActionCreateTopic' _topic_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._topic}
instance Data.Binary.Binary ChannelAdminLogEventActionDefaultBannedRights'
    where {get = do {_prev_banned_rights_0 <- Data.Binary.get;
                     _new_banned_rights_1 <- Data.Binary.get;
                     GHC.Base.pure (ChannelAdminLogEventActionDefaultBannedRights' _prev_banned_rights_0 _new_banned_rights_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._prev_banned_rights;
                                     Data.Binary.put to_be_encoded_2._new_banned_rights}}
instance Data.Binary.Binary ChannelAdminLogEventActionDeleteMessage'
    where {get = do {_message_0 <- Data.Binary.get;
                     GHC.Base.pure (ChannelAdminLogEventActionDeleteMessage' _message_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._message}
instance Data.Binary.Binary ChannelAdminLogEventActionDeleteTopic'
    where {get = do {_topic_0 <- Data.Binary.get;
                     GHC.Base.pure (ChannelAdminLogEventActionDeleteTopic' _topic_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._topic}
instance Data.Binary.Binary ChannelAdminLogEventActionDiscardGroupCall'
    where {get = do {_call_0 <- Data.Binary.get;
                     GHC.Base.pure (ChannelAdminLogEventActionDiscardGroupCall' _call_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._call}
instance Data.Binary.Binary ChannelAdminLogEventActionEditMessage'
    where {get = do {_prev_message_0 <- Data.Binary.get;
                     _new_message_1 <- Data.Binary.get;
                     GHC.Base.pure (ChannelAdminLogEventActionEditMessage' _prev_message_0 _new_message_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._prev_message;
                                     Data.Binary.put to_be_encoded_2._new_message}}
instance Data.Binary.Binary ChannelAdminLogEventActionEditTopic'
    where {get = do {_prev_topic_0 <- Data.Binary.get;
                     _new_topic_1 <- Data.Binary.get;
                     GHC.Base.pure (ChannelAdminLogEventActionEditTopic' _prev_topic_0 _new_topic_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._prev_topic;
                                     Data.Binary.put to_be_encoded_2._new_topic}}
instance Data.Binary.Binary ChannelAdminLogEventActionExportedInviteDelete'
    where {get = do {_invite_0 <- Data.Binary.get;
                     GHC.Base.pure (ChannelAdminLogEventActionExportedInviteDelete' _invite_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._invite}
instance Data.Binary.Binary ChannelAdminLogEventActionExportedInviteEdit'
    where {get = do {_prev_invite_0 <- Data.Binary.get;
                     _new_invite_1 <- Data.Binary.get;
                     GHC.Base.pure (ChannelAdminLogEventActionExportedInviteEdit' _prev_invite_0 _new_invite_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._prev_invite;
                                     Data.Binary.put to_be_encoded_2._new_invite}}
instance Data.Binary.Binary ChannelAdminLogEventActionExportedInviteRevoke'
    where {get = do {_invite_0 <- Data.Binary.get;
                     GHC.Base.pure (ChannelAdminLogEventActionExportedInviteRevoke' _invite_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._invite}
instance Data.Binary.Binary ChannelAdminLogEventActionParticipantInvite'
    where {get = do {_participant_0 <- Data.Binary.get;
                     GHC.Base.pure (ChannelAdminLogEventActionParticipantInvite' _participant_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._participant}
instance Data.Binary.Binary ChannelAdminLogEventActionParticipantJoin'
    where {get = GHC.Base.pure ChannelAdminLogEventActionParticipantJoin';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary ChannelAdminLogEventActionParticipantJoinByInvite'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _via_chatlist_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _invite_2 <- Data.Binary.get;
                     GHC.Base.pure (ChannelAdminLogEventActionParticipantJoinByInvite' _via_chatlist_1 _invite_2)};
           put to_be_encoded_3 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_3._via_chatlist,
                                                              0)];
                                     Data.Binary.put to_be_encoded_3._via_chatlist;
                                     Data.Binary.put to_be_encoded_3._invite}}
instance Data.Binary.Binary ChannelAdminLogEventActionParticipantJoinByRequest'
    where {get = do {_invite_0 <- Data.Binary.get;
                     _approved_by_1 <- Data.Binary.get;
                     GHC.Base.pure (ChannelAdminLogEventActionParticipantJoinByRequest' _invite_0 _approved_by_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._invite;
                                     Data.Binary.put to_be_encoded_2._approved_by}}
instance Data.Binary.Binary ChannelAdminLogEventActionParticipantLeave'
    where {get = GHC.Base.pure ChannelAdminLogEventActionParticipantLeave';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary ChannelAdminLogEventActionParticipantMute'
    where {get = do {_participant_0 <- Data.Binary.get;
                     GHC.Base.pure (ChannelAdminLogEventActionParticipantMute' _participant_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._participant}
instance Data.Binary.Binary ChannelAdminLogEventActionParticipantToggleAdmin'
    where {get = do {_prev_participant_0 <- Data.Binary.get;
                     _new_participant_1 <- Data.Binary.get;
                     GHC.Base.pure (ChannelAdminLogEventActionParticipantToggleAdmin' _prev_participant_0 _new_participant_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._prev_participant;
                                     Data.Binary.put to_be_encoded_2._new_participant}}
instance Data.Binary.Binary ChannelAdminLogEventActionParticipantToggleBan'
    where {get = do {_prev_participant_0 <- Data.Binary.get;
                     _new_participant_1 <- Data.Binary.get;
                     GHC.Base.pure (ChannelAdminLogEventActionParticipantToggleBan' _prev_participant_0 _new_participant_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._prev_participant;
                                     Data.Binary.put to_be_encoded_2._new_participant}}
instance Data.Binary.Binary ChannelAdminLogEventActionParticipantUnmute'
    where {get = do {_participant_0 <- Data.Binary.get;
                     GHC.Base.pure (ChannelAdminLogEventActionParticipantUnmute' _participant_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._participant}
instance Data.Binary.Binary ChannelAdminLogEventActionParticipantVolume'
    where {get = do {_participant_0 <- Data.Binary.get;
                     GHC.Base.pure (ChannelAdminLogEventActionParticipantVolume' _participant_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._participant}
instance Data.Binary.Binary ChannelAdminLogEventActionPinTopic'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _prev_topic_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _new_topic_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     GHC.Base.pure (ChannelAdminLogEventActionPinTopic' _prev_topic_1 _new_topic_2)};
           put to_be_encoded_3 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_3._new_topic,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_3._prev_topic,
                                                              0)];
                                     Data.Binary.put to_be_encoded_3._prev_topic;
                                     Data.Binary.put to_be_encoded_3._new_topic}}
instance Data.Binary.Binary ChannelAdminLogEventActionSendMessage'
    where {get = do {_message_0 <- Data.Binary.get;
                     GHC.Base.pure (ChannelAdminLogEventActionSendMessage' _message_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._message}
instance Data.Binary.Binary ChannelAdminLogEventActionStartGroupCall'
    where {get = do {_call_0 <- Data.Binary.get;
                     GHC.Base.pure (ChannelAdminLogEventActionStartGroupCall' _call_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._call}
instance Data.Binary.Binary ChannelAdminLogEventActionStopPoll'
    where {get = do {_message_0 <- Data.Binary.get;
                     GHC.Base.pure (ChannelAdminLogEventActionStopPoll' _message_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._message}
instance Data.Binary.Binary ChannelAdminLogEventActionToggleAntiSpam'
    where {get = do {_new_value_0 <- Data.Binary.get;
                     GHC.Base.pure (ChannelAdminLogEventActionToggleAntiSpam' _new_value_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._new_value}
instance Data.Binary.Binary ChannelAdminLogEventActionToggleForum'
    where {get = do {_new_value_0 <- Data.Binary.get;
                     GHC.Base.pure (ChannelAdminLogEventActionToggleForum' _new_value_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._new_value}
instance Data.Binary.Binary ChannelAdminLogEventActionToggleGroupCallSetting'
    where {get = do {_join_muted_0 <- Data.Binary.get;
                     GHC.Base.pure (ChannelAdminLogEventActionToggleGroupCallSetting' _join_muted_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._join_muted}
instance Data.Binary.Binary ChannelAdminLogEventActionToggleInvites'
    where {get = do {_new_value_0 <- Data.Binary.get;
                     GHC.Base.pure (ChannelAdminLogEventActionToggleInvites' _new_value_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._new_value}
instance Data.Binary.Binary ChannelAdminLogEventActionToggleNoForwards'
    where {get = do {_new_value_0 <- Data.Binary.get;
                     GHC.Base.pure (ChannelAdminLogEventActionToggleNoForwards' _new_value_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._new_value}
instance Data.Binary.Binary ChannelAdminLogEventActionTogglePreHistoryHidden'
    where {get = do {_new_value_0 <- Data.Binary.get;
                     GHC.Base.pure (ChannelAdminLogEventActionTogglePreHistoryHidden' _new_value_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._new_value}
instance Data.Binary.Binary ChannelAdminLogEventActionToggleSignatures'
    where {get = do {_new_value_0 <- Data.Binary.get;
                     GHC.Base.pure (ChannelAdminLogEventActionToggleSignatures' _new_value_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._new_value}
instance Data.Binary.Binary ChannelAdminLogEventActionToggleSlowMode'
    where {get = do {_prev_value_0 <- Data.Binary.get;
                     _new_value_1 <- Data.Binary.get;
                     GHC.Base.pure (ChannelAdminLogEventActionToggleSlowMode' _prev_value_0 _new_value_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._prev_value;
                                     Data.Binary.put to_be_encoded_2._new_value}}
instance Data.Binary.Binary ChannelAdminLogEventActionUpdatePinned'
    where {get = do {_message_0 <- Data.Binary.get;
                     GHC.Base.pure (ChannelAdminLogEventActionUpdatePinned' _message_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._message}
data ChannelAdminLogEventAction
    = ChannelAdminLogEventActionChangeAbout !ChannelAdminLogEventActionChangeAbout'
    | ChannelAdminLogEventActionChangeAvailableReactions !ChannelAdminLogEventActionChangeAvailableReactions'
    | ChannelAdminLogEventActionChangeEmojiStatus !ChannelAdminLogEventActionChangeEmojiStatus'
    | ChannelAdminLogEventActionChangeHistoryTTL !ChannelAdminLogEventActionChangeHistoryTTL'
    | ChannelAdminLogEventActionChangeLinkedChat !ChannelAdminLogEventActionChangeLinkedChat'
    | ChannelAdminLogEventActionChangeLocation !ChannelAdminLogEventActionChangeLocation'
    | ChannelAdminLogEventActionChangePeerColor !ChannelAdminLogEventActionChangePeerColor'
    | ChannelAdminLogEventActionChangePhoto !ChannelAdminLogEventActionChangePhoto'
    | ChannelAdminLogEventActionChangeProfilePeerColor !ChannelAdminLogEventActionChangeProfilePeerColor'
    | ChannelAdminLogEventActionChangeStickerSet !ChannelAdminLogEventActionChangeStickerSet'
    | ChannelAdminLogEventActionChangeTitle !ChannelAdminLogEventActionChangeTitle'
    | ChannelAdminLogEventActionChangeUsername !ChannelAdminLogEventActionChangeUsername'
    | ChannelAdminLogEventActionChangeUsernames !ChannelAdminLogEventActionChangeUsernames'
    | ChannelAdminLogEventActionChangeWallpaper !ChannelAdminLogEventActionChangeWallpaper'
    | ChannelAdminLogEventActionCreateTopic !ChannelAdminLogEventActionCreateTopic'
    | ChannelAdminLogEventActionDefaultBannedRights !ChannelAdminLogEventActionDefaultBannedRights'
    | ChannelAdminLogEventActionDeleteMessage !ChannelAdminLogEventActionDeleteMessage'
    | ChannelAdminLogEventActionDeleteTopic !ChannelAdminLogEventActionDeleteTopic'
    | ChannelAdminLogEventActionDiscardGroupCall !ChannelAdminLogEventActionDiscardGroupCall'
    | ChannelAdminLogEventActionEditMessage !ChannelAdminLogEventActionEditMessage'
    | ChannelAdminLogEventActionEditTopic !ChannelAdminLogEventActionEditTopic'
    | ChannelAdminLogEventActionExportedInviteDelete !ChannelAdminLogEventActionExportedInviteDelete'
    | ChannelAdminLogEventActionExportedInviteEdit !ChannelAdminLogEventActionExportedInviteEdit'
    | ChannelAdminLogEventActionExportedInviteRevoke !ChannelAdminLogEventActionExportedInviteRevoke'
    | ChannelAdminLogEventActionParticipantInvite !ChannelAdminLogEventActionParticipantInvite'
    | ChannelAdminLogEventActionParticipantJoin !ChannelAdminLogEventActionParticipantJoin'
    | ChannelAdminLogEventActionParticipantJoinByInvite !ChannelAdminLogEventActionParticipantJoinByInvite'
    | ChannelAdminLogEventActionParticipantJoinByRequest !ChannelAdminLogEventActionParticipantJoinByRequest'
    | ChannelAdminLogEventActionParticipantLeave !ChannelAdminLogEventActionParticipantLeave'
    | ChannelAdminLogEventActionParticipantMute !ChannelAdminLogEventActionParticipantMute'
    | ChannelAdminLogEventActionParticipantToggleAdmin !ChannelAdminLogEventActionParticipantToggleAdmin'
    | ChannelAdminLogEventActionParticipantToggleBan !ChannelAdminLogEventActionParticipantToggleBan'
    | ChannelAdminLogEventActionParticipantUnmute !ChannelAdminLogEventActionParticipantUnmute'
    | ChannelAdminLogEventActionParticipantVolume !ChannelAdminLogEventActionParticipantVolume'
    | ChannelAdminLogEventActionPinTopic !ChannelAdminLogEventActionPinTopic'
    | ChannelAdminLogEventActionSendMessage !ChannelAdminLogEventActionSendMessage'
    | ChannelAdminLogEventActionStartGroupCall !ChannelAdminLogEventActionStartGroupCall'
    | ChannelAdminLogEventActionStopPoll !ChannelAdminLogEventActionStopPoll'
    | ChannelAdminLogEventActionToggleAntiSpam !ChannelAdminLogEventActionToggleAntiSpam'
    | ChannelAdminLogEventActionToggleForum !ChannelAdminLogEventActionToggleForum'
    | ChannelAdminLogEventActionToggleGroupCallSetting !ChannelAdminLogEventActionToggleGroupCallSetting'
    | ChannelAdminLogEventActionToggleInvites !ChannelAdminLogEventActionToggleInvites'
    | ChannelAdminLogEventActionToggleNoForwards !ChannelAdminLogEventActionToggleNoForwards'
    | ChannelAdminLogEventActionTogglePreHistoryHidden !ChannelAdminLogEventActionTogglePreHistoryHidden'
    | ChannelAdminLogEventActionToggleSignatures !ChannelAdminLogEventActionToggleSignatures'
    | ChannelAdminLogEventActionToggleSlowMode !ChannelAdminLogEventActionToggleSlowMode'
    | ChannelAdminLogEventActionUpdatePinned !ChannelAdminLogEventActionUpdatePinned'
data ChannelAdminLogEventActionChangeAbout'
    = ChannelAdminLogEventActionChangeAbout' {_prev_value :: !String',
                                              _new_value :: !String'}
data ChannelAdminLogEventActionChangeAvailableReactions'
    = ChannelAdminLogEventActionChangeAvailableReactions' {_prev_value :: !ChatReactions,
                                                           _new_value :: !ChatReactions}
data ChannelAdminLogEventActionChangeEmojiStatus'
    = ChannelAdminLogEventActionChangeEmojiStatus' {_prev_value :: !EmojiStatus,
                                                    _new_value :: !EmojiStatus}
data ChannelAdminLogEventActionChangeHistoryTTL'
    = ChannelAdminLogEventActionChangeHistoryTTL' {_prev_value :: !Int',
                                                   _new_value :: !Int'}
data ChannelAdminLogEventActionChangeLinkedChat'
    = ChannelAdminLogEventActionChangeLinkedChat' {_prev_value :: !Long',
                                                   _new_value :: !Long'}
data ChannelAdminLogEventActionChangeLocation'
    = ChannelAdminLogEventActionChangeLocation' {_prev_value :: !ChannelLocation,
                                                 _new_value :: !ChannelLocation}
data ChannelAdminLogEventActionChangePeerColor'
    = ChannelAdminLogEventActionChangePeerColor' {_prev_value :: !PeerColor,
                                                  _new_value :: !PeerColor}
data ChannelAdminLogEventActionChangePhoto'
    = ChannelAdminLogEventActionChangePhoto' {_prev_photo :: !Photo,
                                              _new_photo :: !Photo}
data ChannelAdminLogEventActionChangeProfilePeerColor'
    = ChannelAdminLogEventActionChangeProfilePeerColor' {_prev_value :: !PeerColor,
                                                         _new_value :: !PeerColor}
data ChannelAdminLogEventActionChangeStickerSet'
    = ChannelAdminLogEventActionChangeStickerSet' {_prev_stickerset :: !InputStickerSet,
                                                   _new_stickerset :: !InputStickerSet}
data ChannelAdminLogEventActionChangeTitle'
    = ChannelAdminLogEventActionChangeTitle' {_prev_value :: !String',
                                              _new_value :: !String'}
data ChannelAdminLogEventActionChangeUsername'
    = ChannelAdminLogEventActionChangeUsername' {_prev_value :: !String',
                                                 _new_value :: !String'}
data ChannelAdminLogEventActionChangeUsernames'
    = ChannelAdminLogEventActionChangeUsernames' {_prev_value :: !(Vector String'),
                                                  _new_value :: !(Vector String')}
data ChannelAdminLogEventActionChangeWallpaper'
    = ChannelAdminLogEventActionChangeWallpaper' {_prev_value :: !WallPaper,
                                                  _new_value :: !WallPaper}
data ChannelAdminLogEventActionCreateTopic'
    = ChannelAdminLogEventActionCreateTopic' {_topic :: !ForumTopic}
data ChannelAdminLogEventActionDefaultBannedRights'
    = ChannelAdminLogEventActionDefaultBannedRights' {_prev_banned_rights :: !ChatBannedRights,
                                                      _new_banned_rights :: !ChatBannedRights}
data ChannelAdminLogEventActionDeleteMessage'
    = ChannelAdminLogEventActionDeleteMessage' {_message :: !Message}
data ChannelAdminLogEventActionDeleteTopic'
    = ChannelAdminLogEventActionDeleteTopic' {_topic :: !ForumTopic}
data ChannelAdminLogEventActionDiscardGroupCall'
    = ChannelAdminLogEventActionDiscardGroupCall' {_call :: !InputGroupCall}
data ChannelAdminLogEventActionEditMessage'
    = ChannelAdminLogEventActionEditMessage' {_prev_message :: !Message,
                                              _new_message :: !Message}
data ChannelAdminLogEventActionEditTopic'
    = ChannelAdminLogEventActionEditTopic' {_prev_topic :: !ForumTopic,
                                            _new_topic :: !ForumTopic}
data ChannelAdminLogEventActionExportedInviteDelete'
    = ChannelAdminLogEventActionExportedInviteDelete' {_invite :: !ExportedChatInvite}
data ChannelAdminLogEventActionExportedInviteEdit'
    = ChannelAdminLogEventActionExportedInviteEdit' {_prev_invite :: !ExportedChatInvite,
                                                     _new_invite :: !ExportedChatInvite}
data ChannelAdminLogEventActionExportedInviteRevoke'
    = ChannelAdminLogEventActionExportedInviteRevoke' {_invite :: !ExportedChatInvite}
data ChannelAdminLogEventActionParticipantInvite'
    = ChannelAdminLogEventActionParticipantInvite' {_participant :: !ChannelParticipant}
data ChannelAdminLogEventActionParticipantJoin'
    = ChannelAdminLogEventActionParticipantJoin' {}
data ChannelAdminLogEventActionParticipantJoinByInvite'
    = ChannelAdminLogEventActionParticipantJoinByInvite' {_via_chatlist :: !(Maybe True'),
                                                          _invite :: !ExportedChatInvite}
data ChannelAdminLogEventActionParticipantJoinByRequest'
    = ChannelAdminLogEventActionParticipantJoinByRequest' {_invite :: !ExportedChatInvite,
                                                           _approved_by :: !Long'}
data ChannelAdminLogEventActionParticipantLeave'
    = ChannelAdminLogEventActionParticipantLeave' {}
data ChannelAdminLogEventActionParticipantMute'
    = ChannelAdminLogEventActionParticipantMute' {_participant :: !GroupCallParticipant}
data ChannelAdminLogEventActionParticipantToggleAdmin'
    = ChannelAdminLogEventActionParticipantToggleAdmin' {_prev_participant :: !ChannelParticipant,
                                                         _new_participant :: !ChannelParticipant}
data ChannelAdminLogEventActionParticipantToggleBan'
    = ChannelAdminLogEventActionParticipantToggleBan' {_prev_participant :: !ChannelParticipant,
                                                       _new_participant :: !ChannelParticipant}
data ChannelAdminLogEventActionParticipantUnmute'
    = ChannelAdminLogEventActionParticipantUnmute' {_participant :: !GroupCallParticipant}
data ChannelAdminLogEventActionParticipantVolume'
    = ChannelAdminLogEventActionParticipantVolume' {_participant :: !GroupCallParticipant}
data ChannelAdminLogEventActionPinTopic'
    = ChannelAdminLogEventActionPinTopic' {_prev_topic :: !(Maybe ForumTopic),
                                           _new_topic :: !(Maybe ForumTopic)}
data ChannelAdminLogEventActionSendMessage'
    = ChannelAdminLogEventActionSendMessage' {_message :: !Message}
data ChannelAdminLogEventActionStartGroupCall'
    = ChannelAdminLogEventActionStartGroupCall' {_call :: !InputGroupCall}
data ChannelAdminLogEventActionStopPoll'
    = ChannelAdminLogEventActionStopPoll' {_message :: !Message}
data ChannelAdminLogEventActionToggleAntiSpam'
    = ChannelAdminLogEventActionToggleAntiSpam' {_new_value :: !Bool}
data ChannelAdminLogEventActionToggleForum'
    = ChannelAdminLogEventActionToggleForum' {_new_value :: !Bool}
data ChannelAdminLogEventActionToggleGroupCallSetting'
    = ChannelAdminLogEventActionToggleGroupCallSetting' {_join_muted :: !Bool}
data ChannelAdminLogEventActionToggleInvites'
    = ChannelAdminLogEventActionToggleInvites' {_new_value :: !Bool}
data ChannelAdminLogEventActionToggleNoForwards'
    = ChannelAdminLogEventActionToggleNoForwards' {_new_value :: !Bool}
data ChannelAdminLogEventActionTogglePreHistoryHidden'
    = ChannelAdminLogEventActionTogglePreHistoryHidden' {_new_value :: !Bool}
data ChannelAdminLogEventActionToggleSignatures'
    = ChannelAdminLogEventActionToggleSignatures' {_new_value :: !Bool}
data ChannelAdminLogEventActionToggleSlowMode'
    = ChannelAdminLogEventActionToggleSlowMode' {_prev_value :: !Int',
                                                 _new_value :: !Int'}
data ChannelAdminLogEventActionUpdatePinned'
    = ChannelAdminLogEventActionUpdatePinned' {_message :: !Message}
instance Data.Binary.Binary ChannelAdminLogEventAction
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1427671598 -> fmap ChannelAdminLogEventActionChangeAbout Data.Binary.get;
                      3192786680 -> fmap ChannelAdminLogEventActionChangeAvailableReactions Data.Binary.get;
                      1051328177 -> fmap ChannelAdminLogEventActionChangeEmojiStatus Data.Binary.get;
                      1855199800 -> fmap ChannelAdminLogEventActionChangeHistoryTTL Data.Binary.get;
                      84703944 -> fmap ChannelAdminLogEventActionChangeLinkedChat Data.Binary.get;
                      241923758 -> fmap ChannelAdminLogEventActionChangeLocation Data.Binary.get;
                      1469507456 -> fmap ChannelAdminLogEventActionChangePeerColor Data.Binary.get;
                      1129042607 -> fmap ChannelAdminLogEventActionChangePhoto Data.Binary.get;
                      1581742885 -> fmap ChannelAdminLogEventActionChangeProfilePeerColor Data.Binary.get;
                      2982398631 -> fmap ChannelAdminLogEventActionChangeStickerSet Data.Binary.get;
                      3873421349 -> fmap ChannelAdminLogEventActionChangeTitle Data.Binary.get;
                      1783299128 -> fmap ChannelAdminLogEventActionChangeUsername Data.Binary.get;
                      4031755177 -> fmap ChannelAdminLogEventActionChangeUsernames Data.Binary.get;
                      834362706 -> fmap ChannelAdminLogEventActionChangeWallpaper Data.Binary.get;
                      1483767080 -> fmap ChannelAdminLogEventActionCreateTopic Data.Binary.get;
                      771095562 -> fmap ChannelAdminLogEventActionDefaultBannedRights Data.Binary.get;
                      1121994683 -> fmap ChannelAdminLogEventActionDeleteMessage Data.Binary.get;
                      2920712457 -> fmap ChannelAdminLogEventActionDeleteTopic Data.Binary.get;
                      3684667712 -> fmap ChannelAdminLogEventActionDiscardGroupCall Data.Binary.get;
                      1889215493 -> fmap ChannelAdminLogEventActionEditMessage Data.Binary.get;
                      4033864200 -> fmap ChannelAdminLogEventActionEditTopic Data.Binary.get;
                      1515256996 -> fmap ChannelAdminLogEventActionExportedInviteDelete Data.Binary.get;
                      3910056793 -> fmap ChannelAdminLogEventActionExportedInviteEdit Data.Binary.get;
                      1091179342 -> fmap ChannelAdminLogEventActionExportedInviteRevoke Data.Binary.get;
                      3810276568 -> fmap ChannelAdminLogEventActionParticipantInvite Data.Binary.get;
                      405815507 -> fmap ChannelAdminLogEventActionParticipantJoin Data.Binary.get;
                      4271882584 -> fmap ChannelAdminLogEventActionParticipantJoinByInvite Data.Binary.get;
                      2947945546 -> fmap ChannelAdminLogEventActionParticipantJoinByRequest Data.Binary.get;
                      4170676210 -> fmap ChannelAdminLogEventActionParticipantLeave Data.Binary.get;
                      4179895506 -> fmap ChannelAdminLogEventActionParticipantMute Data.Binary.get;
                      3580323600 -> fmap ChannelAdminLogEventActionParticipantToggleAdmin Data.Binary.get;
                      3872931198 -> fmap ChannelAdminLogEventActionParticipantToggleBan Data.Binary.get;
                      3863226816 -> fmap ChannelAdminLogEventActionParticipantUnmute Data.Binary.get;
                      1048537159 -> fmap ChannelAdminLogEventActionParticipantVolume Data.Binary.get;
                      1569535291 -> fmap ChannelAdminLogEventActionPinTopic Data.Binary.get;
                      663693416 -> fmap ChannelAdminLogEventActionSendMessage Data.Binary.get;
                      589338437 -> fmap ChannelAdminLogEventActionStartGroupCall Data.Binary.get;
                      2399639107 -> fmap ChannelAdminLogEventActionStopPoll Data.Binary.get;
                      1693675004 -> fmap ChannelAdminLogEventActionToggleAntiSpam Data.Binary.get;
                      46949251 -> fmap ChannelAdminLogEventActionToggleForum Data.Binary.get;
                      1456906823 -> fmap ChannelAdminLogEventActionToggleGroupCallSetting Data.Binary.get;
                      460916654 -> fmap ChannelAdminLogEventActionToggleInvites Data.Binary.get;
                      3408578406 -> fmap ChannelAdminLogEventActionToggleNoForwards Data.Binary.get;
                      1599903217 -> fmap ChannelAdminLogEventActionTogglePreHistoryHidden Data.Binary.get;
                      648939889 -> fmap ChannelAdminLogEventActionToggleSignatures Data.Binary.get;
                      1401984889 -> fmap ChannelAdminLogEventActionToggleSlowMode Data.Binary.get;
                      3924306968 -> fmap ChannelAdminLogEventActionUpdatePinned Data.Binary.get}};
           put (ChannelAdminLogEventActionChangeAbout tmp_1) = do {Data.Binary.Put.putWord32le 1427671598;
                                                                   Data.Binary.put tmp_1};
           put (ChannelAdminLogEventActionChangeAvailableReactions tmp_2) = do {Data.Binary.Put.putWord32le 3192786680;
                                                                                Data.Binary.put tmp_2};
           put (ChannelAdminLogEventActionChangeEmojiStatus tmp_3) = do {Data.Binary.Put.putWord32le 1051328177;
                                                                         Data.Binary.put tmp_3};
           put (ChannelAdminLogEventActionChangeHistoryTTL tmp_4) = do {Data.Binary.Put.putWord32le 1855199800;
                                                                        Data.Binary.put tmp_4};
           put (ChannelAdminLogEventActionChangeLinkedChat tmp_5) = do {Data.Binary.Put.putWord32le 84703944;
                                                                        Data.Binary.put tmp_5};
           put (ChannelAdminLogEventActionChangeLocation tmp_6) = do {Data.Binary.Put.putWord32le 241923758;
                                                                      Data.Binary.put tmp_6};
           put (ChannelAdminLogEventActionChangePeerColor tmp_7) = do {Data.Binary.Put.putWord32le 1469507456;
                                                                       Data.Binary.put tmp_7};
           put (ChannelAdminLogEventActionChangePhoto tmp_8) = do {Data.Binary.Put.putWord32le 1129042607;
                                                                   Data.Binary.put tmp_8};
           put (ChannelAdminLogEventActionChangeProfilePeerColor tmp_9) = do {Data.Binary.Put.putWord32le 1581742885;
                                                                              Data.Binary.put tmp_9};
           put (ChannelAdminLogEventActionChangeStickerSet tmp_10) = do {Data.Binary.Put.putWord32le 2982398631;
                                                                         Data.Binary.put tmp_10};
           put (ChannelAdminLogEventActionChangeTitle tmp_11) = do {Data.Binary.Put.putWord32le 3873421349;
                                                                    Data.Binary.put tmp_11};
           put (ChannelAdminLogEventActionChangeUsername tmp_12) = do {Data.Binary.Put.putWord32le 1783299128;
                                                                       Data.Binary.put tmp_12};
           put (ChannelAdminLogEventActionChangeUsernames tmp_13) = do {Data.Binary.Put.putWord32le 4031755177;
                                                                        Data.Binary.put tmp_13};
           put (ChannelAdminLogEventActionChangeWallpaper tmp_14) = do {Data.Binary.Put.putWord32le 834362706;
                                                                        Data.Binary.put tmp_14};
           put (ChannelAdminLogEventActionCreateTopic tmp_15) = do {Data.Binary.Put.putWord32le 1483767080;
                                                                    Data.Binary.put tmp_15};
           put (ChannelAdminLogEventActionDefaultBannedRights tmp_16) = do {Data.Binary.Put.putWord32le 771095562;
                                                                            Data.Binary.put tmp_16};
           put (ChannelAdminLogEventActionDeleteMessage tmp_17) = do {Data.Binary.Put.putWord32le 1121994683;
                                                                      Data.Binary.put tmp_17};
           put (ChannelAdminLogEventActionDeleteTopic tmp_18) = do {Data.Binary.Put.putWord32le 2920712457;
                                                                    Data.Binary.put tmp_18};
           put (ChannelAdminLogEventActionDiscardGroupCall tmp_19) = do {Data.Binary.Put.putWord32le 3684667712;
                                                                         Data.Binary.put tmp_19};
           put (ChannelAdminLogEventActionEditMessage tmp_20) = do {Data.Binary.Put.putWord32le 1889215493;
                                                                    Data.Binary.put tmp_20};
           put (ChannelAdminLogEventActionEditTopic tmp_21) = do {Data.Binary.Put.putWord32le 4033864200;
                                                                  Data.Binary.put tmp_21};
           put (ChannelAdminLogEventActionExportedInviteDelete tmp_22) = do {Data.Binary.Put.putWord32le 1515256996;
                                                                             Data.Binary.put tmp_22};
           put (ChannelAdminLogEventActionExportedInviteEdit tmp_23) = do {Data.Binary.Put.putWord32le 3910056793;
                                                                           Data.Binary.put tmp_23};
           put (ChannelAdminLogEventActionExportedInviteRevoke tmp_24) = do {Data.Binary.Put.putWord32le 1091179342;
                                                                             Data.Binary.put tmp_24};
           put (ChannelAdminLogEventActionParticipantInvite tmp_25) = do {Data.Binary.Put.putWord32le 3810276568;
                                                                          Data.Binary.put tmp_25};
           put (ChannelAdminLogEventActionParticipantJoin tmp_26) = do {Data.Binary.Put.putWord32le 405815507;
                                                                        Data.Binary.put tmp_26};
           put (ChannelAdminLogEventActionParticipantJoinByInvite tmp_27) = do {Data.Binary.Put.putWord32le 4271882584;
                                                                                Data.Binary.put tmp_27};
           put (ChannelAdminLogEventActionParticipantJoinByRequest tmp_28) = do {Data.Binary.Put.putWord32le 2947945546;
                                                                                 Data.Binary.put tmp_28};
           put (ChannelAdminLogEventActionParticipantLeave tmp_29) = do {Data.Binary.Put.putWord32le 4170676210;
                                                                         Data.Binary.put tmp_29};
           put (ChannelAdminLogEventActionParticipantMute tmp_30) = do {Data.Binary.Put.putWord32le 4179895506;
                                                                        Data.Binary.put tmp_30};
           put (ChannelAdminLogEventActionParticipantToggleAdmin tmp_31) = do {Data.Binary.Put.putWord32le 3580323600;
                                                                               Data.Binary.put tmp_31};
           put (ChannelAdminLogEventActionParticipantToggleBan tmp_32) = do {Data.Binary.Put.putWord32le 3872931198;
                                                                             Data.Binary.put tmp_32};
           put (ChannelAdminLogEventActionParticipantUnmute tmp_33) = do {Data.Binary.Put.putWord32le 3863226816;
                                                                          Data.Binary.put tmp_33};
           put (ChannelAdminLogEventActionParticipantVolume tmp_34) = do {Data.Binary.Put.putWord32le 1048537159;
                                                                          Data.Binary.put tmp_34};
           put (ChannelAdminLogEventActionPinTopic tmp_35) = do {Data.Binary.Put.putWord32le 1569535291;
                                                                 Data.Binary.put tmp_35};
           put (ChannelAdminLogEventActionSendMessage tmp_36) = do {Data.Binary.Put.putWord32le 663693416;
                                                                    Data.Binary.put tmp_36};
           put (ChannelAdminLogEventActionStartGroupCall tmp_37) = do {Data.Binary.Put.putWord32le 589338437;
                                                                       Data.Binary.put tmp_37};
           put (ChannelAdminLogEventActionStopPoll tmp_38) = do {Data.Binary.Put.putWord32le 2399639107;
                                                                 Data.Binary.put tmp_38};
           put (ChannelAdminLogEventActionToggleAntiSpam tmp_39) = do {Data.Binary.Put.putWord32le 1693675004;
                                                                       Data.Binary.put tmp_39};
           put (ChannelAdminLogEventActionToggleForum tmp_40) = do {Data.Binary.Put.putWord32le 46949251;
                                                                    Data.Binary.put tmp_40};
           put (ChannelAdminLogEventActionToggleGroupCallSetting tmp_41) = do {Data.Binary.Put.putWord32le 1456906823;
                                                                               Data.Binary.put tmp_41};
           put (ChannelAdminLogEventActionToggleInvites tmp_42) = do {Data.Binary.Put.putWord32le 460916654;
                                                                      Data.Binary.put tmp_42};
           put (ChannelAdminLogEventActionToggleNoForwards tmp_43) = do {Data.Binary.Put.putWord32le 3408578406;
                                                                         Data.Binary.put tmp_43};
           put (ChannelAdminLogEventActionTogglePreHistoryHidden tmp_44) = do {Data.Binary.Put.putWord32le 1599903217;
                                                                               Data.Binary.put tmp_44};
           put (ChannelAdminLogEventActionToggleSignatures tmp_45) = do {Data.Binary.Put.putWord32le 648939889;
                                                                         Data.Binary.put tmp_45};
           put (ChannelAdminLogEventActionToggleSlowMode tmp_46) = do {Data.Binary.Put.putWord32le 1401984889;
                                                                       Data.Binary.put tmp_46};
           put (ChannelAdminLogEventActionUpdatePinned tmp_47) = do {Data.Binary.Put.putWord32le 3924306968;
                                                                     Data.Binary.put tmp_47}}
instance Data.Binary.Binary ChannelAdminLogEventsFilter'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _join_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _leave_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _invite_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _ban_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     _unban_5 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 4);
                     _kick_6 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 5);
                     _unkick_7 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 6);
                     _promote_8 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 7);
                     _demote_9 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 8);
                     _info_10 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 9);
                     _settings_11 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 10);
                     _pinned_12 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 11);
                     _edit_13 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 12);
                     _delete_14 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 13);
                     _group_call_15 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 14);
                     _invites_16 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 15);
                     _send_17 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 16);
                     _forums_18 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 17);
                     GHC.Base.pure (ChannelAdminLogEventsFilter' _join_1 _leave_2 _invite_3 _ban_4 _unban_5 _kick_6 _unkick_7 _promote_8 _demote_9 _info_10 _settings_11 _pinned_12 _edit_13 _delete_14 _group_call_15 _invites_16 _send_17 _forums_18)};
           put to_be_encoded_19 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_19._forums,
                                                               17),
                                                              (Data.Maybe.isJust to_be_encoded_19._send,
                                                               16),
                                                              (Data.Maybe.isJust to_be_encoded_19._invites,
                                                               15),
                                                              (Data.Maybe.isJust to_be_encoded_19._group_call,
                                                               14),
                                                              (Data.Maybe.isJust to_be_encoded_19._delete,
                                                               13),
                                                              (Data.Maybe.isJust to_be_encoded_19._edit,
                                                               12),
                                                              (Data.Maybe.isJust to_be_encoded_19._pinned,
                                                               11),
                                                              (Data.Maybe.isJust to_be_encoded_19._settings,
                                                               10),
                                                              (Data.Maybe.isJust to_be_encoded_19._info,
                                                               9),
                                                              (Data.Maybe.isJust to_be_encoded_19._demote,
                                                               8),
                                                              (Data.Maybe.isJust to_be_encoded_19._promote,
                                                               7),
                                                              (Data.Maybe.isJust to_be_encoded_19._unkick,
                                                               6),
                                                              (Data.Maybe.isJust to_be_encoded_19._kick,
                                                               5),
                                                              (Data.Maybe.isJust to_be_encoded_19._unban,
                                                               4),
                                                              (Data.Maybe.isJust to_be_encoded_19._ban,
                                                               3),
                                                              (Data.Maybe.isJust to_be_encoded_19._invite,
                                                               2),
                                                              (Data.Maybe.isJust to_be_encoded_19._leave,
                                                               1),
                                                              (Data.Maybe.isJust to_be_encoded_19._join,
                                                               0)];
                                      Data.Binary.put to_be_encoded_19._join;
                                      Data.Binary.put to_be_encoded_19._leave;
                                      Data.Binary.put to_be_encoded_19._invite;
                                      Data.Binary.put to_be_encoded_19._ban;
                                      Data.Binary.put to_be_encoded_19._unban;
                                      Data.Binary.put to_be_encoded_19._kick;
                                      Data.Binary.put to_be_encoded_19._unkick;
                                      Data.Binary.put to_be_encoded_19._promote;
                                      Data.Binary.put to_be_encoded_19._demote;
                                      Data.Binary.put to_be_encoded_19._info;
                                      Data.Binary.put to_be_encoded_19._settings;
                                      Data.Binary.put to_be_encoded_19._pinned;
                                      Data.Binary.put to_be_encoded_19._edit;
                                      Data.Binary.put to_be_encoded_19._delete;
                                      Data.Binary.put to_be_encoded_19._group_call;
                                      Data.Binary.put to_be_encoded_19._invites;
                                      Data.Binary.put to_be_encoded_19._send;
                                      Data.Binary.put to_be_encoded_19._forums}}
data ChannelAdminLogEventsFilter
    = ChannelAdminLogEventsFilter !ChannelAdminLogEventsFilter'
data ChannelAdminLogEventsFilter'
    = ChannelAdminLogEventsFilter' {_join :: !(Maybe True'),
                                    _leave :: !(Maybe True'),
                                    _invite :: !(Maybe True'),
                                    _ban :: !(Maybe True'),
                                    _unban :: !(Maybe True'),
                                    _kick :: !(Maybe True'),
                                    _unkick :: !(Maybe True'),
                                    _promote :: !(Maybe True'),
                                    _demote :: !(Maybe True'),
                                    _info :: !(Maybe True'),
                                    _settings :: !(Maybe True'),
                                    _pinned :: !(Maybe True'),
                                    _edit :: !(Maybe True'),
                                    _delete :: !(Maybe True'),
                                    _group_call :: !(Maybe True'),
                                    _invites :: !(Maybe True'),
                                    _send :: !(Maybe True'),
                                    _forums :: !(Maybe True')}
instance Data.Binary.Binary ChannelAdminLogEventsFilter
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3926948580 -> fmap ChannelAdminLogEventsFilter Data.Binary.get}};
           put (ChannelAdminLogEventsFilter tmp_1) = do {Data.Binary.Put.putWord32le 3926948580;
                                                         Data.Binary.put tmp_1}}
instance Data.Binary.Binary ChannelLocation'
    where {get = do {_geo_point_0 <- Data.Binary.get;
                     _address_1 <- Data.Binary.get;
                     GHC.Base.pure (ChannelLocation' _geo_point_0 _address_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._geo_point;
                                     Data.Binary.put to_be_encoded_2._address}}
instance Data.Binary.Binary ChannelLocationEmpty'
    where {get = GHC.Base.pure ChannelLocationEmpty';
           put to_be_encoded_0 = do GHC.Base.pure ()}
data ChannelLocation
    = ChannelLocation !ChannelLocation'
    | ChannelLocationEmpty !ChannelLocationEmpty'
data ChannelLocation'
    = ChannelLocation' {_geo_point :: !GeoPoint, _address :: !String'}
data ChannelLocationEmpty' = ChannelLocationEmpty' {}
instance Data.Binary.Binary ChannelLocation
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {547062491 -> fmap ChannelLocation Data.Binary.get;
                      3216354699 -> fmap ChannelLocationEmpty Data.Binary.get}};
           put (ChannelLocation tmp_1) = do {Data.Binary.Put.putWord32le 547062491;
                                             Data.Binary.put tmp_1};
           put (ChannelLocationEmpty tmp_2) = do {Data.Binary.Put.putWord32le 3216354699;
                                                  Data.Binary.put tmp_2}}
instance Data.Binary.Binary ChannelMessagesFilter'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _exclude_new_messages_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _ranges_2 <- Data.Binary.get;
                     GHC.Base.pure (ChannelMessagesFilter' _exclude_new_messages_1 _ranges_2)};
           put to_be_encoded_3 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_3._exclude_new_messages,
                                                              1)];
                                     Data.Binary.put to_be_encoded_3._exclude_new_messages;
                                     Data.Binary.put to_be_encoded_3._ranges}}
instance Data.Binary.Binary ChannelMessagesFilterEmpty'
    where {get = GHC.Base.pure ChannelMessagesFilterEmpty';
           put to_be_encoded_0 = do GHC.Base.pure ()}
data ChannelMessagesFilter
    = ChannelMessagesFilter !ChannelMessagesFilter'
    | ChannelMessagesFilterEmpty !ChannelMessagesFilterEmpty'
data ChannelMessagesFilter'
    = ChannelMessagesFilter' {_exclude_new_messages :: !(Maybe True'),
                              _ranges :: !(Vector MessageRange)}
data ChannelMessagesFilterEmpty' = ChannelMessagesFilterEmpty' {}
instance Data.Binary.Binary ChannelMessagesFilter
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3447183703 -> fmap ChannelMessagesFilter Data.Binary.get;
                      2496933607 -> fmap ChannelMessagesFilterEmpty Data.Binary.get}};
           put (ChannelMessagesFilter tmp_1) = do {Data.Binary.Put.putWord32le 3447183703;
                                                   Data.Binary.put tmp_1};
           put (ChannelMessagesFilterEmpty tmp_2) = do {Data.Binary.Put.putWord32le 2496933607;
                                                        Data.Binary.put tmp_2}}
instance Data.Binary.Binary ChannelParticipant'
    where {get = do {_user_id_0 <- Data.Binary.get;
                     _date_1 <- Data.Binary.get;
                     GHC.Base.pure (ChannelParticipant' _user_id_0 _date_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._user_id;
                                     Data.Binary.put to_be_encoded_2._date}}
instance Data.Binary.Binary ChannelParticipantAdmin'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _can_edit_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _self_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _user_id_3 <- Data.Binary.get;
                     _inviter_id_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _promoted_by_5 <- Data.Binary.get;
                     _date_6 <- Data.Binary.get;
                     _admin_rights_7 <- Data.Binary.get;
                     _rank_8 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     GHC.Base.pure (ChannelParticipantAdmin' _can_edit_1 _self_2 _user_id_3 _inviter_id_4 _promoted_by_5 _date_6 _admin_rights_7 _rank_8)};
           put to_be_encoded_9 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_9._rank,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_9._inviter_id,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_9._self,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_9._can_edit,
                                                              0)];
                                     Data.Binary.put to_be_encoded_9._can_edit;
                                     Data.Binary.put to_be_encoded_9._self;
                                     Data.Binary.put to_be_encoded_9._user_id;
                                     Data.Binary.put to_be_encoded_9._inviter_id;
                                     Data.Binary.put to_be_encoded_9._promoted_by;
                                     Data.Binary.put to_be_encoded_9._date;
                                     Data.Binary.put to_be_encoded_9._admin_rights;
                                     Data.Binary.put to_be_encoded_9._rank}}
instance Data.Binary.Binary ChannelParticipantBanned'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _left_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _peer_2 <- Data.Binary.get;
                     _kicked_by_3 <- Data.Binary.get;
                     _date_4 <- Data.Binary.get;
                     _banned_rights_5 <- Data.Binary.get;
                     GHC.Base.pure (ChannelParticipantBanned' _left_1 _peer_2 _kicked_by_3 _date_4 _banned_rights_5)};
           put to_be_encoded_6 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_6._left,
                                                              0)];
                                     Data.Binary.put to_be_encoded_6._left;
                                     Data.Binary.put to_be_encoded_6._peer;
                                     Data.Binary.put to_be_encoded_6._kicked_by;
                                     Data.Binary.put to_be_encoded_6._date;
                                     Data.Binary.put to_be_encoded_6._banned_rights}}
instance Data.Binary.Binary ChannelParticipantCreator'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _user_id_1 <- Data.Binary.get;
                     _admin_rights_2 <- Data.Binary.get;
                     _rank_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     GHC.Base.pure (ChannelParticipantCreator' _user_id_1 _admin_rights_2 _rank_3)};
           put to_be_encoded_4 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_4._rank,
                                                              0)];
                                     Data.Binary.put to_be_encoded_4._user_id;
                                     Data.Binary.put to_be_encoded_4._admin_rights;
                                     Data.Binary.put to_be_encoded_4._rank}}
instance Data.Binary.Binary ChannelParticipantLeft'
    where {get = do {_peer_0 <- Data.Binary.get;
                     GHC.Base.pure (ChannelParticipantLeft' _peer_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._peer}
instance Data.Binary.Binary ChannelParticipantSelf'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _via_request_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _user_id_2 <- Data.Binary.get;
                     _inviter_id_3 <- Data.Binary.get;
                     _date_4 <- Data.Binary.get;
                     GHC.Base.pure (ChannelParticipantSelf' _via_request_1 _user_id_2 _inviter_id_3 _date_4)};
           put to_be_encoded_5 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_5._via_request,
                                                              0)];
                                     Data.Binary.put to_be_encoded_5._via_request;
                                     Data.Binary.put to_be_encoded_5._user_id;
                                     Data.Binary.put to_be_encoded_5._inviter_id;
                                     Data.Binary.put to_be_encoded_5._date}}
data ChannelParticipant
    = ChannelParticipant !ChannelParticipant'
    | ChannelParticipantAdmin !ChannelParticipantAdmin'
    | ChannelParticipantBanned !ChannelParticipantBanned'
    | ChannelParticipantCreator !ChannelParticipantCreator'
    | ChannelParticipantLeft !ChannelParticipantLeft'
    | ChannelParticipantSelf !ChannelParticipantSelf'
data ChannelParticipant'
    = ChannelParticipant' {_user_id :: !Long', _date :: !Int'}
data ChannelParticipantAdmin'
    = ChannelParticipantAdmin' {_can_edit :: !(Maybe True'),
                                _self :: !(Maybe True'),
                                _user_id :: !Long',
                                _inviter_id :: !(Maybe Long'),
                                _promoted_by :: !Long',
                                _date :: !Int',
                                _admin_rights :: !ChatAdminRights,
                                _rank :: !(Maybe String')}
data ChannelParticipantBanned'
    = ChannelParticipantBanned' {_left :: !(Maybe True'),
                                 _peer :: !Peer,
                                 _kicked_by :: !Long',
                                 _date :: !Int',
                                 _banned_rights :: !ChatBannedRights}
data ChannelParticipantCreator'
    = ChannelParticipantCreator' {_user_id :: !Long',
                                  _admin_rights :: !ChatAdminRights,
                                  _rank :: !(Maybe String')}
data ChannelParticipantLeft'
    = ChannelParticipantLeft' {_peer :: !Peer}
data ChannelParticipantSelf'
    = ChannelParticipantSelf' {_via_request :: !(Maybe True'),
                               _user_id :: !Long',
                               _inviter_id :: !Long',
                               _date :: !Int'}
instance Data.Binary.Binary ChannelParticipant
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3222013888 -> fmap ChannelParticipant Data.Binary.get;
                      885242707 -> fmap ChannelParticipantAdmin Data.Binary.get;
                      1844969806 -> fmap ChannelParticipantBanned Data.Binary.get;
                      803602899 -> fmap ChannelParticipantCreator Data.Binary.get;
                      453242886 -> fmap ChannelParticipantLeft Data.Binary.get;
                      900251559 -> fmap ChannelParticipantSelf Data.Binary.get}};
           put (ChannelParticipant tmp_1) = do {Data.Binary.Put.putWord32le 3222013888;
                                                Data.Binary.put tmp_1};
           put (ChannelParticipantAdmin tmp_2) = do {Data.Binary.Put.putWord32le 885242707;
                                                     Data.Binary.put tmp_2};
           put (ChannelParticipantBanned tmp_3) = do {Data.Binary.Put.putWord32le 1844969806;
                                                      Data.Binary.put tmp_3};
           put (ChannelParticipantCreator tmp_4) = do {Data.Binary.Put.putWord32le 803602899;
                                                       Data.Binary.put tmp_4};
           put (ChannelParticipantLeft tmp_5) = do {Data.Binary.Put.putWord32le 453242886;
                                                    Data.Binary.put tmp_5};
           put (ChannelParticipantSelf tmp_6) = do {Data.Binary.Put.putWord32le 900251559;
                                                    Data.Binary.put tmp_6}}
instance Data.Binary.Binary ChannelParticipantsAdmins'
    where {get = GHC.Base.pure ChannelParticipantsAdmins';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary ChannelParticipantsBanned'
    where {get = do {_q_0 <- Data.Binary.get;
                     GHC.Base.pure (ChannelParticipantsBanned' _q_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._q}
instance Data.Binary.Binary ChannelParticipantsBots'
    where {get = GHC.Base.pure ChannelParticipantsBots';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary ChannelParticipantsContacts'
    where {get = do {_q_0 <- Data.Binary.get;
                     GHC.Base.pure (ChannelParticipantsContacts' _q_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._q}
instance Data.Binary.Binary ChannelParticipantsKicked'
    where {get = do {_q_0 <- Data.Binary.get;
                     GHC.Base.pure (ChannelParticipantsKicked' _q_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._q}
instance Data.Binary.Binary ChannelParticipantsMentions'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _q_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _top_msg_id_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     GHC.Base.pure (ChannelParticipantsMentions' _q_1 _top_msg_id_2)};
           put to_be_encoded_3 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_3._top_msg_id,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_3._q,
                                                              0)];
                                     Data.Binary.put to_be_encoded_3._q;
                                     Data.Binary.put to_be_encoded_3._top_msg_id}}
instance Data.Binary.Binary ChannelParticipantsRecent'
    where {get = GHC.Base.pure ChannelParticipantsRecent';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary ChannelParticipantsSearch'
    where {get = do {_q_0 <- Data.Binary.get;
                     GHC.Base.pure (ChannelParticipantsSearch' _q_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._q}
data ChannelParticipantsFilter
    = ChannelParticipantsAdmins !ChannelParticipantsAdmins'
    | ChannelParticipantsBanned !ChannelParticipantsBanned'
    | ChannelParticipantsBots !ChannelParticipantsBots'
    | ChannelParticipantsContacts !ChannelParticipantsContacts'
    | ChannelParticipantsKicked !ChannelParticipantsKicked'
    | ChannelParticipantsMentions !ChannelParticipantsMentions'
    | ChannelParticipantsRecent !ChannelParticipantsRecent'
    | ChannelParticipantsSearch !ChannelParticipantsSearch'
data ChannelParticipantsAdmins' = ChannelParticipantsAdmins' {}
data ChannelParticipantsBanned'
    = ChannelParticipantsBanned' {_q :: !String'}
data ChannelParticipantsBots' = ChannelParticipantsBots' {}
data ChannelParticipantsContacts'
    = ChannelParticipantsContacts' {_q :: !String'}
data ChannelParticipantsKicked'
    = ChannelParticipantsKicked' {_q :: !String'}
data ChannelParticipantsMentions'
    = ChannelParticipantsMentions' {_q :: !(Maybe String'),
                                    _top_msg_id :: !(Maybe Int')}
data ChannelParticipantsRecent' = ChannelParticipantsRecent' {}
data ChannelParticipantsSearch'
    = ChannelParticipantsSearch' {_q :: !String'}
instance Data.Binary.Binary ChannelParticipantsFilter
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3026225513 -> fmap ChannelParticipantsAdmins Data.Binary.get;
                      338142689 -> fmap ChannelParticipantsBanned Data.Binary.get;
                      2966521435 -> fmap ChannelParticipantsBots Data.Binary.get;
                      3144345741 -> fmap ChannelParticipantsContacts Data.Binary.get;
                      2746567045 -> fmap ChannelParticipantsKicked Data.Binary.get;
                      3763035371 -> fmap ChannelParticipantsMentions Data.Binary.get;
                      3728686201 -> fmap ChannelParticipantsRecent Data.Binary.get;
                      106343499 -> fmap ChannelParticipantsSearch Data.Binary.get}};
           put (ChannelParticipantsAdmins tmp_1) = do {Data.Binary.Put.putWord32le 3026225513;
                                                       Data.Binary.put tmp_1};
           put (ChannelParticipantsBanned tmp_2) = do {Data.Binary.Put.putWord32le 338142689;
                                                       Data.Binary.put tmp_2};
           put (ChannelParticipantsBots tmp_3) = do {Data.Binary.Put.putWord32le 2966521435;
                                                     Data.Binary.put tmp_3};
           put (ChannelParticipantsContacts tmp_4) = do {Data.Binary.Put.putWord32le 3144345741;
                                                         Data.Binary.put tmp_4};
           put (ChannelParticipantsKicked tmp_5) = do {Data.Binary.Put.putWord32le 2746567045;
                                                       Data.Binary.put tmp_5};
           put (ChannelParticipantsMentions tmp_6) = do {Data.Binary.Put.putWord32le 3763035371;
                                                         Data.Binary.put tmp_6};
           put (ChannelParticipantsRecent tmp_7) = do {Data.Binary.Put.putWord32le 3728686201;
                                                       Data.Binary.put tmp_7};
           put (ChannelParticipantsSearch tmp_8) = do {Data.Binary.Put.putWord32le 106343499;
                                                       Data.Binary.put tmp_8}}
instance Data.Binary.Binary Channel'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _creator_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _left_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _broadcast_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 5);
                     _verified_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 7);
                     _megagroup_5 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 8);
                     _restricted_6 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 9);
                     _signatures_7 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 11);
                     _min_8 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 12);
                     _scam_9 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 19);
                     _has_link_10 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 20);
                     _has_geo_11 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 21);
                     _slowmode_enabled_12 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 22);
                     _call_active_13 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 23);
                     _call_not_empty_14 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 24);
                     _fake_15 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 25);
                     _gigagroup_16 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 26);
                     _noforwards_17 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 27);
                     _join_to_send_18 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 28);
                     _join_request_19 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 29);
                     _forum_20 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 30);
                     _flags2_21 <- Data.Binary.Get.getWord32le;
                     _stories_hidden_22 <- Data.Binary.tlHandleOpt _flags2_21 (GHC.Maybe.Just 1);
                     _stories_hidden_min_23 <- Data.Binary.tlHandleOpt _flags2_21 (GHC.Maybe.Just 2);
                     _stories_unavailable_24 <- Data.Binary.tlHandleOpt _flags2_21 (GHC.Maybe.Just 3);
                     _id_25 <- Data.Binary.get;
                     _access_hash_26 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 13);
                     _title_27 <- Data.Binary.get;
                     _username_28 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 6);
                     _photo_29 <- Data.Binary.get;
                     _date_30 <- Data.Binary.get;
                     _restriction_reason_31 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 9);
                     _admin_rights_32 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 14);
                     _banned_rights_33 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 15);
                     _default_banned_rights_34 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 18);
                     _participants_count_35 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 17);
                     _usernames_36 <- Data.Binary.tlHandleOpt _flags2_21 (GHC.Maybe.Just 0);
                     _stories_max_id_37 <- Data.Binary.tlHandleOpt _flags2_21 (GHC.Maybe.Just 4);
                     _color_38 <- Data.Binary.tlHandleOpt _flags2_21 (GHC.Maybe.Just 7);
                     _profile_color_39 <- Data.Binary.tlHandleOpt _flags2_21 (GHC.Maybe.Just 8);
                     _emoji_status_40 <- Data.Binary.tlHandleOpt _flags2_21 (GHC.Maybe.Just 9);
                     _level_41 <- Data.Binary.tlHandleOpt _flags2_21 (GHC.Maybe.Just 10);
                     GHC.Base.pure (Channel' _creator_1 _left_2 _broadcast_3 _verified_4 _megagroup_5 _restricted_6 _signatures_7 _min_8 _scam_9 _has_link_10 _has_geo_11 _slowmode_enabled_12 _call_active_13 _call_not_empty_14 _fake_15 _gigagroup_16 _noforwards_17 _join_to_send_18 _join_request_19 _forum_20 _stories_hidden_22 _stories_hidden_min_23 _stories_unavailable_24 _id_25 _access_hash_26 _title_27 _username_28 _photo_29 _date_30 _restriction_reason_31 _admin_rights_32 _banned_rights_33 _default_banned_rights_34 _participants_count_35 _usernames_36 _stories_max_id_37 _color_38 _profile_color_39 _emoji_status_40 _level_41)};
           put to_be_encoded_42 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_42._participants_count,
                                                               17),
                                                              (Data.Maybe.isJust to_be_encoded_42._default_banned_rights,
                                                               18),
                                                              (Data.Maybe.isJust to_be_encoded_42._banned_rights,
                                                               15),
                                                              (Data.Maybe.isJust to_be_encoded_42._admin_rights,
                                                               14),
                                                              (Data.Maybe.isJust to_be_encoded_42._restriction_reason,
                                                               9),
                                                              (Data.Maybe.isJust to_be_encoded_42._username,
                                                               6),
                                                              (Data.Maybe.isJust to_be_encoded_42._access_hash,
                                                               13),
                                                              (Data.Maybe.isJust to_be_encoded_42._forum,
                                                               30),
                                                              (Data.Maybe.isJust to_be_encoded_42._join_request,
                                                               29),
                                                              (Data.Maybe.isJust to_be_encoded_42._join_to_send,
                                                               28),
                                                              (Data.Maybe.isJust to_be_encoded_42._noforwards,
                                                               27),
                                                              (Data.Maybe.isJust to_be_encoded_42._gigagroup,
                                                               26),
                                                              (Data.Maybe.isJust to_be_encoded_42._fake,
                                                               25),
                                                              (Data.Maybe.isJust to_be_encoded_42._call_not_empty,
                                                               24),
                                                              (Data.Maybe.isJust to_be_encoded_42._call_active,
                                                               23),
                                                              (Data.Maybe.isJust to_be_encoded_42._slowmode_enabled,
                                                               22),
                                                              (Data.Maybe.isJust to_be_encoded_42._has_geo,
                                                               21),
                                                              (Data.Maybe.isJust to_be_encoded_42._has_link,
                                                               20),
                                                              (Data.Maybe.isJust to_be_encoded_42._scam,
                                                               19),
                                                              (Data.Maybe.isJust to_be_encoded_42._min,
                                                               12),
                                                              (Data.Maybe.isJust to_be_encoded_42._signatures,
                                                               11),
                                                              (Data.Maybe.isJust to_be_encoded_42._restricted,
                                                               9),
                                                              (Data.Maybe.isJust to_be_encoded_42._megagroup,
                                                               8),
                                                              (Data.Maybe.isJust to_be_encoded_42._verified,
                                                               7),
                                                              (Data.Maybe.isJust to_be_encoded_42._broadcast,
                                                               5),
                                                              (Data.Maybe.isJust to_be_encoded_42._left,
                                                               2),
                                                              (Data.Maybe.isJust to_be_encoded_42._creator,
                                                               0)];
                                      Data.Binary.put to_be_encoded_42._creator;
                                      Data.Binary.put to_be_encoded_42._left;
                                      Data.Binary.put to_be_encoded_42._broadcast;
                                      Data.Binary.put to_be_encoded_42._verified;
                                      Data.Binary.put to_be_encoded_42._megagroup;
                                      Data.Binary.put to_be_encoded_42._restricted;
                                      Data.Binary.put to_be_encoded_42._signatures;
                                      Data.Binary.put to_be_encoded_42._min;
                                      Data.Binary.put to_be_encoded_42._scam;
                                      Data.Binary.put to_be_encoded_42._has_link;
                                      Data.Binary.put to_be_encoded_42._has_geo;
                                      Data.Binary.put to_be_encoded_42._slowmode_enabled;
                                      Data.Binary.put to_be_encoded_42._call_active;
                                      Data.Binary.put to_be_encoded_42._call_not_empty;
                                      Data.Binary.put to_be_encoded_42._fake;
                                      Data.Binary.put to_be_encoded_42._gigagroup;
                                      Data.Binary.put to_be_encoded_42._noforwards;
                                      Data.Binary.put to_be_encoded_42._join_to_send;
                                      Data.Binary.put to_be_encoded_42._join_request;
                                      Data.Binary.put to_be_encoded_42._forum;
                                      Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_42._level,
                                                               10),
                                                              (Data.Maybe.isJust to_be_encoded_42._emoji_status,
                                                               9),
                                                              (Data.Maybe.isJust to_be_encoded_42._profile_color,
                                                               8),
                                                              (Data.Maybe.isJust to_be_encoded_42._color,
                                                               7),
                                                              (Data.Maybe.isJust to_be_encoded_42._stories_max_id,
                                                               4),
                                                              (Data.Maybe.isJust to_be_encoded_42._usernames,
                                                               0),
                                                              (Data.Maybe.isJust to_be_encoded_42._stories_unavailable,
                                                               3),
                                                              (Data.Maybe.isJust to_be_encoded_42._stories_hidden_min,
                                                               2),
                                                              (Data.Maybe.isJust to_be_encoded_42._stories_hidden,
                                                               1)];
                                      Data.Binary.put to_be_encoded_42._stories_hidden;
                                      Data.Binary.put to_be_encoded_42._stories_hidden_min;
                                      Data.Binary.put to_be_encoded_42._stories_unavailable;
                                      Data.Binary.put to_be_encoded_42._id;
                                      Data.Binary.put to_be_encoded_42._access_hash;
                                      Data.Binary.put to_be_encoded_42._title;
                                      Data.Binary.put to_be_encoded_42._username;
                                      Data.Binary.put to_be_encoded_42._photo;
                                      Data.Binary.put to_be_encoded_42._date;
                                      Data.Binary.put to_be_encoded_42._restriction_reason;
                                      Data.Binary.put to_be_encoded_42._admin_rights;
                                      Data.Binary.put to_be_encoded_42._banned_rights;
                                      Data.Binary.put to_be_encoded_42._default_banned_rights;
                                      Data.Binary.put to_be_encoded_42._participants_count;
                                      Data.Binary.put to_be_encoded_42._usernames;
                                      Data.Binary.put to_be_encoded_42._stories_max_id;
                                      Data.Binary.put to_be_encoded_42._color;
                                      Data.Binary.put to_be_encoded_42._profile_color;
                                      Data.Binary.put to_be_encoded_42._emoji_status;
                                      Data.Binary.put to_be_encoded_42._level}}
instance Data.Binary.Binary ChannelForbidden'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _broadcast_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 5);
                     _megagroup_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 8);
                     _id_3 <- Data.Binary.get;
                     _access_hash_4 <- Data.Binary.get;
                     _title_5 <- Data.Binary.get;
                     _until_date_6 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 16);
                     GHC.Base.pure (ChannelForbidden' _broadcast_1 _megagroup_2 _id_3 _access_hash_4 _title_5 _until_date_6)};
           put to_be_encoded_7 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_7._until_date,
                                                              16),
                                                             (Data.Maybe.isJust to_be_encoded_7._megagroup,
                                                              8),
                                                             (Data.Maybe.isJust to_be_encoded_7._broadcast,
                                                              5)];
                                     Data.Binary.put to_be_encoded_7._broadcast;
                                     Data.Binary.put to_be_encoded_7._megagroup;
                                     Data.Binary.put to_be_encoded_7._id;
                                     Data.Binary.put to_be_encoded_7._access_hash;
                                     Data.Binary.put to_be_encoded_7._title;
                                     Data.Binary.put to_be_encoded_7._until_date}}
instance Data.Binary.Binary Chat'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _creator_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _left_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _deactivated_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 5);
                     _call_active_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 23);
                     _call_not_empty_5 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 24);
                     _noforwards_6 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 25);
                     _id_7 <- Data.Binary.get;
                     _title_8 <- Data.Binary.get;
                     _photo_9 <- Data.Binary.get;
                     _participants_count_10 <- Data.Binary.get;
                     _date_11 <- Data.Binary.get;
                     _version_12 <- Data.Binary.get;
                     _migrated_to_13 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 6);
                     _admin_rights_14 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 14);
                     _default_banned_rights_15 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 18);
                     GHC.Base.pure (Chat' _creator_1 _left_2 _deactivated_3 _call_active_4 _call_not_empty_5 _noforwards_6 _id_7 _title_8 _photo_9 _participants_count_10 _date_11 _version_12 _migrated_to_13 _admin_rights_14 _default_banned_rights_15)};
           put to_be_encoded_16 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_16._default_banned_rights,
                                                               18),
                                                              (Data.Maybe.isJust to_be_encoded_16._admin_rights,
                                                               14),
                                                              (Data.Maybe.isJust to_be_encoded_16._migrated_to,
                                                               6),
                                                              (Data.Maybe.isJust to_be_encoded_16._noforwards,
                                                               25),
                                                              (Data.Maybe.isJust to_be_encoded_16._call_not_empty,
                                                               24),
                                                              (Data.Maybe.isJust to_be_encoded_16._call_active,
                                                               23),
                                                              (Data.Maybe.isJust to_be_encoded_16._deactivated,
                                                               5),
                                                              (Data.Maybe.isJust to_be_encoded_16._left,
                                                               2),
                                                              (Data.Maybe.isJust to_be_encoded_16._creator,
                                                               0)];
                                      Data.Binary.put to_be_encoded_16._creator;
                                      Data.Binary.put to_be_encoded_16._left;
                                      Data.Binary.put to_be_encoded_16._deactivated;
                                      Data.Binary.put to_be_encoded_16._call_active;
                                      Data.Binary.put to_be_encoded_16._call_not_empty;
                                      Data.Binary.put to_be_encoded_16._noforwards;
                                      Data.Binary.put to_be_encoded_16._id;
                                      Data.Binary.put to_be_encoded_16._title;
                                      Data.Binary.put to_be_encoded_16._photo;
                                      Data.Binary.put to_be_encoded_16._participants_count;
                                      Data.Binary.put to_be_encoded_16._date;
                                      Data.Binary.put to_be_encoded_16._version;
                                      Data.Binary.put to_be_encoded_16._migrated_to;
                                      Data.Binary.put to_be_encoded_16._admin_rights;
                                      Data.Binary.put to_be_encoded_16._default_banned_rights}}
instance Data.Binary.Binary ChatEmpty'
    where {get = do {_id_0 <- Data.Binary.get;
                     GHC.Base.pure (ChatEmpty' _id_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._id}
instance Data.Binary.Binary ChatForbidden'
    where {get = do {_id_0 <- Data.Binary.get;
                     _title_1 <- Data.Binary.get;
                     GHC.Base.pure (ChatForbidden' _id_0 _title_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._id;
                                     Data.Binary.put to_be_encoded_2._title}}
data Chat
    = Channel !Channel'
    | ChannelForbidden !ChannelForbidden'
    | Chat !Chat'
    | ChatEmpty !ChatEmpty'
    | ChatForbidden !ChatForbidden'
data Channel'
    = Channel' {_creator :: !(Maybe True'),
                _left :: !(Maybe True'),
                _broadcast :: !(Maybe True'),
                _verified :: !(Maybe True'),
                _megagroup :: !(Maybe True'),
                _restricted :: !(Maybe True'),
                _signatures :: !(Maybe True'),
                _min :: !(Maybe True'),
                _scam :: !(Maybe True'),
                _has_link :: !(Maybe True'),
                _has_geo :: !(Maybe True'),
                _slowmode_enabled :: !(Maybe True'),
                _call_active :: !(Maybe True'),
                _call_not_empty :: !(Maybe True'),
                _fake :: !(Maybe True'),
                _gigagroup :: !(Maybe True'),
                _noforwards :: !(Maybe True'),
                _join_to_send :: !(Maybe True'),
                _join_request :: !(Maybe True'),
                _forum :: !(Maybe True'),
                _stories_hidden :: !(Maybe True'),
                _stories_hidden_min :: !(Maybe True'),
                _stories_unavailable :: !(Maybe True'),
                _id :: !Long',
                _access_hash :: !(Maybe Long'),
                _title :: !String',
                _username :: !(Maybe String'),
                _photo :: !ChatPhoto,
                _date :: !Int',
                _restriction_reason :: !(Maybe (Vector RestrictionReason)),
                _admin_rights :: !(Maybe ChatAdminRights),
                _banned_rights :: !(Maybe ChatBannedRights),
                _default_banned_rights :: !(Maybe ChatBannedRights),
                _participants_count :: !(Maybe Int'),
                _usernames :: !(Maybe (Vector Username)),
                _stories_max_id :: !(Maybe Int'),
                _color :: !(Maybe PeerColor),
                _profile_color :: !(Maybe PeerColor),
                _emoji_status :: !(Maybe EmojiStatus),
                _level :: !(Maybe Int')}
data ChannelForbidden'
    = ChannelForbidden' {_broadcast :: !(Maybe True'),
                         _megagroup :: !(Maybe True'),
                         _id :: !Long',
                         _access_hash :: !Long',
                         _title :: !String',
                         _until_date :: !(Maybe Int')}
data Chat'
    = Chat' {_creator :: !(Maybe True'),
             _left :: !(Maybe True'),
             _deactivated :: !(Maybe True'),
             _call_active :: !(Maybe True'),
             _call_not_empty :: !(Maybe True'),
             _noforwards :: !(Maybe True'),
             _id :: !Long',
             _title :: !String',
             _photo :: !ChatPhoto,
             _participants_count :: !Int',
             _date :: !Int',
             _version :: !Int',
             _migrated_to :: !(Maybe InputChannel),
             _admin_rights :: !(Maybe ChatAdminRights),
             _default_banned_rights :: !(Maybe ChatBannedRights)}
data ChatEmpty' = ChatEmpty' {_id :: !Long'}
data ChatForbidden'
    = ChatForbidden' {_id :: !Long', _title :: !String'}
instance Data.Binary.Binary Chat
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {179174543 -> fmap Channel Data.Binary.get;
                      399807445 -> fmap ChannelForbidden Data.Binary.get;
                      1103884886 -> fmap Chat Data.Binary.get;
                      693512293 -> fmap ChatEmpty Data.Binary.get;
                      1704108455 -> fmap ChatForbidden Data.Binary.get}};
           put (Channel tmp_1) = do {Data.Binary.Put.putWord32le 179174543;
                                     Data.Binary.put tmp_1};
           put (ChannelForbidden tmp_2) = do {Data.Binary.Put.putWord32le 399807445;
                                              Data.Binary.put tmp_2};
           put (Chat tmp_3) = do {Data.Binary.Put.putWord32le 1103884886;
                                  Data.Binary.put tmp_3};
           put (ChatEmpty tmp_4) = do {Data.Binary.Put.putWord32le 693512293;
                                       Data.Binary.put tmp_4};
           put (ChatForbidden tmp_5) = do {Data.Binary.Put.putWord32le 1704108455;
                                           Data.Binary.put tmp_5}}
instance Data.Binary.Binary ChatAdminRights'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _change_info_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _post_messages_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _edit_messages_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _delete_messages_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     _ban_users_5 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 4);
                     _invite_users_6 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 5);
                     _pin_messages_7 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 7);
                     _add_admins_8 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 9);
                     _anonymous_9 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 10);
                     _manage_call_10 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 11);
                     _other_11 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 12);
                     _manage_topics_12 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 13);
                     _post_stories_13 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 14);
                     _edit_stories_14 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 15);
                     _delete_stories_15 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 16);
                     GHC.Base.pure (ChatAdminRights' _change_info_1 _post_messages_2 _edit_messages_3 _delete_messages_4 _ban_users_5 _invite_users_6 _pin_messages_7 _add_admins_8 _anonymous_9 _manage_call_10 _other_11 _manage_topics_12 _post_stories_13 _edit_stories_14 _delete_stories_15)};
           put to_be_encoded_16 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_16._delete_stories,
                                                               16),
                                                              (Data.Maybe.isJust to_be_encoded_16._edit_stories,
                                                               15),
                                                              (Data.Maybe.isJust to_be_encoded_16._post_stories,
                                                               14),
                                                              (Data.Maybe.isJust to_be_encoded_16._manage_topics,
                                                               13),
                                                              (Data.Maybe.isJust to_be_encoded_16._other,
                                                               12),
                                                              (Data.Maybe.isJust to_be_encoded_16._manage_call,
                                                               11),
                                                              (Data.Maybe.isJust to_be_encoded_16._anonymous,
                                                               10),
                                                              (Data.Maybe.isJust to_be_encoded_16._add_admins,
                                                               9),
                                                              (Data.Maybe.isJust to_be_encoded_16._pin_messages,
                                                               7),
                                                              (Data.Maybe.isJust to_be_encoded_16._invite_users,
                                                               5),
                                                              (Data.Maybe.isJust to_be_encoded_16._ban_users,
                                                               4),
                                                              (Data.Maybe.isJust to_be_encoded_16._delete_messages,
                                                               3),
                                                              (Data.Maybe.isJust to_be_encoded_16._edit_messages,
                                                               2),
                                                              (Data.Maybe.isJust to_be_encoded_16._post_messages,
                                                               1),
                                                              (Data.Maybe.isJust to_be_encoded_16._change_info,
                                                               0)];
                                      Data.Binary.put to_be_encoded_16._change_info;
                                      Data.Binary.put to_be_encoded_16._post_messages;
                                      Data.Binary.put to_be_encoded_16._edit_messages;
                                      Data.Binary.put to_be_encoded_16._delete_messages;
                                      Data.Binary.put to_be_encoded_16._ban_users;
                                      Data.Binary.put to_be_encoded_16._invite_users;
                                      Data.Binary.put to_be_encoded_16._pin_messages;
                                      Data.Binary.put to_be_encoded_16._add_admins;
                                      Data.Binary.put to_be_encoded_16._anonymous;
                                      Data.Binary.put to_be_encoded_16._manage_call;
                                      Data.Binary.put to_be_encoded_16._other;
                                      Data.Binary.put to_be_encoded_16._manage_topics;
                                      Data.Binary.put to_be_encoded_16._post_stories;
                                      Data.Binary.put to_be_encoded_16._edit_stories;
                                      Data.Binary.put to_be_encoded_16._delete_stories}}
data ChatAdminRights = ChatAdminRights !ChatAdminRights'
data ChatAdminRights'
    = ChatAdminRights' {_change_info :: !(Maybe True'),
                        _post_messages :: !(Maybe True'),
                        _edit_messages :: !(Maybe True'),
                        _delete_messages :: !(Maybe True'),
                        _ban_users :: !(Maybe True'),
                        _invite_users :: !(Maybe True'),
                        _pin_messages :: !(Maybe True'),
                        _add_admins :: !(Maybe True'),
                        _anonymous :: !(Maybe True'),
                        _manage_call :: !(Maybe True'),
                        _other :: !(Maybe True'),
                        _manage_topics :: !(Maybe True'),
                        _post_stories :: !(Maybe True'),
                        _edit_stories :: !(Maybe True'),
                        _delete_stories :: !(Maybe True')}
instance Data.Binary.Binary ChatAdminRights
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1605510357 -> fmap ChatAdminRights Data.Binary.get}};
           put (ChatAdminRights tmp_1) = do {Data.Binary.Put.putWord32le 1605510357;
                                             Data.Binary.put tmp_1}}
instance Data.Binary.Binary ChatAdminWithInvites'
    where {get = do {_admin_id_0 <- Data.Binary.get;
                     _invites_count_1 <- Data.Binary.get;
                     _revoked_invites_count_2 <- Data.Binary.get;
                     GHC.Base.pure (ChatAdminWithInvites' _admin_id_0 _invites_count_1 _revoked_invites_count_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._admin_id;
                                     Data.Binary.put to_be_encoded_3._invites_count;
                                     Data.Binary.put to_be_encoded_3._revoked_invites_count}}
data ChatAdminWithInvites
    = ChatAdminWithInvites !ChatAdminWithInvites'
data ChatAdminWithInvites'
    = ChatAdminWithInvites' {_admin_id :: !Long',
                             _invites_count :: !Int',
                             _revoked_invites_count :: !Int'}
instance Data.Binary.Binary ChatAdminWithInvites
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {4075613987 -> fmap ChatAdminWithInvites Data.Binary.get}};
           put (ChatAdminWithInvites tmp_1) = do {Data.Binary.Put.putWord32le 4075613987;
                                                  Data.Binary.put tmp_1}}
instance Data.Binary.Binary ChatBannedRights'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _view_messages_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _send_messages_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _send_media_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _send_stickers_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     _send_gifs_5 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 4);
                     _send_games_6 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 5);
                     _send_inline_7 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 6);
                     _embed_links_8 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 7);
                     _send_polls_9 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 8);
                     _change_info_10 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 10);
                     _invite_users_11 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 15);
                     _pin_messages_12 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 17);
                     _manage_topics_13 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 18);
                     _send_photos_14 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 19);
                     _send_videos_15 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 20);
                     _send_roundvideos_16 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 21);
                     _send_audios_17 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 22);
                     _send_voices_18 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 23);
                     _send_docs_19 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 24);
                     _send_plain_20 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 25);
                     _until_date_21 <- Data.Binary.get;
                     GHC.Base.pure (ChatBannedRights' _view_messages_1 _send_messages_2 _send_media_3 _send_stickers_4 _send_gifs_5 _send_games_6 _send_inline_7 _embed_links_8 _send_polls_9 _change_info_10 _invite_users_11 _pin_messages_12 _manage_topics_13 _send_photos_14 _send_videos_15 _send_roundvideos_16 _send_audios_17 _send_voices_18 _send_docs_19 _send_plain_20 _until_date_21)};
           put to_be_encoded_22 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_22._send_plain,
                                                               25),
                                                              (Data.Maybe.isJust to_be_encoded_22._send_docs,
                                                               24),
                                                              (Data.Maybe.isJust to_be_encoded_22._send_voices,
                                                               23),
                                                              (Data.Maybe.isJust to_be_encoded_22._send_audios,
                                                               22),
                                                              (Data.Maybe.isJust to_be_encoded_22._send_roundvideos,
                                                               21),
                                                              (Data.Maybe.isJust to_be_encoded_22._send_videos,
                                                               20),
                                                              (Data.Maybe.isJust to_be_encoded_22._send_photos,
                                                               19),
                                                              (Data.Maybe.isJust to_be_encoded_22._manage_topics,
                                                               18),
                                                              (Data.Maybe.isJust to_be_encoded_22._pin_messages,
                                                               17),
                                                              (Data.Maybe.isJust to_be_encoded_22._invite_users,
                                                               15),
                                                              (Data.Maybe.isJust to_be_encoded_22._change_info,
                                                               10),
                                                              (Data.Maybe.isJust to_be_encoded_22._send_polls,
                                                               8),
                                                              (Data.Maybe.isJust to_be_encoded_22._embed_links,
                                                               7),
                                                              (Data.Maybe.isJust to_be_encoded_22._send_inline,
                                                               6),
                                                              (Data.Maybe.isJust to_be_encoded_22._send_games,
                                                               5),
                                                              (Data.Maybe.isJust to_be_encoded_22._send_gifs,
                                                               4),
                                                              (Data.Maybe.isJust to_be_encoded_22._send_stickers,
                                                               3),
                                                              (Data.Maybe.isJust to_be_encoded_22._send_media,
                                                               2),
                                                              (Data.Maybe.isJust to_be_encoded_22._send_messages,
                                                               1),
                                                              (Data.Maybe.isJust to_be_encoded_22._view_messages,
                                                               0)];
                                      Data.Binary.put to_be_encoded_22._view_messages;
                                      Data.Binary.put to_be_encoded_22._send_messages;
                                      Data.Binary.put to_be_encoded_22._send_media;
                                      Data.Binary.put to_be_encoded_22._send_stickers;
                                      Data.Binary.put to_be_encoded_22._send_gifs;
                                      Data.Binary.put to_be_encoded_22._send_games;
                                      Data.Binary.put to_be_encoded_22._send_inline;
                                      Data.Binary.put to_be_encoded_22._embed_links;
                                      Data.Binary.put to_be_encoded_22._send_polls;
                                      Data.Binary.put to_be_encoded_22._change_info;
                                      Data.Binary.put to_be_encoded_22._invite_users;
                                      Data.Binary.put to_be_encoded_22._pin_messages;
                                      Data.Binary.put to_be_encoded_22._manage_topics;
                                      Data.Binary.put to_be_encoded_22._send_photos;
                                      Data.Binary.put to_be_encoded_22._send_videos;
                                      Data.Binary.put to_be_encoded_22._send_roundvideos;
                                      Data.Binary.put to_be_encoded_22._send_audios;
                                      Data.Binary.put to_be_encoded_22._send_voices;
                                      Data.Binary.put to_be_encoded_22._send_docs;
                                      Data.Binary.put to_be_encoded_22._send_plain;
                                      Data.Binary.put to_be_encoded_22._until_date}}
data ChatBannedRights = ChatBannedRights !ChatBannedRights'
data ChatBannedRights'
    = ChatBannedRights' {_view_messages :: !(Maybe True'),
                         _send_messages :: !(Maybe True'),
                         _send_media :: !(Maybe True'),
                         _send_stickers :: !(Maybe True'),
                         _send_gifs :: !(Maybe True'),
                         _send_games :: !(Maybe True'),
                         _send_inline :: !(Maybe True'),
                         _embed_links :: !(Maybe True'),
                         _send_polls :: !(Maybe True'),
                         _change_info :: !(Maybe True'),
                         _invite_users :: !(Maybe True'),
                         _pin_messages :: !(Maybe True'),
                         _manage_topics :: !(Maybe True'),
                         _send_photos :: !(Maybe True'),
                         _send_videos :: !(Maybe True'),
                         _send_roundvideos :: !(Maybe True'),
                         _send_audios :: !(Maybe True'),
                         _send_voices :: !(Maybe True'),
                         _send_docs :: !(Maybe True'),
                         _send_plain :: !(Maybe True'),
                         _until_date :: !Int'}
instance Data.Binary.Binary ChatBannedRights
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2668758040 -> fmap ChatBannedRights Data.Binary.get}};
           put (ChatBannedRights tmp_1) = do {Data.Binary.Put.putWord32le 2668758040;
                                              Data.Binary.put tmp_1}}
instance Data.Binary.Binary ChannelFull'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _can_view_participants_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     _can_set_username_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 6);
                     _can_set_stickers_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 7);
                     _hidden_prehistory_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 10);
                     _can_set_location_5 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 16);
                     _has_scheduled_6 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 19);
                     _can_view_stats_7 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 20);
                     _blocked_8 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 22);
                     _flags2_9 <- Data.Binary.Get.getWord32le;
                     _can_delete_channel_10 <- Data.Binary.tlHandleOpt _flags2_9 (GHC.Maybe.Just 0);
                     _antispam_11 <- Data.Binary.tlHandleOpt _flags2_9 (GHC.Maybe.Just 1);
                     _participants_hidden_12 <- Data.Binary.tlHandleOpt _flags2_9 (GHC.Maybe.Just 2);
                     _translations_disabled_13 <- Data.Binary.tlHandleOpt _flags2_9 (GHC.Maybe.Just 3);
                     _stories_pinned_available_14 <- Data.Binary.tlHandleOpt _flags2_9 (GHC.Maybe.Just 5);
                     _view_forum_as_messages_15 <- Data.Binary.tlHandleOpt _flags2_9 (GHC.Maybe.Just 6);
                     _id_16 <- Data.Binary.get;
                     _about_17 <- Data.Binary.get;
                     _participants_count_18 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _admins_count_19 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _kicked_count_20 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _banned_count_21 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _online_count_22 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 13);
                     _read_inbox_max_id_23 <- Data.Binary.get;
                     _read_outbox_max_id_24 <- Data.Binary.get;
                     _unread_count_25 <- Data.Binary.get;
                     _chat_photo_26 <- Data.Binary.get;
                     _notify_settings_27 <- Data.Binary.get;
                     _exported_invite_28 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 23);
                     _bot_info_29 <- Data.Binary.get;
                     _migrated_from_chat_id_30 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 4);
                     _migrated_from_max_id_31 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 4);
                     _pinned_msg_id_32 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 5);
                     _stickerset_33 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 8);
                     _available_min_id_34 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 9);
                     _folder_id_35 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 11);
                     _linked_chat_id_36 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 14);
                     _location_37 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 15);
                     _slowmode_seconds_38 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 17);
                     _slowmode_next_send_date_39 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 18);
                     _stats_dc_40 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 12);
                     _pts_41 <- Data.Binary.get;
                     _call_42 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 21);
                     _ttl_period_43 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 24);
                     _pending_suggestions_44 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 25);
                     _groupcall_default_join_as_45 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 26);
                     _theme_emoticon_46 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 27);
                     _requests_pending_47 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 28);
                     _recent_requesters_48 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 28);
                     _default_send_as_49 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 29);
                     _available_reactions_50 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 30);
                     _stories_51 <- Data.Binary.tlHandleOpt _flags2_9 (GHC.Maybe.Just 4);
                     _wallpaper_52 <- Data.Binary.tlHandleOpt _flags2_9 (GHC.Maybe.Just 7);
                     GHC.Base.pure (ChannelFull' _can_view_participants_1 _can_set_username_2 _can_set_stickers_3 _hidden_prehistory_4 _can_set_location_5 _has_scheduled_6 _can_view_stats_7 _blocked_8 _can_delete_channel_10 _antispam_11 _participants_hidden_12 _translations_disabled_13 _stories_pinned_available_14 _view_forum_as_messages_15 _id_16 _about_17 _participants_count_18 _admins_count_19 _kicked_count_20 _banned_count_21 _online_count_22 _read_inbox_max_id_23 _read_outbox_max_id_24 _unread_count_25 _chat_photo_26 _notify_settings_27 _exported_invite_28 _bot_info_29 _migrated_from_chat_id_30 _migrated_from_max_id_31 _pinned_msg_id_32 _stickerset_33 _available_min_id_34 _folder_id_35 _linked_chat_id_36 _location_37 _slowmode_seconds_38 _slowmode_next_send_date_39 _stats_dc_40 _pts_41 _call_42 _ttl_period_43 _pending_suggestions_44 _groupcall_default_join_as_45 _theme_emoticon_46 _requests_pending_47 _recent_requesters_48 _default_send_as_49 _available_reactions_50 _stories_51 _wallpaper_52)};
           put to_be_encoded_53 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_53._available_reactions,
                                                               30),
                                                              (Data.Maybe.isJust to_be_encoded_53._default_send_as,
                                                               29),
                                                              (Data.Maybe.isJust to_be_encoded_53._recent_requesters,
                                                               28),
                                                              (Data.Maybe.isJust to_be_encoded_53._requests_pending,
                                                               28),
                                                              (Data.Maybe.isJust to_be_encoded_53._theme_emoticon,
                                                               27),
                                                              (Data.Maybe.isJust to_be_encoded_53._groupcall_default_join_as,
                                                               26),
                                                              (Data.Maybe.isJust to_be_encoded_53._pending_suggestions,
                                                               25),
                                                              (Data.Maybe.isJust to_be_encoded_53._ttl_period,
                                                               24),
                                                              (Data.Maybe.isJust to_be_encoded_53._call,
                                                               21),
                                                              (Data.Maybe.isJust to_be_encoded_53._stats_dc,
                                                               12),
                                                              (Data.Maybe.isJust to_be_encoded_53._slowmode_next_send_date,
                                                               18),
                                                              (Data.Maybe.isJust to_be_encoded_53._slowmode_seconds,
                                                               17),
                                                              (Data.Maybe.isJust to_be_encoded_53._location,
                                                               15),
                                                              (Data.Maybe.isJust to_be_encoded_53._linked_chat_id,
                                                               14),
                                                              (Data.Maybe.isJust to_be_encoded_53._folder_id,
                                                               11),
                                                              (Data.Maybe.isJust to_be_encoded_53._available_min_id,
                                                               9),
                                                              (Data.Maybe.isJust to_be_encoded_53._stickerset,
                                                               8),
                                                              (Data.Maybe.isJust to_be_encoded_53._pinned_msg_id,
                                                               5),
                                                              (Data.Maybe.isJust to_be_encoded_53._migrated_from_max_id,
                                                               4),
                                                              (Data.Maybe.isJust to_be_encoded_53._migrated_from_chat_id,
                                                               4),
                                                              (Data.Maybe.isJust to_be_encoded_53._exported_invite,
                                                               23),
                                                              (Data.Maybe.isJust to_be_encoded_53._online_count,
                                                               13),
                                                              (Data.Maybe.isJust to_be_encoded_53._banned_count,
                                                               2),
                                                              (Data.Maybe.isJust to_be_encoded_53._kicked_count,
                                                               2),
                                                              (Data.Maybe.isJust to_be_encoded_53._admins_count,
                                                               1),
                                                              (Data.Maybe.isJust to_be_encoded_53._participants_count,
                                                               0),
                                                              (Data.Maybe.isJust to_be_encoded_53._blocked,
                                                               22),
                                                              (Data.Maybe.isJust to_be_encoded_53._can_view_stats,
                                                               20),
                                                              (Data.Maybe.isJust to_be_encoded_53._has_scheduled,
                                                               19),
                                                              (Data.Maybe.isJust to_be_encoded_53._can_set_location,
                                                               16),
                                                              (Data.Maybe.isJust to_be_encoded_53._hidden_prehistory,
                                                               10),
                                                              (Data.Maybe.isJust to_be_encoded_53._can_set_stickers,
                                                               7),
                                                              (Data.Maybe.isJust to_be_encoded_53._can_set_username,
                                                               6),
                                                              (Data.Maybe.isJust to_be_encoded_53._can_view_participants,
                                                               3)];
                                      Data.Binary.put to_be_encoded_53._can_view_participants;
                                      Data.Binary.put to_be_encoded_53._can_set_username;
                                      Data.Binary.put to_be_encoded_53._can_set_stickers;
                                      Data.Binary.put to_be_encoded_53._hidden_prehistory;
                                      Data.Binary.put to_be_encoded_53._can_set_location;
                                      Data.Binary.put to_be_encoded_53._has_scheduled;
                                      Data.Binary.put to_be_encoded_53._can_view_stats;
                                      Data.Binary.put to_be_encoded_53._blocked;
                                      Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_53._wallpaper,
                                                               7),
                                                              (Data.Maybe.isJust to_be_encoded_53._stories,
                                                               4),
                                                              (Data.Maybe.isJust to_be_encoded_53._view_forum_as_messages,
                                                               6),
                                                              (Data.Maybe.isJust to_be_encoded_53._stories_pinned_available,
                                                               5),
                                                              (Data.Maybe.isJust to_be_encoded_53._translations_disabled,
                                                               3),
                                                              (Data.Maybe.isJust to_be_encoded_53._participants_hidden,
                                                               2),
                                                              (Data.Maybe.isJust to_be_encoded_53._antispam,
                                                               1),
                                                              (Data.Maybe.isJust to_be_encoded_53._can_delete_channel,
                                                               0)];
                                      Data.Binary.put to_be_encoded_53._can_delete_channel;
                                      Data.Binary.put to_be_encoded_53._antispam;
                                      Data.Binary.put to_be_encoded_53._participants_hidden;
                                      Data.Binary.put to_be_encoded_53._translations_disabled;
                                      Data.Binary.put to_be_encoded_53._stories_pinned_available;
                                      Data.Binary.put to_be_encoded_53._view_forum_as_messages;
                                      Data.Binary.put to_be_encoded_53._id;
                                      Data.Binary.put to_be_encoded_53._about;
                                      Data.Binary.put to_be_encoded_53._participants_count;
                                      Data.Binary.put to_be_encoded_53._admins_count;
                                      Data.Binary.put to_be_encoded_53._kicked_count;
                                      Data.Binary.put to_be_encoded_53._banned_count;
                                      Data.Binary.put to_be_encoded_53._online_count;
                                      Data.Binary.put to_be_encoded_53._read_inbox_max_id;
                                      Data.Binary.put to_be_encoded_53._read_outbox_max_id;
                                      Data.Binary.put to_be_encoded_53._unread_count;
                                      Data.Binary.put to_be_encoded_53._chat_photo;
                                      Data.Binary.put to_be_encoded_53._notify_settings;
                                      Data.Binary.put to_be_encoded_53._exported_invite;
                                      Data.Binary.put to_be_encoded_53._bot_info;
                                      Data.Binary.put to_be_encoded_53._migrated_from_chat_id;
                                      Data.Binary.put to_be_encoded_53._migrated_from_max_id;
                                      Data.Binary.put to_be_encoded_53._pinned_msg_id;
                                      Data.Binary.put to_be_encoded_53._stickerset;
                                      Data.Binary.put to_be_encoded_53._available_min_id;
                                      Data.Binary.put to_be_encoded_53._folder_id;
                                      Data.Binary.put to_be_encoded_53._linked_chat_id;
                                      Data.Binary.put to_be_encoded_53._location;
                                      Data.Binary.put to_be_encoded_53._slowmode_seconds;
                                      Data.Binary.put to_be_encoded_53._slowmode_next_send_date;
                                      Data.Binary.put to_be_encoded_53._stats_dc;
                                      Data.Binary.put to_be_encoded_53._pts;
                                      Data.Binary.put to_be_encoded_53._call;
                                      Data.Binary.put to_be_encoded_53._ttl_period;
                                      Data.Binary.put to_be_encoded_53._pending_suggestions;
                                      Data.Binary.put to_be_encoded_53._groupcall_default_join_as;
                                      Data.Binary.put to_be_encoded_53._theme_emoticon;
                                      Data.Binary.put to_be_encoded_53._requests_pending;
                                      Data.Binary.put to_be_encoded_53._recent_requesters;
                                      Data.Binary.put to_be_encoded_53._default_send_as;
                                      Data.Binary.put to_be_encoded_53._available_reactions;
                                      Data.Binary.put to_be_encoded_53._stories;
                                      Data.Binary.put to_be_encoded_53._wallpaper}}
instance Data.Binary.Binary ChatFull'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _can_set_username_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 7);
                     _has_scheduled_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 8);
                     _translations_disabled_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 19);
                     _id_4 <- Data.Binary.get;
                     _about_5 <- Data.Binary.get;
                     _participants_6 <- Data.Binary.get;
                     _chat_photo_7 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _notify_settings_8 <- Data.Binary.get;
                     _exported_invite_9 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 13);
                     _bot_info_10 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     _pinned_msg_id_11 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 6);
                     _folder_id_12 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 11);
                     _call_13 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 12);
                     _ttl_period_14 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 14);
                     _groupcall_default_join_as_15 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 15);
                     _theme_emoticon_16 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 16);
                     _requests_pending_17 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 17);
                     _recent_requesters_18 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 17);
                     _available_reactions_19 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 18);
                     GHC.Base.pure (ChatFull' _can_set_username_1 _has_scheduled_2 _translations_disabled_3 _id_4 _about_5 _participants_6 _chat_photo_7 _notify_settings_8 _exported_invite_9 _bot_info_10 _pinned_msg_id_11 _folder_id_12 _call_13 _ttl_period_14 _groupcall_default_join_as_15 _theme_emoticon_16 _requests_pending_17 _recent_requesters_18 _available_reactions_19)};
           put to_be_encoded_20 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_20._available_reactions,
                                                               18),
                                                              (Data.Maybe.isJust to_be_encoded_20._recent_requesters,
                                                               17),
                                                              (Data.Maybe.isJust to_be_encoded_20._requests_pending,
                                                               17),
                                                              (Data.Maybe.isJust to_be_encoded_20._theme_emoticon,
                                                               16),
                                                              (Data.Maybe.isJust to_be_encoded_20._groupcall_default_join_as,
                                                               15),
                                                              (Data.Maybe.isJust to_be_encoded_20._ttl_period,
                                                               14),
                                                              (Data.Maybe.isJust to_be_encoded_20._call,
                                                               12),
                                                              (Data.Maybe.isJust to_be_encoded_20._folder_id,
                                                               11),
                                                              (Data.Maybe.isJust to_be_encoded_20._pinned_msg_id,
                                                               6),
                                                              (Data.Maybe.isJust to_be_encoded_20._bot_info,
                                                               3),
                                                              (Data.Maybe.isJust to_be_encoded_20._exported_invite,
                                                               13),
                                                              (Data.Maybe.isJust to_be_encoded_20._chat_photo,
                                                               2),
                                                              (Data.Maybe.isJust to_be_encoded_20._translations_disabled,
                                                               19),
                                                              (Data.Maybe.isJust to_be_encoded_20._has_scheduled,
                                                               8),
                                                              (Data.Maybe.isJust to_be_encoded_20._can_set_username,
                                                               7)];
                                      Data.Binary.put to_be_encoded_20._can_set_username;
                                      Data.Binary.put to_be_encoded_20._has_scheduled;
                                      Data.Binary.put to_be_encoded_20._translations_disabled;
                                      Data.Binary.put to_be_encoded_20._id;
                                      Data.Binary.put to_be_encoded_20._about;
                                      Data.Binary.put to_be_encoded_20._participants;
                                      Data.Binary.put to_be_encoded_20._chat_photo;
                                      Data.Binary.put to_be_encoded_20._notify_settings;
                                      Data.Binary.put to_be_encoded_20._exported_invite;
                                      Data.Binary.put to_be_encoded_20._bot_info;
                                      Data.Binary.put to_be_encoded_20._pinned_msg_id;
                                      Data.Binary.put to_be_encoded_20._folder_id;
                                      Data.Binary.put to_be_encoded_20._call;
                                      Data.Binary.put to_be_encoded_20._ttl_period;
                                      Data.Binary.put to_be_encoded_20._groupcall_default_join_as;
                                      Data.Binary.put to_be_encoded_20._theme_emoticon;
                                      Data.Binary.put to_be_encoded_20._requests_pending;
                                      Data.Binary.put to_be_encoded_20._recent_requesters;
                                      Data.Binary.put to_be_encoded_20._available_reactions}}
data ChatFull
    = ChannelFull !ChannelFull'
    | ChatFull !ChatFull'
data ChannelFull'
    = ChannelFull' {_can_view_participants :: !(Maybe True'),
                    _can_set_username :: !(Maybe True'),
                    _can_set_stickers :: !(Maybe True'),
                    _hidden_prehistory :: !(Maybe True'),
                    _can_set_location :: !(Maybe True'),
                    _has_scheduled :: !(Maybe True'),
                    _can_view_stats :: !(Maybe True'),
                    _blocked :: !(Maybe True'),
                    _can_delete_channel :: !(Maybe True'),
                    _antispam :: !(Maybe True'),
                    _participants_hidden :: !(Maybe True'),
                    _translations_disabled :: !(Maybe True'),
                    _stories_pinned_available :: !(Maybe True'),
                    _view_forum_as_messages :: !(Maybe True'),
                    _id :: !Long',
                    _about :: !String',
                    _participants_count :: !(Maybe Int'),
                    _admins_count :: !(Maybe Int'),
                    _kicked_count :: !(Maybe Int'),
                    _banned_count :: !(Maybe Int'),
                    _online_count :: !(Maybe Int'),
                    _read_inbox_max_id :: !Int',
                    _read_outbox_max_id :: !Int',
                    _unread_count :: !Int',
                    _chat_photo :: !Photo,
                    _notify_settings :: !PeerNotifySettings,
                    _exported_invite :: !(Maybe ExportedChatInvite),
                    _bot_info :: !(Vector BotInfo),
                    _migrated_from_chat_id :: !(Maybe Long'),
                    _migrated_from_max_id :: !(Maybe Int'),
                    _pinned_msg_id :: !(Maybe Int'),
                    _stickerset :: !(Maybe StickerSet),
                    _available_min_id :: !(Maybe Int'),
                    _folder_id :: !(Maybe Int'),
                    _linked_chat_id :: !(Maybe Long'),
                    _location :: !(Maybe ChannelLocation),
                    _slowmode_seconds :: !(Maybe Int'),
                    _slowmode_next_send_date :: !(Maybe Int'),
                    _stats_dc :: !(Maybe Int'),
                    _pts :: !Int',
                    _call :: !(Maybe InputGroupCall),
                    _ttl_period :: !(Maybe Int'),
                    _pending_suggestions :: !(Maybe (Vector String')),
                    _groupcall_default_join_as :: !(Maybe Peer),
                    _theme_emoticon :: !(Maybe String'),
                    _requests_pending :: !(Maybe Int'),
                    _recent_requesters :: !(Maybe (Vector Long')),
                    _default_send_as :: !(Maybe Peer),
                    _available_reactions :: !(Maybe ChatReactions),
                    _stories :: !(Maybe PeerStories),
                    _wallpaper :: !(Maybe WallPaper)}
data ChatFull'
    = ChatFull' {_can_set_username :: !(Maybe True'),
                 _has_scheduled :: !(Maybe True'),
                 _translations_disabled :: !(Maybe True'),
                 _id :: !Long',
                 _about :: !String',
                 _participants :: !ChatParticipants,
                 _chat_photo :: !(Maybe Photo),
                 _notify_settings :: !PeerNotifySettings,
                 _exported_invite :: !(Maybe ExportedChatInvite),
                 _bot_info :: !(Maybe (Vector BotInfo)),
                 _pinned_msg_id :: !(Maybe Int'),
                 _folder_id :: !(Maybe Int'),
                 _call :: !(Maybe InputGroupCall),
                 _ttl_period :: !(Maybe Int'),
                 _groupcall_default_join_as :: !(Maybe Peer),
                 _theme_emoticon :: !(Maybe String'),
                 _requests_pending :: !(Maybe Int'),
                 _recent_requesters :: !(Maybe (Vector Long')),
                 _available_reactions :: !(Maybe ChatReactions)}
instance Data.Binary.Binary ChatFull
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {254528367 -> fmap ChannelFull Data.Binary.get;
                      3386052920 -> fmap ChatFull Data.Binary.get}};
           put (ChannelFull tmp_1) = do {Data.Binary.Put.putWord32le 254528367;
                                         Data.Binary.put tmp_1};
           put (ChatFull tmp_2) = do {Data.Binary.Put.putWord32le 3386052920;
                                      Data.Binary.put tmp_2}}
instance Data.Binary.Binary ChatInvite'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _channel_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _broadcast_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _public_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _megagroup_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     _request_needed_5 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 6);
                     _verified_6 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 7);
                     _scam_7 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 8);
                     _fake_8 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 9);
                     _title_9 <- Data.Binary.get;
                     _about_10 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 5);
                     _photo_11 <- Data.Binary.get;
                     _participants_count_12 <- Data.Binary.get;
                     _participants_13 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 4);
                     _color_14 <- Data.Binary.get;
                     GHC.Base.pure (ChatInvite' _channel_1 _broadcast_2 _public_3 _megagroup_4 _request_needed_5 _verified_6 _scam_7 _fake_8 _title_9 _about_10 _photo_11 _participants_count_12 _participants_13 _color_14)};
           put to_be_encoded_15 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_15._participants,
                                                               4),
                                                              (Data.Maybe.isJust to_be_encoded_15._about,
                                                               5),
                                                              (Data.Maybe.isJust to_be_encoded_15._fake,
                                                               9),
                                                              (Data.Maybe.isJust to_be_encoded_15._scam,
                                                               8),
                                                              (Data.Maybe.isJust to_be_encoded_15._verified,
                                                               7),
                                                              (Data.Maybe.isJust to_be_encoded_15._request_needed,
                                                               6),
                                                              (Data.Maybe.isJust to_be_encoded_15._megagroup,
                                                               3),
                                                              (Data.Maybe.isJust to_be_encoded_15._public,
                                                               2),
                                                              (Data.Maybe.isJust to_be_encoded_15._broadcast,
                                                               1),
                                                              (Data.Maybe.isJust to_be_encoded_15._channel,
                                                               0)];
                                      Data.Binary.put to_be_encoded_15._channel;
                                      Data.Binary.put to_be_encoded_15._broadcast;
                                      Data.Binary.put to_be_encoded_15._public;
                                      Data.Binary.put to_be_encoded_15._megagroup;
                                      Data.Binary.put to_be_encoded_15._request_needed;
                                      Data.Binary.put to_be_encoded_15._verified;
                                      Data.Binary.put to_be_encoded_15._scam;
                                      Data.Binary.put to_be_encoded_15._fake;
                                      Data.Binary.put to_be_encoded_15._title;
                                      Data.Binary.put to_be_encoded_15._about;
                                      Data.Binary.put to_be_encoded_15._photo;
                                      Data.Binary.put to_be_encoded_15._participants_count;
                                      Data.Binary.put to_be_encoded_15._participants;
                                      Data.Binary.put to_be_encoded_15._color}}
instance Data.Binary.Binary ChatInviteAlready'
    where {get = do {_chat_0 <- Data.Binary.get;
                     GHC.Base.pure (ChatInviteAlready' _chat_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._chat}
instance Data.Binary.Binary ChatInvitePeek'
    where {get = do {_chat_0 <- Data.Binary.get;
                     _expires_1 <- Data.Binary.get;
                     GHC.Base.pure (ChatInvitePeek' _chat_0 _expires_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._chat;
                                     Data.Binary.put to_be_encoded_2._expires}}
data ChatInvite
    = ChatInvite !ChatInvite'
    | ChatInviteAlready !ChatInviteAlready'
    | ChatInvitePeek !ChatInvitePeek'
data ChatInvite'
    = ChatInvite' {_channel :: !(Maybe True'),
                   _broadcast :: !(Maybe True'),
                   _public :: !(Maybe True'),
                   _megagroup :: !(Maybe True'),
                   _request_needed :: !(Maybe True'),
                   _verified :: !(Maybe True'),
                   _scam :: !(Maybe True'),
                   _fake :: !(Maybe True'),
                   _title :: !String',
                   _about :: !(Maybe String'),
                   _photo :: !Photo,
                   _participants_count :: !Int',
                   _participants :: !(Maybe (Vector User)),
                   _color :: !Int'}
data ChatInviteAlready' = ChatInviteAlready' {_chat :: !Chat}
data ChatInvitePeek'
    = ChatInvitePeek' {_chat :: !Chat, _expires :: !Int'}
instance Data.Binary.Binary ChatInvite
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3454069824 -> fmap ChatInvite Data.Binary.get;
                      1516793212 -> fmap ChatInviteAlready Data.Binary.get;
                      1634294960 -> fmap ChatInvitePeek Data.Binary.get}};
           put (ChatInvite tmp_1) = do {Data.Binary.Put.putWord32le 3454069824;
                                        Data.Binary.put tmp_1};
           put (ChatInviteAlready tmp_2) = do {Data.Binary.Put.putWord32le 1516793212;
                                               Data.Binary.put tmp_2};
           put (ChatInvitePeek tmp_3) = do {Data.Binary.Put.putWord32le 1634294960;
                                            Data.Binary.put tmp_3}}
instance Data.Binary.Binary ChatInviteImporter'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _requested_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _via_chatlist_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     _user_id_3 <- Data.Binary.get;
                     _date_4 <- Data.Binary.get;
                     _about_5 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _approved_by_6 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     GHC.Base.pure (ChatInviteImporter' _requested_1 _via_chatlist_2 _user_id_3 _date_4 _about_5 _approved_by_6)};
           put to_be_encoded_7 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_7._approved_by,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_7._about,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_7._via_chatlist,
                                                              3),
                                                             (Data.Maybe.isJust to_be_encoded_7._requested,
                                                              0)];
                                     Data.Binary.put to_be_encoded_7._requested;
                                     Data.Binary.put to_be_encoded_7._via_chatlist;
                                     Data.Binary.put to_be_encoded_7._user_id;
                                     Data.Binary.put to_be_encoded_7._date;
                                     Data.Binary.put to_be_encoded_7._about;
                                     Data.Binary.put to_be_encoded_7._approved_by}}
data ChatInviteImporter = ChatInviteImporter !ChatInviteImporter'
data ChatInviteImporter'
    = ChatInviteImporter' {_requested :: !(Maybe True'),
                           _via_chatlist :: !(Maybe True'),
                           _user_id :: !Long',
                           _date :: !Int',
                           _about :: !(Maybe String'),
                           _approved_by :: !(Maybe Long')}
instance Data.Binary.Binary ChatInviteImporter
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2354765785 -> fmap ChatInviteImporter Data.Binary.get}};
           put (ChatInviteImporter tmp_1) = do {Data.Binary.Put.putWord32le 2354765785;
                                                Data.Binary.put tmp_1}}
instance Data.Binary.Binary ChatOnlines'
    where {get = do {_onlines_0 <- Data.Binary.get;
                     GHC.Base.pure (ChatOnlines' _onlines_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._onlines}
data ChatOnlines = ChatOnlines !ChatOnlines'
data ChatOnlines' = ChatOnlines' {_onlines :: !Int'}
instance Data.Binary.Binary ChatOnlines
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {4030849616 -> fmap ChatOnlines Data.Binary.get}};
           put (ChatOnlines tmp_1) = do {Data.Binary.Put.putWord32le 4030849616;
                                         Data.Binary.put tmp_1}}
instance Data.Binary.Binary ChatParticipant'
    where {get = do {_user_id_0 <- Data.Binary.get;
                     _inviter_id_1 <- Data.Binary.get;
                     _date_2 <- Data.Binary.get;
                     GHC.Base.pure (ChatParticipant' _user_id_0 _inviter_id_1 _date_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._user_id;
                                     Data.Binary.put to_be_encoded_3._inviter_id;
                                     Data.Binary.put to_be_encoded_3._date}}
instance Data.Binary.Binary ChatParticipantAdmin'
    where {get = do {_user_id_0 <- Data.Binary.get;
                     _inviter_id_1 <- Data.Binary.get;
                     _date_2 <- Data.Binary.get;
                     GHC.Base.pure (ChatParticipantAdmin' _user_id_0 _inviter_id_1 _date_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._user_id;
                                     Data.Binary.put to_be_encoded_3._inviter_id;
                                     Data.Binary.put to_be_encoded_3._date}}
instance Data.Binary.Binary ChatParticipantCreator'
    where {get = do {_user_id_0 <- Data.Binary.get;
                     GHC.Base.pure (ChatParticipantCreator' _user_id_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._user_id}
data ChatParticipant
    = ChatParticipant !ChatParticipant'
    | ChatParticipantAdmin !ChatParticipantAdmin'
    | ChatParticipantCreator !ChatParticipantCreator'
data ChatParticipant'
    = ChatParticipant' {_user_id :: !Long',
                        _inviter_id :: !Long',
                        _date :: !Int'}
data ChatParticipantAdmin'
    = ChatParticipantAdmin' {_user_id :: !Long',
                             _inviter_id :: !Long',
                             _date :: !Int'}
data ChatParticipantCreator'
    = ChatParticipantCreator' {_user_id :: !Long'}
instance Data.Binary.Binary ChatParticipant
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3224190983 -> fmap ChatParticipant Data.Binary.get;
                      2694004571 -> fmap ChatParticipantAdmin Data.Binary.get;
                      3832270564 -> fmap ChatParticipantCreator Data.Binary.get}};
           put (ChatParticipant tmp_1) = do {Data.Binary.Put.putWord32le 3224190983;
                                             Data.Binary.put tmp_1};
           put (ChatParticipantAdmin tmp_2) = do {Data.Binary.Put.putWord32le 2694004571;
                                                  Data.Binary.put tmp_2};
           put (ChatParticipantCreator tmp_3) = do {Data.Binary.Put.putWord32le 3832270564;
                                                    Data.Binary.put tmp_3}}
instance Data.Binary.Binary ChatParticipants'
    where {get = do {_chat_id_0 <- Data.Binary.get;
                     _participants_1 <- Data.Binary.get;
                     _version_2 <- Data.Binary.get;
                     GHC.Base.pure (ChatParticipants' _chat_id_0 _participants_1 _version_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._chat_id;
                                     Data.Binary.put to_be_encoded_3._participants;
                                     Data.Binary.put to_be_encoded_3._version}}
instance Data.Binary.Binary ChatParticipantsForbidden'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _chat_id_1 <- Data.Binary.get;
                     _self_participant_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     GHC.Base.pure (ChatParticipantsForbidden' _chat_id_1 _self_participant_2)};
           put to_be_encoded_3 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_3._self_participant,
                                                              0)];
                                     Data.Binary.put to_be_encoded_3._chat_id;
                                     Data.Binary.put to_be_encoded_3._self_participant}}
data ChatParticipants
    = ChatParticipants !ChatParticipants'
    | ChatParticipantsForbidden !ChatParticipantsForbidden'
data ChatParticipants'
    = ChatParticipants' {_chat_id :: !Long',
                         _participants :: !(Vector ChatParticipant),
                         _version :: !Int'}
data ChatParticipantsForbidden'
    = ChatParticipantsForbidden' {_chat_id :: !Long',
                                  _self_participant :: !(Maybe ChatParticipant)}
instance Data.Binary.Binary ChatParticipants
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1018991608 -> fmap ChatParticipants Data.Binary.get;
                      2271466465 -> fmap ChatParticipantsForbidden Data.Binary.get}};
           put (ChatParticipants tmp_1) = do {Data.Binary.Put.putWord32le 1018991608;
                                              Data.Binary.put tmp_1};
           put (ChatParticipantsForbidden tmp_2) = do {Data.Binary.Put.putWord32le 2271466465;
                                                       Data.Binary.put tmp_2}}
instance Data.Binary.Binary ChatPhoto'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _has_video_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _photo_id_2 <- Data.Binary.get;
                     _stripped_thumb_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _dc_id_4 <- Data.Binary.get;
                     GHC.Base.pure (ChatPhoto' _has_video_1 _photo_id_2 _stripped_thumb_3 _dc_id_4)};
           put to_be_encoded_5 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_5._stripped_thumb,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_5._has_video,
                                                              0)];
                                     Data.Binary.put to_be_encoded_5._has_video;
                                     Data.Binary.put to_be_encoded_5._photo_id;
                                     Data.Binary.put to_be_encoded_5._stripped_thumb;
                                     Data.Binary.put to_be_encoded_5._dc_id}}
instance Data.Binary.Binary ChatPhotoEmpty'
    where {get = GHC.Base.pure ChatPhotoEmpty';
           put to_be_encoded_0 = do GHC.Base.pure ()}
data ChatPhoto
    = ChatPhoto !ChatPhoto'
    | ChatPhotoEmpty !ChatPhotoEmpty'
data ChatPhoto'
    = ChatPhoto' {_has_video :: !(Maybe True'),
                  _photo_id :: !Long',
                  _stripped_thumb :: !(Maybe Bytes'),
                  _dc_id :: !Int'}
data ChatPhotoEmpty' = ChatPhotoEmpty' {}
instance Data.Binary.Binary ChatPhoto
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {476978193 -> fmap ChatPhoto Data.Binary.get;
                      935395612 -> fmap ChatPhotoEmpty Data.Binary.get}};
           put (ChatPhoto tmp_1) = do {Data.Binary.Put.putWord32le 476978193;
                                       Data.Binary.put tmp_1};
           put (ChatPhotoEmpty tmp_2) = do {Data.Binary.Put.putWord32le 935395612;
                                            Data.Binary.put tmp_2}}
instance Data.Binary.Binary ChatReactionsAll'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _allow_custom_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     GHC.Base.pure (ChatReactionsAll' _allow_custom_1)};
           put to_be_encoded_2 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_2._allow_custom,
                                                              0)];
                                     Data.Binary.put to_be_encoded_2._allow_custom}}
instance Data.Binary.Binary ChatReactionsNone'
    where {get = GHC.Base.pure ChatReactionsNone';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary ChatReactionsSome'
    where {get = do {_reactions_0 <- Data.Binary.get;
                     GHC.Base.pure (ChatReactionsSome' _reactions_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._reactions}
data ChatReactions
    = ChatReactionsAll !ChatReactionsAll'
    | ChatReactionsNone !ChatReactionsNone'
    | ChatReactionsSome !ChatReactionsSome'
data ChatReactionsAll'
    = ChatReactionsAll' {_allow_custom :: !(Maybe True')}
data ChatReactionsNone' = ChatReactionsNone' {}
data ChatReactionsSome'
    = ChatReactionsSome' {_reactions :: !(Vector Reaction)}
instance Data.Binary.Binary ChatReactions
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1385335754 -> fmap ChatReactionsAll Data.Binary.get;
                      3942396604 -> fmap ChatReactionsNone Data.Binary.get;
                      1713193015 -> fmap ChatReactionsSome Data.Binary.get}};
           put (ChatReactionsAll tmp_1) = do {Data.Binary.Put.putWord32le 1385335754;
                                              Data.Binary.put tmp_1};
           put (ChatReactionsNone tmp_2) = do {Data.Binary.Put.putWord32le 3942396604;
                                               Data.Binary.put tmp_2};
           put (ChatReactionsSome tmp_3) = do {Data.Binary.Put.putWord32le 1713193015;
                                               Data.Binary.put tmp_3}}
instance Data.Binary.Binary CodeSettings'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _allow_flashcall_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _current_number_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _allow_app_hash_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 4);
                     _allow_missed_call_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 5);
                     _allow_firebase_5 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 7);
                     _logout_tokens_6 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 6);
                     _token_7 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 8);
                     _app_sandbox_8 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 8);
                     GHC.Base.pure (CodeSettings' _allow_flashcall_1 _current_number_2 _allow_app_hash_3 _allow_missed_call_4 _allow_firebase_5 _logout_tokens_6 _token_7 _app_sandbox_8)};
           put to_be_encoded_9 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_9._app_sandbox,
                                                              8),
                                                             (Data.Maybe.isJust to_be_encoded_9._token,
                                                              8),
                                                             (Data.Maybe.isJust to_be_encoded_9._logout_tokens,
                                                              6),
                                                             (Data.Maybe.isJust to_be_encoded_9._allow_firebase,
                                                              7),
                                                             (Data.Maybe.isJust to_be_encoded_9._allow_missed_call,
                                                              5),
                                                             (Data.Maybe.isJust to_be_encoded_9._allow_app_hash,
                                                              4),
                                                             (Data.Maybe.isJust to_be_encoded_9._current_number,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_9._allow_flashcall,
                                                              0)];
                                     Data.Binary.put to_be_encoded_9._allow_flashcall;
                                     Data.Binary.put to_be_encoded_9._current_number;
                                     Data.Binary.put to_be_encoded_9._allow_app_hash;
                                     Data.Binary.put to_be_encoded_9._allow_missed_call;
                                     Data.Binary.put to_be_encoded_9._allow_firebase;
                                     Data.Binary.put to_be_encoded_9._logout_tokens;
                                     Data.Binary.put to_be_encoded_9._token;
                                     Data.Binary.put to_be_encoded_9._app_sandbox}}
data CodeSettings = CodeSettings !CodeSettings'
data CodeSettings'
    = CodeSettings' {_allow_flashcall :: !(Maybe True'),
                     _current_number :: !(Maybe True'),
                     _allow_app_hash :: !(Maybe True'),
                     _allow_missed_call :: !(Maybe True'),
                     _allow_firebase :: !(Maybe True'),
                     _logout_tokens :: !(Maybe (Vector Bytes')),
                     _token :: !(Maybe String'),
                     _app_sandbox :: !(Maybe Bool)}
instance Data.Binary.Binary CodeSettings
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2904898936 -> fmap CodeSettings Data.Binary.get}};
           put (CodeSettings tmp_1) = do {Data.Binary.Put.putWord32le 2904898936;
                                          Data.Binary.put tmp_1}}
instance Data.Binary.Binary Config'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _default_p2p_contacts_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     _preload_featured_stickers_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 4);
                     _revoke_pm_inbox_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 6);
                     _blocked_mode_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 8);
                     _force_try_ipv6_5 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 14);
                     _date_6 <- Data.Binary.get;
                     _expires_7 <- Data.Binary.get;
                     _test_mode_8 <- Data.Binary.get;
                     _this_dc_9 <- Data.Binary.get;
                     _dc_options_10 <- Data.Binary.get;
                     _dc_txt_domain_name_11 <- Data.Binary.get;
                     _chat_size_max_12 <- Data.Binary.get;
                     _megagroup_size_max_13 <- Data.Binary.get;
                     _forwarded_count_max_14 <- Data.Binary.get;
                     _online_update_period_ms_15 <- Data.Binary.get;
                     _offline_blur_timeout_ms_16 <- Data.Binary.get;
                     _offline_idle_timeout_ms_17 <- Data.Binary.get;
                     _online_cloud_timeout_ms_18 <- Data.Binary.get;
                     _notify_cloud_delay_ms_19 <- Data.Binary.get;
                     _notify_default_delay_ms_20 <- Data.Binary.get;
                     _push_chat_period_ms_21 <- Data.Binary.get;
                     _push_chat_limit_22 <- Data.Binary.get;
                     _edit_time_limit_23 <- Data.Binary.get;
                     _revoke_time_limit_24 <- Data.Binary.get;
                     _revoke_pm_time_limit_25 <- Data.Binary.get;
                     _rating_e_decay_26 <- Data.Binary.get;
                     _stickers_recent_limit_27 <- Data.Binary.get;
                     _channels_read_media_period_28 <- Data.Binary.get;
                     _tmp_sessions_29 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _call_receive_timeout_ms_30 <- Data.Binary.get;
                     _call_ring_timeout_ms_31 <- Data.Binary.get;
                     _call_connect_timeout_ms_32 <- Data.Binary.get;
                     _call_packet_timeout_ms_33 <- Data.Binary.get;
                     _me_url_prefix_34 <- Data.Binary.get;
                     _autoupdate_url_prefix_35 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 7);
                     _gif_search_username_36 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 9);
                     _venue_search_username_37 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 10);
                     _img_search_username_38 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 11);
                     _static_maps_provider_39 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 12);
                     _caption_length_max_40 <- Data.Binary.get;
                     _message_length_max_41 <- Data.Binary.get;
                     _webfile_dc_id_42 <- Data.Binary.get;
                     _suggested_lang_code_43 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _lang_pack_version_44 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _base_lang_pack_version_45 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _reactions_default_46 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 15);
                     _autologin_token_47 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 16);
                     GHC.Base.pure (Config' _default_p2p_contacts_1 _preload_featured_stickers_2 _revoke_pm_inbox_3 _blocked_mode_4 _force_try_ipv6_5 _date_6 _expires_7 _test_mode_8 _this_dc_9 _dc_options_10 _dc_txt_domain_name_11 _chat_size_max_12 _megagroup_size_max_13 _forwarded_count_max_14 _online_update_period_ms_15 _offline_blur_timeout_ms_16 _offline_idle_timeout_ms_17 _online_cloud_timeout_ms_18 _notify_cloud_delay_ms_19 _notify_default_delay_ms_20 _push_chat_period_ms_21 _push_chat_limit_22 _edit_time_limit_23 _revoke_time_limit_24 _revoke_pm_time_limit_25 _rating_e_decay_26 _stickers_recent_limit_27 _channels_read_media_period_28 _tmp_sessions_29 _call_receive_timeout_ms_30 _call_ring_timeout_ms_31 _call_connect_timeout_ms_32 _call_packet_timeout_ms_33 _me_url_prefix_34 _autoupdate_url_prefix_35 _gif_search_username_36 _venue_search_username_37 _img_search_username_38 _static_maps_provider_39 _caption_length_max_40 _message_length_max_41 _webfile_dc_id_42 _suggested_lang_code_43 _lang_pack_version_44 _base_lang_pack_version_45 _reactions_default_46 _autologin_token_47)};
           put to_be_encoded_48 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_48._autologin_token,
                                                               16),
                                                              (Data.Maybe.isJust to_be_encoded_48._reactions_default,
                                                               15),
                                                              (Data.Maybe.isJust to_be_encoded_48._base_lang_pack_version,
                                                               2),
                                                              (Data.Maybe.isJust to_be_encoded_48._lang_pack_version,
                                                               2),
                                                              (Data.Maybe.isJust to_be_encoded_48._suggested_lang_code,
                                                               2),
                                                              (Data.Maybe.isJust to_be_encoded_48._static_maps_provider,
                                                               12),
                                                              (Data.Maybe.isJust to_be_encoded_48._img_search_username,
                                                               11),
                                                              (Data.Maybe.isJust to_be_encoded_48._venue_search_username,
                                                               10),
                                                              (Data.Maybe.isJust to_be_encoded_48._gif_search_username,
                                                               9),
                                                              (Data.Maybe.isJust to_be_encoded_48._autoupdate_url_prefix,
                                                               7),
                                                              (Data.Maybe.isJust to_be_encoded_48._tmp_sessions,
                                                               0),
                                                              (Data.Maybe.isJust to_be_encoded_48._force_try_ipv6,
                                                               14),
                                                              (Data.Maybe.isJust to_be_encoded_48._blocked_mode,
                                                               8),
                                                              (Data.Maybe.isJust to_be_encoded_48._revoke_pm_inbox,
                                                               6),
                                                              (Data.Maybe.isJust to_be_encoded_48._preload_featured_stickers,
                                                               4),
                                                              (Data.Maybe.isJust to_be_encoded_48._default_p2p_contacts,
                                                               3)];
                                      Data.Binary.put to_be_encoded_48._default_p2p_contacts;
                                      Data.Binary.put to_be_encoded_48._preload_featured_stickers;
                                      Data.Binary.put to_be_encoded_48._revoke_pm_inbox;
                                      Data.Binary.put to_be_encoded_48._blocked_mode;
                                      Data.Binary.put to_be_encoded_48._force_try_ipv6;
                                      Data.Binary.put to_be_encoded_48._date;
                                      Data.Binary.put to_be_encoded_48._expires;
                                      Data.Binary.put to_be_encoded_48._test_mode;
                                      Data.Binary.put to_be_encoded_48._this_dc;
                                      Data.Binary.put to_be_encoded_48._dc_options;
                                      Data.Binary.put to_be_encoded_48._dc_txt_domain_name;
                                      Data.Binary.put to_be_encoded_48._chat_size_max;
                                      Data.Binary.put to_be_encoded_48._megagroup_size_max;
                                      Data.Binary.put to_be_encoded_48._forwarded_count_max;
                                      Data.Binary.put to_be_encoded_48._online_update_period_ms;
                                      Data.Binary.put to_be_encoded_48._offline_blur_timeout_ms;
                                      Data.Binary.put to_be_encoded_48._offline_idle_timeout_ms;
                                      Data.Binary.put to_be_encoded_48._online_cloud_timeout_ms;
                                      Data.Binary.put to_be_encoded_48._notify_cloud_delay_ms;
                                      Data.Binary.put to_be_encoded_48._notify_default_delay_ms;
                                      Data.Binary.put to_be_encoded_48._push_chat_period_ms;
                                      Data.Binary.put to_be_encoded_48._push_chat_limit;
                                      Data.Binary.put to_be_encoded_48._edit_time_limit;
                                      Data.Binary.put to_be_encoded_48._revoke_time_limit;
                                      Data.Binary.put to_be_encoded_48._revoke_pm_time_limit;
                                      Data.Binary.put to_be_encoded_48._rating_e_decay;
                                      Data.Binary.put to_be_encoded_48._stickers_recent_limit;
                                      Data.Binary.put to_be_encoded_48._channels_read_media_period;
                                      Data.Binary.put to_be_encoded_48._tmp_sessions;
                                      Data.Binary.put to_be_encoded_48._call_receive_timeout_ms;
                                      Data.Binary.put to_be_encoded_48._call_ring_timeout_ms;
                                      Data.Binary.put to_be_encoded_48._call_connect_timeout_ms;
                                      Data.Binary.put to_be_encoded_48._call_packet_timeout_ms;
                                      Data.Binary.put to_be_encoded_48._me_url_prefix;
                                      Data.Binary.put to_be_encoded_48._autoupdate_url_prefix;
                                      Data.Binary.put to_be_encoded_48._gif_search_username;
                                      Data.Binary.put to_be_encoded_48._venue_search_username;
                                      Data.Binary.put to_be_encoded_48._img_search_username;
                                      Data.Binary.put to_be_encoded_48._static_maps_provider;
                                      Data.Binary.put to_be_encoded_48._caption_length_max;
                                      Data.Binary.put to_be_encoded_48._message_length_max;
                                      Data.Binary.put to_be_encoded_48._webfile_dc_id;
                                      Data.Binary.put to_be_encoded_48._suggested_lang_code;
                                      Data.Binary.put to_be_encoded_48._lang_pack_version;
                                      Data.Binary.put to_be_encoded_48._base_lang_pack_version;
                                      Data.Binary.put to_be_encoded_48._reactions_default;
                                      Data.Binary.put to_be_encoded_48._autologin_token}}
data Config = Config !Config'
data Config'
    = Config' {_default_p2p_contacts :: !(Maybe True'),
               _preload_featured_stickers :: !(Maybe True'),
               _revoke_pm_inbox :: !(Maybe True'),
               _blocked_mode :: !(Maybe True'),
               _force_try_ipv6 :: !(Maybe True'),
               _date :: !Int',
               _expires :: !Int',
               _test_mode :: !Bool,
               _this_dc :: !Int',
               _dc_options :: !(Vector DcOption),
               _dc_txt_domain_name :: !String',
               _chat_size_max :: !Int',
               _megagroup_size_max :: !Int',
               _forwarded_count_max :: !Int',
               _online_update_period_ms :: !Int',
               _offline_blur_timeout_ms :: !Int',
               _offline_idle_timeout_ms :: !Int',
               _online_cloud_timeout_ms :: !Int',
               _notify_cloud_delay_ms :: !Int',
               _notify_default_delay_ms :: !Int',
               _push_chat_period_ms :: !Int',
               _push_chat_limit :: !Int',
               _edit_time_limit :: !Int',
               _revoke_time_limit :: !Int',
               _revoke_pm_time_limit :: !Int',
               _rating_e_decay :: !Int',
               _stickers_recent_limit :: !Int',
               _channels_read_media_period :: !Int',
               _tmp_sessions :: !(Maybe Int'),
               _call_receive_timeout_ms :: !Int',
               _call_ring_timeout_ms :: !Int',
               _call_connect_timeout_ms :: !Int',
               _call_packet_timeout_ms :: !Int',
               _me_url_prefix :: !String',
               _autoupdate_url_prefix :: !(Maybe String'),
               _gif_search_username :: !(Maybe String'),
               _venue_search_username :: !(Maybe String'),
               _img_search_username :: !(Maybe String'),
               _static_maps_provider :: !(Maybe String'),
               _caption_length_max :: !Int',
               _message_length_max :: !Int',
               _webfile_dc_id :: !Int',
               _suggested_lang_code :: !(Maybe String'),
               _lang_pack_version :: !(Maybe Int'),
               _base_lang_pack_version :: !(Maybe Int'),
               _reactions_default :: !(Maybe Reaction),
               _autologin_token :: !(Maybe String')}
instance Data.Binary.Binary Config
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3424265246 -> fmap Config Data.Binary.get}};
           put (Config tmp_1) = do {Data.Binary.Put.putWord32le 3424265246;
                                    Data.Binary.put tmp_1}}
instance Data.Binary.Binary Contact'
    where {get = do {_user_id_0 <- Data.Binary.get;
                     _mutual_1 <- Data.Binary.get;
                     GHC.Base.pure (Contact' _user_id_0 _mutual_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._user_id;
                                     Data.Binary.put to_be_encoded_2._mutual}}
data Contact = Contact !Contact'
data Contact' = Contact' {_user_id :: !Long', _mutual :: !Bool}
instance Data.Binary.Binary Contact
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {341499403 -> fmap Contact Data.Binary.get}};
           put (Contact tmp_1) = do {Data.Binary.Put.putWord32le 341499403;
                                     Data.Binary.put tmp_1}}
instance Data.Binary.Binary ContactStatus'
    where {get = do {_user_id_0 <- Data.Binary.get;
                     _status_1 <- Data.Binary.get;
                     GHC.Base.pure (ContactStatus' _user_id_0 _status_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._user_id;
                                     Data.Binary.put to_be_encoded_2._status}}
data ContactStatus = ContactStatus !ContactStatus'
data ContactStatus'
    = ContactStatus' {_user_id :: !Long', _status :: !UserStatus}
instance Data.Binary.Binary ContactStatus
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {383348795 -> fmap ContactStatus Data.Binary.get}};
           put (ContactStatus tmp_1) = do {Data.Binary.Put.putWord32le 383348795;
                                           Data.Binary.put tmp_1}}
instance Data.Binary.Binary DataJSON'
    where {get = do {_data_0 <- Data.Binary.get;
                     GHC.Base.pure (DataJSON' _data_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._data}
data DataJSON = DataJSON !DataJSON'
data DataJSON' = DataJSON' {_data :: !String'}
instance Data.Binary.Binary DataJSON
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2104790276 -> fmap DataJSON Data.Binary.get}};
           put (DataJSON tmp_1) = do {Data.Binary.Put.putWord32le 2104790276;
                                      Data.Binary.put tmp_1}}
instance Data.Binary.Binary DcOption'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _ipv6_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _media_only_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _tcpo_only_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _cdn_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     _static_5 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 4);
                     _this_port_only_6 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 5);
                     _id_7 <- Data.Binary.get;
                     _ip_address_8 <- Data.Binary.get;
                     _port_9 <- Data.Binary.get;
                     _secret_10 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 10);
                     GHC.Base.pure (DcOption' _ipv6_1 _media_only_2 _tcpo_only_3 _cdn_4 _static_5 _this_port_only_6 _id_7 _ip_address_8 _port_9 _secret_10)};
           put to_be_encoded_11 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_11._secret,
                                                               10),
                                                              (Data.Maybe.isJust to_be_encoded_11._this_port_only,
                                                               5),
                                                              (Data.Maybe.isJust to_be_encoded_11._static,
                                                               4),
                                                              (Data.Maybe.isJust to_be_encoded_11._cdn,
                                                               3),
                                                              (Data.Maybe.isJust to_be_encoded_11._tcpo_only,
                                                               2),
                                                              (Data.Maybe.isJust to_be_encoded_11._media_only,
                                                               1),
                                                              (Data.Maybe.isJust to_be_encoded_11._ipv6,
                                                               0)];
                                      Data.Binary.put to_be_encoded_11._ipv6;
                                      Data.Binary.put to_be_encoded_11._media_only;
                                      Data.Binary.put to_be_encoded_11._tcpo_only;
                                      Data.Binary.put to_be_encoded_11._cdn;
                                      Data.Binary.put to_be_encoded_11._static;
                                      Data.Binary.put to_be_encoded_11._this_port_only;
                                      Data.Binary.put to_be_encoded_11._id;
                                      Data.Binary.put to_be_encoded_11._ip_address;
                                      Data.Binary.put to_be_encoded_11._port;
                                      Data.Binary.put to_be_encoded_11._secret}}
data DcOption = DcOption !DcOption'
data DcOption'
    = DcOption' {_ipv6 :: !(Maybe True'),
                 _media_only :: !(Maybe True'),
                 _tcpo_only :: !(Maybe True'),
                 _cdn :: !(Maybe True'),
                 _static :: !(Maybe True'),
                 _this_port_only :: !(Maybe True'),
                 _id :: !Int',
                 _ip_address :: !String',
                 _port :: !Int',
                 _secret :: !(Maybe Bytes')}
instance Data.Binary.Binary DcOption
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {414687501 -> fmap DcOption Data.Binary.get}};
           put (DcOption tmp_1) = do {Data.Binary.Put.putWord32le 414687501;
                                      Data.Binary.put tmp_1}}
instance Data.Binary.Binary DefaultHistoryTTL'
    where {get = do {_period_0 <- Data.Binary.get;
                     GHC.Base.pure (DefaultHistoryTTL' _period_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._period}
data DefaultHistoryTTL = DefaultHistoryTTL !DefaultHistoryTTL'
data DefaultHistoryTTL' = DefaultHistoryTTL' {_period :: !Int'}
instance Data.Binary.Binary DefaultHistoryTTL
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1135897376 -> fmap DefaultHistoryTTL Data.Binary.get}};
           put (DefaultHistoryTTL tmp_1) = do {Data.Binary.Put.putWord32le 1135897376;
                                               Data.Binary.put tmp_1}}
instance Data.Binary.Binary Dialog'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _pinned_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _unread_mark_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     _view_forum_as_messages_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 6);
                     _peer_4 <- Data.Binary.get;
                     _top_message_5 <- Data.Binary.get;
                     _read_inbox_max_id_6 <- Data.Binary.get;
                     _read_outbox_max_id_7 <- Data.Binary.get;
                     _unread_count_8 <- Data.Binary.get;
                     _unread_mentions_count_9 <- Data.Binary.get;
                     _unread_reactions_count_10 <- Data.Binary.get;
                     _notify_settings_11 <- Data.Binary.get;
                     _pts_12 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _draft_13 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _folder_id_14 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 4);
                     _ttl_period_15 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 5);
                     GHC.Base.pure (Dialog' _pinned_1 _unread_mark_2 _view_forum_as_messages_3 _peer_4 _top_message_5 _read_inbox_max_id_6 _read_outbox_max_id_7 _unread_count_8 _unread_mentions_count_9 _unread_reactions_count_10 _notify_settings_11 _pts_12 _draft_13 _folder_id_14 _ttl_period_15)};
           put to_be_encoded_16 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_16._ttl_period,
                                                               5),
                                                              (Data.Maybe.isJust to_be_encoded_16._folder_id,
                                                               4),
                                                              (Data.Maybe.isJust to_be_encoded_16._draft,
                                                               1),
                                                              (Data.Maybe.isJust to_be_encoded_16._pts,
                                                               0),
                                                              (Data.Maybe.isJust to_be_encoded_16._view_forum_as_messages,
                                                               6),
                                                              (Data.Maybe.isJust to_be_encoded_16._unread_mark,
                                                               3),
                                                              (Data.Maybe.isJust to_be_encoded_16._pinned,
                                                               2)];
                                      Data.Binary.put to_be_encoded_16._pinned;
                                      Data.Binary.put to_be_encoded_16._unread_mark;
                                      Data.Binary.put to_be_encoded_16._view_forum_as_messages;
                                      Data.Binary.put to_be_encoded_16._peer;
                                      Data.Binary.put to_be_encoded_16._top_message;
                                      Data.Binary.put to_be_encoded_16._read_inbox_max_id;
                                      Data.Binary.put to_be_encoded_16._read_outbox_max_id;
                                      Data.Binary.put to_be_encoded_16._unread_count;
                                      Data.Binary.put to_be_encoded_16._unread_mentions_count;
                                      Data.Binary.put to_be_encoded_16._unread_reactions_count;
                                      Data.Binary.put to_be_encoded_16._notify_settings;
                                      Data.Binary.put to_be_encoded_16._pts;
                                      Data.Binary.put to_be_encoded_16._draft;
                                      Data.Binary.put to_be_encoded_16._folder_id;
                                      Data.Binary.put to_be_encoded_16._ttl_period}}
instance Data.Binary.Binary DialogFolder'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _pinned_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _folder_2 <- Data.Binary.get;
                     _peer_3 <- Data.Binary.get;
                     _top_message_4 <- Data.Binary.get;
                     _unread_muted_peers_count_5 <- Data.Binary.get;
                     _unread_unmuted_peers_count_6 <- Data.Binary.get;
                     _unread_muted_messages_count_7 <- Data.Binary.get;
                     _unread_unmuted_messages_count_8 <- Data.Binary.get;
                     GHC.Base.pure (DialogFolder' _pinned_1 _folder_2 _peer_3 _top_message_4 _unread_muted_peers_count_5 _unread_unmuted_peers_count_6 _unread_muted_messages_count_7 _unread_unmuted_messages_count_8)};
           put to_be_encoded_9 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_9._pinned,
                                                              2)];
                                     Data.Binary.put to_be_encoded_9._pinned;
                                     Data.Binary.put to_be_encoded_9._folder;
                                     Data.Binary.put to_be_encoded_9._peer;
                                     Data.Binary.put to_be_encoded_9._top_message;
                                     Data.Binary.put to_be_encoded_9._unread_muted_peers_count;
                                     Data.Binary.put to_be_encoded_9._unread_unmuted_peers_count;
                                     Data.Binary.put to_be_encoded_9._unread_muted_messages_count;
                                     Data.Binary.put to_be_encoded_9._unread_unmuted_messages_count}}
data Dialog
    = Dialog !Dialog'
    | DialogFolder !DialogFolder'
data Dialog'
    = Dialog' {_pinned :: !(Maybe True'),
               _unread_mark :: !(Maybe True'),
               _view_forum_as_messages :: !(Maybe True'),
               _peer :: !Peer,
               _top_message :: !Int',
               _read_inbox_max_id :: !Int',
               _read_outbox_max_id :: !Int',
               _unread_count :: !Int',
               _unread_mentions_count :: !Int',
               _unread_reactions_count :: !Int',
               _notify_settings :: !PeerNotifySettings,
               _pts :: !(Maybe Int'),
               _draft :: !(Maybe DraftMessage),
               _folder_id :: !(Maybe Int'),
               _ttl_period :: !(Maybe Int')}
data DialogFolder'
    = DialogFolder' {_pinned :: !(Maybe True'),
                     _folder :: !Folder,
                     _peer :: !Peer,
                     _top_message :: !Int',
                     _unread_muted_peers_count :: !Int',
                     _unread_unmuted_peers_count :: !Int',
                     _unread_muted_messages_count :: !Int',
                     _unread_unmuted_messages_count :: !Int'}
instance Data.Binary.Binary Dialog
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3582593222 -> fmap Dialog Data.Binary.get;
                      1908216652 -> fmap DialogFolder Data.Binary.get}};
           put (Dialog tmp_1) = do {Data.Binary.Put.putWord32le 3582593222;
                                    Data.Binary.put tmp_1};
           put (DialogFolder tmp_2) = do {Data.Binary.Put.putWord32le 1908216652;
                                          Data.Binary.put tmp_2}}
instance Data.Binary.Binary DialogFilter'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _contacts_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _non_contacts_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _groups_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _broadcasts_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     _bots_5 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 4);
                     _exclude_muted_6 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 11);
                     _exclude_read_7 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 12);
                     _exclude_archived_8 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 13);
                     _id_9 <- Data.Binary.get;
                     _title_10 <- Data.Binary.get;
                     _emoticon_11 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 25);
                     _pinned_peers_12 <- Data.Binary.get;
                     _include_peers_13 <- Data.Binary.get;
                     _exclude_peers_14 <- Data.Binary.get;
                     GHC.Base.pure (DialogFilter' _contacts_1 _non_contacts_2 _groups_3 _broadcasts_4 _bots_5 _exclude_muted_6 _exclude_read_7 _exclude_archived_8 _id_9 _title_10 _emoticon_11 _pinned_peers_12 _include_peers_13 _exclude_peers_14)};
           put to_be_encoded_15 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_15._emoticon,
                                                               25),
                                                              (Data.Maybe.isJust to_be_encoded_15._exclude_archived,
                                                               13),
                                                              (Data.Maybe.isJust to_be_encoded_15._exclude_read,
                                                               12),
                                                              (Data.Maybe.isJust to_be_encoded_15._exclude_muted,
                                                               11),
                                                              (Data.Maybe.isJust to_be_encoded_15._bots,
                                                               4),
                                                              (Data.Maybe.isJust to_be_encoded_15._broadcasts,
                                                               3),
                                                              (Data.Maybe.isJust to_be_encoded_15._groups,
                                                               2),
                                                              (Data.Maybe.isJust to_be_encoded_15._non_contacts,
                                                               1),
                                                              (Data.Maybe.isJust to_be_encoded_15._contacts,
                                                               0)];
                                      Data.Binary.put to_be_encoded_15._contacts;
                                      Data.Binary.put to_be_encoded_15._non_contacts;
                                      Data.Binary.put to_be_encoded_15._groups;
                                      Data.Binary.put to_be_encoded_15._broadcasts;
                                      Data.Binary.put to_be_encoded_15._bots;
                                      Data.Binary.put to_be_encoded_15._exclude_muted;
                                      Data.Binary.put to_be_encoded_15._exclude_read;
                                      Data.Binary.put to_be_encoded_15._exclude_archived;
                                      Data.Binary.put to_be_encoded_15._id;
                                      Data.Binary.put to_be_encoded_15._title;
                                      Data.Binary.put to_be_encoded_15._emoticon;
                                      Data.Binary.put to_be_encoded_15._pinned_peers;
                                      Data.Binary.put to_be_encoded_15._include_peers;
                                      Data.Binary.put to_be_encoded_15._exclude_peers}}
instance Data.Binary.Binary DialogFilterChatlist'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _has_my_invites_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 26);
                     _id_2 <- Data.Binary.get;
                     _title_3 <- Data.Binary.get;
                     _emoticon_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 25);
                     _pinned_peers_5 <- Data.Binary.get;
                     _include_peers_6 <- Data.Binary.get;
                     GHC.Base.pure (DialogFilterChatlist' _has_my_invites_1 _id_2 _title_3 _emoticon_4 _pinned_peers_5 _include_peers_6)};
           put to_be_encoded_7 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_7._emoticon,
                                                              25),
                                                             (Data.Maybe.isJust to_be_encoded_7._has_my_invites,
                                                              26)];
                                     Data.Binary.put to_be_encoded_7._has_my_invites;
                                     Data.Binary.put to_be_encoded_7._id;
                                     Data.Binary.put to_be_encoded_7._title;
                                     Data.Binary.put to_be_encoded_7._emoticon;
                                     Data.Binary.put to_be_encoded_7._pinned_peers;
                                     Data.Binary.put to_be_encoded_7._include_peers}}
instance Data.Binary.Binary DialogFilterDefault'
    where {get = GHC.Base.pure DialogFilterDefault';
           put to_be_encoded_0 = do GHC.Base.pure ()}
data DialogFilter
    = DialogFilter !DialogFilter'
    | DialogFilterChatlist !DialogFilterChatlist'
    | DialogFilterDefault !DialogFilterDefault'
data DialogFilter'
    = DialogFilter' {_contacts :: !(Maybe True'),
                     _non_contacts :: !(Maybe True'),
                     _groups :: !(Maybe True'),
                     _broadcasts :: !(Maybe True'),
                     _bots :: !(Maybe True'),
                     _exclude_muted :: !(Maybe True'),
                     _exclude_read :: !(Maybe True'),
                     _exclude_archived :: !(Maybe True'),
                     _id :: !Int',
                     _title :: !String',
                     _emoticon :: !(Maybe String'),
                     _pinned_peers :: !(Vector InputPeer),
                     _include_peers :: !(Vector InputPeer),
                     _exclude_peers :: !(Vector InputPeer)}
data DialogFilterChatlist'
    = DialogFilterChatlist' {_has_my_invites :: !(Maybe True'),
                             _id :: !Int',
                             _title :: !String',
                             _emoticon :: !(Maybe String'),
                             _pinned_peers :: !(Vector InputPeer),
                             _include_peers :: !(Vector InputPeer)}
data DialogFilterDefault' = DialogFilterDefault' {}
instance Data.Binary.Binary DialogFilter
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1949890536 -> fmap DialogFilter Data.Binary.get;
                      3595175080 -> fmap DialogFilterChatlist Data.Binary.get;
                      909284270 -> fmap DialogFilterDefault Data.Binary.get}};
           put (DialogFilter tmp_1) = do {Data.Binary.Put.putWord32le 1949890536;
                                          Data.Binary.put tmp_1};
           put (DialogFilterChatlist tmp_2) = do {Data.Binary.Put.putWord32le 3595175080;
                                                  Data.Binary.put tmp_2};
           put (DialogFilterDefault tmp_3) = do {Data.Binary.Put.putWord32le 909284270;
                                                 Data.Binary.put tmp_3}}
instance Data.Binary.Binary DialogFilterSuggested'
    where {get = do {_filter_0 <- Data.Binary.get;
                     _description_1 <- Data.Binary.get;
                     GHC.Base.pure (DialogFilterSuggested' _filter_0 _description_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._filter;
                                     Data.Binary.put to_be_encoded_2._description}}
data DialogFilterSuggested
    = DialogFilterSuggested !DialogFilterSuggested'
data DialogFilterSuggested'
    = DialogFilterSuggested' {_filter :: !DialogFilter,
                              _description :: !String'}
instance Data.Binary.Binary DialogFilterSuggested
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2004110666 -> fmap DialogFilterSuggested Data.Binary.get}};
           put (DialogFilterSuggested tmp_1) = do {Data.Binary.Put.putWord32le 2004110666;
                                                   Data.Binary.put tmp_1}}
instance Data.Binary.Binary DialogPeer'
    where {get = do {_peer_0 <- Data.Binary.get;
                     GHC.Base.pure (DialogPeer' _peer_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._peer}
instance Data.Binary.Binary DialogPeerFolder'
    where {get = do {_folder_id_0 <- Data.Binary.get;
                     GHC.Base.pure (DialogPeerFolder' _folder_id_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._folder_id}
data DialogPeer
    = DialogPeer !DialogPeer'
    | DialogPeerFolder !DialogPeerFolder'
data DialogPeer' = DialogPeer' {_peer :: !Peer}
data DialogPeerFolder' = DialogPeerFolder' {_folder_id :: !Int'}
instance Data.Binary.Binary DialogPeer
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3849174789 -> fmap DialogPeer Data.Binary.get;
                      1363483106 -> fmap DialogPeerFolder Data.Binary.get}};
           put (DialogPeer tmp_1) = do {Data.Binary.Put.putWord32le 3849174789;
                                        Data.Binary.put tmp_1};
           put (DialogPeerFolder tmp_2) = do {Data.Binary.Put.putWord32le 1363483106;
                                              Data.Binary.put tmp_2}}
instance Data.Binary.Binary Document'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _id_1 <- Data.Binary.get;
                     _access_hash_2 <- Data.Binary.get;
                     _file_reference_3 <- Data.Binary.get;
                     _date_4 <- Data.Binary.get;
                     _mime_type_5 <- Data.Binary.get;
                     _size_6 <- Data.Binary.get;
                     _thumbs_7 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _video_thumbs_8 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _dc_id_9 <- Data.Binary.get;
                     _attributes_10 <- Data.Binary.get;
                     GHC.Base.pure (Document' _id_1 _access_hash_2 _file_reference_3 _date_4 _mime_type_5 _size_6 _thumbs_7 _video_thumbs_8 _dc_id_9 _attributes_10)};
           put to_be_encoded_11 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_11._video_thumbs,
                                                               1),
                                                              (Data.Maybe.isJust to_be_encoded_11._thumbs,
                                                               0)];
                                      Data.Binary.put to_be_encoded_11._id;
                                      Data.Binary.put to_be_encoded_11._access_hash;
                                      Data.Binary.put to_be_encoded_11._file_reference;
                                      Data.Binary.put to_be_encoded_11._date;
                                      Data.Binary.put to_be_encoded_11._mime_type;
                                      Data.Binary.put to_be_encoded_11._size;
                                      Data.Binary.put to_be_encoded_11._thumbs;
                                      Data.Binary.put to_be_encoded_11._video_thumbs;
                                      Data.Binary.put to_be_encoded_11._dc_id;
                                      Data.Binary.put to_be_encoded_11._attributes}}
instance Data.Binary.Binary DocumentEmpty'
    where {get = do {_id_0 <- Data.Binary.get;
                     GHC.Base.pure (DocumentEmpty' _id_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._id}
data Document
    = Document !Document'
    | DocumentEmpty !DocumentEmpty'
data Document'
    = Document' {_id :: !Long',
                 _access_hash :: !Long',
                 _file_reference :: !Bytes',
                 _date :: !Int',
                 _mime_type :: !String',
                 _size :: !Long',
                 _thumbs :: !(Maybe (Vector PhotoSize)),
                 _video_thumbs :: !(Maybe (Vector VideoSize)),
                 _dc_id :: !Int',
                 _attributes :: !(Vector DocumentAttribute)}
data DocumentEmpty' = DocumentEmpty' {_id :: !Long'}
instance Data.Binary.Binary Document
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2413085912 -> fmap Document Data.Binary.get;
                      922273905 -> fmap DocumentEmpty Data.Binary.get}};
           put (Document tmp_1) = do {Data.Binary.Put.putWord32le 2413085912;
                                      Data.Binary.put tmp_1};
           put (DocumentEmpty tmp_2) = do {Data.Binary.Put.putWord32le 922273905;
                                           Data.Binary.put tmp_2}}
instance Data.Binary.Binary DocumentAttributeAnimated'
    where {get = GHC.Base.pure DocumentAttributeAnimated';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary DocumentAttributeAudio'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _voice_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 10);
                     _duration_2 <- Data.Binary.get;
                     _title_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _performer_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _waveform_5 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     GHC.Base.pure (DocumentAttributeAudio' _voice_1 _duration_2 _title_3 _performer_4 _waveform_5)};
           put to_be_encoded_6 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_6._waveform,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_6._performer,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_6._title,
                                                              0),
                                                             (Data.Maybe.isJust to_be_encoded_6._voice,
                                                              10)];
                                     Data.Binary.put to_be_encoded_6._voice;
                                     Data.Binary.put to_be_encoded_6._duration;
                                     Data.Binary.put to_be_encoded_6._title;
                                     Data.Binary.put to_be_encoded_6._performer;
                                     Data.Binary.put to_be_encoded_6._waveform}}
instance Data.Binary.Binary DocumentAttributeCustomEmoji'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _free_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _text_color_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _alt_3 <- Data.Binary.get;
                     _stickerset_4 <- Data.Binary.get;
                     GHC.Base.pure (DocumentAttributeCustomEmoji' _free_1 _text_color_2 _alt_3 _stickerset_4)};
           put to_be_encoded_5 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_5._text_color,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_5._free,
                                                              0)];
                                     Data.Binary.put to_be_encoded_5._free;
                                     Data.Binary.put to_be_encoded_5._text_color;
                                     Data.Binary.put to_be_encoded_5._alt;
                                     Data.Binary.put to_be_encoded_5._stickerset}}
instance Data.Binary.Binary DocumentAttributeFilename'
    where {get = do {_file_name_0 <- Data.Binary.get;
                     GHC.Base.pure (DocumentAttributeFilename' _file_name_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._file_name}
instance Data.Binary.Binary DocumentAttributeHasStickers'
    where {get = GHC.Base.pure DocumentAttributeHasStickers';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary DocumentAttributeImageSize'
    where {get = do {_w_0 <- Data.Binary.get;
                     _h_1 <- Data.Binary.get;
                     GHC.Base.pure (DocumentAttributeImageSize' _w_0 _h_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._w;
                                     Data.Binary.put to_be_encoded_2._h}}
instance Data.Binary.Binary DocumentAttributeSticker'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _mask_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _alt_2 <- Data.Binary.get;
                     _stickerset_3 <- Data.Binary.get;
                     _mask_coords_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     GHC.Base.pure (DocumentAttributeSticker' _mask_1 _alt_2 _stickerset_3 _mask_coords_4)};
           put to_be_encoded_5 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_5._mask_coords,
                                                              0),
                                                             (Data.Maybe.isJust to_be_encoded_5._mask,
                                                              1)];
                                     Data.Binary.put to_be_encoded_5._mask;
                                     Data.Binary.put to_be_encoded_5._alt;
                                     Data.Binary.put to_be_encoded_5._stickerset;
                                     Data.Binary.put to_be_encoded_5._mask_coords}}
instance Data.Binary.Binary DocumentAttributeVideo'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _round_message_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _supports_streaming_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _nosound_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     _duration_4 <- Data.Binary.get;
                     _w_5 <- Data.Binary.get;
                     _h_6 <- Data.Binary.get;
                     _preload_prefix_size_7 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     GHC.Base.pure (DocumentAttributeVideo' _round_message_1 _supports_streaming_2 _nosound_3 _duration_4 _w_5 _h_6 _preload_prefix_size_7)};
           put to_be_encoded_8 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_8._preload_prefix_size,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_8._nosound,
                                                              3),
                                                             (Data.Maybe.isJust to_be_encoded_8._supports_streaming,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_8._round_message,
                                                              0)];
                                     Data.Binary.put to_be_encoded_8._round_message;
                                     Data.Binary.put to_be_encoded_8._supports_streaming;
                                     Data.Binary.put to_be_encoded_8._nosound;
                                     Data.Binary.put to_be_encoded_8._duration;
                                     Data.Binary.put to_be_encoded_8._w;
                                     Data.Binary.put to_be_encoded_8._h;
                                     Data.Binary.put to_be_encoded_8._preload_prefix_size}}
data DocumentAttribute
    = DocumentAttributeAnimated !DocumentAttributeAnimated'
    | DocumentAttributeAudio !DocumentAttributeAudio'
    | DocumentAttributeCustomEmoji !DocumentAttributeCustomEmoji'
    | DocumentAttributeFilename !DocumentAttributeFilename'
    | DocumentAttributeHasStickers !DocumentAttributeHasStickers'
    | DocumentAttributeImageSize !DocumentAttributeImageSize'
    | DocumentAttributeSticker !DocumentAttributeSticker'
    | DocumentAttributeVideo !DocumentAttributeVideo'
data DocumentAttributeAnimated' = DocumentAttributeAnimated' {}
data DocumentAttributeAudio'
    = DocumentAttributeAudio' {_voice :: !(Maybe True'),
                               _duration :: !Int',
                               _title :: !(Maybe String'),
                               _performer :: !(Maybe String'),
                               _waveform :: !(Maybe Bytes')}
data DocumentAttributeCustomEmoji'
    = DocumentAttributeCustomEmoji' {_free :: !(Maybe True'),
                                     _text_color :: !(Maybe True'),
                                     _alt :: !String',
                                     _stickerset :: !InputStickerSet}
data DocumentAttributeFilename'
    = DocumentAttributeFilename' {_file_name :: !String'}
data DocumentAttributeHasStickers'
    = DocumentAttributeHasStickers' {}
data DocumentAttributeImageSize'
    = DocumentAttributeImageSize' {_w :: !Int', _h :: !Int'}
data DocumentAttributeSticker'
    = DocumentAttributeSticker' {_mask :: !(Maybe True'),
                                 _alt :: !String',
                                 _stickerset :: !InputStickerSet,
                                 _mask_coords :: !(Maybe MaskCoords)}
data DocumentAttributeVideo'
    = DocumentAttributeVideo' {_round_message :: !(Maybe True'),
                               _supports_streaming :: !(Maybe True'),
                               _nosound :: !(Maybe True'),
                               _duration :: !Double',
                               _w :: !Int',
                               _h :: !Int',
                               _preload_prefix_size :: !(Maybe Int')}
instance Data.Binary.Binary DocumentAttribute
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {297109817 -> fmap DocumentAttributeAnimated Data.Binary.get;
                      2555574726 -> fmap DocumentAttributeAudio Data.Binary.get;
                      4245985433 -> fmap DocumentAttributeCustomEmoji Data.Binary.get;
                      358154344 -> fmap DocumentAttributeFilename Data.Binary.get;
                      2550256375 -> fmap DocumentAttributeHasStickers Data.Binary.get;
                      1815593308 -> fmap DocumentAttributeImageSize Data.Binary.get;
                      1662637586 -> fmap DocumentAttributeSticker Data.Binary.get;
                      3549426114 -> fmap DocumentAttributeVideo Data.Binary.get}};
           put (DocumentAttributeAnimated tmp_1) = do {Data.Binary.Put.putWord32le 297109817;
                                                       Data.Binary.put tmp_1};
           put (DocumentAttributeAudio tmp_2) = do {Data.Binary.Put.putWord32le 2555574726;
                                                    Data.Binary.put tmp_2};
           put (DocumentAttributeCustomEmoji tmp_3) = do {Data.Binary.Put.putWord32le 4245985433;
                                                          Data.Binary.put tmp_3};
           put (DocumentAttributeFilename tmp_4) = do {Data.Binary.Put.putWord32le 358154344;
                                                       Data.Binary.put tmp_4};
           put (DocumentAttributeHasStickers tmp_5) = do {Data.Binary.Put.putWord32le 2550256375;
                                                          Data.Binary.put tmp_5};
           put (DocumentAttributeImageSize tmp_6) = do {Data.Binary.Put.putWord32le 1815593308;
                                                        Data.Binary.put tmp_6};
           put (DocumentAttributeSticker tmp_7) = do {Data.Binary.Put.putWord32le 1662637586;
                                                      Data.Binary.put tmp_7};
           put (DocumentAttributeVideo tmp_8) = do {Data.Binary.Put.putWord32le 3549426114;
                                                    Data.Binary.put tmp_8}}
instance Data.Binary.Binary DraftMessage'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _no_webpage_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _invert_media_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 6);
                     _reply_to_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 4);
                     _message_4 <- Data.Binary.get;
                     _entities_5 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     _media_6 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 5);
                     _date_7 <- Data.Binary.get;
                     GHC.Base.pure (DraftMessage' _no_webpage_1 _invert_media_2 _reply_to_3 _message_4 _entities_5 _media_6 _date_7)};
           put to_be_encoded_8 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_8._media,
                                                              5),
                                                             (Data.Maybe.isJust to_be_encoded_8._entities,
                                                              3),
                                                             (Data.Maybe.isJust to_be_encoded_8._reply_to,
                                                              4),
                                                             (Data.Maybe.isJust to_be_encoded_8._invert_media,
                                                              6),
                                                             (Data.Maybe.isJust to_be_encoded_8._no_webpage,
                                                              1)];
                                     Data.Binary.put to_be_encoded_8._no_webpage;
                                     Data.Binary.put to_be_encoded_8._invert_media;
                                     Data.Binary.put to_be_encoded_8._reply_to;
                                     Data.Binary.put to_be_encoded_8._message;
                                     Data.Binary.put to_be_encoded_8._entities;
                                     Data.Binary.put to_be_encoded_8._media;
                                     Data.Binary.put to_be_encoded_8._date}}
instance Data.Binary.Binary DraftMessageEmpty'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _date_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     GHC.Base.pure (DraftMessageEmpty' _date_1)};
           put to_be_encoded_2 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_2._date,
                                                              0)];
                                     Data.Binary.put to_be_encoded_2._date}}
data DraftMessage
    = DraftMessage !DraftMessage'
    | DraftMessageEmpty !DraftMessageEmpty'
data DraftMessage'
    = DraftMessage' {_no_webpage :: !(Maybe True'),
                     _invert_media :: !(Maybe True'),
                     _reply_to :: !(Maybe InputReplyTo),
                     _message :: !String',
                     _entities :: !(Maybe (Vector MessageEntity)),
                     _media :: !(Maybe InputMedia),
                     _date :: !Int'}
data DraftMessageEmpty'
    = DraftMessageEmpty' {_date :: !(Maybe Int')}
instance Data.Binary.Binary DraftMessage
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1070397423 -> fmap DraftMessage Data.Binary.get;
                      453805082 -> fmap DraftMessageEmpty Data.Binary.get}};
           put (DraftMessage tmp_1) = do {Data.Binary.Put.putWord32le 1070397423;
                                          Data.Binary.put tmp_1};
           put (DraftMessageEmpty tmp_2) = do {Data.Binary.Put.putWord32le 453805082;
                                               Data.Binary.put tmp_2}}
instance Data.Binary.Binary EmailVerificationApple'
    where {get = do {_token_0 <- Data.Binary.get;
                     GHC.Base.pure (EmailVerificationApple' _token_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._token}
instance Data.Binary.Binary EmailVerificationCode'
    where {get = do {_code_0 <- Data.Binary.get;
                     GHC.Base.pure (EmailVerificationCode' _code_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._code}
instance Data.Binary.Binary EmailVerificationGoogle'
    where {get = do {_token_0 <- Data.Binary.get;
                     GHC.Base.pure (EmailVerificationGoogle' _token_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._token}
data EmailVerification
    = EmailVerificationApple !EmailVerificationApple'
    | EmailVerificationCode !EmailVerificationCode'
    | EmailVerificationGoogle !EmailVerificationGoogle'
data EmailVerificationApple'
    = EmailVerificationApple' {_token :: !String'}
data EmailVerificationCode'
    = EmailVerificationCode' {_code :: !String'}
data EmailVerificationGoogle'
    = EmailVerificationGoogle' {_token :: !String'}
instance Data.Binary.Binary EmailVerification
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2530243837 -> fmap EmailVerificationApple Data.Binary.get;
                      2452510121 -> fmap EmailVerificationCode Data.Binary.get;
                      3683688130 -> fmap EmailVerificationGoogle Data.Binary.get}};
           put (EmailVerificationApple tmp_1) = do {Data.Binary.Put.putWord32le 2530243837;
                                                    Data.Binary.put tmp_1};
           put (EmailVerificationCode tmp_2) = do {Data.Binary.Put.putWord32le 2452510121;
                                                   Data.Binary.put tmp_2};
           put (EmailVerificationGoogle tmp_3) = do {Data.Binary.Put.putWord32le 3683688130;
                                                     Data.Binary.put tmp_3}}
instance Data.Binary.Binary EmailVerifyPurposeLoginChange'
    where {get = GHC.Base.pure EmailVerifyPurposeLoginChange';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary EmailVerifyPurposeLoginSetup'
    where {get = do {_phone_number_0 <- Data.Binary.get;
                     _phone_code_hash_1 <- Data.Binary.get;
                     GHC.Base.pure (EmailVerifyPurposeLoginSetup' _phone_number_0 _phone_code_hash_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._phone_number;
                                     Data.Binary.put to_be_encoded_2._phone_code_hash}}
instance Data.Binary.Binary EmailVerifyPurposePassport'
    where {get = GHC.Base.pure EmailVerifyPurposePassport';
           put to_be_encoded_0 = do GHC.Base.pure ()}
data EmailVerifyPurpose
    = EmailVerifyPurposeLoginChange !EmailVerifyPurposeLoginChange'
    | EmailVerifyPurposeLoginSetup !EmailVerifyPurposeLoginSetup'
    | EmailVerifyPurposePassport !EmailVerifyPurposePassport'
data EmailVerifyPurposeLoginChange'
    = EmailVerifyPurposeLoginChange' {}
data EmailVerifyPurposeLoginSetup'
    = EmailVerifyPurposeLoginSetup' {_phone_number :: !String',
                                     _phone_code_hash :: !String'}
data EmailVerifyPurposePassport' = EmailVerifyPurposePassport' {}
instance Data.Binary.Binary EmailVerifyPurpose
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1383932651 -> fmap EmailVerifyPurposeLoginChange Data.Binary.get;
                      1128644211 -> fmap EmailVerifyPurposeLoginSetup Data.Binary.get;
                      3153401477 -> fmap EmailVerifyPurposePassport Data.Binary.get}};
           put (EmailVerifyPurposeLoginChange tmp_1) = do {Data.Binary.Put.putWord32le 1383932651;
                                                           Data.Binary.put tmp_1};
           put (EmailVerifyPurposeLoginSetup tmp_2) = do {Data.Binary.Put.putWord32le 1128644211;
                                                          Data.Binary.put tmp_2};
           put (EmailVerifyPurposePassport tmp_3) = do {Data.Binary.Put.putWord32le 3153401477;
                                                        Data.Binary.put tmp_3}}
instance Data.Binary.Binary EmojiGroup'
    where {get = do {_title_0 <- Data.Binary.get;
                     _icon_emoji_id_1 <- Data.Binary.get;
                     _emoticons_2 <- Data.Binary.get;
                     GHC.Base.pure (EmojiGroup' _title_0 _icon_emoji_id_1 _emoticons_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._title;
                                     Data.Binary.put to_be_encoded_3._icon_emoji_id;
                                     Data.Binary.put to_be_encoded_3._emoticons}}
data EmojiGroup = EmojiGroup !EmojiGroup'
data EmojiGroup'
    = EmojiGroup' {_title :: !String',
                   _icon_emoji_id :: !Long',
                   _emoticons :: !(Vector String')}
instance Data.Binary.Binary EmojiGroup
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2056961449 -> fmap EmojiGroup Data.Binary.get}};
           put (EmojiGroup tmp_1) = do {Data.Binary.Put.putWord32le 2056961449;
                                        Data.Binary.put tmp_1}}
instance Data.Binary.Binary EmojiKeyword'
    where {get = do {_keyword_0 <- Data.Binary.get;
                     _emoticons_1 <- Data.Binary.get;
                     GHC.Base.pure (EmojiKeyword' _keyword_0 _emoticons_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._keyword;
                                     Data.Binary.put to_be_encoded_2._emoticons}}
instance Data.Binary.Binary EmojiKeywordDeleted'
    where {get = do {_keyword_0 <- Data.Binary.get;
                     _emoticons_1 <- Data.Binary.get;
                     GHC.Base.pure (EmojiKeywordDeleted' _keyword_0 _emoticons_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._keyword;
                                     Data.Binary.put to_be_encoded_2._emoticons}}
data EmojiKeyword
    = EmojiKeyword !EmojiKeyword'
    | EmojiKeywordDeleted !EmojiKeywordDeleted'
data EmojiKeyword'
    = EmojiKeyword' {_keyword :: !String',
                     _emoticons :: !(Vector String')}
data EmojiKeywordDeleted'
    = EmojiKeywordDeleted' {_keyword :: !String',
                            _emoticons :: !(Vector String')}
instance Data.Binary.Binary EmojiKeyword
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3585325561 -> fmap EmojiKeyword Data.Binary.get;
                      594408994 -> fmap EmojiKeywordDeleted Data.Binary.get}};
           put (EmojiKeyword tmp_1) = do {Data.Binary.Put.putWord32le 3585325561;
                                          Data.Binary.put tmp_1};
           put (EmojiKeywordDeleted tmp_2) = do {Data.Binary.Put.putWord32le 594408994;
                                                 Data.Binary.put tmp_2}}
instance Data.Binary.Binary EmojiKeywordsDifference'
    where {get = do {_lang_code_0 <- Data.Binary.get;
                     _from_version_1 <- Data.Binary.get;
                     _version_2 <- Data.Binary.get;
                     _keywords_3 <- Data.Binary.get;
                     GHC.Base.pure (EmojiKeywordsDifference' _lang_code_0 _from_version_1 _version_2 _keywords_3)};
           put to_be_encoded_4 = do {Data.Binary.put to_be_encoded_4._lang_code;
                                     Data.Binary.put to_be_encoded_4._from_version;
                                     Data.Binary.put to_be_encoded_4._version;
                                     Data.Binary.put to_be_encoded_4._keywords}}
data EmojiKeywordsDifference
    = EmojiKeywordsDifference !EmojiKeywordsDifference'
data EmojiKeywordsDifference'
    = EmojiKeywordsDifference' {_lang_code :: !String',
                                _from_version :: !Int',
                                _version :: !Int',
                                _keywords :: !(Vector EmojiKeyword)}
instance Data.Binary.Binary EmojiKeywordsDifference
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1556570557 -> fmap EmojiKeywordsDifference Data.Binary.get}};
           put (EmojiKeywordsDifference tmp_1) = do {Data.Binary.Put.putWord32le 1556570557;
                                                     Data.Binary.put tmp_1}}
instance Data.Binary.Binary EmojiLanguage'
    where {get = do {_lang_code_0 <- Data.Binary.get;
                     GHC.Base.pure (EmojiLanguage' _lang_code_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._lang_code}
data EmojiLanguage = EmojiLanguage !EmojiLanguage'
data EmojiLanguage' = EmojiLanguage' {_lang_code :: !String'}
instance Data.Binary.Binary EmojiLanguage
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3019592545 -> fmap EmojiLanguage Data.Binary.get}};
           put (EmojiLanguage tmp_1) = do {Data.Binary.Put.putWord32le 3019592545;
                                           Data.Binary.put tmp_1}}
instance Data.Binary.Binary EmojiList'
    where {get = do {_hash_0 <- Data.Binary.get;
                     _document_id_1 <- Data.Binary.get;
                     GHC.Base.pure (EmojiList' _hash_0 _document_id_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._hash;
                                     Data.Binary.put to_be_encoded_2._document_id}}
instance Data.Binary.Binary EmojiListNotModified'
    where {get = GHC.Base.pure EmojiListNotModified';
           put to_be_encoded_0 = do GHC.Base.pure ()}
data EmojiList
    = EmojiList !EmojiList'
    | EmojiListNotModified !EmojiListNotModified'
data EmojiList'
    = EmojiList' {_hash :: !Long', _document_id :: !(Vector Long')}
data EmojiListNotModified' = EmojiListNotModified' {}
instance Data.Binary.Binary EmojiList
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2048790993 -> fmap EmojiList Data.Binary.get;
                      1209970170 -> fmap EmojiListNotModified Data.Binary.get}};
           put (EmojiList tmp_1) = do {Data.Binary.Put.putWord32le 2048790993;
                                       Data.Binary.put tmp_1};
           put (EmojiListNotModified tmp_2) = do {Data.Binary.Put.putWord32le 1209970170;
                                                  Data.Binary.put tmp_2}}
instance Data.Binary.Binary EmojiStatus'
    where {get = do {_document_id_0 <- Data.Binary.get;
                     GHC.Base.pure (EmojiStatus' _document_id_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._document_id}
instance Data.Binary.Binary EmojiStatusEmpty'
    where {get = GHC.Base.pure EmojiStatusEmpty';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary EmojiStatusUntil'
    where {get = do {_document_id_0 <- Data.Binary.get;
                     _until_1 <- Data.Binary.get;
                     GHC.Base.pure (EmojiStatusUntil' _document_id_0 _until_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._document_id;
                                     Data.Binary.put to_be_encoded_2._until}}
data EmojiStatus
    = EmojiStatus !EmojiStatus'
    | EmojiStatusEmpty !EmojiStatusEmpty'
    | EmojiStatusUntil !EmojiStatusUntil'
data EmojiStatus' = EmojiStatus' {_document_id :: !Long'}
data EmojiStatusEmpty' = EmojiStatusEmpty' {}
data EmojiStatusUntil'
    = EmojiStatusUntil' {_document_id :: !Long', _until :: !Int'}
instance Data.Binary.Binary EmojiStatus
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2459656605 -> fmap EmojiStatus Data.Binary.get;
                      769727150 -> fmap EmojiStatusEmpty Data.Binary.get;
                      4197492935 -> fmap EmojiStatusUntil Data.Binary.get}};
           put (EmojiStatus tmp_1) = do {Data.Binary.Put.putWord32le 2459656605;
                                         Data.Binary.put tmp_1};
           put (EmojiStatusEmpty tmp_2) = do {Data.Binary.Put.putWord32le 769727150;
                                              Data.Binary.put tmp_2};
           put (EmojiStatusUntil tmp_3) = do {Data.Binary.Put.putWord32le 4197492935;
                                              Data.Binary.put tmp_3}}
instance Data.Binary.Binary EmojiURL'
    where {get = do {_url_0 <- Data.Binary.get;
                     GHC.Base.pure (EmojiURL' _url_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._url}
data EmojiURL = EmojiURL !EmojiURL'
data EmojiURL' = EmojiURL' {_url :: !String'}
instance Data.Binary.Binary EmojiURL
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2775937949 -> fmap EmojiURL Data.Binary.get}};
           put (EmojiURL tmp_1) = do {Data.Binary.Put.putWord32le 2775937949;
                                      Data.Binary.put tmp_1}}
instance Data.Binary.Binary EncryptedChat'
    where {get = do {_id_0 <- Data.Binary.get;
                     _access_hash_1 <- Data.Binary.get;
                     _date_2 <- Data.Binary.get;
                     _admin_id_3 <- Data.Binary.get;
                     _participant_id_4 <- Data.Binary.get;
                     _g_a_or_b_5 <- Data.Binary.get;
                     _key_fingerprint_6 <- Data.Binary.get;
                     GHC.Base.pure (EncryptedChat' _id_0 _access_hash_1 _date_2 _admin_id_3 _participant_id_4 _g_a_or_b_5 _key_fingerprint_6)};
           put to_be_encoded_7 = do {Data.Binary.put to_be_encoded_7._id;
                                     Data.Binary.put to_be_encoded_7._access_hash;
                                     Data.Binary.put to_be_encoded_7._date;
                                     Data.Binary.put to_be_encoded_7._admin_id;
                                     Data.Binary.put to_be_encoded_7._participant_id;
                                     Data.Binary.put to_be_encoded_7._g_a_or_b;
                                     Data.Binary.put to_be_encoded_7._key_fingerprint}}
instance Data.Binary.Binary EncryptedChatDiscarded'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _history_deleted_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _id_2 <- Data.Binary.get;
                     GHC.Base.pure (EncryptedChatDiscarded' _history_deleted_1 _id_2)};
           put to_be_encoded_3 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_3._history_deleted,
                                                              0)];
                                     Data.Binary.put to_be_encoded_3._history_deleted;
                                     Data.Binary.put to_be_encoded_3._id}}
instance Data.Binary.Binary EncryptedChatEmpty'
    where {get = do {_id_0 <- Data.Binary.get;
                     GHC.Base.pure (EncryptedChatEmpty' _id_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._id}
instance Data.Binary.Binary EncryptedChatRequested'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _folder_id_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _id_2 <- Data.Binary.get;
                     _access_hash_3 <- Data.Binary.get;
                     _date_4 <- Data.Binary.get;
                     _admin_id_5 <- Data.Binary.get;
                     _participant_id_6 <- Data.Binary.get;
                     _g_a_7 <- Data.Binary.get;
                     GHC.Base.pure (EncryptedChatRequested' _folder_id_1 _id_2 _access_hash_3 _date_4 _admin_id_5 _participant_id_6 _g_a_7)};
           put to_be_encoded_8 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_8._folder_id,
                                                              0)];
                                     Data.Binary.put to_be_encoded_8._folder_id;
                                     Data.Binary.put to_be_encoded_8._id;
                                     Data.Binary.put to_be_encoded_8._access_hash;
                                     Data.Binary.put to_be_encoded_8._date;
                                     Data.Binary.put to_be_encoded_8._admin_id;
                                     Data.Binary.put to_be_encoded_8._participant_id;
                                     Data.Binary.put to_be_encoded_8._g_a}}
instance Data.Binary.Binary EncryptedChatWaiting'
    where {get = do {_id_0 <- Data.Binary.get;
                     _access_hash_1 <- Data.Binary.get;
                     _date_2 <- Data.Binary.get;
                     _admin_id_3 <- Data.Binary.get;
                     _participant_id_4 <- Data.Binary.get;
                     GHC.Base.pure (EncryptedChatWaiting' _id_0 _access_hash_1 _date_2 _admin_id_3 _participant_id_4)};
           put to_be_encoded_5 = do {Data.Binary.put to_be_encoded_5._id;
                                     Data.Binary.put to_be_encoded_5._access_hash;
                                     Data.Binary.put to_be_encoded_5._date;
                                     Data.Binary.put to_be_encoded_5._admin_id;
                                     Data.Binary.put to_be_encoded_5._participant_id}}
data EncryptedChat
    = EncryptedChat !EncryptedChat'
    | EncryptedChatDiscarded !EncryptedChatDiscarded'
    | EncryptedChatEmpty !EncryptedChatEmpty'
    | EncryptedChatRequested !EncryptedChatRequested'
    | EncryptedChatWaiting !EncryptedChatWaiting'
data EncryptedChat'
    = EncryptedChat' {_id :: !Int',
                      _access_hash :: !Long',
                      _date :: !Int',
                      _admin_id :: !Long',
                      _participant_id :: !Long',
                      _g_a_or_b :: !Bytes',
                      _key_fingerprint :: !Long'}
data EncryptedChatDiscarded'
    = EncryptedChatDiscarded' {_history_deleted :: !(Maybe True'),
                               _id :: !Int'}
data EncryptedChatEmpty' = EncryptedChatEmpty' {_id :: !Int'}
data EncryptedChatRequested'
    = EncryptedChatRequested' {_folder_id :: !(Maybe Int'),
                               _id :: !Int',
                               _access_hash :: !Long',
                               _date :: !Int',
                               _admin_id :: !Long',
                               _participant_id :: !Long',
                               _g_a :: !Bytes'}
data EncryptedChatWaiting'
    = EncryptedChatWaiting' {_id :: !Int',
                             _access_hash :: !Long',
                             _date :: !Int',
                             _admin_id :: !Long',
                             _participant_id :: !Long'}
instance Data.Binary.Binary EncryptedChat
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1643173063 -> fmap EncryptedChat Data.Binary.get;
                      505183301 -> fmap EncryptedChatDiscarded Data.Binary.get;
                      2877210784 -> fmap EncryptedChatEmpty Data.Binary.get;
                      1223809356 -> fmap EncryptedChatRequested Data.Binary.get;
                      1722964307 -> fmap EncryptedChatWaiting Data.Binary.get}};
           put (EncryptedChat tmp_1) = do {Data.Binary.Put.putWord32le 1643173063;
                                           Data.Binary.put tmp_1};
           put (EncryptedChatDiscarded tmp_2) = do {Data.Binary.Put.putWord32le 505183301;
                                                    Data.Binary.put tmp_2};
           put (EncryptedChatEmpty tmp_3) = do {Data.Binary.Put.putWord32le 2877210784;
                                                Data.Binary.put tmp_3};
           put (EncryptedChatRequested tmp_4) = do {Data.Binary.Put.putWord32le 1223809356;
                                                    Data.Binary.put tmp_4};
           put (EncryptedChatWaiting tmp_5) = do {Data.Binary.Put.putWord32le 1722964307;
                                                  Data.Binary.put tmp_5}}
instance Data.Binary.Binary EncryptedFile'
    where {get = do {_id_0 <- Data.Binary.get;
                     _access_hash_1 <- Data.Binary.get;
                     _size_2 <- Data.Binary.get;
                     _dc_id_3 <- Data.Binary.get;
                     _key_fingerprint_4 <- Data.Binary.get;
                     GHC.Base.pure (EncryptedFile' _id_0 _access_hash_1 _size_2 _dc_id_3 _key_fingerprint_4)};
           put to_be_encoded_5 = do {Data.Binary.put to_be_encoded_5._id;
                                     Data.Binary.put to_be_encoded_5._access_hash;
                                     Data.Binary.put to_be_encoded_5._size;
                                     Data.Binary.put to_be_encoded_5._dc_id;
                                     Data.Binary.put to_be_encoded_5._key_fingerprint}}
instance Data.Binary.Binary EncryptedFileEmpty'
    where {get = GHC.Base.pure EncryptedFileEmpty';
           put to_be_encoded_0 = do GHC.Base.pure ()}
data EncryptedFile
    = EncryptedFile !EncryptedFile'
    | EncryptedFileEmpty !EncryptedFileEmpty'
data EncryptedFile'
    = EncryptedFile' {_id :: !Long',
                      _access_hash :: !Long',
                      _size :: !Long',
                      _dc_id :: !Int',
                      _key_fingerprint :: !Int'}
data EncryptedFileEmpty' = EncryptedFileEmpty' {}
instance Data.Binary.Binary EncryptedFile
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2818608344 -> fmap EncryptedFile Data.Binary.get;
                      3256830334 -> fmap EncryptedFileEmpty Data.Binary.get}};
           put (EncryptedFile tmp_1) = do {Data.Binary.Put.putWord32le 2818608344;
                                           Data.Binary.put tmp_1};
           put (EncryptedFileEmpty tmp_2) = do {Data.Binary.Put.putWord32le 3256830334;
                                                Data.Binary.put tmp_2}}
instance Data.Binary.Binary EncryptedMessage'
    where {get = do {_random_id_0 <- Data.Binary.get;
                     _chat_id_1 <- Data.Binary.get;
                     _date_2 <- Data.Binary.get;
                     _bytes_3 <- Data.Binary.get;
                     _file_4 <- Data.Binary.get;
                     GHC.Base.pure (EncryptedMessage' _random_id_0 _chat_id_1 _date_2 _bytes_3 _file_4)};
           put to_be_encoded_5 = do {Data.Binary.put to_be_encoded_5._random_id;
                                     Data.Binary.put to_be_encoded_5._chat_id;
                                     Data.Binary.put to_be_encoded_5._date;
                                     Data.Binary.put to_be_encoded_5._bytes;
                                     Data.Binary.put to_be_encoded_5._file}}
instance Data.Binary.Binary EncryptedMessageService'
    where {get = do {_random_id_0 <- Data.Binary.get;
                     _chat_id_1 <- Data.Binary.get;
                     _date_2 <- Data.Binary.get;
                     _bytes_3 <- Data.Binary.get;
                     GHC.Base.pure (EncryptedMessageService' _random_id_0 _chat_id_1 _date_2 _bytes_3)};
           put to_be_encoded_4 = do {Data.Binary.put to_be_encoded_4._random_id;
                                     Data.Binary.put to_be_encoded_4._chat_id;
                                     Data.Binary.put to_be_encoded_4._date;
                                     Data.Binary.put to_be_encoded_4._bytes}}
data EncryptedMessage
    = EncryptedMessage !EncryptedMessage'
    | EncryptedMessageService !EncryptedMessageService'
data EncryptedMessage'
    = EncryptedMessage' {_random_id :: !Long',
                         _chat_id :: !Int',
                         _date :: !Int',
                         _bytes :: !Bytes',
                         _file :: !EncryptedFile}
data EncryptedMessageService'
    = EncryptedMessageService' {_random_id :: !Long',
                                _chat_id :: !Int',
                                _date :: !Int',
                                _bytes :: !Bytes'}
instance Data.Binary.Binary EncryptedMessage
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3977822488 -> fmap EncryptedMessage Data.Binary.get;
                      594758406 -> fmap EncryptedMessageService Data.Binary.get}};
           put (EncryptedMessage tmp_1) = do {Data.Binary.Put.putWord32le 3977822488;
                                              Data.Binary.put tmp_1};
           put (EncryptedMessageService tmp_2) = do {Data.Binary.Put.putWord32le 594758406;
                                                     Data.Binary.put tmp_2}}
instance Data.Binary.Binary Error'
    where {get = do {_code_0 <- Data.Binary.get;
                     _text_1 <- Data.Binary.get;
                     GHC.Base.pure (Error' _code_0 _text_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._code;
                                     Data.Binary.put to_be_encoded_2._text}}
data Error = Error !Error'
data Error' = Error' {_code :: !Int', _text :: !String'}
instance Data.Binary.Binary Error
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3300522427 -> fmap Error Data.Binary.get}};
           put (Error tmp_1) = do {Data.Binary.Put.putWord32le 3300522427;
                                   Data.Binary.put tmp_1}}
instance Data.Binary.Binary ChatInviteExported'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _revoked_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _permanent_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 5);
                     _request_needed_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 6);
                     _link_4 <- Data.Binary.get;
                     _admin_id_5 <- Data.Binary.get;
                     _date_6 <- Data.Binary.get;
                     _start_date_7 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 4);
                     _expire_date_8 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _usage_limit_9 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _usage_10 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     _requested_11 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 7);
                     _title_12 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 8);
                     GHC.Base.pure (ChatInviteExported' _revoked_1 _permanent_2 _request_needed_3 _link_4 _admin_id_5 _date_6 _start_date_7 _expire_date_8 _usage_limit_9 _usage_10 _requested_11 _title_12)};
           put to_be_encoded_13 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_13._title,
                                                               8),
                                                              (Data.Maybe.isJust to_be_encoded_13._requested,
                                                               7),
                                                              (Data.Maybe.isJust to_be_encoded_13._usage,
                                                               3),
                                                              (Data.Maybe.isJust to_be_encoded_13._usage_limit,
                                                               2),
                                                              (Data.Maybe.isJust to_be_encoded_13._expire_date,
                                                               1),
                                                              (Data.Maybe.isJust to_be_encoded_13._start_date,
                                                               4),
                                                              (Data.Maybe.isJust to_be_encoded_13._request_needed,
                                                               6),
                                                              (Data.Maybe.isJust to_be_encoded_13._permanent,
                                                               5),
                                                              (Data.Maybe.isJust to_be_encoded_13._revoked,
                                                               0)];
                                      Data.Binary.put to_be_encoded_13._revoked;
                                      Data.Binary.put to_be_encoded_13._permanent;
                                      Data.Binary.put to_be_encoded_13._request_needed;
                                      Data.Binary.put to_be_encoded_13._link;
                                      Data.Binary.put to_be_encoded_13._admin_id;
                                      Data.Binary.put to_be_encoded_13._date;
                                      Data.Binary.put to_be_encoded_13._start_date;
                                      Data.Binary.put to_be_encoded_13._expire_date;
                                      Data.Binary.put to_be_encoded_13._usage_limit;
                                      Data.Binary.put to_be_encoded_13._usage;
                                      Data.Binary.put to_be_encoded_13._requested;
                                      Data.Binary.put to_be_encoded_13._title}}
instance Data.Binary.Binary ChatInvitePublicJoinRequests'
    where {get = GHC.Base.pure ChatInvitePublicJoinRequests';
           put to_be_encoded_0 = do GHC.Base.pure ()}
data ExportedChatInvite
    = ChatInviteExported !ChatInviteExported'
    | ChatInvitePublicJoinRequests !ChatInvitePublicJoinRequests'
data ChatInviteExported'
    = ChatInviteExported' {_revoked :: !(Maybe True'),
                           _permanent :: !(Maybe True'),
                           _request_needed :: !(Maybe True'),
                           _link :: !String',
                           _admin_id :: !Long',
                           _date :: !Int',
                           _start_date :: !(Maybe Int'),
                           _expire_date :: !(Maybe Int'),
                           _usage_limit :: !(Maybe Int'),
                           _usage :: !(Maybe Int'),
                           _requested :: !(Maybe Int'),
                           _title :: !(Maybe String')}
data ChatInvitePublicJoinRequests'
    = ChatInvitePublicJoinRequests' {}
instance Data.Binary.Binary ExportedChatInvite
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {179611673 -> fmap ChatInviteExported Data.Binary.get;
                      3977280183 -> fmap ChatInvitePublicJoinRequests Data.Binary.get}};
           put (ChatInviteExported tmp_1) = do {Data.Binary.Put.putWord32le 179611673;
                                                Data.Binary.put tmp_1};
           put (ChatInvitePublicJoinRequests tmp_2) = do {Data.Binary.Put.putWord32le 3977280183;
                                                          Data.Binary.put tmp_2}}
instance Data.Binary.Binary ExportedChatlistInvite'
    where {get = do {_flags_0 <- Data.Binary.get;
                     _title_1 <- Data.Binary.get;
                     _url_2 <- Data.Binary.get;
                     _peers_3 <- Data.Binary.get;
                     GHC.Base.pure (ExportedChatlistInvite' _flags_0 _title_1 _url_2 _peers_3)};
           put to_be_encoded_4 = do {Data.Binary.put to_be_encoded_4._flags;
                                     Data.Binary.put to_be_encoded_4._title;
                                     Data.Binary.put to_be_encoded_4._url;
                                     Data.Binary.put to_be_encoded_4._peers}}
data ExportedChatlistInvite
    = ExportedChatlistInvite !ExportedChatlistInvite'
data ExportedChatlistInvite'
    = ExportedChatlistInvite' {_flags :: !Nat',
                               _title :: !String',
                               _url :: !String',
                               _peers :: !(Vector Peer)}
instance Data.Binary.Binary ExportedChatlistInvite
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {206668204 -> fmap ExportedChatlistInvite Data.Binary.get}};
           put (ExportedChatlistInvite tmp_1) = do {Data.Binary.Put.putWord32le 206668204;
                                                    Data.Binary.put tmp_1}}
instance Data.Binary.Binary ExportedContactToken'
    where {get = do {_url_0 <- Data.Binary.get;
                     _expires_1 <- Data.Binary.get;
                     GHC.Base.pure (ExportedContactToken' _url_0 _expires_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._url;
                                     Data.Binary.put to_be_encoded_2._expires}}
data ExportedContactToken
    = ExportedContactToken !ExportedContactToken'
data ExportedContactToken'
    = ExportedContactToken' {_url :: !String', _expires :: !Int'}
instance Data.Binary.Binary ExportedContactToken
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1103040667 -> fmap ExportedContactToken Data.Binary.get}};
           put (ExportedContactToken tmp_1) = do {Data.Binary.Put.putWord32le 1103040667;
                                                  Data.Binary.put tmp_1}}
instance Data.Binary.Binary ExportedMessageLink'
    where {get = do {_link_0 <- Data.Binary.get;
                     _html_1 <- Data.Binary.get;
                     GHC.Base.pure (ExportedMessageLink' _link_0 _html_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._link;
                                     Data.Binary.put to_be_encoded_2._html}}
data ExportedMessageLink
    = ExportedMessageLink !ExportedMessageLink'
data ExportedMessageLink'
    = ExportedMessageLink' {_link :: !String', _html :: !String'}
instance Data.Binary.Binary ExportedMessageLink
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1571494644 -> fmap ExportedMessageLink Data.Binary.get}};
           put (ExportedMessageLink tmp_1) = do {Data.Binary.Put.putWord32le 1571494644;
                                                 Data.Binary.put tmp_1}}
instance Data.Binary.Binary ExportedStoryLink'
    where {get = do {_link_0 <- Data.Binary.get;
                     GHC.Base.pure (ExportedStoryLink' _link_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._link}
data ExportedStoryLink = ExportedStoryLink !ExportedStoryLink'
data ExportedStoryLink' = ExportedStoryLink' {_link :: !String'}
instance Data.Binary.Binary ExportedStoryLink
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1070138683 -> fmap ExportedStoryLink Data.Binary.get}};
           put (ExportedStoryLink tmp_1) = do {Data.Binary.Put.putWord32le 1070138683;
                                               Data.Binary.put tmp_1}}
instance Data.Binary.Binary FileHash'
    where {get = do {_offset_0 <- Data.Binary.get;
                     _limit_1 <- Data.Binary.get;
                     _hash_2 <- Data.Binary.get;
                     GHC.Base.pure (FileHash' _offset_0 _limit_1 _hash_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._offset;
                                     Data.Binary.put to_be_encoded_3._limit;
                                     Data.Binary.put to_be_encoded_3._hash}}
data FileHash = FileHash !FileHash'
data FileHash'
    = FileHash' {_offset :: !Long', _limit :: !Int', _hash :: !Bytes'}
instance Data.Binary.Binary FileHash
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {4087022428 -> fmap FileHash Data.Binary.get}};
           put (FileHash tmp_1) = do {Data.Binary.Put.putWord32le 4087022428;
                                      Data.Binary.put tmp_1}}
instance Data.Binary.Binary Folder'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _autofill_new_broadcasts_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _autofill_public_groups_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _autofill_new_correspondents_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _id_4 <- Data.Binary.get;
                     _title_5 <- Data.Binary.get;
                     _photo_6 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     GHC.Base.pure (Folder' _autofill_new_broadcasts_1 _autofill_public_groups_2 _autofill_new_correspondents_3 _id_4 _title_5 _photo_6)};
           put to_be_encoded_7 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_7._photo,
                                                              3),
                                                             (Data.Maybe.isJust to_be_encoded_7._autofill_new_correspondents,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_7._autofill_public_groups,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_7._autofill_new_broadcasts,
                                                              0)];
                                     Data.Binary.put to_be_encoded_7._autofill_new_broadcasts;
                                     Data.Binary.put to_be_encoded_7._autofill_public_groups;
                                     Data.Binary.put to_be_encoded_7._autofill_new_correspondents;
                                     Data.Binary.put to_be_encoded_7._id;
                                     Data.Binary.put to_be_encoded_7._title;
                                     Data.Binary.put to_be_encoded_7._photo}}
data Folder = Folder !Folder'
data Folder'
    = Folder' {_autofill_new_broadcasts :: !(Maybe True'),
               _autofill_public_groups :: !(Maybe True'),
               _autofill_new_correspondents :: !(Maybe True'),
               _id :: !Int',
               _title :: !String',
               _photo :: !(Maybe ChatPhoto)}
instance Data.Binary.Binary Folder
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {4283715173 -> fmap Folder Data.Binary.get}};
           put (Folder tmp_1) = do {Data.Binary.Put.putWord32le 4283715173;
                                    Data.Binary.put tmp_1}}
instance Data.Binary.Binary FolderPeer'
    where {get = do {_peer_0 <- Data.Binary.get;
                     _folder_id_1 <- Data.Binary.get;
                     GHC.Base.pure (FolderPeer' _peer_0 _folder_id_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._peer;
                                     Data.Binary.put to_be_encoded_2._folder_id}}
data FolderPeer = FolderPeer !FolderPeer'
data FolderPeer'
    = FolderPeer' {_peer :: !Peer, _folder_id :: !Int'}
instance Data.Binary.Binary FolderPeer
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3921323624 -> fmap FolderPeer Data.Binary.get}};
           put (FolderPeer tmp_1) = do {Data.Binary.Put.putWord32le 3921323624;
                                        Data.Binary.put tmp_1}}
instance Data.Binary.Binary ForumTopic'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _my_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _closed_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _pinned_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     _short_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 5);
                     _hidden_5 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 6);
                     _id_6 <- Data.Binary.get;
                     _date_7 <- Data.Binary.get;
                     _title_8 <- Data.Binary.get;
                     _icon_color_9 <- Data.Binary.get;
                     _icon_emoji_id_10 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _top_message_11 <- Data.Binary.get;
                     _read_inbox_max_id_12 <- Data.Binary.get;
                     _read_outbox_max_id_13 <- Data.Binary.get;
                     _unread_count_14 <- Data.Binary.get;
                     _unread_mentions_count_15 <- Data.Binary.get;
                     _unread_reactions_count_16 <- Data.Binary.get;
                     _from_id_17 <- Data.Binary.get;
                     _notify_settings_18 <- Data.Binary.get;
                     _draft_19 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 4);
                     GHC.Base.pure (ForumTopic' _my_1 _closed_2 _pinned_3 _short_4 _hidden_5 _id_6 _date_7 _title_8 _icon_color_9 _icon_emoji_id_10 _top_message_11 _read_inbox_max_id_12 _read_outbox_max_id_13 _unread_count_14 _unread_mentions_count_15 _unread_reactions_count_16 _from_id_17 _notify_settings_18 _draft_19)};
           put to_be_encoded_20 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_20._draft,
                                                               4),
                                                              (Data.Maybe.isJust to_be_encoded_20._icon_emoji_id,
                                                               0),
                                                              (Data.Maybe.isJust to_be_encoded_20._hidden,
                                                               6),
                                                              (Data.Maybe.isJust to_be_encoded_20._short,
                                                               5),
                                                              (Data.Maybe.isJust to_be_encoded_20._pinned,
                                                               3),
                                                              (Data.Maybe.isJust to_be_encoded_20._closed,
                                                               2),
                                                              (Data.Maybe.isJust to_be_encoded_20._my,
                                                               1)];
                                      Data.Binary.put to_be_encoded_20._my;
                                      Data.Binary.put to_be_encoded_20._closed;
                                      Data.Binary.put to_be_encoded_20._pinned;
                                      Data.Binary.put to_be_encoded_20._short;
                                      Data.Binary.put to_be_encoded_20._hidden;
                                      Data.Binary.put to_be_encoded_20._id;
                                      Data.Binary.put to_be_encoded_20._date;
                                      Data.Binary.put to_be_encoded_20._title;
                                      Data.Binary.put to_be_encoded_20._icon_color;
                                      Data.Binary.put to_be_encoded_20._icon_emoji_id;
                                      Data.Binary.put to_be_encoded_20._top_message;
                                      Data.Binary.put to_be_encoded_20._read_inbox_max_id;
                                      Data.Binary.put to_be_encoded_20._read_outbox_max_id;
                                      Data.Binary.put to_be_encoded_20._unread_count;
                                      Data.Binary.put to_be_encoded_20._unread_mentions_count;
                                      Data.Binary.put to_be_encoded_20._unread_reactions_count;
                                      Data.Binary.put to_be_encoded_20._from_id;
                                      Data.Binary.put to_be_encoded_20._notify_settings;
                                      Data.Binary.put to_be_encoded_20._draft}}
instance Data.Binary.Binary ForumTopicDeleted'
    where {get = do {_id_0 <- Data.Binary.get;
                     GHC.Base.pure (ForumTopicDeleted' _id_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._id}
data ForumTopic
    = ForumTopic !ForumTopic'
    | ForumTopicDeleted !ForumTopicDeleted'
data ForumTopic'
    = ForumTopic' {_my :: !(Maybe True'),
                   _closed :: !(Maybe True'),
                   _pinned :: !(Maybe True'),
                   _short :: !(Maybe True'),
                   _hidden :: !(Maybe True'),
                   _id :: !Int',
                   _date :: !Int',
                   _title :: !String',
                   _icon_color :: !Int',
                   _icon_emoji_id :: !(Maybe Long'),
                   _top_message :: !Int',
                   _read_inbox_max_id :: !Int',
                   _read_outbox_max_id :: !Int',
                   _unread_count :: !Int',
                   _unread_mentions_count :: !Int',
                   _unread_reactions_count :: !Int',
                   _from_id :: !Peer,
                   _notify_settings :: !PeerNotifySettings,
                   _draft :: !(Maybe DraftMessage)}
data ForumTopicDeleted' = ForumTopicDeleted' {_id :: !Int'}
instance Data.Binary.Binary ForumTopic
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1903173033 -> fmap ForumTopic Data.Binary.get;
                      37687451 -> fmap ForumTopicDeleted Data.Binary.get}};
           put (ForumTopic tmp_1) = do {Data.Binary.Put.putWord32le 1903173033;
                                        Data.Binary.put tmp_1};
           put (ForumTopicDeleted tmp_2) = do {Data.Binary.Put.putWord32le 37687451;
                                               Data.Binary.put tmp_2}}
instance Data.Binary.Binary Game'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _id_1 <- Data.Binary.get;
                     _access_hash_2 <- Data.Binary.get;
                     _short_name_3 <- Data.Binary.get;
                     _title_4 <- Data.Binary.get;
                     _description_5 <- Data.Binary.get;
                     _photo_6 <- Data.Binary.get;
                     _document_7 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     GHC.Base.pure (Game' _id_1 _access_hash_2 _short_name_3 _title_4 _description_5 _photo_6 _document_7)};
           put to_be_encoded_8 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_8._document,
                                                              0)];
                                     Data.Binary.put to_be_encoded_8._id;
                                     Data.Binary.put to_be_encoded_8._access_hash;
                                     Data.Binary.put to_be_encoded_8._short_name;
                                     Data.Binary.put to_be_encoded_8._title;
                                     Data.Binary.put to_be_encoded_8._description;
                                     Data.Binary.put to_be_encoded_8._photo;
                                     Data.Binary.put to_be_encoded_8._document}}
data Game = Game !Game'
data Game'
    = Game' {_id :: !Long',
             _access_hash :: !Long',
             _short_name :: !String',
             _title :: !String',
             _description :: !String',
             _photo :: !Photo,
             _document :: !(Maybe Document)}
instance Data.Binary.Binary Game
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3187238203 -> fmap Game Data.Binary.get}};
           put (Game tmp_1) = do {Data.Binary.Put.putWord32le 3187238203;
                                  Data.Binary.put tmp_1}}
instance Data.Binary.Binary GeoPoint'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _long_1 <- Data.Binary.get;
                     _lat_2 <- Data.Binary.get;
                     _access_hash_3 <- Data.Binary.get;
                     _accuracy_radius_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     GHC.Base.pure (GeoPoint' _long_1 _lat_2 _access_hash_3 _accuracy_radius_4)};
           put to_be_encoded_5 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_5._accuracy_radius,
                                                              0)];
                                     Data.Binary.put to_be_encoded_5._long;
                                     Data.Binary.put to_be_encoded_5._lat;
                                     Data.Binary.put to_be_encoded_5._access_hash;
                                     Data.Binary.put to_be_encoded_5._accuracy_radius}}
instance Data.Binary.Binary GeoPointEmpty'
    where {get = GHC.Base.pure GeoPointEmpty';
           put to_be_encoded_0 = do GHC.Base.pure ()}
data GeoPoint
    = GeoPoint !GeoPoint'
    | GeoPointEmpty !GeoPointEmpty'
data GeoPoint'
    = GeoPoint' {_long :: !Double',
                 _lat :: !Double',
                 _access_hash :: !Long',
                 _accuracy_radius :: !(Maybe Int')}
data GeoPointEmpty' = GeoPointEmpty' {}
instance Data.Binary.Binary GeoPoint
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2997024355 -> fmap GeoPoint Data.Binary.get;
                      286776671 -> fmap GeoPointEmpty Data.Binary.get}};
           put (GeoPoint tmp_1) = do {Data.Binary.Put.putWord32le 2997024355;
                                      Data.Binary.put tmp_1};
           put (GeoPointEmpty tmp_2) = do {Data.Binary.Put.putWord32le 286776671;
                                           Data.Binary.put tmp_2}}
instance Data.Binary.Binary GlobalPrivacySettings'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _archive_and_mute_new_noncontact_peers_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _keep_archived_unmuted_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _keep_archived_folders_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     GHC.Base.pure (GlobalPrivacySettings' _archive_and_mute_new_noncontact_peers_1 _keep_archived_unmuted_2 _keep_archived_folders_3)};
           put to_be_encoded_4 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_4._keep_archived_folders,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_4._keep_archived_unmuted,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_4._archive_and_mute_new_noncontact_peers,
                                                              0)];
                                     Data.Binary.put to_be_encoded_4._archive_and_mute_new_noncontact_peers;
                                     Data.Binary.put to_be_encoded_4._keep_archived_unmuted;
                                     Data.Binary.put to_be_encoded_4._keep_archived_folders}}
data GlobalPrivacySettings
    = GlobalPrivacySettings !GlobalPrivacySettings'
data GlobalPrivacySettings'
    = GlobalPrivacySettings' {_archive_and_mute_new_noncontact_peers :: !(Maybe True'),
                              _keep_archived_unmuted :: !(Maybe True'),
                              _keep_archived_folders :: !(Maybe True')}
instance Data.Binary.Binary GlobalPrivacySettings
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1934380235 -> fmap GlobalPrivacySettings Data.Binary.get}};
           put (GlobalPrivacySettings tmp_1) = do {Data.Binary.Put.putWord32le 1934380235;
                                                   Data.Binary.put tmp_1}}
instance Data.Binary.Binary GroupCall'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _join_muted_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _can_change_join_muted_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _join_date_asc_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 6);
                     _schedule_start_subscribed_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 8);
                     _can_start_video_5 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 9);
                     _record_video_active_6 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 11);
                     _rtmp_stream_7 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 12);
                     _listeners_hidden_8 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 13);
                     _id_9 <- Data.Binary.get;
                     _access_hash_10 <- Data.Binary.get;
                     _participants_count_11 <- Data.Binary.get;
                     _title_12 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     _stream_dc_id_13 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 4);
                     _record_start_date_14 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 5);
                     _schedule_date_15 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 7);
                     _unmuted_video_count_16 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 10);
                     _unmuted_video_limit_17 <- Data.Binary.get;
                     _version_18 <- Data.Binary.get;
                     GHC.Base.pure (GroupCall' _join_muted_1 _can_change_join_muted_2 _join_date_asc_3 _schedule_start_subscribed_4 _can_start_video_5 _record_video_active_6 _rtmp_stream_7 _listeners_hidden_8 _id_9 _access_hash_10 _participants_count_11 _title_12 _stream_dc_id_13 _record_start_date_14 _schedule_date_15 _unmuted_video_count_16 _unmuted_video_limit_17 _version_18)};
           put to_be_encoded_19 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_19._unmuted_video_count,
                                                               10),
                                                              (Data.Maybe.isJust to_be_encoded_19._schedule_date,
                                                               7),
                                                              (Data.Maybe.isJust to_be_encoded_19._record_start_date,
                                                               5),
                                                              (Data.Maybe.isJust to_be_encoded_19._stream_dc_id,
                                                               4),
                                                              (Data.Maybe.isJust to_be_encoded_19._title,
                                                               3),
                                                              (Data.Maybe.isJust to_be_encoded_19._listeners_hidden,
                                                               13),
                                                              (Data.Maybe.isJust to_be_encoded_19._rtmp_stream,
                                                               12),
                                                              (Data.Maybe.isJust to_be_encoded_19._record_video_active,
                                                               11),
                                                              (Data.Maybe.isJust to_be_encoded_19._can_start_video,
                                                               9),
                                                              (Data.Maybe.isJust to_be_encoded_19._schedule_start_subscribed,
                                                               8),
                                                              (Data.Maybe.isJust to_be_encoded_19._join_date_asc,
                                                               6),
                                                              (Data.Maybe.isJust to_be_encoded_19._can_change_join_muted,
                                                               2),
                                                              (Data.Maybe.isJust to_be_encoded_19._join_muted,
                                                               1)];
                                      Data.Binary.put to_be_encoded_19._join_muted;
                                      Data.Binary.put to_be_encoded_19._can_change_join_muted;
                                      Data.Binary.put to_be_encoded_19._join_date_asc;
                                      Data.Binary.put to_be_encoded_19._schedule_start_subscribed;
                                      Data.Binary.put to_be_encoded_19._can_start_video;
                                      Data.Binary.put to_be_encoded_19._record_video_active;
                                      Data.Binary.put to_be_encoded_19._rtmp_stream;
                                      Data.Binary.put to_be_encoded_19._listeners_hidden;
                                      Data.Binary.put to_be_encoded_19._id;
                                      Data.Binary.put to_be_encoded_19._access_hash;
                                      Data.Binary.put to_be_encoded_19._participants_count;
                                      Data.Binary.put to_be_encoded_19._title;
                                      Data.Binary.put to_be_encoded_19._stream_dc_id;
                                      Data.Binary.put to_be_encoded_19._record_start_date;
                                      Data.Binary.put to_be_encoded_19._schedule_date;
                                      Data.Binary.put to_be_encoded_19._unmuted_video_count;
                                      Data.Binary.put to_be_encoded_19._unmuted_video_limit;
                                      Data.Binary.put to_be_encoded_19._version}}
instance Data.Binary.Binary GroupCallDiscarded'
    where {get = do {_id_0 <- Data.Binary.get;
                     _access_hash_1 <- Data.Binary.get;
                     _duration_2 <- Data.Binary.get;
                     GHC.Base.pure (GroupCallDiscarded' _id_0 _access_hash_1 _duration_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._id;
                                     Data.Binary.put to_be_encoded_3._access_hash;
                                     Data.Binary.put to_be_encoded_3._duration}}
data GroupCall
    = GroupCall !GroupCall'
    | GroupCallDiscarded !GroupCallDiscarded'
data GroupCall'
    = GroupCall' {_join_muted :: !(Maybe True'),
                  _can_change_join_muted :: !(Maybe True'),
                  _join_date_asc :: !(Maybe True'),
                  _schedule_start_subscribed :: !(Maybe True'),
                  _can_start_video :: !(Maybe True'),
                  _record_video_active :: !(Maybe True'),
                  _rtmp_stream :: !(Maybe True'),
                  _listeners_hidden :: !(Maybe True'),
                  _id :: !Long',
                  _access_hash :: !Long',
                  _participants_count :: !Int',
                  _title :: !(Maybe String'),
                  _stream_dc_id :: !(Maybe Int'),
                  _record_start_date :: !(Maybe Int'),
                  _schedule_date :: !(Maybe Int'),
                  _unmuted_video_count :: !(Maybe Int'),
                  _unmuted_video_limit :: !Int',
                  _version :: !Int'}
data GroupCallDiscarded'
    = GroupCallDiscarded' {_id :: !Long',
                           _access_hash :: !Long',
                           _duration :: !Int'}
instance Data.Binary.Binary GroupCall
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3583468812 -> fmap GroupCall Data.Binary.get;
                      2004925620 -> fmap GroupCallDiscarded Data.Binary.get}};
           put (GroupCall tmp_1) = do {Data.Binary.Put.putWord32le 3583468812;
                                       Data.Binary.put tmp_1};
           put (GroupCallDiscarded tmp_2) = do {Data.Binary.Put.putWord32le 2004925620;
                                                Data.Binary.put tmp_2}}
instance Data.Binary.Binary GroupCallParticipant'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _muted_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _left_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _can_self_unmute_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _just_joined_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 4);
                     _versioned_5 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 5);
                     _min_6 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 8);
                     _muted_by_you_7 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 9);
                     _volume_by_admin_8 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 10);
                     _self_9 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 12);
                     _video_joined_10 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 15);
                     _peer_11 <- Data.Binary.get;
                     _date_12 <- Data.Binary.get;
                     _active_date_13 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     _source_14 <- Data.Binary.get;
                     _volume_15 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 7);
                     _about_16 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 11);
                     _raise_hand_rating_17 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 13);
                     _video_18 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 6);
                     _presentation_19 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 14);
                     GHC.Base.pure (GroupCallParticipant' _muted_1 _left_2 _can_self_unmute_3 _just_joined_4 _versioned_5 _min_6 _muted_by_you_7 _volume_by_admin_8 _self_9 _video_joined_10 _peer_11 _date_12 _active_date_13 _source_14 _volume_15 _about_16 _raise_hand_rating_17 _video_18 _presentation_19)};
           put to_be_encoded_20 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_20._presentation,
                                                               14),
                                                              (Data.Maybe.isJust to_be_encoded_20._video,
                                                               6),
                                                              (Data.Maybe.isJust to_be_encoded_20._raise_hand_rating,
                                                               13),
                                                              (Data.Maybe.isJust to_be_encoded_20._about,
                                                               11),
                                                              (Data.Maybe.isJust to_be_encoded_20._volume,
                                                               7),
                                                              (Data.Maybe.isJust to_be_encoded_20._active_date,
                                                               3),
                                                              (Data.Maybe.isJust to_be_encoded_20._video_joined,
                                                               15),
                                                              (Data.Maybe.isJust to_be_encoded_20._self,
                                                               12),
                                                              (Data.Maybe.isJust to_be_encoded_20._volume_by_admin,
                                                               10),
                                                              (Data.Maybe.isJust to_be_encoded_20._muted_by_you,
                                                               9),
                                                              (Data.Maybe.isJust to_be_encoded_20._min,
                                                               8),
                                                              (Data.Maybe.isJust to_be_encoded_20._versioned,
                                                               5),
                                                              (Data.Maybe.isJust to_be_encoded_20._just_joined,
                                                               4),
                                                              (Data.Maybe.isJust to_be_encoded_20._can_self_unmute,
                                                               2),
                                                              (Data.Maybe.isJust to_be_encoded_20._left,
                                                               1),
                                                              (Data.Maybe.isJust to_be_encoded_20._muted,
                                                               0)];
                                      Data.Binary.put to_be_encoded_20._muted;
                                      Data.Binary.put to_be_encoded_20._left;
                                      Data.Binary.put to_be_encoded_20._can_self_unmute;
                                      Data.Binary.put to_be_encoded_20._just_joined;
                                      Data.Binary.put to_be_encoded_20._versioned;
                                      Data.Binary.put to_be_encoded_20._min;
                                      Data.Binary.put to_be_encoded_20._muted_by_you;
                                      Data.Binary.put to_be_encoded_20._volume_by_admin;
                                      Data.Binary.put to_be_encoded_20._self;
                                      Data.Binary.put to_be_encoded_20._video_joined;
                                      Data.Binary.put to_be_encoded_20._peer;
                                      Data.Binary.put to_be_encoded_20._date;
                                      Data.Binary.put to_be_encoded_20._active_date;
                                      Data.Binary.put to_be_encoded_20._source;
                                      Data.Binary.put to_be_encoded_20._volume;
                                      Data.Binary.put to_be_encoded_20._about;
                                      Data.Binary.put to_be_encoded_20._raise_hand_rating;
                                      Data.Binary.put to_be_encoded_20._video;
                                      Data.Binary.put to_be_encoded_20._presentation}}
data GroupCallParticipant
    = GroupCallParticipant !GroupCallParticipant'
data GroupCallParticipant'
    = GroupCallParticipant' {_muted :: !(Maybe True'),
                             _left :: !(Maybe True'),
                             _can_self_unmute :: !(Maybe True'),
                             _just_joined :: !(Maybe True'),
                             _versioned :: !(Maybe True'),
                             _min :: !(Maybe True'),
                             _muted_by_you :: !(Maybe True'),
                             _volume_by_admin :: !(Maybe True'),
                             _self :: !(Maybe True'),
                             _video_joined :: !(Maybe True'),
                             _peer :: !Peer,
                             _date :: !Int',
                             _active_date :: !(Maybe Int'),
                             _source :: !Int',
                             _volume :: !(Maybe Int'),
                             _about :: !(Maybe String'),
                             _raise_hand_rating :: !(Maybe Long'),
                             _video :: !(Maybe GroupCallParticipantVideo),
                             _presentation :: !(Maybe GroupCallParticipantVideo)}
instance Data.Binary.Binary GroupCallParticipant
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3953538814 -> fmap GroupCallParticipant Data.Binary.get}};
           put (GroupCallParticipant tmp_1) = do {Data.Binary.Put.putWord32le 3953538814;
                                                  Data.Binary.put tmp_1}}
instance Data.Binary.Binary GroupCallParticipantVideo'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _paused_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _endpoint_2 <- Data.Binary.get;
                     _source_groups_3 <- Data.Binary.get;
                     _audio_source_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     GHC.Base.pure (GroupCallParticipantVideo' _paused_1 _endpoint_2 _source_groups_3 _audio_source_4)};
           put to_be_encoded_5 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_5._audio_source,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_5._paused,
                                                              0)];
                                     Data.Binary.put to_be_encoded_5._paused;
                                     Data.Binary.put to_be_encoded_5._endpoint;
                                     Data.Binary.put to_be_encoded_5._source_groups;
                                     Data.Binary.put to_be_encoded_5._audio_source}}
data GroupCallParticipantVideo
    = GroupCallParticipantVideo !GroupCallParticipantVideo'
data GroupCallParticipantVideo'
    = GroupCallParticipantVideo' {_paused :: !(Maybe True'),
                                  _endpoint :: !String',
                                  _source_groups :: !(Vector GroupCallParticipantVideoSourceGroup),
                                  _audio_source :: !(Maybe Int')}
instance Data.Binary.Binary GroupCallParticipantVideo
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1735736008 -> fmap GroupCallParticipantVideo Data.Binary.get}};
           put (GroupCallParticipantVideo tmp_1) = do {Data.Binary.Put.putWord32le 1735736008;
                                                       Data.Binary.put tmp_1}}
instance Data.Binary.Binary GroupCallParticipantVideoSourceGroup'
    where {get = do {_semantics_0 <- Data.Binary.get;
                     _sources_1 <- Data.Binary.get;
                     GHC.Base.pure (GroupCallParticipantVideoSourceGroup' _semantics_0 _sources_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._semantics;
                                     Data.Binary.put to_be_encoded_2._sources}}
data GroupCallParticipantVideoSourceGroup
    = GroupCallParticipantVideoSourceGroup !GroupCallParticipantVideoSourceGroup'
data GroupCallParticipantVideoSourceGroup'
    = GroupCallParticipantVideoSourceGroup' {_semantics :: !String',
                                             _sources :: !(Vector Int')}
instance Data.Binary.Binary GroupCallParticipantVideoSourceGroup
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3702593719 -> fmap GroupCallParticipantVideoSourceGroup Data.Binary.get}};
           put (GroupCallParticipantVideoSourceGroup tmp_1) = do {Data.Binary.Put.putWord32le 3702593719;
                                                                  Data.Binary.put tmp_1}}
instance Data.Binary.Binary GroupCallStreamChannel'
    where {get = do {_channel_0 <- Data.Binary.get;
                     _scale_1 <- Data.Binary.get;
                     _last_timestamp_ms_2 <- Data.Binary.get;
                     GHC.Base.pure (GroupCallStreamChannel' _channel_0 _scale_1 _last_timestamp_ms_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._channel;
                                     Data.Binary.put to_be_encoded_3._scale;
                                     Data.Binary.put to_be_encoded_3._last_timestamp_ms}}
data GroupCallStreamChannel
    = GroupCallStreamChannel !GroupCallStreamChannel'
data GroupCallStreamChannel'
    = GroupCallStreamChannel' {_channel :: !Int',
                               _scale :: !Int',
                               _last_timestamp_ms :: !Long'}
instance Data.Binary.Binary GroupCallStreamChannel
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2162903215 -> fmap GroupCallStreamChannel Data.Binary.get}};
           put (GroupCallStreamChannel tmp_1) = do {Data.Binary.Put.putWord32le 2162903215;
                                                    Data.Binary.put tmp_1}}
instance Data.Binary.Binary HighScore'
    where {get = do {_pos_0 <- Data.Binary.get;
                     _user_id_1 <- Data.Binary.get;
                     _score_2 <- Data.Binary.get;
                     GHC.Base.pure (HighScore' _pos_0 _user_id_1 _score_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._pos;
                                     Data.Binary.put to_be_encoded_3._user_id;
                                     Data.Binary.put to_be_encoded_3._score}}
data HighScore = HighScore !HighScore'
data HighScore'
    = HighScore' {_pos :: !Int', _user_id :: !Long', _score :: !Int'}
instance Data.Binary.Binary HighScore
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1940093419 -> fmap HighScore Data.Binary.get}};
           put (HighScore tmp_1) = do {Data.Binary.Put.putWord32le 1940093419;
                                       Data.Binary.put tmp_1}}
instance Data.Binary.Binary ImportedContact'
    where {get = do {_user_id_0 <- Data.Binary.get;
                     _client_id_1 <- Data.Binary.get;
                     GHC.Base.pure (ImportedContact' _user_id_0 _client_id_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._user_id;
                                     Data.Binary.put to_be_encoded_2._client_id}}
data ImportedContact = ImportedContact !ImportedContact'
data ImportedContact'
    = ImportedContact' {_user_id :: !Long', _client_id :: !Long'}
instance Data.Binary.Binary ImportedContact
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3242081360 -> fmap ImportedContact Data.Binary.get}};
           put (ImportedContact tmp_1) = do {Data.Binary.Put.putWord32le 3242081360;
                                             Data.Binary.put tmp_1}}
instance Data.Binary.Binary InlineBotSwitchPM'
    where {get = do {_text_0 <- Data.Binary.get;
                     _start_param_1 <- Data.Binary.get;
                     GHC.Base.pure (InlineBotSwitchPM' _text_0 _start_param_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._text;
                                     Data.Binary.put to_be_encoded_2._start_param}}
data InlineBotSwitchPM = InlineBotSwitchPM !InlineBotSwitchPM'
data InlineBotSwitchPM'
    = InlineBotSwitchPM' {_text :: !String', _start_param :: !String'}
instance Data.Binary.Binary InlineBotSwitchPM
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1008755359 -> fmap InlineBotSwitchPM Data.Binary.get}};
           put (InlineBotSwitchPM tmp_1) = do {Data.Binary.Put.putWord32le 1008755359;
                                               Data.Binary.put tmp_1}}
instance Data.Binary.Binary InlineBotWebView'
    where {get = do {_text_0 <- Data.Binary.get;
                     _url_1 <- Data.Binary.get;
                     GHC.Base.pure (InlineBotWebView' _text_0 _url_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._text;
                                     Data.Binary.put to_be_encoded_2._url}}
data InlineBotWebView = InlineBotWebView !InlineBotWebView'
data InlineBotWebView'
    = InlineBotWebView' {_text :: !String', _url :: !String'}
instance Data.Binary.Binary InlineBotWebView
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3044185557 -> fmap InlineBotWebView Data.Binary.get}};
           put (InlineBotWebView tmp_1) = do {Data.Binary.Put.putWord32le 3044185557;
                                              Data.Binary.put tmp_1}}
instance Data.Binary.Binary InlineQueryPeerTypeBotPM'
    where {get = GHC.Base.pure InlineQueryPeerTypeBotPM';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary InlineQueryPeerTypeBroadcast'
    where {get = GHC.Base.pure InlineQueryPeerTypeBroadcast';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary InlineQueryPeerTypeChat'
    where {get = GHC.Base.pure InlineQueryPeerTypeChat';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary InlineQueryPeerTypeMegagroup'
    where {get = GHC.Base.pure InlineQueryPeerTypeMegagroup';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary InlineQueryPeerTypePM'
    where {get = GHC.Base.pure InlineQueryPeerTypePM';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary InlineQueryPeerTypeSameBotPM'
    where {get = GHC.Base.pure InlineQueryPeerTypeSameBotPM';
           put to_be_encoded_0 = do GHC.Base.pure ()}
data InlineQueryPeerType
    = InlineQueryPeerTypeBotPM !InlineQueryPeerTypeBotPM'
    | InlineQueryPeerTypeBroadcast !InlineQueryPeerTypeBroadcast'
    | InlineQueryPeerTypeChat !InlineQueryPeerTypeChat'
    | InlineQueryPeerTypeMegagroup !InlineQueryPeerTypeMegagroup'
    | InlineQueryPeerTypePM !InlineQueryPeerTypePM'
    | InlineQueryPeerTypeSameBotPM !InlineQueryPeerTypeSameBotPM'
data InlineQueryPeerTypeBotPM' = InlineQueryPeerTypeBotPM' {}
data InlineQueryPeerTypeBroadcast'
    = InlineQueryPeerTypeBroadcast' {}
data InlineQueryPeerTypeChat' = InlineQueryPeerTypeChat' {}
data InlineQueryPeerTypeMegagroup'
    = InlineQueryPeerTypeMegagroup' {}
data InlineQueryPeerTypePM' = InlineQueryPeerTypePM' {}
data InlineQueryPeerTypeSameBotPM'
    = InlineQueryPeerTypeSameBotPM' {}
instance Data.Binary.Binary InlineQueryPeerType
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {238759180 -> fmap InlineQueryPeerTypeBotPM Data.Binary.get;
                      1664413338 -> fmap InlineQueryPeerTypeBroadcast Data.Binary.get;
                      3613836554 -> fmap InlineQueryPeerTypeChat Data.Binary.get;
                      1589952067 -> fmap InlineQueryPeerTypeMegagroup Data.Binary.get;
                      2201751468 -> fmap InlineQueryPeerTypePM Data.Binary.get;
                      813821341 -> fmap InlineQueryPeerTypeSameBotPM Data.Binary.get}};
           put (InlineQueryPeerTypeBotPM tmp_1) = do {Data.Binary.Put.putWord32le 238759180;
                                                      Data.Binary.put tmp_1};
           put (InlineQueryPeerTypeBroadcast tmp_2) = do {Data.Binary.Put.putWord32le 1664413338;
                                                          Data.Binary.put tmp_2};
           put (InlineQueryPeerTypeChat tmp_3) = do {Data.Binary.Put.putWord32le 3613836554;
                                                     Data.Binary.put tmp_3};
           put (InlineQueryPeerTypeMegagroup tmp_4) = do {Data.Binary.Put.putWord32le 1589952067;
                                                          Data.Binary.put tmp_4};
           put (InlineQueryPeerTypePM tmp_5) = do {Data.Binary.Put.putWord32le 2201751468;
                                                   Data.Binary.put tmp_5};
           put (InlineQueryPeerTypeSameBotPM tmp_6) = do {Data.Binary.Put.putWord32le 813821341;
                                                          Data.Binary.put tmp_6}}
instance Data.Binary.Binary InputAppEvent'
    where {get = do {_time_0 <- Data.Binary.get;
                     _type_1 <- Data.Binary.get;
                     _peer_2 <- Data.Binary.get;
                     _data_3 <- Data.Binary.get;
                     GHC.Base.pure (InputAppEvent' _time_0 _type_1 _peer_2 _data_3)};
           put to_be_encoded_4 = do {Data.Binary.put to_be_encoded_4._time;
                                     Data.Binary.put to_be_encoded_4._type;
                                     Data.Binary.put to_be_encoded_4._peer;
                                     Data.Binary.put to_be_encoded_4._data}}
data InputAppEvent = InputAppEvent !InputAppEvent'
data InputAppEvent'
    = InputAppEvent' {_time :: !Double',
                      _type :: !String',
                      _peer :: !Long',
                      _data :: !JSONValue}
instance Data.Binary.Binary InputAppEvent
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {488313413 -> fmap InputAppEvent Data.Binary.get}};
           put (InputAppEvent tmp_1) = do {Data.Binary.Put.putWord32le 488313413;
                                           Data.Binary.put tmp_1}}
instance Data.Binary.Binary InputBotAppID'
    where {get = do {_id_0 <- Data.Binary.get;
                     _access_hash_1 <- Data.Binary.get;
                     GHC.Base.pure (InputBotAppID' _id_0 _access_hash_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._id;
                                     Data.Binary.put to_be_encoded_2._access_hash}}
instance Data.Binary.Binary InputBotAppShortName'
    where {get = do {_bot_id_0 <- Data.Binary.get;
                     _short_name_1 <- Data.Binary.get;
                     GHC.Base.pure (InputBotAppShortName' _bot_id_0 _short_name_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._bot_id;
                                     Data.Binary.put to_be_encoded_2._short_name}}
data InputBotApp
    = InputBotAppID !InputBotAppID'
    | InputBotAppShortName !InputBotAppShortName'
data InputBotAppID'
    = InputBotAppID' {_id :: !Long', _access_hash :: !Long'}
data InputBotAppShortName'
    = InputBotAppShortName' {_bot_id :: !InputUser,
                             _short_name :: !String'}
instance Data.Binary.Binary InputBotApp
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2837495162 -> fmap InputBotAppID Data.Binary.get;
                      2425095175 -> fmap InputBotAppShortName Data.Binary.get}};
           put (InputBotAppID tmp_1) = do {Data.Binary.Put.putWord32le 2837495162;
                                           Data.Binary.put tmp_1};
           put (InputBotAppShortName tmp_2) = do {Data.Binary.Put.putWord32le 2425095175;
                                                  Data.Binary.put tmp_2}}
instance Data.Binary.Binary InputBotInlineMessageGame'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _reply_markup_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     GHC.Base.pure (InputBotInlineMessageGame' _reply_markup_1)};
           put to_be_encoded_2 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_2._reply_markup,
                                                              2)];
                                     Data.Binary.put to_be_encoded_2._reply_markup}}
instance Data.Binary.Binary InputBotInlineMessageMediaAuto'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _invert_media_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     _message_2 <- Data.Binary.get;
                     _entities_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _reply_markup_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     GHC.Base.pure (InputBotInlineMessageMediaAuto' _invert_media_1 _message_2 _entities_3 _reply_markup_4)};
           put to_be_encoded_5 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_5._reply_markup,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_5._entities,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_5._invert_media,
                                                              3)];
                                     Data.Binary.put to_be_encoded_5._invert_media;
                                     Data.Binary.put to_be_encoded_5._message;
                                     Data.Binary.put to_be_encoded_5._entities;
                                     Data.Binary.put to_be_encoded_5._reply_markup}}
instance Data.Binary.Binary InputBotInlineMessageMediaContact'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _phone_number_1 <- Data.Binary.get;
                     _first_name_2 <- Data.Binary.get;
                     _last_name_3 <- Data.Binary.get;
                     _vcard_4 <- Data.Binary.get;
                     _reply_markup_5 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     GHC.Base.pure (InputBotInlineMessageMediaContact' _phone_number_1 _first_name_2 _last_name_3 _vcard_4 _reply_markup_5)};
           put to_be_encoded_6 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_6._reply_markup,
                                                              2)];
                                     Data.Binary.put to_be_encoded_6._phone_number;
                                     Data.Binary.put to_be_encoded_6._first_name;
                                     Data.Binary.put to_be_encoded_6._last_name;
                                     Data.Binary.put to_be_encoded_6._vcard;
                                     Data.Binary.put to_be_encoded_6._reply_markup}}
instance Data.Binary.Binary InputBotInlineMessageMediaGeo'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _geo_point_1 <- Data.Binary.get;
                     _heading_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _period_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _proximity_notification_radius_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     _reply_markup_5 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     GHC.Base.pure (InputBotInlineMessageMediaGeo' _geo_point_1 _heading_2 _period_3 _proximity_notification_radius_4 _reply_markup_5)};
           put to_be_encoded_6 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_6._reply_markup,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_6._proximity_notification_radius,
                                                              3),
                                                             (Data.Maybe.isJust to_be_encoded_6._period,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_6._heading,
                                                              0)];
                                     Data.Binary.put to_be_encoded_6._geo_point;
                                     Data.Binary.put to_be_encoded_6._heading;
                                     Data.Binary.put to_be_encoded_6._period;
                                     Data.Binary.put to_be_encoded_6._proximity_notification_radius;
                                     Data.Binary.put to_be_encoded_6._reply_markup}}
instance Data.Binary.Binary InputBotInlineMessageMediaInvoice'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _title_1 <- Data.Binary.get;
                     _description_2 <- Data.Binary.get;
                     _photo_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _invoice_4 <- Data.Binary.get;
                     _payload_5 <- Data.Binary.get;
                     _provider_6 <- Data.Binary.get;
                     _provider_data_7 <- Data.Binary.get;
                     _reply_markup_8 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     GHC.Base.pure (InputBotInlineMessageMediaInvoice' _title_1 _description_2 _photo_3 _invoice_4 _payload_5 _provider_6 _provider_data_7 _reply_markup_8)};
           put to_be_encoded_9 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_9._reply_markup,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_9._photo,
                                                              0)];
                                     Data.Binary.put to_be_encoded_9._title;
                                     Data.Binary.put to_be_encoded_9._description;
                                     Data.Binary.put to_be_encoded_9._photo;
                                     Data.Binary.put to_be_encoded_9._invoice;
                                     Data.Binary.put to_be_encoded_9._payload;
                                     Data.Binary.put to_be_encoded_9._provider;
                                     Data.Binary.put to_be_encoded_9._provider_data;
                                     Data.Binary.put to_be_encoded_9._reply_markup}}
instance Data.Binary.Binary InputBotInlineMessageMediaVenue'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _geo_point_1 <- Data.Binary.get;
                     _title_2 <- Data.Binary.get;
                     _address_3 <- Data.Binary.get;
                     _provider_4 <- Data.Binary.get;
                     _venue_id_5 <- Data.Binary.get;
                     _venue_type_6 <- Data.Binary.get;
                     _reply_markup_7 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     GHC.Base.pure (InputBotInlineMessageMediaVenue' _geo_point_1 _title_2 _address_3 _provider_4 _venue_id_5 _venue_type_6 _reply_markup_7)};
           put to_be_encoded_8 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_8._reply_markup,
                                                              2)];
                                     Data.Binary.put to_be_encoded_8._geo_point;
                                     Data.Binary.put to_be_encoded_8._title;
                                     Data.Binary.put to_be_encoded_8._address;
                                     Data.Binary.put to_be_encoded_8._provider;
                                     Data.Binary.put to_be_encoded_8._venue_id;
                                     Data.Binary.put to_be_encoded_8._venue_type;
                                     Data.Binary.put to_be_encoded_8._reply_markup}}
instance Data.Binary.Binary InputBotInlineMessageMediaWebPage'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _invert_media_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     _force_large_media_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 4);
                     _force_small_media_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 5);
                     _optional_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 6);
                     _message_5 <- Data.Binary.get;
                     _entities_6 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _url_7 <- Data.Binary.get;
                     _reply_markup_8 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     GHC.Base.pure (InputBotInlineMessageMediaWebPage' _invert_media_1 _force_large_media_2 _force_small_media_3 _optional_4 _message_5 _entities_6 _url_7 _reply_markup_8)};
           put to_be_encoded_9 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_9._reply_markup,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_9._entities,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_9._optional,
                                                              6),
                                                             (Data.Maybe.isJust to_be_encoded_9._force_small_media,
                                                              5),
                                                             (Data.Maybe.isJust to_be_encoded_9._force_large_media,
                                                              4),
                                                             (Data.Maybe.isJust to_be_encoded_9._invert_media,
                                                              3)];
                                     Data.Binary.put to_be_encoded_9._invert_media;
                                     Data.Binary.put to_be_encoded_9._force_large_media;
                                     Data.Binary.put to_be_encoded_9._force_small_media;
                                     Data.Binary.put to_be_encoded_9._optional;
                                     Data.Binary.put to_be_encoded_9._message;
                                     Data.Binary.put to_be_encoded_9._entities;
                                     Data.Binary.put to_be_encoded_9._url;
                                     Data.Binary.put to_be_encoded_9._reply_markup}}
instance Data.Binary.Binary InputBotInlineMessageText'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _no_webpage_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _invert_media_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     _message_3 <- Data.Binary.get;
                     _entities_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _reply_markup_5 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     GHC.Base.pure (InputBotInlineMessageText' _no_webpage_1 _invert_media_2 _message_3 _entities_4 _reply_markup_5)};
           put to_be_encoded_6 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_6._reply_markup,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_6._entities,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_6._invert_media,
                                                              3),
                                                             (Data.Maybe.isJust to_be_encoded_6._no_webpage,
                                                              0)];
                                     Data.Binary.put to_be_encoded_6._no_webpage;
                                     Data.Binary.put to_be_encoded_6._invert_media;
                                     Data.Binary.put to_be_encoded_6._message;
                                     Data.Binary.put to_be_encoded_6._entities;
                                     Data.Binary.put to_be_encoded_6._reply_markup}}
data InputBotInlineMessage
    = InputBotInlineMessageGame !InputBotInlineMessageGame'
    | InputBotInlineMessageMediaAuto !InputBotInlineMessageMediaAuto'
    | InputBotInlineMessageMediaContact !InputBotInlineMessageMediaContact'
    | InputBotInlineMessageMediaGeo !InputBotInlineMessageMediaGeo'
    | InputBotInlineMessageMediaInvoice !InputBotInlineMessageMediaInvoice'
    | InputBotInlineMessageMediaVenue !InputBotInlineMessageMediaVenue'
    | InputBotInlineMessageMediaWebPage !InputBotInlineMessageMediaWebPage'
    | InputBotInlineMessageText !InputBotInlineMessageText'
data InputBotInlineMessageGame'
    = InputBotInlineMessageGame' {_reply_markup :: !(Maybe ReplyMarkup)}
data InputBotInlineMessageMediaAuto'
    = InputBotInlineMessageMediaAuto' {_invert_media :: !(Maybe True'),
                                       _message :: !String',
                                       _entities :: !(Maybe (Vector MessageEntity)),
                                       _reply_markup :: !(Maybe ReplyMarkup)}
data InputBotInlineMessageMediaContact'
    = InputBotInlineMessageMediaContact' {_phone_number :: !String',
                                          _first_name :: !String',
                                          _last_name :: !String',
                                          _vcard :: !String',
                                          _reply_markup :: !(Maybe ReplyMarkup)}
data InputBotInlineMessageMediaGeo'
    = InputBotInlineMessageMediaGeo' {_geo_point :: !InputGeoPoint,
                                      _heading :: !(Maybe Int'),
                                      _period :: !(Maybe Int'),
                                      _proximity_notification_radius :: !(Maybe Int'),
                                      _reply_markup :: !(Maybe ReplyMarkup)}
data InputBotInlineMessageMediaInvoice'
    = InputBotInlineMessageMediaInvoice' {_title :: !String',
                                          _description :: !String',
                                          _photo :: !(Maybe InputWebDocument),
                                          _invoice :: !Invoice,
                                          _payload :: !Bytes',
                                          _provider :: !String',
                                          _provider_data :: !DataJSON,
                                          _reply_markup :: !(Maybe ReplyMarkup)}
data InputBotInlineMessageMediaVenue'
    = InputBotInlineMessageMediaVenue' {_geo_point :: !InputGeoPoint,
                                        _title :: !String',
                                        _address :: !String',
                                        _provider :: !String',
                                        _venue_id :: !String',
                                        _venue_type :: !String',
                                        _reply_markup :: !(Maybe ReplyMarkup)}
data InputBotInlineMessageMediaWebPage'
    = InputBotInlineMessageMediaWebPage' {_invert_media :: !(Maybe True'),
                                          _force_large_media :: !(Maybe True'),
                                          _force_small_media :: !(Maybe True'),
                                          _optional :: !(Maybe True'),
                                          _message :: !String',
                                          _entities :: !(Maybe (Vector MessageEntity)),
                                          _url :: !String',
                                          _reply_markup :: !(Maybe ReplyMarkup)}
data InputBotInlineMessageText'
    = InputBotInlineMessageText' {_no_webpage :: !(Maybe True'),
                                  _invert_media :: !(Maybe True'),
                                  _message :: !String',
                                  _entities :: !(Maybe (Vector MessageEntity)),
                                  _reply_markup :: !(Maybe ReplyMarkup)}
instance Data.Binary.Binary InputBotInlineMessage
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1262639204 -> fmap InputBotInlineMessageGame Data.Binary.get;
                      864077702 -> fmap InputBotInlineMessageMediaAuto Data.Binary.get;
                      2800599037 -> fmap InputBotInlineMessageMediaContact Data.Binary.get;
                      2526190213 -> fmap InputBotInlineMessageMediaGeo Data.Binary.get;
                      3622273573 -> fmap InputBotInlineMessageMediaInvoice Data.Binary.get;
                      1098628881 -> fmap InputBotInlineMessageMediaVenue Data.Binary.get;
                      3185362192 -> fmap InputBotInlineMessageMediaWebPage Data.Binary.get;
                      1036876423 -> fmap InputBotInlineMessageText Data.Binary.get}};
           put (InputBotInlineMessageGame tmp_1) = do {Data.Binary.Put.putWord32le 1262639204;
                                                       Data.Binary.put tmp_1};
           put (InputBotInlineMessageMediaAuto tmp_2) = do {Data.Binary.Put.putWord32le 864077702;
                                                            Data.Binary.put tmp_2};
           put (InputBotInlineMessageMediaContact tmp_3) = do {Data.Binary.Put.putWord32le 2800599037;
                                                               Data.Binary.put tmp_3};
           put (InputBotInlineMessageMediaGeo tmp_4) = do {Data.Binary.Put.putWord32le 2526190213;
                                                           Data.Binary.put tmp_4};
           put (InputBotInlineMessageMediaInvoice tmp_5) = do {Data.Binary.Put.putWord32le 3622273573;
                                                               Data.Binary.put tmp_5};
           put (InputBotInlineMessageMediaVenue tmp_6) = do {Data.Binary.Put.putWord32le 1098628881;
                                                             Data.Binary.put tmp_6};
           put (InputBotInlineMessageMediaWebPage tmp_7) = do {Data.Binary.Put.putWord32le 3185362192;
                                                               Data.Binary.put tmp_7};
           put (InputBotInlineMessageText tmp_8) = do {Data.Binary.Put.putWord32le 1036876423;
                                                       Data.Binary.put tmp_8}}
instance Data.Binary.Binary InputBotInlineMessageID'
    where {get = do {_dc_id_0 <- Data.Binary.get;
                     _id_1 <- Data.Binary.get;
                     _access_hash_2 <- Data.Binary.get;
                     GHC.Base.pure (InputBotInlineMessageID' _dc_id_0 _id_1 _access_hash_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._dc_id;
                                     Data.Binary.put to_be_encoded_3._id;
                                     Data.Binary.put to_be_encoded_3._access_hash}}
instance Data.Binary.Binary InputBotInlineMessageID64'
    where {get = do {_dc_id_0 <- Data.Binary.get;
                     _owner_id_1 <- Data.Binary.get;
                     _id_2 <- Data.Binary.get;
                     _access_hash_3 <- Data.Binary.get;
                     GHC.Base.pure (InputBotInlineMessageID64' _dc_id_0 _owner_id_1 _id_2 _access_hash_3)};
           put to_be_encoded_4 = do {Data.Binary.put to_be_encoded_4._dc_id;
                                     Data.Binary.put to_be_encoded_4._owner_id;
                                     Data.Binary.put to_be_encoded_4._id;
                                     Data.Binary.put to_be_encoded_4._access_hash}}
data InputBotInlineMessageID
    = InputBotInlineMessageID !InputBotInlineMessageID'
    | InputBotInlineMessageID64 !InputBotInlineMessageID64'
data InputBotInlineMessageID'
    = InputBotInlineMessageID' {_dc_id :: !Int',
                                _id :: !Long',
                                _access_hash :: !Long'}
data InputBotInlineMessageID64'
    = InputBotInlineMessageID64' {_dc_id :: !Int',
                                  _owner_id :: !Long',
                                  _id :: !Int',
                                  _access_hash :: !Long'}
instance Data.Binary.Binary InputBotInlineMessageID
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2299280777 -> fmap InputBotInlineMessageID Data.Binary.get;
                      3067680215 -> fmap InputBotInlineMessageID64 Data.Binary.get}};
           put (InputBotInlineMessageID tmp_1) = do {Data.Binary.Put.putWord32le 2299280777;
                                                     Data.Binary.put tmp_1};
           put (InputBotInlineMessageID64 tmp_2) = do {Data.Binary.Put.putWord32le 3067680215;
                                                       Data.Binary.put tmp_2}}
instance Data.Binary.Binary InputBotInlineResult'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _id_1 <- Data.Binary.get;
                     _type_2 <- Data.Binary.get;
                     _title_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _description_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _url_5 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     _thumb_6 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 4);
                     _content_7 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 5);
                     _send_message_8 <- Data.Binary.get;
                     GHC.Base.pure (InputBotInlineResult' _id_1 _type_2 _title_3 _description_4 _url_5 _thumb_6 _content_7 _send_message_8)};
           put to_be_encoded_9 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_9._content,
                                                              5),
                                                             (Data.Maybe.isJust to_be_encoded_9._thumb,
                                                              4),
                                                             (Data.Maybe.isJust to_be_encoded_9._url,
                                                              3),
                                                             (Data.Maybe.isJust to_be_encoded_9._description,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_9._title,
                                                              1)];
                                     Data.Binary.put to_be_encoded_9._id;
                                     Data.Binary.put to_be_encoded_9._type;
                                     Data.Binary.put to_be_encoded_9._title;
                                     Data.Binary.put to_be_encoded_9._description;
                                     Data.Binary.put to_be_encoded_9._url;
                                     Data.Binary.put to_be_encoded_9._thumb;
                                     Data.Binary.put to_be_encoded_9._content;
                                     Data.Binary.put to_be_encoded_9._send_message}}
instance Data.Binary.Binary InputBotInlineResultDocument'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _id_1 <- Data.Binary.get;
                     _type_2 <- Data.Binary.get;
                     _title_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _description_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _document_5 <- Data.Binary.get;
                     _send_message_6 <- Data.Binary.get;
                     GHC.Base.pure (InputBotInlineResultDocument' _id_1 _type_2 _title_3 _description_4 _document_5 _send_message_6)};
           put to_be_encoded_7 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_7._description,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_7._title,
                                                              1)];
                                     Data.Binary.put to_be_encoded_7._id;
                                     Data.Binary.put to_be_encoded_7._type;
                                     Data.Binary.put to_be_encoded_7._title;
                                     Data.Binary.put to_be_encoded_7._description;
                                     Data.Binary.put to_be_encoded_7._document;
                                     Data.Binary.put to_be_encoded_7._send_message}}
instance Data.Binary.Binary InputBotInlineResultGame'
    where {get = do {_id_0 <- Data.Binary.get;
                     _short_name_1 <- Data.Binary.get;
                     _send_message_2 <- Data.Binary.get;
                     GHC.Base.pure (InputBotInlineResultGame' _id_0 _short_name_1 _send_message_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._id;
                                     Data.Binary.put to_be_encoded_3._short_name;
                                     Data.Binary.put to_be_encoded_3._send_message}}
instance Data.Binary.Binary InputBotInlineResultPhoto'
    where {get = do {_id_0 <- Data.Binary.get;
                     _type_1 <- Data.Binary.get;
                     _photo_2 <- Data.Binary.get;
                     _send_message_3 <- Data.Binary.get;
                     GHC.Base.pure (InputBotInlineResultPhoto' _id_0 _type_1 _photo_2 _send_message_3)};
           put to_be_encoded_4 = do {Data.Binary.put to_be_encoded_4._id;
                                     Data.Binary.put to_be_encoded_4._type;
                                     Data.Binary.put to_be_encoded_4._photo;
                                     Data.Binary.put to_be_encoded_4._send_message}}
data InputBotInlineResult
    = InputBotInlineResult !InputBotInlineResult'
    | InputBotInlineResultDocument !InputBotInlineResultDocument'
    | InputBotInlineResultGame !InputBotInlineResultGame'
    | InputBotInlineResultPhoto !InputBotInlineResultPhoto'
data InputBotInlineResult'
    = InputBotInlineResult' {_id :: !String',
                             _type :: !String',
                             _title :: !(Maybe String'),
                             _description :: !(Maybe String'),
                             _url :: !(Maybe String'),
                             _thumb :: !(Maybe InputWebDocument),
                             _content :: !(Maybe InputWebDocument),
                             _send_message :: !InputBotInlineMessage}
data InputBotInlineResultDocument'
    = InputBotInlineResultDocument' {_id :: !String',
                                     _type :: !String',
                                     _title :: !(Maybe String'),
                                     _description :: !(Maybe String'),
                                     _document :: !InputDocument,
                                     _send_message :: !InputBotInlineMessage}
data InputBotInlineResultGame'
    = InputBotInlineResultGame' {_id :: !String',
                                 _short_name :: !String',
                                 _send_message :: !InputBotInlineMessage}
data InputBotInlineResultPhoto'
    = InputBotInlineResultPhoto' {_id :: !String',
                                  _type :: !String',
                                  _photo :: !InputPhoto,
                                  _send_message :: !InputBotInlineMessage}
instance Data.Binary.Binary InputBotInlineResult
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2294256409 -> fmap InputBotInlineResult Data.Binary.get;
                      4294507972 -> fmap InputBotInlineResultDocument Data.Binary.get;
                      1336154098 -> fmap InputBotInlineResultGame Data.Binary.get;
                      2832753831 -> fmap InputBotInlineResultPhoto Data.Binary.get}};
           put (InputBotInlineResult tmp_1) = do {Data.Binary.Put.putWord32le 2294256409;
                                                  Data.Binary.put tmp_1};
           put (InputBotInlineResultDocument tmp_2) = do {Data.Binary.Put.putWord32le 4294507972;
                                                          Data.Binary.put tmp_2};
           put (InputBotInlineResultGame tmp_3) = do {Data.Binary.Put.putWord32le 1336154098;
                                                      Data.Binary.put tmp_3};
           put (InputBotInlineResultPhoto tmp_4) = do {Data.Binary.Put.putWord32le 2832753831;
                                                       Data.Binary.put tmp_4}}
instance Data.Binary.Binary InputChannel'
    where {get = do {_channel_id_0 <- Data.Binary.get;
                     _access_hash_1 <- Data.Binary.get;
                     GHC.Base.pure (InputChannel' _channel_id_0 _access_hash_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._channel_id;
                                     Data.Binary.put to_be_encoded_2._access_hash}}
instance Data.Binary.Binary InputChannelEmpty'
    where {get = GHC.Base.pure InputChannelEmpty';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary InputChannelFromMessage'
    where {get = do {_peer_0 <- Data.Binary.get;
                     _msg_id_1 <- Data.Binary.get;
                     _channel_id_2 <- Data.Binary.get;
                     GHC.Base.pure (InputChannelFromMessage' _peer_0 _msg_id_1 _channel_id_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._peer;
                                     Data.Binary.put to_be_encoded_3._msg_id;
                                     Data.Binary.put to_be_encoded_3._channel_id}}
data InputChannel
    = InputChannel !InputChannel'
    | InputChannelEmpty !InputChannelEmpty'
    | InputChannelFromMessage !InputChannelFromMessage'
data InputChannel'
    = InputChannel' {_channel_id :: !Long', _access_hash :: !Long'}
data InputChannelEmpty' = InputChannelEmpty' {}
data InputChannelFromMessage'
    = InputChannelFromMessage' {_peer :: !InputPeer,
                                _msg_id :: !Int',
                                _channel_id :: !Long'}
instance Data.Binary.Binary InputChannel
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {4082822184 -> fmap InputChannel Data.Binary.get;
                      4002160262 -> fmap InputChannelEmpty Data.Binary.get;
                      1536380829 -> fmap InputChannelFromMessage Data.Binary.get}};
           put (InputChannel tmp_1) = do {Data.Binary.Put.putWord32le 4082822184;
                                          Data.Binary.put tmp_1};
           put (InputChannelEmpty tmp_2) = do {Data.Binary.Put.putWord32le 4002160262;
                                               Data.Binary.put tmp_2};
           put (InputChannelFromMessage tmp_3) = do {Data.Binary.Put.putWord32le 1536380829;
                                                     Data.Binary.put tmp_3}}
instance Data.Binary.Binary InputChatPhoto'
    where {get = do {_id_0 <- Data.Binary.get;
                     GHC.Base.pure (InputChatPhoto' _id_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._id}
instance Data.Binary.Binary InputChatPhotoEmpty'
    where {get = GHC.Base.pure InputChatPhotoEmpty';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary InputChatUploadedPhoto'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _file_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _video_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _video_start_ts_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _video_emoji_markup_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     GHC.Base.pure (InputChatUploadedPhoto' _file_1 _video_2 _video_start_ts_3 _video_emoji_markup_4)};
           put to_be_encoded_5 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_5._video_emoji_markup,
                                                              3),
                                                             (Data.Maybe.isJust to_be_encoded_5._video_start_ts,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_5._video,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_5._file,
                                                              0)];
                                     Data.Binary.put to_be_encoded_5._file;
                                     Data.Binary.put to_be_encoded_5._video;
                                     Data.Binary.put to_be_encoded_5._video_start_ts;
                                     Data.Binary.put to_be_encoded_5._video_emoji_markup}}
data InputChatPhoto
    = InputChatPhoto !InputChatPhoto'
    | InputChatPhotoEmpty !InputChatPhotoEmpty'
    | InputChatUploadedPhoto !InputChatUploadedPhoto'
data InputChatPhoto' = InputChatPhoto' {_id :: !InputPhoto}
data InputChatPhotoEmpty' = InputChatPhotoEmpty' {}
data InputChatUploadedPhoto'
    = InputChatUploadedPhoto' {_file :: !(Maybe InputFile),
                               _video :: !(Maybe InputFile),
                               _video_start_ts :: !(Maybe Double'),
                               _video_emoji_markup :: !(Maybe VideoSize)}
instance Data.Binary.Binary InputChatPhoto
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2303962423 -> fmap InputChatPhoto Data.Binary.get;
                      480546647 -> fmap InputChatPhotoEmpty Data.Binary.get;
                      3184373440 -> fmap InputChatUploadedPhoto Data.Binary.get}};
           put (InputChatPhoto tmp_1) = do {Data.Binary.Put.putWord32le 2303962423;
                                            Data.Binary.put tmp_1};
           put (InputChatPhotoEmpty tmp_2) = do {Data.Binary.Put.putWord32le 480546647;
                                                 Data.Binary.put tmp_2};
           put (InputChatUploadedPhoto tmp_3) = do {Data.Binary.Put.putWord32le 3184373440;
                                                    Data.Binary.put tmp_3}}
instance Data.Binary.Binary InputChatlistDialogFilter'
    where {get = do {_filter_id_0 <- Data.Binary.get;
                     GHC.Base.pure (InputChatlistDialogFilter' _filter_id_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._filter_id}
data InputChatlist
    = InputChatlistDialogFilter !InputChatlistDialogFilter'
data InputChatlistDialogFilter'
    = InputChatlistDialogFilter' {_filter_id :: !Int'}
instance Data.Binary.Binary InputChatlist
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {4091599411 -> fmap InputChatlistDialogFilter Data.Binary.get}};
           put (InputChatlistDialogFilter tmp_1) = do {Data.Binary.Put.putWord32le 4091599411;
                                                       Data.Binary.put tmp_1}}
instance Data.Binary.Binary InputCheckPasswordEmpty'
    where {get = GHC.Base.pure InputCheckPasswordEmpty';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary InputCheckPasswordSRP'
    where {get = do {_srp_id_0 <- Data.Binary.get;
                     _a_1 <- Data.Binary.get;
                     _m1_2 <- Data.Binary.get;
                     GHC.Base.pure (InputCheckPasswordSRP' _srp_id_0 _a_1 _m1_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._srp_id;
                                     Data.Binary.put to_be_encoded_3._a;
                                     Data.Binary.put to_be_encoded_3._m1}}
data InputCheckPasswordSRP
    = InputCheckPasswordEmpty !InputCheckPasswordEmpty'
    | InputCheckPasswordSRP !InputCheckPasswordSRP'
data InputCheckPasswordEmpty' = InputCheckPasswordEmpty' {}
data InputCheckPasswordSRP'
    = InputCheckPasswordSRP' {_srp_id :: !Long',
                              _a :: !Bytes',
                              _m1 :: !Bytes'}
instance Data.Binary.Binary InputCheckPasswordSRP
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2558588504 -> fmap InputCheckPasswordEmpty Data.Binary.get;
                      3531600002 -> fmap InputCheckPasswordSRP Data.Binary.get}};
           put (InputCheckPasswordEmpty tmp_1) = do {Data.Binary.Put.putWord32le 2558588504;
                                                     Data.Binary.put tmp_1};
           put (InputCheckPasswordSRP tmp_2) = do {Data.Binary.Put.putWord32le 3531600002;
                                                   Data.Binary.put tmp_2}}
instance Data.Binary.Binary InputClientProxy'
    where {get = do {_address_0 <- Data.Binary.get;
                     _port_1 <- Data.Binary.get;
                     GHC.Base.pure (InputClientProxy' _address_0 _port_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._address;
                                     Data.Binary.put to_be_encoded_2._port}}
data InputClientProxy = InputClientProxy !InputClientProxy'
data InputClientProxy'
    = InputClientProxy' {_address :: !String', _port :: !Int'}
instance Data.Binary.Binary InputClientProxy
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1968737087 -> fmap InputClientProxy Data.Binary.get}};
           put (InputClientProxy tmp_1) = do {Data.Binary.Put.putWord32le 1968737087;
                                              Data.Binary.put tmp_1}}
instance Data.Binary.Binary InputPhoneContact'
    where {get = do {_client_id_0 <- Data.Binary.get;
                     _phone_1 <- Data.Binary.get;
                     _first_name_2 <- Data.Binary.get;
                     _last_name_3 <- Data.Binary.get;
                     GHC.Base.pure (InputPhoneContact' _client_id_0 _phone_1 _first_name_2 _last_name_3)};
           put to_be_encoded_4 = do {Data.Binary.put to_be_encoded_4._client_id;
                                     Data.Binary.put to_be_encoded_4._phone;
                                     Data.Binary.put to_be_encoded_4._first_name;
                                     Data.Binary.put to_be_encoded_4._last_name}}
data InputContact = InputPhoneContact !InputPhoneContact'
data InputPhoneContact'
    = InputPhoneContact' {_client_id :: !Long',
                          _phone :: !String',
                          _first_name :: !String',
                          _last_name :: !String'}
instance Data.Binary.Binary InputContact
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {4086478836 -> fmap InputPhoneContact Data.Binary.get}};
           put (InputPhoneContact tmp_1) = do {Data.Binary.Put.putWord32le 4086478836;
                                               Data.Binary.put tmp_1}}
instance Data.Binary.Binary InputDialogPeer'
    where {get = do {_peer_0 <- Data.Binary.get;
                     GHC.Base.pure (InputDialogPeer' _peer_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._peer}
instance Data.Binary.Binary InputDialogPeerFolder'
    where {get = do {_folder_id_0 <- Data.Binary.get;
                     GHC.Base.pure (InputDialogPeerFolder' _folder_id_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._folder_id}
data InputDialogPeer
    = InputDialogPeer !InputDialogPeer'
    | InputDialogPeerFolder !InputDialogPeerFolder'
data InputDialogPeer' = InputDialogPeer' {_peer :: !InputPeer}
data InputDialogPeerFolder'
    = InputDialogPeerFolder' {_folder_id :: !Int'}
instance Data.Binary.Binary InputDialogPeer
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {4239064759 -> fmap InputDialogPeer Data.Binary.get;
                      1684014375 -> fmap InputDialogPeerFolder Data.Binary.get}};
           put (InputDialogPeer tmp_1) = do {Data.Binary.Put.putWord32le 4239064759;
                                             Data.Binary.put tmp_1};
           put (InputDialogPeerFolder tmp_2) = do {Data.Binary.Put.putWord32le 1684014375;
                                                   Data.Binary.put tmp_2}}
instance Data.Binary.Binary InputDocument'
    where {get = do {_id_0 <- Data.Binary.get;
                     _access_hash_1 <- Data.Binary.get;
                     _file_reference_2 <- Data.Binary.get;
                     GHC.Base.pure (InputDocument' _id_0 _access_hash_1 _file_reference_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._id;
                                     Data.Binary.put to_be_encoded_3._access_hash;
                                     Data.Binary.put to_be_encoded_3._file_reference}}
instance Data.Binary.Binary InputDocumentEmpty'
    where {get = GHC.Base.pure InputDocumentEmpty';
           put to_be_encoded_0 = do GHC.Base.pure ()}
data InputDocument
    = InputDocument !InputDocument'
    | InputDocumentEmpty !InputDocumentEmpty'
data InputDocument'
    = InputDocument' {_id :: !Long',
                      _access_hash :: !Long',
                      _file_reference :: !Bytes'}
data InputDocumentEmpty' = InputDocumentEmpty' {}
instance Data.Binary.Binary InputDocument
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {448771445 -> fmap InputDocument Data.Binary.get;
                      1928391342 -> fmap InputDocumentEmpty Data.Binary.get}};
           put (InputDocument tmp_1) = do {Data.Binary.Put.putWord32le 448771445;
                                           Data.Binary.put tmp_1};
           put (InputDocumentEmpty tmp_2) = do {Data.Binary.Put.putWord32le 1928391342;
                                                Data.Binary.put tmp_2}}
instance Data.Binary.Binary InputEncryptedChat'
    where {get = do {_chat_id_0 <- Data.Binary.get;
                     _access_hash_1 <- Data.Binary.get;
                     GHC.Base.pure (InputEncryptedChat' _chat_id_0 _access_hash_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._chat_id;
                                     Data.Binary.put to_be_encoded_2._access_hash}}
data InputEncryptedChat = InputEncryptedChat !InputEncryptedChat'
data InputEncryptedChat'
    = InputEncryptedChat' {_chat_id :: !Int', _access_hash :: !Long'}
instance Data.Binary.Binary InputEncryptedChat
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {4047615457 -> fmap InputEncryptedChat Data.Binary.get}};
           put (InputEncryptedChat tmp_1) = do {Data.Binary.Put.putWord32le 4047615457;
                                                Data.Binary.put tmp_1}}
instance Data.Binary.Binary InputEncryptedFile'
    where {get = do {_id_0 <- Data.Binary.get;
                     _access_hash_1 <- Data.Binary.get;
                     GHC.Base.pure (InputEncryptedFile' _id_0 _access_hash_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._id;
                                     Data.Binary.put to_be_encoded_2._access_hash}}
instance Data.Binary.Binary InputEncryptedFileBigUploaded'
    where {get = do {_id_0 <- Data.Binary.get;
                     _parts_1 <- Data.Binary.get;
                     _key_fingerprint_2 <- Data.Binary.get;
                     GHC.Base.pure (InputEncryptedFileBigUploaded' _id_0 _parts_1 _key_fingerprint_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._id;
                                     Data.Binary.put to_be_encoded_3._parts;
                                     Data.Binary.put to_be_encoded_3._key_fingerprint}}
instance Data.Binary.Binary InputEncryptedFileEmpty'
    where {get = GHC.Base.pure InputEncryptedFileEmpty';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary InputEncryptedFileUploaded'
    where {get = do {_id_0 <- Data.Binary.get;
                     _parts_1 <- Data.Binary.get;
                     _md5_checksum_2 <- Data.Binary.get;
                     _key_fingerprint_3 <- Data.Binary.get;
                     GHC.Base.pure (InputEncryptedFileUploaded' _id_0 _parts_1 _md5_checksum_2 _key_fingerprint_3)};
           put to_be_encoded_4 = do {Data.Binary.put to_be_encoded_4._id;
                                     Data.Binary.put to_be_encoded_4._parts;
                                     Data.Binary.put to_be_encoded_4._md5_checksum;
                                     Data.Binary.put to_be_encoded_4._key_fingerprint}}
data InputEncryptedFile
    = InputEncryptedFile !InputEncryptedFile'
    | InputEncryptedFileBigUploaded !InputEncryptedFileBigUploaded'
    | InputEncryptedFileEmpty !InputEncryptedFileEmpty'
    | InputEncryptedFileUploaded !InputEncryptedFileUploaded'
data InputEncryptedFile'
    = InputEncryptedFile' {_id :: !Long', _access_hash :: !Long'}
data InputEncryptedFileBigUploaded'
    = InputEncryptedFileBigUploaded' {_id :: !Long',
                                      _parts :: !Int',
                                      _key_fingerprint :: !Int'}
data InputEncryptedFileEmpty' = InputEncryptedFileEmpty' {}
data InputEncryptedFileUploaded'
    = InputEncryptedFileUploaded' {_id :: !Long',
                                   _parts :: !Int',
                                   _md5_checksum :: !String',
                                   _key_fingerprint :: !Int'}
instance Data.Binary.Binary InputEncryptedFile
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1511503333 -> fmap InputEncryptedFile Data.Binary.get;
                      767652808 -> fmap InputEncryptedFileBigUploaded Data.Binary.get;
                      406307684 -> fmap InputEncryptedFileEmpty Data.Binary.get;
                      1690108678 -> fmap InputEncryptedFileUploaded Data.Binary.get}};
           put (InputEncryptedFile tmp_1) = do {Data.Binary.Put.putWord32le 1511503333;
                                                Data.Binary.put tmp_1};
           put (InputEncryptedFileBigUploaded tmp_2) = do {Data.Binary.Put.putWord32le 767652808;
                                                           Data.Binary.put tmp_2};
           put (InputEncryptedFileEmpty tmp_3) = do {Data.Binary.Put.putWord32le 406307684;
                                                     Data.Binary.put tmp_3};
           put (InputEncryptedFileUploaded tmp_4) = do {Data.Binary.Put.putWord32le 1690108678;
                                                        Data.Binary.put tmp_4}}
instance Data.Binary.Binary InputFile'
    where {get = do {_id_0 <- Data.Binary.get;
                     _parts_1 <- Data.Binary.get;
                     _name_2 <- Data.Binary.get;
                     _md5_checksum_3 <- Data.Binary.get;
                     GHC.Base.pure (InputFile' _id_0 _parts_1 _name_2 _md5_checksum_3)};
           put to_be_encoded_4 = do {Data.Binary.put to_be_encoded_4._id;
                                     Data.Binary.put to_be_encoded_4._parts;
                                     Data.Binary.put to_be_encoded_4._name;
                                     Data.Binary.put to_be_encoded_4._md5_checksum}}
instance Data.Binary.Binary InputFileBig'
    where {get = do {_id_0 <- Data.Binary.get;
                     _parts_1 <- Data.Binary.get;
                     _name_2 <- Data.Binary.get;
                     GHC.Base.pure (InputFileBig' _id_0 _parts_1 _name_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._id;
                                     Data.Binary.put to_be_encoded_3._parts;
                                     Data.Binary.put to_be_encoded_3._name}}
data InputFile
    = InputFile !InputFile'
    | InputFileBig !InputFileBig'
data InputFile'
    = InputFile' {_id :: !Long',
                  _parts :: !Int',
                  _name :: !String',
                  _md5_checksum :: !String'}
data InputFileBig'
    = InputFileBig' {_id :: !Long', _parts :: !Int', _name :: !String'}
instance Data.Binary.Binary InputFile
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {4113560191 -> fmap InputFile Data.Binary.get;
                      4199484341 -> fmap InputFileBig Data.Binary.get}};
           put (InputFile tmp_1) = do {Data.Binary.Put.putWord32le 4113560191;
                                       Data.Binary.put tmp_1};
           put (InputFileBig tmp_2) = do {Data.Binary.Put.putWord32le 4199484341;
                                          Data.Binary.put tmp_2}}
instance Data.Binary.Binary InputDocumentFileLocation'
    where {get = do {_id_0 <- Data.Binary.get;
                     _access_hash_1 <- Data.Binary.get;
                     _file_reference_2 <- Data.Binary.get;
                     _thumb_size_3 <- Data.Binary.get;
                     GHC.Base.pure (InputDocumentFileLocation' _id_0 _access_hash_1 _file_reference_2 _thumb_size_3)};
           put to_be_encoded_4 = do {Data.Binary.put to_be_encoded_4._id;
                                     Data.Binary.put to_be_encoded_4._access_hash;
                                     Data.Binary.put to_be_encoded_4._file_reference;
                                     Data.Binary.put to_be_encoded_4._thumb_size}}
instance Data.Binary.Binary InputEncryptedFileLocation'
    where {get = do {_id_0 <- Data.Binary.get;
                     _access_hash_1 <- Data.Binary.get;
                     GHC.Base.pure (InputEncryptedFileLocation' _id_0 _access_hash_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._id;
                                     Data.Binary.put to_be_encoded_2._access_hash}}
instance Data.Binary.Binary InputFileLocation'
    where {get = do {_volume_id_0 <- Data.Binary.get;
                     _local_id_1 <- Data.Binary.get;
                     _secret_2 <- Data.Binary.get;
                     _file_reference_3 <- Data.Binary.get;
                     GHC.Base.pure (InputFileLocation' _volume_id_0 _local_id_1 _secret_2 _file_reference_3)};
           put to_be_encoded_4 = do {Data.Binary.put to_be_encoded_4._volume_id;
                                     Data.Binary.put to_be_encoded_4._local_id;
                                     Data.Binary.put to_be_encoded_4._secret;
                                     Data.Binary.put to_be_encoded_4._file_reference}}
instance Data.Binary.Binary InputGroupCallStream'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _call_1 <- Data.Binary.get;
                     _time_ms_2 <- Data.Binary.get;
                     _scale_3 <- Data.Binary.get;
                     _video_channel_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _video_quality_5 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     GHC.Base.pure (InputGroupCallStream' _call_1 _time_ms_2 _scale_3 _video_channel_4 _video_quality_5)};
           put to_be_encoded_6 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_6._video_quality,
                                                              0),
                                                             (Data.Maybe.isJust to_be_encoded_6._video_channel,
                                                              0)];
                                     Data.Binary.put to_be_encoded_6._call;
                                     Data.Binary.put to_be_encoded_6._time_ms;
                                     Data.Binary.put to_be_encoded_6._scale;
                                     Data.Binary.put to_be_encoded_6._video_channel;
                                     Data.Binary.put to_be_encoded_6._video_quality}}
instance Data.Binary.Binary InputPeerPhotoFileLocation'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _big_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _peer_2 <- Data.Binary.get;
                     _photo_id_3 <- Data.Binary.get;
                     GHC.Base.pure (InputPeerPhotoFileLocation' _big_1 _peer_2 _photo_id_3)};
           put to_be_encoded_4 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_4._big,
                                                              0)];
                                     Data.Binary.put to_be_encoded_4._big;
                                     Data.Binary.put to_be_encoded_4._peer;
                                     Data.Binary.put to_be_encoded_4._photo_id}}
instance Data.Binary.Binary InputPhotoFileLocation'
    where {get = do {_id_0 <- Data.Binary.get;
                     _access_hash_1 <- Data.Binary.get;
                     _file_reference_2 <- Data.Binary.get;
                     _thumb_size_3 <- Data.Binary.get;
                     GHC.Base.pure (InputPhotoFileLocation' _id_0 _access_hash_1 _file_reference_2 _thumb_size_3)};
           put to_be_encoded_4 = do {Data.Binary.put to_be_encoded_4._id;
                                     Data.Binary.put to_be_encoded_4._access_hash;
                                     Data.Binary.put to_be_encoded_4._file_reference;
                                     Data.Binary.put to_be_encoded_4._thumb_size}}
instance Data.Binary.Binary InputPhotoLegacyFileLocation'
    where {get = do {_id_0 <- Data.Binary.get;
                     _access_hash_1 <- Data.Binary.get;
                     _file_reference_2 <- Data.Binary.get;
                     _volume_id_3 <- Data.Binary.get;
                     _local_id_4 <- Data.Binary.get;
                     _secret_5 <- Data.Binary.get;
                     GHC.Base.pure (InputPhotoLegacyFileLocation' _id_0 _access_hash_1 _file_reference_2 _volume_id_3 _local_id_4 _secret_5)};
           put to_be_encoded_6 = do {Data.Binary.put to_be_encoded_6._id;
                                     Data.Binary.put to_be_encoded_6._access_hash;
                                     Data.Binary.put to_be_encoded_6._file_reference;
                                     Data.Binary.put to_be_encoded_6._volume_id;
                                     Data.Binary.put to_be_encoded_6._local_id;
                                     Data.Binary.put to_be_encoded_6._secret}}
instance Data.Binary.Binary InputSecureFileLocation'
    where {get = do {_id_0 <- Data.Binary.get;
                     _access_hash_1 <- Data.Binary.get;
                     GHC.Base.pure (InputSecureFileLocation' _id_0 _access_hash_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._id;
                                     Data.Binary.put to_be_encoded_2._access_hash}}
instance Data.Binary.Binary InputStickerSetThumb'
    where {get = do {_stickerset_0 <- Data.Binary.get;
                     _thumb_version_1 <- Data.Binary.get;
                     GHC.Base.pure (InputStickerSetThumb' _stickerset_0 _thumb_version_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._stickerset;
                                     Data.Binary.put to_be_encoded_2._thumb_version}}
instance Data.Binary.Binary InputTakeoutFileLocation'
    where {get = GHC.Base.pure InputTakeoutFileLocation';
           put to_be_encoded_0 = do GHC.Base.pure ()}
data InputFileLocation
    = InputDocumentFileLocation !InputDocumentFileLocation'
    | InputEncryptedFileLocation !InputEncryptedFileLocation'
    | InputFileLocation !InputFileLocation'
    | InputGroupCallStream !InputGroupCallStream'
    | InputPeerPhotoFileLocation !InputPeerPhotoFileLocation'
    | InputPhotoFileLocation !InputPhotoFileLocation'
    | InputPhotoLegacyFileLocation !InputPhotoLegacyFileLocation'
    | InputSecureFileLocation !InputSecureFileLocation'
    | InputStickerSetThumb !InputStickerSetThumb'
    | InputTakeoutFileLocation !InputTakeoutFileLocation'
data InputDocumentFileLocation'
    = InputDocumentFileLocation' {_id :: !Long',
                                  _access_hash :: !Long',
                                  _file_reference :: !Bytes',
                                  _thumb_size :: !String'}
data InputEncryptedFileLocation'
    = InputEncryptedFileLocation' {_id :: !Long',
                                   _access_hash :: !Long'}
data InputFileLocation'
    = InputFileLocation' {_volume_id :: !Long',
                          _local_id :: !Int',
                          _secret :: !Long',
                          _file_reference :: !Bytes'}
data InputGroupCallStream'
    = InputGroupCallStream' {_call :: !InputGroupCall,
                             _time_ms :: !Long',
                             _scale :: !Int',
                             _video_channel :: !(Maybe Int'),
                             _video_quality :: !(Maybe Int')}
data InputPeerPhotoFileLocation'
    = InputPeerPhotoFileLocation' {_big :: !(Maybe True'),
                                   _peer :: !InputPeer,
                                   _photo_id :: !Long'}
data InputPhotoFileLocation'
    = InputPhotoFileLocation' {_id :: !Long',
                               _access_hash :: !Long',
                               _file_reference :: !Bytes',
                               _thumb_size :: !String'}
data InputPhotoLegacyFileLocation'
    = InputPhotoLegacyFileLocation' {_id :: !Long',
                                     _access_hash :: !Long',
                                     _file_reference :: !Bytes',
                                     _volume_id :: !Long',
                                     _local_id :: !Int',
                                     _secret :: !Long'}
data InputSecureFileLocation'
    = InputSecureFileLocation' {_id :: !Long', _access_hash :: !Long'}
data InputStickerSetThumb'
    = InputStickerSetThumb' {_stickerset :: !InputStickerSet,
                             _thumb_version :: !Int'}
data InputTakeoutFileLocation' = InputTakeoutFileLocation' {}
instance Data.Binary.Binary InputFileLocation
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3134223748 -> fmap InputDocumentFileLocation Data.Binary.get;
                      4112735573 -> fmap InputEncryptedFileLocation Data.Binary.get;
                      3755650017 -> fmap InputFileLocation Data.Binary.get;
                      93890858 -> fmap InputGroupCallStream Data.Binary.get;
                      925204121 -> fmap InputPeerPhotoFileLocation Data.Binary.get;
                      1075322878 -> fmap InputPhotoFileLocation Data.Binary.get;
                      3627312883 -> fmap InputPhotoLegacyFileLocation Data.Binary.get;
                      3418877480 -> fmap InputSecureFileLocation Data.Binary.get;
                      2642736091 -> fmap InputStickerSetThumb Data.Binary.get;
                      700340377 -> fmap InputTakeoutFileLocation Data.Binary.get}};
           put (InputDocumentFileLocation tmp_1) = do {Data.Binary.Put.putWord32le 3134223748;
                                                       Data.Binary.put tmp_1};
           put (InputEncryptedFileLocation tmp_2) = do {Data.Binary.Put.putWord32le 4112735573;
                                                        Data.Binary.put tmp_2};
           put (InputFileLocation tmp_3) = do {Data.Binary.Put.putWord32le 3755650017;
                                               Data.Binary.put tmp_3};
           put (InputGroupCallStream tmp_4) = do {Data.Binary.Put.putWord32le 93890858;
                                                  Data.Binary.put tmp_4};
           put (InputPeerPhotoFileLocation tmp_5) = do {Data.Binary.Put.putWord32le 925204121;
                                                        Data.Binary.put tmp_5};
           put (InputPhotoFileLocation tmp_6) = do {Data.Binary.Put.putWord32le 1075322878;
                                                    Data.Binary.put tmp_6};
           put (InputPhotoLegacyFileLocation tmp_7) = do {Data.Binary.Put.putWord32le 3627312883;
                                                          Data.Binary.put tmp_7};
           put (InputSecureFileLocation tmp_8) = do {Data.Binary.Put.putWord32le 3418877480;
                                                     Data.Binary.put tmp_8};
           put (InputStickerSetThumb tmp_9) = do {Data.Binary.Put.putWord32le 2642736091;
                                                  Data.Binary.put tmp_9};
           put (InputTakeoutFileLocation tmp_10) = do {Data.Binary.Put.putWord32le 700340377;
                                                       Data.Binary.put tmp_10}}
instance Data.Binary.Binary InputFolderPeer'
    where {get = do {_peer_0 <- Data.Binary.get;
                     _folder_id_1 <- Data.Binary.get;
                     GHC.Base.pure (InputFolderPeer' _peer_0 _folder_id_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._peer;
                                     Data.Binary.put to_be_encoded_2._folder_id}}
data InputFolderPeer = InputFolderPeer !InputFolderPeer'
data InputFolderPeer'
    = InputFolderPeer' {_peer :: !InputPeer, _folder_id :: !Int'}
instance Data.Binary.Binary InputFolderPeer
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {4224893590 -> fmap InputFolderPeer Data.Binary.get}};
           put (InputFolderPeer tmp_1) = do {Data.Binary.Put.putWord32le 4224893590;
                                             Data.Binary.put tmp_1}}
instance Data.Binary.Binary InputGameID'
    where {get = do {_id_0 <- Data.Binary.get;
                     _access_hash_1 <- Data.Binary.get;
                     GHC.Base.pure (InputGameID' _id_0 _access_hash_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._id;
                                     Data.Binary.put to_be_encoded_2._access_hash}}
instance Data.Binary.Binary InputGameShortName'
    where {get = do {_bot_id_0 <- Data.Binary.get;
                     _short_name_1 <- Data.Binary.get;
                     GHC.Base.pure (InputGameShortName' _bot_id_0 _short_name_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._bot_id;
                                     Data.Binary.put to_be_encoded_2._short_name}}
data InputGame
    = InputGameID !InputGameID'
    | InputGameShortName !InputGameShortName'
data InputGameID'
    = InputGameID' {_id :: !Long', _access_hash :: !Long'}
data InputGameShortName'
    = InputGameShortName' {_bot_id :: !InputUser,
                           _short_name :: !String'}
instance Data.Binary.Binary InputGame
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {53231223 -> fmap InputGameID Data.Binary.get;
                      3274827786 -> fmap InputGameShortName Data.Binary.get}};
           put (InputGameID tmp_1) = do {Data.Binary.Put.putWord32le 53231223;
                                         Data.Binary.put tmp_1};
           put (InputGameShortName tmp_2) = do {Data.Binary.Put.putWord32le 3274827786;
                                                Data.Binary.put tmp_2}}
instance Data.Binary.Binary InputGeoPoint'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _lat_1 <- Data.Binary.get;
                     _long_2 <- Data.Binary.get;
                     _accuracy_radius_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     GHC.Base.pure (InputGeoPoint' _lat_1 _long_2 _accuracy_radius_3)};
           put to_be_encoded_4 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_4._accuracy_radius,
                                                              0)];
                                     Data.Binary.put to_be_encoded_4._lat;
                                     Data.Binary.put to_be_encoded_4._long;
                                     Data.Binary.put to_be_encoded_4._accuracy_radius}}
instance Data.Binary.Binary InputGeoPointEmpty'
    where {get = GHC.Base.pure InputGeoPointEmpty';
           put to_be_encoded_0 = do GHC.Base.pure ()}
data InputGeoPoint
    = InputGeoPoint !InputGeoPoint'
    | InputGeoPointEmpty !InputGeoPointEmpty'
data InputGeoPoint'
    = InputGeoPoint' {_lat :: !Double',
                      _long :: !Double',
                      _accuracy_radius :: !(Maybe Int')}
data InputGeoPointEmpty' = InputGeoPointEmpty' {}
instance Data.Binary.Binary InputGeoPoint
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1210199983 -> fmap InputGeoPoint Data.Binary.get;
                      3837862870 -> fmap InputGeoPointEmpty Data.Binary.get}};
           put (InputGeoPoint tmp_1) = do {Data.Binary.Put.putWord32le 1210199983;
                                           Data.Binary.put tmp_1};
           put (InputGeoPointEmpty tmp_2) = do {Data.Binary.Put.putWord32le 3837862870;
                                                Data.Binary.put tmp_2}}
instance Data.Binary.Binary InputGroupCall'
    where {get = do {_id_0 <- Data.Binary.get;
                     _access_hash_1 <- Data.Binary.get;
                     GHC.Base.pure (InputGroupCall' _id_0 _access_hash_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._id;
                                     Data.Binary.put to_be_encoded_2._access_hash}}
data InputGroupCall = InputGroupCall !InputGroupCall'
data InputGroupCall'
    = InputGroupCall' {_id :: !Long', _access_hash :: !Long'}
instance Data.Binary.Binary InputGroupCall
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3635053583 -> fmap InputGroupCall Data.Binary.get}};
           put (InputGroupCall tmp_1) = do {Data.Binary.Put.putWord32le 3635053583;
                                            Data.Binary.put tmp_1}}
instance Data.Binary.Binary InputInvoiceMessage'
    where {get = do {_peer_0 <- Data.Binary.get;
                     _msg_id_1 <- Data.Binary.get;
                     GHC.Base.pure (InputInvoiceMessage' _peer_0 _msg_id_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._peer;
                                     Data.Binary.put to_be_encoded_2._msg_id}}
instance Data.Binary.Binary InputInvoicePremiumGiftCode'
    where {get = do {_purpose_0 <- Data.Binary.get;
                     _option_1 <- Data.Binary.get;
                     GHC.Base.pure (InputInvoicePremiumGiftCode' _purpose_0 _option_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._purpose;
                                     Data.Binary.put to_be_encoded_2._option}}
instance Data.Binary.Binary InputInvoiceSlug'
    where {get = do {_slug_0 <- Data.Binary.get;
                     GHC.Base.pure (InputInvoiceSlug' _slug_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._slug}
data InputInvoice
    = InputInvoiceMessage !InputInvoiceMessage'
    | InputInvoicePremiumGiftCode !InputInvoicePremiumGiftCode'
    | InputInvoiceSlug !InputInvoiceSlug'
data InputInvoiceMessage'
    = InputInvoiceMessage' {_peer :: !InputPeer, _msg_id :: !Int'}
data InputInvoicePremiumGiftCode'
    = InputInvoicePremiumGiftCode' {_purpose :: !InputStorePaymentPurpose,
                                    _option :: !PremiumGiftCodeOption}
data InputInvoiceSlug' = InputInvoiceSlug' {_slug :: !String'}
instance Data.Binary.Binary InputInvoice
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3317000281 -> fmap InputInvoiceMessage Data.Binary.get;
                      2560125965 -> fmap InputInvoicePremiumGiftCode Data.Binary.get;
                      3274099439 -> fmap InputInvoiceSlug Data.Binary.get}};
           put (InputInvoiceMessage tmp_1) = do {Data.Binary.Put.putWord32le 3317000281;
                                                 Data.Binary.put tmp_1};
           put (InputInvoicePremiumGiftCode tmp_2) = do {Data.Binary.Put.putWord32le 2560125965;
                                                         Data.Binary.put tmp_2};
           put (InputInvoiceSlug tmp_3) = do {Data.Binary.Put.putWord32le 3274099439;
                                              Data.Binary.put tmp_3}}
instance Data.Binary.Binary InputMediaContact'
    where {get = do {_phone_number_0 <- Data.Binary.get;
                     _first_name_1 <- Data.Binary.get;
                     _last_name_2 <- Data.Binary.get;
                     _vcard_3 <- Data.Binary.get;
                     GHC.Base.pure (InputMediaContact' _phone_number_0 _first_name_1 _last_name_2 _vcard_3)};
           put to_be_encoded_4 = do {Data.Binary.put to_be_encoded_4._phone_number;
                                     Data.Binary.put to_be_encoded_4._first_name;
                                     Data.Binary.put to_be_encoded_4._last_name;
                                     Data.Binary.put to_be_encoded_4._vcard}}
instance Data.Binary.Binary InputMediaDice'
    where {get = do {_emoticon_0 <- Data.Binary.get;
                     GHC.Base.pure (InputMediaDice' _emoticon_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._emoticon}
instance Data.Binary.Binary InputMediaDocument'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _spoiler_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _id_2 <- Data.Binary.get;
                     _ttl_seconds_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _query_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     GHC.Base.pure (InputMediaDocument' _spoiler_1 _id_2 _ttl_seconds_3 _query_4)};
           put to_be_encoded_5 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_5._query,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_5._ttl_seconds,
                                                              0),
                                                             (Data.Maybe.isJust to_be_encoded_5._spoiler,
                                                              2)];
                                     Data.Binary.put to_be_encoded_5._spoiler;
                                     Data.Binary.put to_be_encoded_5._id;
                                     Data.Binary.put to_be_encoded_5._ttl_seconds;
                                     Data.Binary.put to_be_encoded_5._query}}
instance Data.Binary.Binary InputMediaDocumentExternal'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _spoiler_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _url_2 <- Data.Binary.get;
                     _ttl_seconds_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     GHC.Base.pure (InputMediaDocumentExternal' _spoiler_1 _url_2 _ttl_seconds_3)};
           put to_be_encoded_4 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_4._ttl_seconds,
                                                              0),
                                                             (Data.Maybe.isJust to_be_encoded_4._spoiler,
                                                              1)];
                                     Data.Binary.put to_be_encoded_4._spoiler;
                                     Data.Binary.put to_be_encoded_4._url;
                                     Data.Binary.put to_be_encoded_4._ttl_seconds}}
instance Data.Binary.Binary InputMediaEmpty'
    where {get = GHC.Base.pure InputMediaEmpty';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary InputMediaGame'
    where {get = do {_id_0 <- Data.Binary.get;
                     GHC.Base.pure (InputMediaGame' _id_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._id}
instance Data.Binary.Binary InputMediaGeoLive'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _stopped_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _geo_point_2 <- Data.Binary.get;
                     _heading_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _period_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _proximity_notification_radius_5 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     GHC.Base.pure (InputMediaGeoLive' _stopped_1 _geo_point_2 _heading_3 _period_4 _proximity_notification_radius_5)};
           put to_be_encoded_6 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_6._proximity_notification_radius,
                                                              3),
                                                             (Data.Maybe.isJust to_be_encoded_6._period,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_6._heading,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_6._stopped,
                                                              0)];
                                     Data.Binary.put to_be_encoded_6._stopped;
                                     Data.Binary.put to_be_encoded_6._geo_point;
                                     Data.Binary.put to_be_encoded_6._heading;
                                     Data.Binary.put to_be_encoded_6._period;
                                     Data.Binary.put to_be_encoded_6._proximity_notification_radius}}
instance Data.Binary.Binary InputMediaGeoPoint'
    where {get = do {_geo_point_0 <- Data.Binary.get;
                     GHC.Base.pure (InputMediaGeoPoint' _geo_point_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._geo_point}
instance Data.Binary.Binary InputMediaInvoice'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _title_1 <- Data.Binary.get;
                     _description_2 <- Data.Binary.get;
                     _photo_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _invoice_4 <- Data.Binary.get;
                     _payload_5 <- Data.Binary.get;
                     _provider_6 <- Data.Binary.get;
                     _provider_data_7 <- Data.Binary.get;
                     _start_param_8 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _extended_media_9 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     GHC.Base.pure (InputMediaInvoice' _title_1 _description_2 _photo_3 _invoice_4 _payload_5 _provider_6 _provider_data_7 _start_param_8 _extended_media_9)};
           put to_be_encoded_10 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_10._extended_media,
                                                               2),
                                                              (Data.Maybe.isJust to_be_encoded_10._start_param,
                                                               1),
                                                              (Data.Maybe.isJust to_be_encoded_10._photo,
                                                               0)];
                                      Data.Binary.put to_be_encoded_10._title;
                                      Data.Binary.put to_be_encoded_10._description;
                                      Data.Binary.put to_be_encoded_10._photo;
                                      Data.Binary.put to_be_encoded_10._invoice;
                                      Data.Binary.put to_be_encoded_10._payload;
                                      Data.Binary.put to_be_encoded_10._provider;
                                      Data.Binary.put to_be_encoded_10._provider_data;
                                      Data.Binary.put to_be_encoded_10._start_param;
                                      Data.Binary.put to_be_encoded_10._extended_media}}
instance Data.Binary.Binary InputMediaPhoto'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _spoiler_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _id_2 <- Data.Binary.get;
                     _ttl_seconds_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     GHC.Base.pure (InputMediaPhoto' _spoiler_1 _id_2 _ttl_seconds_3)};
           put to_be_encoded_4 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_4._ttl_seconds,
                                                              0),
                                                             (Data.Maybe.isJust to_be_encoded_4._spoiler,
                                                              1)];
                                     Data.Binary.put to_be_encoded_4._spoiler;
                                     Data.Binary.put to_be_encoded_4._id;
                                     Data.Binary.put to_be_encoded_4._ttl_seconds}}
instance Data.Binary.Binary InputMediaPhotoExternal'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _spoiler_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _url_2 <- Data.Binary.get;
                     _ttl_seconds_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     GHC.Base.pure (InputMediaPhotoExternal' _spoiler_1 _url_2 _ttl_seconds_3)};
           put to_be_encoded_4 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_4._ttl_seconds,
                                                              0),
                                                             (Data.Maybe.isJust to_be_encoded_4._spoiler,
                                                              1)];
                                     Data.Binary.put to_be_encoded_4._spoiler;
                                     Data.Binary.put to_be_encoded_4._url;
                                     Data.Binary.put to_be_encoded_4._ttl_seconds}}
instance Data.Binary.Binary InputMediaPoll'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _poll_1 <- Data.Binary.get;
                     _correct_answers_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _solution_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _solution_entities_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     GHC.Base.pure (InputMediaPoll' _poll_1 _correct_answers_2 _solution_3 _solution_entities_4)};
           put to_be_encoded_5 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_5._solution_entities,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_5._solution,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_5._correct_answers,
                                                              0)];
                                     Data.Binary.put to_be_encoded_5._poll;
                                     Data.Binary.put to_be_encoded_5._correct_answers;
                                     Data.Binary.put to_be_encoded_5._solution;
                                     Data.Binary.put to_be_encoded_5._solution_entities}}
instance Data.Binary.Binary InputMediaStory'
    where {get = do {_peer_0 <- Data.Binary.get;
                     _id_1 <- Data.Binary.get;
                     GHC.Base.pure (InputMediaStory' _peer_0 _id_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._peer;
                                     Data.Binary.put to_be_encoded_2._id}}
instance Data.Binary.Binary InputMediaUploadedDocument'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _nosound_video_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     _force_file_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 4);
                     _spoiler_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 5);
                     _file_4 <- Data.Binary.get;
                     _thumb_5 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _mime_type_6 <- Data.Binary.get;
                     _attributes_7 <- Data.Binary.get;
                     _stickers_8 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _ttl_seconds_9 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     GHC.Base.pure (InputMediaUploadedDocument' _nosound_video_1 _force_file_2 _spoiler_3 _file_4 _thumb_5 _mime_type_6 _attributes_7 _stickers_8 _ttl_seconds_9)};
           put to_be_encoded_10 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_10._ttl_seconds,
                                                               1),
                                                              (Data.Maybe.isJust to_be_encoded_10._stickers,
                                                               0),
                                                              (Data.Maybe.isJust to_be_encoded_10._thumb,
                                                               2),
                                                              (Data.Maybe.isJust to_be_encoded_10._spoiler,
                                                               5),
                                                              (Data.Maybe.isJust to_be_encoded_10._force_file,
                                                               4),
                                                              (Data.Maybe.isJust to_be_encoded_10._nosound_video,
                                                               3)];
                                      Data.Binary.put to_be_encoded_10._nosound_video;
                                      Data.Binary.put to_be_encoded_10._force_file;
                                      Data.Binary.put to_be_encoded_10._spoiler;
                                      Data.Binary.put to_be_encoded_10._file;
                                      Data.Binary.put to_be_encoded_10._thumb;
                                      Data.Binary.put to_be_encoded_10._mime_type;
                                      Data.Binary.put to_be_encoded_10._attributes;
                                      Data.Binary.put to_be_encoded_10._stickers;
                                      Data.Binary.put to_be_encoded_10._ttl_seconds}}
instance Data.Binary.Binary InputMediaUploadedPhoto'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _spoiler_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _file_2 <- Data.Binary.get;
                     _stickers_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _ttl_seconds_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     GHC.Base.pure (InputMediaUploadedPhoto' _spoiler_1 _file_2 _stickers_3 _ttl_seconds_4)};
           put to_be_encoded_5 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_5._ttl_seconds,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_5._stickers,
                                                              0),
                                                             (Data.Maybe.isJust to_be_encoded_5._spoiler,
                                                              2)];
                                     Data.Binary.put to_be_encoded_5._spoiler;
                                     Data.Binary.put to_be_encoded_5._file;
                                     Data.Binary.put to_be_encoded_5._stickers;
                                     Data.Binary.put to_be_encoded_5._ttl_seconds}}
instance Data.Binary.Binary InputMediaVenue'
    where {get = do {_geo_point_0 <- Data.Binary.get;
                     _title_1 <- Data.Binary.get;
                     _address_2 <- Data.Binary.get;
                     _provider_3 <- Data.Binary.get;
                     _venue_id_4 <- Data.Binary.get;
                     _venue_type_5 <- Data.Binary.get;
                     GHC.Base.pure (InputMediaVenue' _geo_point_0 _title_1 _address_2 _provider_3 _venue_id_4 _venue_type_5)};
           put to_be_encoded_6 = do {Data.Binary.put to_be_encoded_6._geo_point;
                                     Data.Binary.put to_be_encoded_6._title;
                                     Data.Binary.put to_be_encoded_6._address;
                                     Data.Binary.put to_be_encoded_6._provider;
                                     Data.Binary.put to_be_encoded_6._venue_id;
                                     Data.Binary.put to_be_encoded_6._venue_type}}
instance Data.Binary.Binary InputMediaWebPage'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _force_large_media_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _force_small_media_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _optional_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _url_4 <- Data.Binary.get;
                     GHC.Base.pure (InputMediaWebPage' _force_large_media_1 _force_small_media_2 _optional_3 _url_4)};
           put to_be_encoded_5 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_5._optional,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_5._force_small_media,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_5._force_large_media,
                                                              0)];
                                     Data.Binary.put to_be_encoded_5._force_large_media;
                                     Data.Binary.put to_be_encoded_5._force_small_media;
                                     Data.Binary.put to_be_encoded_5._optional;
                                     Data.Binary.put to_be_encoded_5._url}}
data InputMedia
    = InputMediaContact !InputMediaContact'
    | InputMediaDice !InputMediaDice'
    | InputMediaDocument !InputMediaDocument'
    | InputMediaDocumentExternal !InputMediaDocumentExternal'
    | InputMediaEmpty !InputMediaEmpty'
    | InputMediaGame !InputMediaGame'
    | InputMediaGeoLive !InputMediaGeoLive'
    | InputMediaGeoPoint !InputMediaGeoPoint'
    | InputMediaInvoice !InputMediaInvoice'
    | InputMediaPhoto !InputMediaPhoto'
    | InputMediaPhotoExternal !InputMediaPhotoExternal'
    | InputMediaPoll !InputMediaPoll'
    | InputMediaStory !InputMediaStory'
    | InputMediaUploadedDocument !InputMediaUploadedDocument'
    | InputMediaUploadedPhoto !InputMediaUploadedPhoto'
    | InputMediaVenue !InputMediaVenue'
    | InputMediaWebPage !InputMediaWebPage'
data InputMediaContact'
    = InputMediaContact' {_phone_number :: !String',
                          _first_name :: !String',
                          _last_name :: !String',
                          _vcard :: !String'}
data InputMediaDice' = InputMediaDice' {_emoticon :: !String'}
data InputMediaDocument'
    = InputMediaDocument' {_spoiler :: !(Maybe True'),
                           _id :: !InputDocument,
                           _ttl_seconds :: !(Maybe Int'),
                           _query :: !(Maybe String')}
data InputMediaDocumentExternal'
    = InputMediaDocumentExternal' {_spoiler :: !(Maybe True'),
                                   _url :: !String',
                                   _ttl_seconds :: !(Maybe Int')}
data InputMediaEmpty' = InputMediaEmpty' {}
data InputMediaGame' = InputMediaGame' {_id :: !InputGame}
data InputMediaGeoLive'
    = InputMediaGeoLive' {_stopped :: !(Maybe True'),
                          _geo_point :: !InputGeoPoint,
                          _heading :: !(Maybe Int'),
                          _period :: !(Maybe Int'),
                          _proximity_notification_radius :: !(Maybe Int')}
data InputMediaGeoPoint'
    = InputMediaGeoPoint' {_geo_point :: !InputGeoPoint}
data InputMediaInvoice'
    = InputMediaInvoice' {_title :: !String',
                          _description :: !String',
                          _photo :: !(Maybe InputWebDocument),
                          _invoice :: !Invoice,
                          _payload :: !Bytes',
                          _provider :: !String',
                          _provider_data :: !DataJSON,
                          _start_param :: !(Maybe String'),
                          _extended_media :: !(Maybe InputMedia)}
data InputMediaPhoto'
    = InputMediaPhoto' {_spoiler :: !(Maybe True'),
                        _id :: !InputPhoto,
                        _ttl_seconds :: !(Maybe Int')}
data InputMediaPhotoExternal'
    = InputMediaPhotoExternal' {_spoiler :: !(Maybe True'),
                                _url :: !String',
                                _ttl_seconds :: !(Maybe Int')}
data InputMediaPoll'
    = InputMediaPoll' {_poll :: !Poll,
                       _correct_answers :: !(Maybe (Vector Bytes')),
                       _solution :: !(Maybe String'),
                       _solution_entities :: !(Maybe (Vector MessageEntity))}
data InputMediaStory'
    = InputMediaStory' {_peer :: !InputPeer, _id :: !Int'}
data InputMediaUploadedDocument'
    = InputMediaUploadedDocument' {_nosound_video :: !(Maybe True'),
                                   _force_file :: !(Maybe True'),
                                   _spoiler :: !(Maybe True'),
                                   _file :: !InputFile,
                                   _thumb :: !(Maybe InputFile),
                                   _mime_type :: !String',
                                   _attributes :: !(Vector DocumentAttribute),
                                   _stickers :: !(Maybe (Vector InputDocument)),
                                   _ttl_seconds :: !(Maybe Int')}
data InputMediaUploadedPhoto'
    = InputMediaUploadedPhoto' {_spoiler :: !(Maybe True'),
                                _file :: !InputFile,
                                _stickers :: !(Maybe (Vector InputDocument)),
                                _ttl_seconds :: !(Maybe Int')}
data InputMediaVenue'
    = InputMediaVenue' {_geo_point :: !InputGeoPoint,
                        _title :: !String',
                        _address :: !String',
                        _provider :: !String',
                        _venue_id :: !String',
                        _venue_type :: !String'}
data InputMediaWebPage'
    = InputMediaWebPage' {_force_large_media :: !(Maybe True'),
                          _force_small_media :: !(Maybe True'),
                          _optional :: !(Maybe True'),
                          _url :: !String'}
instance Data.Binary.Binary InputMedia
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {4171988475 -> fmap InputMediaContact Data.Binary.get;
                      3866083195 -> fmap InputMediaDice Data.Binary.get;
                      860303448 -> fmap InputMediaDocument Data.Binary.get;
                      4216511641 -> fmap InputMediaDocumentExternal Data.Binary.get;
                      2523198847 -> fmap InputMediaEmpty Data.Binary.get;
                      3544138739 -> fmap InputMediaGame Data.Binary.get;
                      2535434307 -> fmap InputMediaGeoLive Data.Binary.get;
                      4190388548 -> fmap InputMediaGeoPoint Data.Binary.get;
                      2394269397 -> fmap InputMediaInvoice Data.Binary.get;
                      3015312949 -> fmap InputMediaPhoto Data.Binary.get;
                      3854302746 -> fmap InputMediaPhotoExternal Data.Binary.get;
                      261416433 -> fmap InputMediaPoll Data.Binary.get;
                      2315114360 -> fmap InputMediaStory Data.Binary.get;
                      1530447553 -> fmap InputMediaUploadedDocument Data.Binary.get;
                      505969924 -> fmap InputMediaUploadedPhoto Data.Binary.get;
                      3242007569 -> fmap InputMediaVenue Data.Binary.get;
                      3256584265 -> fmap InputMediaWebPage Data.Binary.get}};
           put (InputMediaContact tmp_1) = do {Data.Binary.Put.putWord32le 4171988475;
                                               Data.Binary.put tmp_1};
           put (InputMediaDice tmp_2) = do {Data.Binary.Put.putWord32le 3866083195;
                                            Data.Binary.put tmp_2};
           put (InputMediaDocument tmp_3) = do {Data.Binary.Put.putWord32le 860303448;
                                                Data.Binary.put tmp_3};
           put (InputMediaDocumentExternal tmp_4) = do {Data.Binary.Put.putWord32le 4216511641;
                                                        Data.Binary.put tmp_4};
           put (InputMediaEmpty tmp_5) = do {Data.Binary.Put.putWord32le 2523198847;
                                             Data.Binary.put tmp_5};
           put (InputMediaGame tmp_6) = do {Data.Binary.Put.putWord32le 3544138739;
                                            Data.Binary.put tmp_6};
           put (InputMediaGeoLive tmp_7) = do {Data.Binary.Put.putWord32le 2535434307;
                                               Data.Binary.put tmp_7};
           put (InputMediaGeoPoint tmp_8) = do {Data.Binary.Put.putWord32le 4190388548;
                                                Data.Binary.put tmp_8};
           put (InputMediaInvoice tmp_9) = do {Data.Binary.Put.putWord32le 2394269397;
                                               Data.Binary.put tmp_9};
           put (InputMediaPhoto tmp_10) = do {Data.Binary.Put.putWord32le 3015312949;
                                              Data.Binary.put tmp_10};
           put (InputMediaPhotoExternal tmp_11) = do {Data.Binary.Put.putWord32le 3854302746;
                                                      Data.Binary.put tmp_11};
           put (InputMediaPoll tmp_12) = do {Data.Binary.Put.putWord32le 261416433;
                                             Data.Binary.put tmp_12};
           put (InputMediaStory tmp_13) = do {Data.Binary.Put.putWord32le 2315114360;
                                              Data.Binary.put tmp_13};
           put (InputMediaUploadedDocument tmp_14) = do {Data.Binary.Put.putWord32le 1530447553;
                                                         Data.Binary.put tmp_14};
           put (InputMediaUploadedPhoto tmp_15) = do {Data.Binary.Put.putWord32le 505969924;
                                                      Data.Binary.put tmp_15};
           put (InputMediaVenue tmp_16) = do {Data.Binary.Put.putWord32le 3242007569;
                                              Data.Binary.put tmp_16};
           put (InputMediaWebPage tmp_17) = do {Data.Binary.Put.putWord32le 3256584265;
                                                Data.Binary.put tmp_17}}
instance Data.Binary.Binary InputMessageCallbackQuery'
    where {get = do {_id_0 <- Data.Binary.get;
                     _query_id_1 <- Data.Binary.get;
                     GHC.Base.pure (InputMessageCallbackQuery' _id_0 _query_id_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._id;
                                     Data.Binary.put to_be_encoded_2._query_id}}
instance Data.Binary.Binary InputMessageID'
    where {get = do {_id_0 <- Data.Binary.get;
                     GHC.Base.pure (InputMessageID' _id_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._id}
instance Data.Binary.Binary InputMessagePinned'
    where {get = GHC.Base.pure InputMessagePinned';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary InputMessageReplyTo'
    where {get = do {_id_0 <- Data.Binary.get;
                     GHC.Base.pure (InputMessageReplyTo' _id_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._id}
data InputMessage
    = InputMessageCallbackQuery !InputMessageCallbackQuery'
    | InputMessageID !InputMessageID'
    | InputMessagePinned !InputMessagePinned'
    | InputMessageReplyTo !InputMessageReplyTo'
data InputMessageCallbackQuery'
    = InputMessageCallbackQuery' {_id :: !Int', _query_id :: !Long'}
data InputMessageID' = InputMessageID' {_id :: !Int'}
data InputMessagePinned' = InputMessagePinned' {}
data InputMessageReplyTo' = InputMessageReplyTo' {_id :: !Int'}
instance Data.Binary.Binary InputMessage
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2902071934 -> fmap InputMessageCallbackQuery Data.Binary.get;
                      2792792866 -> fmap InputMessageID Data.Binary.get;
                      2257003832 -> fmap InputMessagePinned Data.Binary.get;
                      3134751637 -> fmap InputMessageReplyTo Data.Binary.get}};
           put (InputMessageCallbackQuery tmp_1) = do {Data.Binary.Put.putWord32le 2902071934;
                                                       Data.Binary.put tmp_1};
           put (InputMessageID tmp_2) = do {Data.Binary.Put.putWord32le 2792792866;
                                            Data.Binary.put tmp_2};
           put (InputMessagePinned tmp_3) = do {Data.Binary.Put.putWord32le 2257003832;
                                                Data.Binary.put tmp_3};
           put (InputMessageReplyTo tmp_4) = do {Data.Binary.Put.putWord32le 3134751637;
                                                 Data.Binary.put tmp_4}}
instance Data.Binary.Binary InputNotifyBroadcasts'
    where {get = GHC.Base.pure InputNotifyBroadcasts';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary InputNotifyChats'
    where {get = GHC.Base.pure InputNotifyChats';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary InputNotifyForumTopic'
    where {get = do {_peer_0 <- Data.Binary.get;
                     _top_msg_id_1 <- Data.Binary.get;
                     GHC.Base.pure (InputNotifyForumTopic' _peer_0 _top_msg_id_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._peer;
                                     Data.Binary.put to_be_encoded_2._top_msg_id}}
instance Data.Binary.Binary InputNotifyPeer'
    where {get = do {_peer_0 <- Data.Binary.get;
                     GHC.Base.pure (InputNotifyPeer' _peer_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._peer}
instance Data.Binary.Binary InputNotifyUsers'
    where {get = GHC.Base.pure InputNotifyUsers';
           put to_be_encoded_0 = do GHC.Base.pure ()}
data InputNotifyPeer
    = InputNotifyBroadcasts !InputNotifyBroadcasts'
    | InputNotifyChats !InputNotifyChats'
    | InputNotifyForumTopic !InputNotifyForumTopic'
    | InputNotifyPeer !InputNotifyPeer'
    | InputNotifyUsers !InputNotifyUsers'
data InputNotifyBroadcasts' = InputNotifyBroadcasts' {}
data InputNotifyChats' = InputNotifyChats' {}
data InputNotifyForumTopic'
    = InputNotifyForumTopic' {_peer :: !InputPeer,
                              _top_msg_id :: !Int'}
data InputNotifyPeer' = InputNotifyPeer' {_peer :: !InputPeer}
data InputNotifyUsers' = InputNotifyUsers' {}
instance Data.Binary.Binary InputNotifyPeer
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2983951486 -> fmap InputNotifyBroadcasts Data.Binary.get;
                      1251338318 -> fmap InputNotifyChats Data.Binary.get;
                      1548122514 -> fmap InputNotifyForumTopic Data.Binary.get;
                      3099351820 -> fmap InputNotifyPeer Data.Binary.get;
                      423314455 -> fmap InputNotifyUsers Data.Binary.get}};
           put (InputNotifyBroadcasts tmp_1) = do {Data.Binary.Put.putWord32le 2983951486;
                                                   Data.Binary.put tmp_1};
           put (InputNotifyChats tmp_2) = do {Data.Binary.Put.putWord32le 1251338318;
                                              Data.Binary.put tmp_2};
           put (InputNotifyForumTopic tmp_3) = do {Data.Binary.Put.putWord32le 1548122514;
                                                   Data.Binary.put tmp_3};
           put (InputNotifyPeer tmp_4) = do {Data.Binary.Put.putWord32le 3099351820;
                                             Data.Binary.put tmp_4};
           put (InputNotifyUsers tmp_5) = do {Data.Binary.Put.putWord32le 423314455;
                                              Data.Binary.put tmp_5}}
instance Data.Binary.Binary InputPaymentCredentials'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _save_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _data_2 <- Data.Binary.get;
                     GHC.Base.pure (InputPaymentCredentials' _save_1 _data_2)};
           put to_be_encoded_3 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_3._save,
                                                              0)];
                                     Data.Binary.put to_be_encoded_3._save;
                                     Data.Binary.put to_be_encoded_3._data}}
instance Data.Binary.Binary InputPaymentCredentialsApplePay'
    where {get = do {_payment_data_0 <- Data.Binary.get;
                     GHC.Base.pure (InputPaymentCredentialsApplePay' _payment_data_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._payment_data}
instance Data.Binary.Binary InputPaymentCredentialsGooglePay'
    where {get = do {_payment_token_0 <- Data.Binary.get;
                     GHC.Base.pure (InputPaymentCredentialsGooglePay' _payment_token_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._payment_token}
instance Data.Binary.Binary InputPaymentCredentialsSaved'
    where {get = do {_id_0 <- Data.Binary.get;
                     _tmp_password_1 <- Data.Binary.get;
                     GHC.Base.pure (InputPaymentCredentialsSaved' _id_0 _tmp_password_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._id;
                                     Data.Binary.put to_be_encoded_2._tmp_password}}
data InputPaymentCredentials
    = InputPaymentCredentials !InputPaymentCredentials'
    | InputPaymentCredentialsApplePay !InputPaymentCredentialsApplePay'
    | InputPaymentCredentialsGooglePay !InputPaymentCredentialsGooglePay'
    | InputPaymentCredentialsSaved !InputPaymentCredentialsSaved'
data InputPaymentCredentials'
    = InputPaymentCredentials' {_save :: !(Maybe True'),
                                _data :: !DataJSON}
data InputPaymentCredentialsApplePay'
    = InputPaymentCredentialsApplePay' {_payment_data :: !DataJSON}
data InputPaymentCredentialsGooglePay'
    = InputPaymentCredentialsGooglePay' {_payment_token :: !DataJSON}
data InputPaymentCredentialsSaved'
    = InputPaymentCredentialsSaved' {_id :: !String',
                                     _tmp_password :: !Bytes'}
instance Data.Binary.Binary InputPaymentCredentials
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {873977640 -> fmap InputPaymentCredentials Data.Binary.get;
                      178373535 -> fmap InputPaymentCredentialsApplePay Data.Binary.get;
                      2328045569 -> fmap InputPaymentCredentialsGooglePay Data.Binary.get;
                      3238965967 -> fmap InputPaymentCredentialsSaved Data.Binary.get}};
           put (InputPaymentCredentials tmp_1) = do {Data.Binary.Put.putWord32le 873977640;
                                                     Data.Binary.put tmp_1};
           put (InputPaymentCredentialsApplePay tmp_2) = do {Data.Binary.Put.putWord32le 178373535;
                                                             Data.Binary.put tmp_2};
           put (InputPaymentCredentialsGooglePay tmp_3) = do {Data.Binary.Put.putWord32le 2328045569;
                                                              Data.Binary.put tmp_3};
           put (InputPaymentCredentialsSaved tmp_4) = do {Data.Binary.Put.putWord32le 3238965967;
                                                          Data.Binary.put tmp_4}}
instance Data.Binary.Binary InputPeerChannel'
    where {get = do {_channel_id_0 <- Data.Binary.get;
                     _access_hash_1 <- Data.Binary.get;
                     GHC.Base.pure (InputPeerChannel' _channel_id_0 _access_hash_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._channel_id;
                                     Data.Binary.put to_be_encoded_2._access_hash}}
instance Data.Binary.Binary InputPeerChannelFromMessage'
    where {get = do {_peer_0 <- Data.Binary.get;
                     _msg_id_1 <- Data.Binary.get;
                     _channel_id_2 <- Data.Binary.get;
                     GHC.Base.pure (InputPeerChannelFromMessage' _peer_0 _msg_id_1 _channel_id_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._peer;
                                     Data.Binary.put to_be_encoded_3._msg_id;
                                     Data.Binary.put to_be_encoded_3._channel_id}}
instance Data.Binary.Binary InputPeerChat'
    where {get = do {_chat_id_0 <- Data.Binary.get;
                     GHC.Base.pure (InputPeerChat' _chat_id_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._chat_id}
instance Data.Binary.Binary InputPeerEmpty'
    where {get = GHC.Base.pure InputPeerEmpty';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary InputPeerSelf'
    where {get = GHC.Base.pure InputPeerSelf';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary InputPeerUser'
    where {get = do {_user_id_0 <- Data.Binary.get;
                     _access_hash_1 <- Data.Binary.get;
                     GHC.Base.pure (InputPeerUser' _user_id_0 _access_hash_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._user_id;
                                     Data.Binary.put to_be_encoded_2._access_hash}}
instance Data.Binary.Binary InputPeerUserFromMessage'
    where {get = do {_peer_0 <- Data.Binary.get;
                     _msg_id_1 <- Data.Binary.get;
                     _user_id_2 <- Data.Binary.get;
                     GHC.Base.pure (InputPeerUserFromMessage' _peer_0 _msg_id_1 _user_id_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._peer;
                                     Data.Binary.put to_be_encoded_3._msg_id;
                                     Data.Binary.put to_be_encoded_3._user_id}}
data InputPeer
    = InputPeerChannel !InputPeerChannel'
    | InputPeerChannelFromMessage !InputPeerChannelFromMessage'
    | InputPeerChat !InputPeerChat'
    | InputPeerEmpty !InputPeerEmpty'
    | InputPeerSelf !InputPeerSelf'
    | InputPeerUser !InputPeerUser'
    | InputPeerUserFromMessage !InputPeerUserFromMessage'
data InputPeerChannel'
    = InputPeerChannel' {_channel_id :: !Long', _access_hash :: !Long'}
data InputPeerChannelFromMessage'
    = InputPeerChannelFromMessage' {_peer :: !InputPeer,
                                    _msg_id :: !Int',
                                    _channel_id :: !Long'}
data InputPeerChat' = InputPeerChat' {_chat_id :: !Long'}
data InputPeerEmpty' = InputPeerEmpty' {}
data InputPeerSelf' = InputPeerSelf' {}
data InputPeerUser'
    = InputPeerUser' {_user_id :: !Long', _access_hash :: !Long'}
data InputPeerUserFromMessage'
    = InputPeerUserFromMessage' {_peer :: !InputPeer,
                                 _msg_id :: !Int',
                                 _user_id :: !Long'}
instance Data.Binary.Binary InputPeer
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {666680316 -> fmap InputPeerChannel Data.Binary.get;
                      3173648448 -> fmap InputPeerChannelFromMessage Data.Binary.get;
                      900291769 -> fmap InputPeerChat Data.Binary.get;
                      2134579434 -> fmap InputPeerEmpty Data.Binary.get;
                      2107670217 -> fmap InputPeerSelf Data.Binary.get;
                      3723011404 -> fmap InputPeerUser Data.Binary.get;
                      2826635804 -> fmap InputPeerUserFromMessage Data.Binary.get}};
           put (InputPeerChannel tmp_1) = do {Data.Binary.Put.putWord32le 666680316;
                                              Data.Binary.put tmp_1};
           put (InputPeerChannelFromMessage tmp_2) = do {Data.Binary.Put.putWord32le 3173648448;
                                                         Data.Binary.put tmp_2};
           put (InputPeerChat tmp_3) = do {Data.Binary.Put.putWord32le 900291769;
                                           Data.Binary.put tmp_3};
           put (InputPeerEmpty tmp_4) = do {Data.Binary.Put.putWord32le 2134579434;
                                            Data.Binary.put tmp_4};
           put (InputPeerSelf tmp_5) = do {Data.Binary.Put.putWord32le 2107670217;
                                           Data.Binary.put tmp_5};
           put (InputPeerUser tmp_6) = do {Data.Binary.Put.putWord32le 3723011404;
                                           Data.Binary.put tmp_6};
           put (InputPeerUserFromMessage tmp_7) = do {Data.Binary.Put.putWord32le 2826635804;
                                                      Data.Binary.put tmp_7}}
instance Data.Binary.Binary InputPeerNotifySettings'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _show_previews_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _silent_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _mute_until_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _sound_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     _stories_muted_5 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 6);
                     _stories_hide_sender_6 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 7);
                     _stories_sound_7 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 8);
                     GHC.Base.pure (InputPeerNotifySettings' _show_previews_1 _silent_2 _mute_until_3 _sound_4 _stories_muted_5 _stories_hide_sender_6 _stories_sound_7)};
           put to_be_encoded_8 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_8._stories_sound,
                                                              8),
                                                             (Data.Maybe.isJust to_be_encoded_8._stories_hide_sender,
                                                              7),
                                                             (Data.Maybe.isJust to_be_encoded_8._stories_muted,
                                                              6),
                                                             (Data.Maybe.isJust to_be_encoded_8._sound,
                                                              3),
                                                             (Data.Maybe.isJust to_be_encoded_8._mute_until,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_8._silent,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_8._show_previews,
                                                              0)];
                                     Data.Binary.put to_be_encoded_8._show_previews;
                                     Data.Binary.put to_be_encoded_8._silent;
                                     Data.Binary.put to_be_encoded_8._mute_until;
                                     Data.Binary.put to_be_encoded_8._sound;
                                     Data.Binary.put to_be_encoded_8._stories_muted;
                                     Data.Binary.put to_be_encoded_8._stories_hide_sender;
                                     Data.Binary.put to_be_encoded_8._stories_sound}}
data InputPeerNotifySettings
    = InputPeerNotifySettings !InputPeerNotifySettings'
data InputPeerNotifySettings'
    = InputPeerNotifySettings' {_show_previews :: !(Maybe Bool),
                                _silent :: !(Maybe Bool),
                                _mute_until :: !(Maybe Int'),
                                _sound :: !(Maybe NotificationSound),
                                _stories_muted :: !(Maybe Bool),
                                _stories_hide_sender :: !(Maybe Bool),
                                _stories_sound :: !(Maybe NotificationSound)}
instance Data.Binary.Binary InputPeerNotifySettings
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3402328802 -> fmap InputPeerNotifySettings Data.Binary.get}};
           put (InputPeerNotifySettings tmp_1) = do {Data.Binary.Put.putWord32le 3402328802;
                                                     Data.Binary.put tmp_1}}
instance Data.Binary.Binary InputPhoneCall'
    where {get = do {_id_0 <- Data.Binary.get;
                     _access_hash_1 <- Data.Binary.get;
                     GHC.Base.pure (InputPhoneCall' _id_0 _access_hash_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._id;
                                     Data.Binary.put to_be_encoded_2._access_hash}}
data InputPhoneCall = InputPhoneCall !InputPhoneCall'
data InputPhoneCall'
    = InputPhoneCall' {_id :: !Long', _access_hash :: !Long'}
instance Data.Binary.Binary InputPhoneCall
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {506920429 -> fmap InputPhoneCall Data.Binary.get}};
           put (InputPhoneCall tmp_1) = do {Data.Binary.Put.putWord32le 506920429;
                                            Data.Binary.put tmp_1}}
instance Data.Binary.Binary InputPhoto'
    where {get = do {_id_0 <- Data.Binary.get;
                     _access_hash_1 <- Data.Binary.get;
                     _file_reference_2 <- Data.Binary.get;
                     GHC.Base.pure (InputPhoto' _id_0 _access_hash_1 _file_reference_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._id;
                                     Data.Binary.put to_be_encoded_3._access_hash;
                                     Data.Binary.put to_be_encoded_3._file_reference}}
instance Data.Binary.Binary InputPhotoEmpty'
    where {get = GHC.Base.pure InputPhotoEmpty';
           put to_be_encoded_0 = do GHC.Base.pure ()}
data InputPhoto
    = InputPhoto !InputPhoto'
    | InputPhotoEmpty !InputPhotoEmpty'
data InputPhoto'
    = InputPhoto' {_id :: !Long',
                   _access_hash :: !Long',
                   _file_reference :: !Bytes'}
data InputPhotoEmpty' = InputPhotoEmpty' {}
instance Data.Binary.Binary InputPhoto
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1001634122 -> fmap InputPhoto Data.Binary.get;
                      483901197 -> fmap InputPhotoEmpty Data.Binary.get}};
           put (InputPhoto tmp_1) = do {Data.Binary.Put.putWord32le 1001634122;
                                        Data.Binary.put tmp_1};
           put (InputPhotoEmpty tmp_2) = do {Data.Binary.Put.putWord32le 483901197;
                                             Data.Binary.put tmp_2}}
instance Data.Binary.Binary InputPrivacyKeyAbout'
    where {get = GHC.Base.pure InputPrivacyKeyAbout';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary InputPrivacyKeyAddedByPhone'
    where {get = GHC.Base.pure InputPrivacyKeyAddedByPhone';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary InputPrivacyKeyChatInvite'
    where {get = GHC.Base.pure InputPrivacyKeyChatInvite';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary InputPrivacyKeyForwards'
    where {get = GHC.Base.pure InputPrivacyKeyForwards';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary InputPrivacyKeyPhoneCall'
    where {get = GHC.Base.pure InputPrivacyKeyPhoneCall';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary InputPrivacyKeyPhoneNumber'
    where {get = GHC.Base.pure InputPrivacyKeyPhoneNumber';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary InputPrivacyKeyPhoneP2P'
    where {get = GHC.Base.pure InputPrivacyKeyPhoneP2P';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary InputPrivacyKeyProfilePhoto'
    where {get = GHC.Base.pure InputPrivacyKeyProfilePhoto';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary InputPrivacyKeyStatusTimestamp'
    where {get = GHC.Base.pure InputPrivacyKeyStatusTimestamp';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary InputPrivacyKeyVoiceMessages'
    where {get = GHC.Base.pure InputPrivacyKeyVoiceMessages';
           put to_be_encoded_0 = do GHC.Base.pure ()}
data InputPrivacyKey
    = InputPrivacyKeyAbout !InputPrivacyKeyAbout'
    | InputPrivacyKeyAddedByPhone !InputPrivacyKeyAddedByPhone'
    | InputPrivacyKeyChatInvite !InputPrivacyKeyChatInvite'
    | InputPrivacyKeyForwards !InputPrivacyKeyForwards'
    | InputPrivacyKeyPhoneCall !InputPrivacyKeyPhoneCall'
    | InputPrivacyKeyPhoneNumber !InputPrivacyKeyPhoneNumber'
    | InputPrivacyKeyPhoneP2P !InputPrivacyKeyPhoneP2P'
    | InputPrivacyKeyProfilePhoto !InputPrivacyKeyProfilePhoto'
    | InputPrivacyKeyStatusTimestamp !InputPrivacyKeyStatusTimestamp'
    | InputPrivacyKeyVoiceMessages !InputPrivacyKeyVoiceMessages'
data InputPrivacyKeyAbout' = InputPrivacyKeyAbout' {}
data InputPrivacyKeyAddedByPhone' = InputPrivacyKeyAddedByPhone' {}
data InputPrivacyKeyChatInvite' = InputPrivacyKeyChatInvite' {}
data InputPrivacyKeyForwards' = InputPrivacyKeyForwards' {}
data InputPrivacyKeyPhoneCall' = InputPrivacyKeyPhoneCall' {}
data InputPrivacyKeyPhoneNumber' = InputPrivacyKeyPhoneNumber' {}
data InputPrivacyKeyPhoneP2P' = InputPrivacyKeyPhoneP2P' {}
data InputPrivacyKeyProfilePhoto' = InputPrivacyKeyProfilePhoto' {}
data InputPrivacyKeyStatusTimestamp'
    = InputPrivacyKeyStatusTimestamp' {}
data InputPrivacyKeyVoiceMessages'
    = InputPrivacyKeyVoiceMessages' {}
instance Data.Binary.Binary InputPrivacyKey
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {941870144 -> fmap InputPrivacyKeyAbout Data.Binary.get;
                      3508640733 -> fmap InputPrivacyKeyAddedByPhone Data.Binary.get;
                      3187344422 -> fmap InputPrivacyKeyChatInvite Data.Binary.get;
                      2765966344 -> fmap InputPrivacyKeyForwards Data.Binary.get;
                      4206550111 -> fmap InputPrivacyKeyPhoneCall Data.Binary.get;
                      55761658 -> fmap InputPrivacyKeyPhoneNumber Data.Binary.get;
                      3684593874 -> fmap InputPrivacyKeyPhoneP2P Data.Binary.get;
                      1461304012 -> fmap InputPrivacyKeyProfilePhoto Data.Binary.get;
                      1335282456 -> fmap InputPrivacyKeyStatusTimestamp Data.Binary.get;
                      2934349160 -> fmap InputPrivacyKeyVoiceMessages Data.Binary.get}};
           put (InputPrivacyKeyAbout tmp_1) = do {Data.Binary.Put.putWord32le 941870144;
                                                  Data.Binary.put tmp_1};
           put (InputPrivacyKeyAddedByPhone tmp_2) = do {Data.Binary.Put.putWord32le 3508640733;
                                                         Data.Binary.put tmp_2};
           put (InputPrivacyKeyChatInvite tmp_3) = do {Data.Binary.Put.putWord32le 3187344422;
                                                       Data.Binary.put tmp_3};
           put (InputPrivacyKeyForwards tmp_4) = do {Data.Binary.Put.putWord32le 2765966344;
                                                     Data.Binary.put tmp_4};
           put (InputPrivacyKeyPhoneCall tmp_5) = do {Data.Binary.Put.putWord32le 4206550111;
                                                      Data.Binary.put tmp_5};
           put (InputPrivacyKeyPhoneNumber tmp_6) = do {Data.Binary.Put.putWord32le 55761658;
                                                        Data.Binary.put tmp_6};
           put (InputPrivacyKeyPhoneP2P tmp_7) = do {Data.Binary.Put.putWord32le 3684593874;
                                                     Data.Binary.put tmp_7};
           put (InputPrivacyKeyProfilePhoto tmp_8) = do {Data.Binary.Put.putWord32le 1461304012;
                                                         Data.Binary.put tmp_8};
           put (InputPrivacyKeyStatusTimestamp tmp_9) = do {Data.Binary.Put.putWord32le 1335282456;
                                                            Data.Binary.put tmp_9};
           put (InputPrivacyKeyVoiceMessages tmp_10) = do {Data.Binary.Put.putWord32le 2934349160;
                                                           Data.Binary.put tmp_10}}
instance Data.Binary.Binary InputPrivacyValueAllowAll'
    where {get = GHC.Base.pure InputPrivacyValueAllowAll';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary InputPrivacyValueAllowChatParticipants'
    where {get = do {_chats_0 <- Data.Binary.get;
                     GHC.Base.pure (InputPrivacyValueAllowChatParticipants' _chats_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._chats}
instance Data.Binary.Binary InputPrivacyValueAllowCloseFriends'
    where {get = GHC.Base.pure InputPrivacyValueAllowCloseFriends';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary InputPrivacyValueAllowContacts'
    where {get = GHC.Base.pure InputPrivacyValueAllowContacts';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary InputPrivacyValueAllowUsers'
    where {get = do {_users_0 <- Data.Binary.get;
                     GHC.Base.pure (InputPrivacyValueAllowUsers' _users_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._users}
instance Data.Binary.Binary InputPrivacyValueDisallowAll'
    where {get = GHC.Base.pure InputPrivacyValueDisallowAll';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary InputPrivacyValueDisallowChatParticipants'
    where {get = do {_chats_0 <- Data.Binary.get;
                     GHC.Base.pure (InputPrivacyValueDisallowChatParticipants' _chats_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._chats}
instance Data.Binary.Binary InputPrivacyValueDisallowContacts'
    where {get = GHC.Base.pure InputPrivacyValueDisallowContacts';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary InputPrivacyValueDisallowUsers'
    where {get = do {_users_0 <- Data.Binary.get;
                     GHC.Base.pure (InputPrivacyValueDisallowUsers' _users_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._users}
data InputPrivacyRule
    = InputPrivacyValueAllowAll !InputPrivacyValueAllowAll'
    | InputPrivacyValueAllowChatParticipants !InputPrivacyValueAllowChatParticipants'
    | InputPrivacyValueAllowCloseFriends !InputPrivacyValueAllowCloseFriends'
    | InputPrivacyValueAllowContacts !InputPrivacyValueAllowContacts'
    | InputPrivacyValueAllowUsers !InputPrivacyValueAllowUsers'
    | InputPrivacyValueDisallowAll !InputPrivacyValueDisallowAll'
    | InputPrivacyValueDisallowChatParticipants !InputPrivacyValueDisallowChatParticipants'
    | InputPrivacyValueDisallowContacts !InputPrivacyValueDisallowContacts'
    | InputPrivacyValueDisallowUsers !InputPrivacyValueDisallowUsers'
data InputPrivacyValueAllowAll' = InputPrivacyValueAllowAll' {}
data InputPrivacyValueAllowChatParticipants'
    = InputPrivacyValueAllowChatParticipants' {_chats :: !(Vector Long')}
data InputPrivacyValueAllowCloseFriends'
    = InputPrivacyValueAllowCloseFriends' {}
data InputPrivacyValueAllowContacts'
    = InputPrivacyValueAllowContacts' {}
data InputPrivacyValueAllowUsers'
    = InputPrivacyValueAllowUsers' {_users :: !(Vector InputUser)}
data InputPrivacyValueDisallowAll'
    = InputPrivacyValueDisallowAll' {}
data InputPrivacyValueDisallowChatParticipants'
    = InputPrivacyValueDisallowChatParticipants' {_chats :: !(Vector Long')}
data InputPrivacyValueDisallowContacts'
    = InputPrivacyValueDisallowContacts' {}
data InputPrivacyValueDisallowUsers'
    = InputPrivacyValueDisallowUsers' {_users :: !(Vector InputUser)}
instance Data.Binary.Binary InputPrivacyRule
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {407582158 -> fmap InputPrivacyValueAllowAll Data.Binary.get;
                      2215004623 -> fmap InputPrivacyValueAllowChatParticipants Data.Binary.get;
                      793067081 -> fmap InputPrivacyValueAllowCloseFriends Data.Binary.get;
                      218751099 -> fmap InputPrivacyValueAllowContacts Data.Binary.get;
                      320652927 -> fmap InputPrivacyValueAllowUsers Data.Binary.get;
                      3597362889 -> fmap InputPrivacyValueDisallowAll Data.Binary.get;
                      3914272646 -> fmap InputPrivacyValueDisallowChatParticipants Data.Binary.get;
                      195371015 -> fmap InputPrivacyValueDisallowContacts Data.Binary.get;
                      2417034343 -> fmap InputPrivacyValueDisallowUsers Data.Binary.get}};
           put (InputPrivacyValueAllowAll tmp_1) = do {Data.Binary.Put.putWord32le 407582158;
                                                       Data.Binary.put tmp_1};
           put (InputPrivacyValueAllowChatParticipants tmp_2) = do {Data.Binary.Put.putWord32le 2215004623;
                                                                    Data.Binary.put tmp_2};
           put (InputPrivacyValueAllowCloseFriends tmp_3) = do {Data.Binary.Put.putWord32le 793067081;
                                                                Data.Binary.put tmp_3};
           put (InputPrivacyValueAllowContacts tmp_4) = do {Data.Binary.Put.putWord32le 218751099;
                                                            Data.Binary.put tmp_4};
           put (InputPrivacyValueAllowUsers tmp_5) = do {Data.Binary.Put.putWord32le 320652927;
                                                         Data.Binary.put tmp_5};
           put (InputPrivacyValueDisallowAll tmp_6) = do {Data.Binary.Put.putWord32le 3597362889;
                                                          Data.Binary.put tmp_6};
           put (InputPrivacyValueDisallowChatParticipants tmp_7) = do {Data.Binary.Put.putWord32le 3914272646;
                                                                       Data.Binary.put tmp_7};
           put (InputPrivacyValueDisallowContacts tmp_8) = do {Data.Binary.Put.putWord32le 195371015;
                                                               Data.Binary.put tmp_8};
           put (InputPrivacyValueDisallowUsers tmp_9) = do {Data.Binary.Put.putWord32le 2417034343;
                                                            Data.Binary.put tmp_9}}
instance Data.Binary.Binary InputReplyToMessage'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _reply_to_msg_id_1 <- Data.Binary.get;
                     _top_msg_id_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _reply_to_peer_id_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _quote_text_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _quote_entities_5 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     _quote_offset_6 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 4);
                     GHC.Base.pure (InputReplyToMessage' _reply_to_msg_id_1 _top_msg_id_2 _reply_to_peer_id_3 _quote_text_4 _quote_entities_5 _quote_offset_6)};
           put to_be_encoded_7 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_7._quote_offset,
                                                              4),
                                                             (Data.Maybe.isJust to_be_encoded_7._quote_entities,
                                                              3),
                                                             (Data.Maybe.isJust to_be_encoded_7._quote_text,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_7._reply_to_peer_id,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_7._top_msg_id,
                                                              0)];
                                     Data.Binary.put to_be_encoded_7._reply_to_msg_id;
                                     Data.Binary.put to_be_encoded_7._top_msg_id;
                                     Data.Binary.put to_be_encoded_7._reply_to_peer_id;
                                     Data.Binary.put to_be_encoded_7._quote_text;
                                     Data.Binary.put to_be_encoded_7._quote_entities;
                                     Data.Binary.put to_be_encoded_7._quote_offset}}
instance Data.Binary.Binary InputReplyToStory'
    where {get = do {_user_id_0 <- Data.Binary.get;
                     _story_id_1 <- Data.Binary.get;
                     GHC.Base.pure (InputReplyToStory' _user_id_0 _story_id_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._user_id;
                                     Data.Binary.put to_be_encoded_2._story_id}}
data InputReplyTo
    = InputReplyToMessage !InputReplyToMessage'
    | InputReplyToStory !InputReplyToStory'
data InputReplyToMessage'
    = InputReplyToMessage' {_reply_to_msg_id :: !Int',
                            _top_msg_id :: !(Maybe Int'),
                            _reply_to_peer_id :: !(Maybe InputPeer),
                            _quote_text :: !(Maybe String'),
                            _quote_entities :: !(Maybe (Vector MessageEntity)),
                            _quote_offset :: !(Maybe Int')}
data InputReplyToStory'
    = InputReplyToStory' {_user_id :: !InputUser, _story_id :: !Int'}
instance Data.Binary.Binary InputReplyTo
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {583071445 -> fmap InputReplyToMessage Data.Binary.get;
                      363917955 -> fmap InputReplyToStory Data.Binary.get}};
           put (InputReplyToMessage tmp_1) = do {Data.Binary.Put.putWord32le 583071445;
                                                 Data.Binary.put tmp_1};
           put (InputReplyToStory tmp_2) = do {Data.Binary.Put.putWord32le 363917955;
                                               Data.Binary.put tmp_2}}
instance Data.Binary.Binary InputSecureFile'
    where {get = do {_id_0 <- Data.Binary.get;
                     _access_hash_1 <- Data.Binary.get;
                     GHC.Base.pure (InputSecureFile' _id_0 _access_hash_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._id;
                                     Data.Binary.put to_be_encoded_2._access_hash}}
instance Data.Binary.Binary InputSecureFileUploaded'
    where {get = do {_id_0 <- Data.Binary.get;
                     _parts_1 <- Data.Binary.get;
                     _md5_checksum_2 <- Data.Binary.get;
                     _file_hash_3 <- Data.Binary.get;
                     _secret_4 <- Data.Binary.get;
                     GHC.Base.pure (InputSecureFileUploaded' _id_0 _parts_1 _md5_checksum_2 _file_hash_3 _secret_4)};
           put to_be_encoded_5 = do {Data.Binary.put to_be_encoded_5._id;
                                     Data.Binary.put to_be_encoded_5._parts;
                                     Data.Binary.put to_be_encoded_5._md5_checksum;
                                     Data.Binary.put to_be_encoded_5._file_hash;
                                     Data.Binary.put to_be_encoded_5._secret}}
data InputSecureFile
    = InputSecureFile !InputSecureFile'
    | InputSecureFileUploaded !InputSecureFileUploaded'
data InputSecureFile'
    = InputSecureFile' {_id :: !Long', _access_hash :: !Long'}
data InputSecureFileUploaded'
    = InputSecureFileUploaded' {_id :: !Long',
                                _parts :: !Int',
                                _md5_checksum :: !String',
                                _file_hash :: !Bytes',
                                _secret :: !Bytes'}
instance Data.Binary.Binary InputSecureFile
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1399317950 -> fmap InputSecureFile Data.Binary.get;
                      859091184 -> fmap InputSecureFileUploaded Data.Binary.get}};
           put (InputSecureFile tmp_1) = do {Data.Binary.Put.putWord32le 1399317950;
                                             Data.Binary.put tmp_1};
           put (InputSecureFileUploaded tmp_2) = do {Data.Binary.Put.putWord32le 859091184;
                                                     Data.Binary.put tmp_2}}
instance Data.Binary.Binary InputSecureValue'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _type_1 <- Data.Binary.get;
                     _data_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _front_side_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _reverse_side_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _selfie_5 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     _translation_6 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 6);
                     _files_7 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 4);
                     _plain_data_8 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 5);
                     GHC.Base.pure (InputSecureValue' _type_1 _data_2 _front_side_3 _reverse_side_4 _selfie_5 _translation_6 _files_7 _plain_data_8)};
           put to_be_encoded_9 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_9._plain_data,
                                                              5),
                                                             (Data.Maybe.isJust to_be_encoded_9._files,
                                                              4),
                                                             (Data.Maybe.isJust to_be_encoded_9._translation,
                                                              6),
                                                             (Data.Maybe.isJust to_be_encoded_9._selfie,
                                                              3),
                                                             (Data.Maybe.isJust to_be_encoded_9._reverse_side,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_9._front_side,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_9._data,
                                                              0)];
                                     Data.Binary.put to_be_encoded_9._type;
                                     Data.Binary.put to_be_encoded_9._data;
                                     Data.Binary.put to_be_encoded_9._front_side;
                                     Data.Binary.put to_be_encoded_9._reverse_side;
                                     Data.Binary.put to_be_encoded_9._selfie;
                                     Data.Binary.put to_be_encoded_9._translation;
                                     Data.Binary.put to_be_encoded_9._files;
                                     Data.Binary.put to_be_encoded_9._plain_data}}
data InputSecureValue = InputSecureValue !InputSecureValue'
data InputSecureValue'
    = InputSecureValue' {_type :: !SecureValueType,
                         _data :: !(Maybe SecureData),
                         _front_side :: !(Maybe InputSecureFile),
                         _reverse_side :: !(Maybe InputSecureFile),
                         _selfie :: !(Maybe InputSecureFile),
                         _translation :: !(Maybe (Vector InputSecureFile)),
                         _files :: !(Maybe (Vector InputSecureFile)),
                         _plain_data :: !(Maybe SecurePlainData)}
instance Data.Binary.Binary InputSecureValue
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3676426407 -> fmap InputSecureValue Data.Binary.get}};
           put (InputSecureValue tmp_1) = do {Data.Binary.Put.putWord32le 3676426407;
                                              Data.Binary.put tmp_1}}
instance Data.Binary.Binary InputSingleMedia'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _media_1 <- Data.Binary.get;
                     _random_id_2 <- Data.Binary.get;
                     _message_3 <- Data.Binary.get;
                     _entities_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     GHC.Base.pure (InputSingleMedia' _media_1 _random_id_2 _message_3 _entities_4)};
           put to_be_encoded_5 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_5._entities,
                                                              0)];
                                     Data.Binary.put to_be_encoded_5._media;
                                     Data.Binary.put to_be_encoded_5._random_id;
                                     Data.Binary.put to_be_encoded_5._message;
                                     Data.Binary.put to_be_encoded_5._entities}}
data InputSingleMedia = InputSingleMedia !InputSingleMedia'
data InputSingleMedia'
    = InputSingleMedia' {_media :: !InputMedia,
                         _random_id :: !Long',
                         _message :: !String',
                         _entities :: !(Maybe (Vector MessageEntity))}
instance Data.Binary.Binary InputSingleMedia
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {482797855 -> fmap InputSingleMedia Data.Binary.get}};
           put (InputSingleMedia tmp_1) = do {Data.Binary.Put.putWord32le 482797855;
                                              Data.Binary.put tmp_1}}
instance Data.Binary.Binary InputStickerSetAnimatedEmoji'
    where {get = GHC.Base.pure InputStickerSetAnimatedEmoji';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary InputStickerSetAnimatedEmojiAnimations'
    where {get = GHC.Base.pure InputStickerSetAnimatedEmojiAnimations';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary InputStickerSetDice'
    where {get = do {_emoticon_0 <- Data.Binary.get;
                     GHC.Base.pure (InputStickerSetDice' _emoticon_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._emoticon}
instance Data.Binary.Binary InputStickerSetEmojiChannelDefaultStatuses'
    where {get = GHC.Base.pure InputStickerSetEmojiChannelDefaultStatuses';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary InputStickerSetEmojiDefaultStatuses'
    where {get = GHC.Base.pure InputStickerSetEmojiDefaultStatuses';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary InputStickerSetEmojiDefaultTopicIcons'
    where {get = GHC.Base.pure InputStickerSetEmojiDefaultTopicIcons';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary InputStickerSetEmojiGenericAnimations'
    where {get = GHC.Base.pure InputStickerSetEmojiGenericAnimations';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary InputStickerSetEmpty'
    where {get = GHC.Base.pure InputStickerSetEmpty';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary InputStickerSetID'
    where {get = do {_id_0 <- Data.Binary.get;
                     _access_hash_1 <- Data.Binary.get;
                     GHC.Base.pure (InputStickerSetID' _id_0 _access_hash_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._id;
                                     Data.Binary.put to_be_encoded_2._access_hash}}
instance Data.Binary.Binary InputStickerSetPremiumGifts'
    where {get = GHC.Base.pure InputStickerSetPremiumGifts';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary InputStickerSetShortName'
    where {get = do {_short_name_0 <- Data.Binary.get;
                     GHC.Base.pure (InputStickerSetShortName' _short_name_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._short_name}
data InputStickerSet
    = InputStickerSetAnimatedEmoji !InputStickerSetAnimatedEmoji'
    | InputStickerSetAnimatedEmojiAnimations !InputStickerSetAnimatedEmojiAnimations'
    | InputStickerSetDice !InputStickerSetDice'
    | InputStickerSetEmojiChannelDefaultStatuses !InputStickerSetEmojiChannelDefaultStatuses'
    | InputStickerSetEmojiDefaultStatuses !InputStickerSetEmojiDefaultStatuses'
    | InputStickerSetEmojiDefaultTopicIcons !InputStickerSetEmojiDefaultTopicIcons'
    | InputStickerSetEmojiGenericAnimations !InputStickerSetEmojiGenericAnimations'
    | InputStickerSetEmpty !InputStickerSetEmpty'
    | InputStickerSetID !InputStickerSetID'
    | InputStickerSetPremiumGifts !InputStickerSetPremiumGifts'
    | InputStickerSetShortName !InputStickerSetShortName'
data InputStickerSetAnimatedEmoji'
    = InputStickerSetAnimatedEmoji' {}
data InputStickerSetAnimatedEmojiAnimations'
    = InputStickerSetAnimatedEmojiAnimations' {}
data InputStickerSetDice'
    = InputStickerSetDice' {_emoticon :: !String'}
data InputStickerSetEmojiChannelDefaultStatuses'
    = InputStickerSetEmojiChannelDefaultStatuses' {}
data InputStickerSetEmojiDefaultStatuses'
    = InputStickerSetEmojiDefaultStatuses' {}
data InputStickerSetEmojiDefaultTopicIcons'
    = InputStickerSetEmojiDefaultTopicIcons' {}
data InputStickerSetEmojiGenericAnimations'
    = InputStickerSetEmojiGenericAnimations' {}
data InputStickerSetEmpty' = InputStickerSetEmpty' {}
data InputStickerSetID'
    = InputStickerSetID' {_id :: !Long', _access_hash :: !Long'}
data InputStickerSetPremiumGifts' = InputStickerSetPremiumGifts' {}
data InputStickerSetShortName'
    = InputStickerSetShortName' {_short_name :: !String'}
instance Data.Binary.Binary InputStickerSet
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {42402760 -> fmap InputStickerSetAnimatedEmoji Data.Binary.get;
                      215889721 -> fmap InputStickerSetAnimatedEmojiAnimations Data.Binary.get;
                      3867103758 -> fmap InputStickerSetDice Data.Binary.get;
                      1232373075 -> fmap InputStickerSetEmojiChannelDefaultStatuses Data.Binary.get;
                      701560302 -> fmap InputStickerSetEmojiDefaultStatuses Data.Binary.get;
                      1153562857 -> fmap InputStickerSetEmojiDefaultTopicIcons Data.Binary.get;
                      80008398 -> fmap InputStickerSetEmojiGenericAnimations Data.Binary.get;
                      4290128789 -> fmap InputStickerSetEmpty Data.Binary.get;
                      2649203305 -> fmap InputStickerSetID Data.Binary.get;
                      3364567810 -> fmap InputStickerSetPremiumGifts Data.Binary.get;
                      2250033312 -> fmap InputStickerSetShortName Data.Binary.get}};
           put (InputStickerSetAnimatedEmoji tmp_1) = do {Data.Binary.Put.putWord32le 42402760;
                                                          Data.Binary.put tmp_1};
           put (InputStickerSetAnimatedEmojiAnimations tmp_2) = do {Data.Binary.Put.putWord32le 215889721;
                                                                    Data.Binary.put tmp_2};
           put (InputStickerSetDice tmp_3) = do {Data.Binary.Put.putWord32le 3867103758;
                                                 Data.Binary.put tmp_3};
           put (InputStickerSetEmojiChannelDefaultStatuses tmp_4) = do {Data.Binary.Put.putWord32le 1232373075;
                                                                        Data.Binary.put tmp_4};
           put (InputStickerSetEmojiDefaultStatuses tmp_5) = do {Data.Binary.Put.putWord32le 701560302;
                                                                 Data.Binary.put tmp_5};
           put (InputStickerSetEmojiDefaultTopicIcons tmp_6) = do {Data.Binary.Put.putWord32le 1153562857;
                                                                   Data.Binary.put tmp_6};
           put (InputStickerSetEmojiGenericAnimations tmp_7) = do {Data.Binary.Put.putWord32le 80008398;
                                                                   Data.Binary.put tmp_7};
           put (InputStickerSetEmpty tmp_8) = do {Data.Binary.Put.putWord32le 4290128789;
                                                  Data.Binary.put tmp_8};
           put (InputStickerSetID tmp_9) = do {Data.Binary.Put.putWord32le 2649203305;
                                               Data.Binary.put tmp_9};
           put (InputStickerSetPremiumGifts tmp_10) = do {Data.Binary.Put.putWord32le 3364567810;
                                                          Data.Binary.put tmp_10};
           put (InputStickerSetShortName tmp_11) = do {Data.Binary.Put.putWord32le 2250033312;
                                                       Data.Binary.put tmp_11}}
instance Data.Binary.Binary InputStickerSetItem'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _document_1 <- Data.Binary.get;
                     _emoji_2 <- Data.Binary.get;
                     _mask_coords_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _keywords_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     GHC.Base.pure (InputStickerSetItem' _document_1 _emoji_2 _mask_coords_3 _keywords_4)};
           put to_be_encoded_5 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_5._keywords,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_5._mask_coords,
                                                              0)];
                                     Data.Binary.put to_be_encoded_5._document;
                                     Data.Binary.put to_be_encoded_5._emoji;
                                     Data.Binary.put to_be_encoded_5._mask_coords;
                                     Data.Binary.put to_be_encoded_5._keywords}}
data InputStickerSetItem
    = InputStickerSetItem !InputStickerSetItem'
data InputStickerSetItem'
    = InputStickerSetItem' {_document :: !InputDocument,
                            _emoji :: !String',
                            _mask_coords :: !(Maybe MaskCoords),
                            _keywords :: !(Maybe String')}
instance Data.Binary.Binary InputStickerSetItem
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {853188252 -> fmap InputStickerSetItem Data.Binary.get}};
           put (InputStickerSetItem tmp_1) = do {Data.Binary.Put.putWord32le 853188252;
                                                 Data.Binary.put tmp_1}}
instance Data.Binary.Binary InputStickeredMediaDocument'
    where {get = do {_id_0 <- Data.Binary.get;
                     GHC.Base.pure (InputStickeredMediaDocument' _id_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._id}
instance Data.Binary.Binary InputStickeredMediaPhoto'
    where {get = do {_id_0 <- Data.Binary.get;
                     GHC.Base.pure (InputStickeredMediaPhoto' _id_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._id}
data InputStickeredMedia
    = InputStickeredMediaDocument !InputStickeredMediaDocument'
    | InputStickeredMediaPhoto !InputStickeredMediaPhoto'
data InputStickeredMediaDocument'
    = InputStickeredMediaDocument' {_id :: !InputDocument}
data InputStickeredMediaPhoto'
    = InputStickeredMediaPhoto' {_id :: !InputPhoto}
instance Data.Binary.Binary InputStickeredMedia
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {70813275 -> fmap InputStickeredMediaDocument Data.Binary.get;
                      1251549527 -> fmap InputStickeredMediaPhoto Data.Binary.get}};
           put (InputStickeredMediaDocument tmp_1) = do {Data.Binary.Put.putWord32le 70813275;
                                                         Data.Binary.put tmp_1};
           put (InputStickeredMediaPhoto tmp_2) = do {Data.Binary.Put.putWord32le 1251549527;
                                                      Data.Binary.put tmp_2}}
instance Data.Binary.Binary InputStorePaymentGiftPremium'
    where {get = do {_user_id_0 <- Data.Binary.get;
                     _currency_1 <- Data.Binary.get;
                     _amount_2 <- Data.Binary.get;
                     GHC.Base.pure (InputStorePaymentGiftPremium' _user_id_0 _currency_1 _amount_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._user_id;
                                     Data.Binary.put to_be_encoded_3._currency;
                                     Data.Binary.put to_be_encoded_3._amount}}
instance Data.Binary.Binary InputStorePaymentPremiumGiftCode'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _users_1 <- Data.Binary.get;
                     _boost_peer_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _currency_3 <- Data.Binary.get;
                     _amount_4 <- Data.Binary.get;
                     GHC.Base.pure (InputStorePaymentPremiumGiftCode' _users_1 _boost_peer_2 _currency_3 _amount_4)};
           put to_be_encoded_5 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_5._boost_peer,
                                                              0)];
                                     Data.Binary.put to_be_encoded_5._users;
                                     Data.Binary.put to_be_encoded_5._boost_peer;
                                     Data.Binary.put to_be_encoded_5._currency;
                                     Data.Binary.put to_be_encoded_5._amount}}
instance Data.Binary.Binary InputStorePaymentPremiumGiveaway'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _only_new_subscribers_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _winners_are_visible_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     _boost_peer_3 <- Data.Binary.get;
                     _additional_peers_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _countries_iso2_5 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _prize_description_6 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 4);
                     _random_id_7 <- Data.Binary.get;
                     _until_date_8 <- Data.Binary.get;
                     _currency_9 <- Data.Binary.get;
                     _amount_10 <- Data.Binary.get;
                     GHC.Base.pure (InputStorePaymentPremiumGiveaway' _only_new_subscribers_1 _winners_are_visible_2 _boost_peer_3 _additional_peers_4 _countries_iso2_5 _prize_description_6 _random_id_7 _until_date_8 _currency_9 _amount_10)};
           put to_be_encoded_11 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_11._prize_description,
                                                               4),
                                                              (Data.Maybe.isJust to_be_encoded_11._countries_iso2,
                                                               2),
                                                              (Data.Maybe.isJust to_be_encoded_11._additional_peers,
                                                               1),
                                                              (Data.Maybe.isJust to_be_encoded_11._winners_are_visible,
                                                               3),
                                                              (Data.Maybe.isJust to_be_encoded_11._only_new_subscribers,
                                                               0)];
                                      Data.Binary.put to_be_encoded_11._only_new_subscribers;
                                      Data.Binary.put to_be_encoded_11._winners_are_visible;
                                      Data.Binary.put to_be_encoded_11._boost_peer;
                                      Data.Binary.put to_be_encoded_11._additional_peers;
                                      Data.Binary.put to_be_encoded_11._countries_iso2;
                                      Data.Binary.put to_be_encoded_11._prize_description;
                                      Data.Binary.put to_be_encoded_11._random_id;
                                      Data.Binary.put to_be_encoded_11._until_date;
                                      Data.Binary.put to_be_encoded_11._currency;
                                      Data.Binary.put to_be_encoded_11._amount}}
instance Data.Binary.Binary InputStorePaymentPremiumSubscription'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _restore_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _upgrade_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     GHC.Base.pure (InputStorePaymentPremiumSubscription' _restore_1 _upgrade_2)};
           put to_be_encoded_3 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_3._upgrade,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_3._restore,
                                                              0)];
                                     Data.Binary.put to_be_encoded_3._restore;
                                     Data.Binary.put to_be_encoded_3._upgrade}}
data InputStorePaymentPurpose
    = InputStorePaymentGiftPremium !InputStorePaymentGiftPremium'
    | InputStorePaymentPremiumGiftCode !InputStorePaymentPremiumGiftCode'
    | InputStorePaymentPremiumGiveaway !InputStorePaymentPremiumGiveaway'
    | InputStorePaymentPremiumSubscription !InputStorePaymentPremiumSubscription'
data InputStorePaymentGiftPremium'
    = InputStorePaymentGiftPremium' {_user_id :: !InputUser,
                                     _currency :: !String',
                                     _amount :: !Long'}
data InputStorePaymentPremiumGiftCode'
    = InputStorePaymentPremiumGiftCode' {_users :: !(Vector InputUser),
                                         _boost_peer :: !(Maybe InputPeer),
                                         _currency :: !String',
                                         _amount :: !Long'}
data InputStorePaymentPremiumGiveaway'
    = InputStorePaymentPremiumGiveaway' {_only_new_subscribers :: !(Maybe True'),
                                         _winners_are_visible :: !(Maybe True'),
                                         _boost_peer :: !InputPeer,
                                         _additional_peers :: !(Maybe (Vector InputPeer)),
                                         _countries_iso2 :: !(Maybe (Vector String')),
                                         _prize_description :: !(Maybe String'),
                                         _random_id :: !Long',
                                         _until_date :: !Int',
                                         _currency :: !String',
                                         _amount :: !Long'}
data InputStorePaymentPremiumSubscription'
    = InputStorePaymentPremiumSubscription' {_restore :: !(Maybe True'),
                                             _upgrade :: !(Maybe True')}
instance Data.Binary.Binary InputStorePaymentPurpose
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1634697192 -> fmap InputStorePaymentGiftPremium Data.Binary.get;
                      2743099199 -> fmap InputStorePaymentPremiumGiftCode Data.Binary.get;
                      369444042 -> fmap InputStorePaymentPremiumGiveaway Data.Binary.get;
                      2792693350 -> fmap InputStorePaymentPremiumSubscription Data.Binary.get}};
           put (InputStorePaymentGiftPremium tmp_1) = do {Data.Binary.Put.putWord32le 1634697192;
                                                          Data.Binary.put tmp_1};
           put (InputStorePaymentPremiumGiftCode tmp_2) = do {Data.Binary.Put.putWord32le 2743099199;
                                                              Data.Binary.put tmp_2};
           put (InputStorePaymentPremiumGiveaway tmp_3) = do {Data.Binary.Put.putWord32le 369444042;
                                                              Data.Binary.put tmp_3};
           put (InputStorePaymentPremiumSubscription tmp_4) = do {Data.Binary.Put.putWord32le 2792693350;
                                                                  Data.Binary.put tmp_4}}
instance Data.Binary.Binary InputTheme'
    where {get = do {_id_0 <- Data.Binary.get;
                     _access_hash_1 <- Data.Binary.get;
                     GHC.Base.pure (InputTheme' _id_0 _access_hash_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._id;
                                     Data.Binary.put to_be_encoded_2._access_hash}}
instance Data.Binary.Binary InputThemeSlug'
    where {get = do {_slug_0 <- Data.Binary.get;
                     GHC.Base.pure (InputThemeSlug' _slug_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._slug}
data InputTheme
    = InputTheme !InputTheme'
    | InputThemeSlug !InputThemeSlug'
data InputTheme'
    = InputTheme' {_id :: !Long', _access_hash :: !Long'}
data InputThemeSlug' = InputThemeSlug' {_slug :: !String'}
instance Data.Binary.Binary InputTheme
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1012306921 -> fmap InputTheme Data.Binary.get;
                      4119399921 -> fmap InputThemeSlug Data.Binary.get}};
           put (InputTheme tmp_1) = do {Data.Binary.Put.putWord32le 1012306921;
                                        Data.Binary.put tmp_1};
           put (InputThemeSlug tmp_2) = do {Data.Binary.Put.putWord32le 4119399921;
                                            Data.Binary.put tmp_2}}
instance Data.Binary.Binary InputThemeSettings'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _message_colors_animated_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _base_theme_2 <- Data.Binary.get;
                     _accent_color_3 <- Data.Binary.get;
                     _outbox_accent_color_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     _message_colors_5 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _wallpaper_6 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _wallpaper_settings_7 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     GHC.Base.pure (InputThemeSettings' _message_colors_animated_1 _base_theme_2 _accent_color_3 _outbox_accent_color_4 _message_colors_5 _wallpaper_6 _wallpaper_settings_7)};
           put to_be_encoded_8 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_8._wallpaper_settings,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_8._wallpaper,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_8._message_colors,
                                                              0),
                                                             (Data.Maybe.isJust to_be_encoded_8._outbox_accent_color,
                                                              3),
                                                             (Data.Maybe.isJust to_be_encoded_8._message_colors_animated,
                                                              2)];
                                     Data.Binary.put to_be_encoded_8._message_colors_animated;
                                     Data.Binary.put to_be_encoded_8._base_theme;
                                     Data.Binary.put to_be_encoded_8._accent_color;
                                     Data.Binary.put to_be_encoded_8._outbox_accent_color;
                                     Data.Binary.put to_be_encoded_8._message_colors;
                                     Data.Binary.put to_be_encoded_8._wallpaper;
                                     Data.Binary.put to_be_encoded_8._wallpaper_settings}}
data InputThemeSettings = InputThemeSettings !InputThemeSettings'
data InputThemeSettings'
    = InputThemeSettings' {_message_colors_animated :: !(Maybe True'),
                           _base_theme :: !BaseTheme,
                           _accent_color :: !Int',
                           _outbox_accent_color :: !(Maybe Int'),
                           _message_colors :: !(Maybe (Vector Int')),
                           _wallpaper :: !(Maybe InputWallPaper),
                           _wallpaper_settings :: !(Maybe WallPaperSettings)}
instance Data.Binary.Binary InputThemeSettings
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2413711439 -> fmap InputThemeSettings Data.Binary.get}};
           put (InputThemeSettings tmp_1) = do {Data.Binary.Put.putWord32le 2413711439;
                                                Data.Binary.put tmp_1}}
instance Data.Binary.Binary InputUser'
    where {get = do {_user_id_0 <- Data.Binary.get;
                     _access_hash_1 <- Data.Binary.get;
                     GHC.Base.pure (InputUser' _user_id_0 _access_hash_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._user_id;
                                     Data.Binary.put to_be_encoded_2._access_hash}}
instance Data.Binary.Binary InputUserEmpty'
    where {get = GHC.Base.pure InputUserEmpty';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary InputUserFromMessage'
    where {get = do {_peer_0 <- Data.Binary.get;
                     _msg_id_1 <- Data.Binary.get;
                     _user_id_2 <- Data.Binary.get;
                     GHC.Base.pure (InputUserFromMessage' _peer_0 _msg_id_1 _user_id_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._peer;
                                     Data.Binary.put to_be_encoded_3._msg_id;
                                     Data.Binary.put to_be_encoded_3._user_id}}
instance Data.Binary.Binary InputUserSelf'
    where {get = GHC.Base.pure InputUserSelf';
           put to_be_encoded_0 = do GHC.Base.pure ()}
data InputUser
    = InputUser !InputUser'
    | InputUserEmpty !InputUserEmpty'
    | InputUserFromMessage !InputUserFromMessage'
    | InputUserSelf !InputUserSelf'
data InputUser'
    = InputUser' {_user_id :: !Long', _access_hash :: !Long'}
data InputUserEmpty' = InputUserEmpty' {}
data InputUserFromMessage'
    = InputUserFromMessage' {_peer :: !InputPeer,
                             _msg_id :: !Int',
                             _user_id :: !Long'}
data InputUserSelf' = InputUserSelf' {}
instance Data.Binary.Binary InputUser
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {4061223110 -> fmap InputUser Data.Binary.get;
                      3112732367 -> fmap InputUserEmpty Data.Binary.get;
                      497305826 -> fmap InputUserFromMessage Data.Binary.get;
                      4156666175 -> fmap InputUserSelf Data.Binary.get}};
           put (InputUser tmp_1) = do {Data.Binary.Put.putWord32le 4061223110;
                                       Data.Binary.put tmp_1};
           put (InputUserEmpty tmp_2) = do {Data.Binary.Put.putWord32le 3112732367;
                                            Data.Binary.put tmp_2};
           put (InputUserFromMessage tmp_3) = do {Data.Binary.Put.putWord32le 497305826;
                                                  Data.Binary.put tmp_3};
           put (InputUserSelf tmp_4) = do {Data.Binary.Put.putWord32le 4156666175;
                                           Data.Binary.put tmp_4}}
instance Data.Binary.Binary InputWallPaper'
    where {get = do {_id_0 <- Data.Binary.get;
                     _access_hash_1 <- Data.Binary.get;
                     GHC.Base.pure (InputWallPaper' _id_0 _access_hash_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._id;
                                     Data.Binary.put to_be_encoded_2._access_hash}}
instance Data.Binary.Binary InputWallPaperNoFile'
    where {get = do {_id_0 <- Data.Binary.get;
                     GHC.Base.pure (InputWallPaperNoFile' _id_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._id}
instance Data.Binary.Binary InputWallPaperSlug'
    where {get = do {_slug_0 <- Data.Binary.get;
                     GHC.Base.pure (InputWallPaperSlug' _slug_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._slug}
data InputWallPaper
    = InputWallPaper !InputWallPaper'
    | InputWallPaperNoFile !InputWallPaperNoFile'
    | InputWallPaperSlug !InputWallPaperSlug'
data InputWallPaper'
    = InputWallPaper' {_id :: !Long', _access_hash :: !Long'}
data InputWallPaperNoFile' = InputWallPaperNoFile' {_id :: !Long'}
data InputWallPaperSlug' = InputWallPaperSlug' {_slug :: !String'}
instance Data.Binary.Binary InputWallPaper
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3861952889 -> fmap InputWallPaper Data.Binary.get;
                      2524595758 -> fmap InputWallPaperNoFile Data.Binary.get;
                      1913199744 -> fmap InputWallPaperSlug Data.Binary.get}};
           put (InputWallPaper tmp_1) = do {Data.Binary.Put.putWord32le 3861952889;
                                            Data.Binary.put tmp_1};
           put (InputWallPaperNoFile tmp_2) = do {Data.Binary.Put.putWord32le 2524595758;
                                                  Data.Binary.put tmp_2};
           put (InputWallPaperSlug tmp_3) = do {Data.Binary.Put.putWord32le 1913199744;
                                                Data.Binary.put tmp_3}}
instance Data.Binary.Binary InputWebDocument'
    where {get = do {_url_0 <- Data.Binary.get;
                     _size_1 <- Data.Binary.get;
                     _mime_type_2 <- Data.Binary.get;
                     _attributes_3 <- Data.Binary.get;
                     GHC.Base.pure (InputWebDocument' _url_0 _size_1 _mime_type_2 _attributes_3)};
           put to_be_encoded_4 = do {Data.Binary.put to_be_encoded_4._url;
                                     Data.Binary.put to_be_encoded_4._size;
                                     Data.Binary.put to_be_encoded_4._mime_type;
                                     Data.Binary.put to_be_encoded_4._attributes}}
data InputWebDocument = InputWebDocument !InputWebDocument'
data InputWebDocument'
    = InputWebDocument' {_url :: !String',
                         _size :: !Int',
                         _mime_type :: !String',
                         _attributes :: !(Vector DocumentAttribute)}
instance Data.Binary.Binary InputWebDocument
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2616017741 -> fmap InputWebDocument Data.Binary.get}};
           put (InputWebDocument tmp_1) = do {Data.Binary.Put.putWord32le 2616017741;
                                              Data.Binary.put tmp_1}}
instance Data.Binary.Binary InputWebFileAudioAlbumThumbLocation'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _small_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _document_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _title_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _performer_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     GHC.Base.pure (InputWebFileAudioAlbumThumbLocation' _small_1 _document_2 _title_3 _performer_4)};
           put to_be_encoded_5 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_5._performer,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_5._title,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_5._document,
                                                              0),
                                                             (Data.Maybe.isJust to_be_encoded_5._small,
                                                              2)];
                                     Data.Binary.put to_be_encoded_5._small;
                                     Data.Binary.put to_be_encoded_5._document;
                                     Data.Binary.put to_be_encoded_5._title;
                                     Data.Binary.put to_be_encoded_5._performer}}
instance Data.Binary.Binary InputWebFileGeoPointLocation'
    where {get = do {_geo_point_0 <- Data.Binary.get;
                     _access_hash_1 <- Data.Binary.get;
                     _w_2 <- Data.Binary.get;
                     _h_3 <- Data.Binary.get;
                     _zoom_4 <- Data.Binary.get;
                     _scale_5 <- Data.Binary.get;
                     GHC.Base.pure (InputWebFileGeoPointLocation' _geo_point_0 _access_hash_1 _w_2 _h_3 _zoom_4 _scale_5)};
           put to_be_encoded_6 = do {Data.Binary.put to_be_encoded_6._geo_point;
                                     Data.Binary.put to_be_encoded_6._access_hash;
                                     Data.Binary.put to_be_encoded_6._w;
                                     Data.Binary.put to_be_encoded_6._h;
                                     Data.Binary.put to_be_encoded_6._zoom;
                                     Data.Binary.put to_be_encoded_6._scale}}
instance Data.Binary.Binary InputWebFileLocation'
    where {get = do {_url_0 <- Data.Binary.get;
                     _access_hash_1 <- Data.Binary.get;
                     GHC.Base.pure (InputWebFileLocation' _url_0 _access_hash_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._url;
                                     Data.Binary.put to_be_encoded_2._access_hash}}
data InputWebFileLocation
    = InputWebFileAudioAlbumThumbLocation !InputWebFileAudioAlbumThumbLocation'
    | InputWebFileGeoPointLocation !InputWebFileGeoPointLocation'
    | InputWebFileLocation !InputWebFileLocation'
data InputWebFileAudioAlbumThumbLocation'
    = InputWebFileAudioAlbumThumbLocation' {_small :: !(Maybe True'),
                                            _document :: !(Maybe InputDocument),
                                            _title :: !(Maybe String'),
                                            _performer :: !(Maybe String')}
data InputWebFileGeoPointLocation'
    = InputWebFileGeoPointLocation' {_geo_point :: !InputGeoPoint,
                                     _access_hash :: !Long',
                                     _w :: !Int',
                                     _h :: !Int',
                                     _zoom :: !Int',
                                     _scale :: !Int'}
data InputWebFileLocation'
    = InputWebFileLocation' {_url :: !String', _access_hash :: !Long'}
instance Data.Binary.Binary InputWebFileLocation
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {4100974884 -> fmap InputWebFileAudioAlbumThumbLocation Data.Binary.get;
                      2669814217 -> fmap InputWebFileGeoPointLocation Data.Binary.get;
                      3258570374 -> fmap InputWebFileLocation Data.Binary.get}};
           put (InputWebFileAudioAlbumThumbLocation tmp_1) = do {Data.Binary.Put.putWord32le 4100974884;
                                                                 Data.Binary.put tmp_1};
           put (InputWebFileGeoPointLocation tmp_2) = do {Data.Binary.Put.putWord32le 2669814217;
                                                          Data.Binary.put tmp_2};
           put (InputWebFileLocation tmp_3) = do {Data.Binary.Put.putWord32le 3258570374;
                                                  Data.Binary.put tmp_3}}
instance Data.Binary.Binary Invoice'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _test_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _name_requested_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _phone_requested_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _email_requested_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     _shipping_address_requested_5 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 4);
                     _flexible_6 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 5);
                     _phone_to_provider_7 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 6);
                     _email_to_provider_8 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 7);
                     _recurring_9 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 9);
                     _currency_10 <- Data.Binary.get;
                     _prices_11 <- Data.Binary.get;
                     _max_tip_amount_12 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 8);
                     _suggested_tip_amounts_13 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 8);
                     _terms_url_14 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 10);
                     GHC.Base.pure (Invoice' _test_1 _name_requested_2 _phone_requested_3 _email_requested_4 _shipping_address_requested_5 _flexible_6 _phone_to_provider_7 _email_to_provider_8 _recurring_9 _currency_10 _prices_11 _max_tip_amount_12 _suggested_tip_amounts_13 _terms_url_14)};
           put to_be_encoded_15 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_15._terms_url,
                                                               10),
                                                              (Data.Maybe.isJust to_be_encoded_15._suggested_tip_amounts,
                                                               8),
                                                              (Data.Maybe.isJust to_be_encoded_15._max_tip_amount,
                                                               8),
                                                              (Data.Maybe.isJust to_be_encoded_15._recurring,
                                                               9),
                                                              (Data.Maybe.isJust to_be_encoded_15._email_to_provider,
                                                               7),
                                                              (Data.Maybe.isJust to_be_encoded_15._phone_to_provider,
                                                               6),
                                                              (Data.Maybe.isJust to_be_encoded_15._flexible,
                                                               5),
                                                              (Data.Maybe.isJust to_be_encoded_15._shipping_address_requested,
                                                               4),
                                                              (Data.Maybe.isJust to_be_encoded_15._email_requested,
                                                               3),
                                                              (Data.Maybe.isJust to_be_encoded_15._phone_requested,
                                                               2),
                                                              (Data.Maybe.isJust to_be_encoded_15._name_requested,
                                                               1),
                                                              (Data.Maybe.isJust to_be_encoded_15._test,
                                                               0)];
                                      Data.Binary.put to_be_encoded_15._test;
                                      Data.Binary.put to_be_encoded_15._name_requested;
                                      Data.Binary.put to_be_encoded_15._phone_requested;
                                      Data.Binary.put to_be_encoded_15._email_requested;
                                      Data.Binary.put to_be_encoded_15._shipping_address_requested;
                                      Data.Binary.put to_be_encoded_15._flexible;
                                      Data.Binary.put to_be_encoded_15._phone_to_provider;
                                      Data.Binary.put to_be_encoded_15._email_to_provider;
                                      Data.Binary.put to_be_encoded_15._recurring;
                                      Data.Binary.put to_be_encoded_15._currency;
                                      Data.Binary.put to_be_encoded_15._prices;
                                      Data.Binary.put to_be_encoded_15._max_tip_amount;
                                      Data.Binary.put to_be_encoded_15._suggested_tip_amounts;
                                      Data.Binary.put to_be_encoded_15._terms_url}}
data Invoice = Invoice !Invoice'
data Invoice'
    = Invoice' {_test :: !(Maybe True'),
                _name_requested :: !(Maybe True'),
                _phone_requested :: !(Maybe True'),
                _email_requested :: !(Maybe True'),
                _shipping_address_requested :: !(Maybe True'),
                _flexible :: !(Maybe True'),
                _phone_to_provider :: !(Maybe True'),
                _email_to_provider :: !(Maybe True'),
                _recurring :: !(Maybe True'),
                _currency :: !String',
                _prices :: !(Vector LabeledPrice),
                _max_tip_amount :: !(Maybe Long'),
                _suggested_tip_amounts :: !(Maybe (Vector Long')),
                _terms_url :: !(Maybe String')}
instance Data.Binary.Binary Invoice
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1572428309 -> fmap Invoice Data.Binary.get}};
           put (Invoice tmp_1) = do {Data.Binary.Put.putWord32le 1572428309;
                                     Data.Binary.put tmp_1}}
instance Data.Binary.Binary JsonObjectValue'
    where {get = do {_key_0 <- Data.Binary.get;
                     _value_1 <- Data.Binary.get;
                     GHC.Base.pure (JsonObjectValue' _key_0 _value_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._key;
                                     Data.Binary.put to_be_encoded_2._value}}
data JSONObjectValue = JsonObjectValue !JsonObjectValue'
data JsonObjectValue'
    = JsonObjectValue' {_key :: !String', _value :: !JSONValue}
instance Data.Binary.Binary JSONObjectValue
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3235781593 -> fmap JsonObjectValue Data.Binary.get}};
           put (JsonObjectValue tmp_1) = do {Data.Binary.Put.putWord32le 3235781593;
                                             Data.Binary.put tmp_1}}
instance Data.Binary.Binary JsonArray'
    where {get = do {_value_0 <- Data.Binary.get;
                     GHC.Base.pure (JsonArray' _value_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._value}
instance Data.Binary.Binary JsonBool'
    where {get = do {_value_0 <- Data.Binary.get;
                     GHC.Base.pure (JsonBool' _value_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._value}
instance Data.Binary.Binary JsonNull'
    where {get = GHC.Base.pure JsonNull';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary JsonNumber'
    where {get = do {_value_0 <- Data.Binary.get;
                     GHC.Base.pure (JsonNumber' _value_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._value}
instance Data.Binary.Binary JsonObject'
    where {get = do {_value_0 <- Data.Binary.get;
                     GHC.Base.pure (JsonObject' _value_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._value}
instance Data.Binary.Binary JsonString'
    where {get = do {_value_0 <- Data.Binary.get;
                     GHC.Base.pure (JsonString' _value_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._value}
data JSONValue
    = JsonArray !JsonArray'
    | JsonBool !JsonBool'
    | JsonNull !JsonNull'
    | JsonNumber !JsonNumber'
    | JsonObject !JsonObject'
    | JsonString !JsonString'
data JsonArray' = JsonArray' {_value :: !(Vector JSONValue)}
data JsonBool' = JsonBool' {_value :: !Bool}
data JsonNull' = JsonNull' {}
data JsonNumber' = JsonNumber' {_value :: !Double'}
data JsonObject'
    = JsonObject' {_value :: !(Vector JSONObjectValue)}
data JsonString' = JsonString' {_value :: !String'}
instance Data.Binary.Binary JSONValue
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {4148447075 -> fmap JsonArray Data.Binary.get;
                      3342098026 -> fmap JsonBool Data.Binary.get;
                      1064139624 -> fmap JsonNull Data.Binary.get;
                      736157604 -> fmap JsonNumber Data.Binary.get;
                      2579616925 -> fmap JsonObject Data.Binary.get;
                      3072226938 -> fmap JsonString Data.Binary.get}};
           put (JsonArray tmp_1) = do {Data.Binary.Put.putWord32le 4148447075;
                                       Data.Binary.put tmp_1};
           put (JsonBool tmp_2) = do {Data.Binary.Put.putWord32le 3342098026;
                                      Data.Binary.put tmp_2};
           put (JsonNull tmp_3) = do {Data.Binary.Put.putWord32le 1064139624;
                                      Data.Binary.put tmp_3};
           put (JsonNumber tmp_4) = do {Data.Binary.Put.putWord32le 736157604;
                                        Data.Binary.put tmp_4};
           put (JsonObject tmp_5) = do {Data.Binary.Put.putWord32le 2579616925;
                                        Data.Binary.put tmp_5};
           put (JsonString tmp_6) = do {Data.Binary.Put.putWord32le 3072226938;
                                        Data.Binary.put tmp_6}}
instance Data.Binary.Binary InputKeyboardButtonUrlAuth'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _request_write_access_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _text_2 <- Data.Binary.get;
                     _fwd_text_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _url_4 <- Data.Binary.get;
                     _bot_5 <- Data.Binary.get;
                     GHC.Base.pure (InputKeyboardButtonUrlAuth' _request_write_access_1 _text_2 _fwd_text_3 _url_4 _bot_5)};
           put to_be_encoded_6 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_6._fwd_text,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_6._request_write_access,
                                                              0)];
                                     Data.Binary.put to_be_encoded_6._request_write_access;
                                     Data.Binary.put to_be_encoded_6._text;
                                     Data.Binary.put to_be_encoded_6._fwd_text;
                                     Data.Binary.put to_be_encoded_6._url;
                                     Data.Binary.put to_be_encoded_6._bot}}
instance Data.Binary.Binary InputKeyboardButtonUserProfile'
    where {get = do {_text_0 <- Data.Binary.get;
                     _user_id_1 <- Data.Binary.get;
                     GHC.Base.pure (InputKeyboardButtonUserProfile' _text_0 _user_id_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._text;
                                     Data.Binary.put to_be_encoded_2._user_id}}
instance Data.Binary.Binary KeyboardButton'
    where {get = do {_text_0 <- Data.Binary.get;
                     GHC.Base.pure (KeyboardButton' _text_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._text}
instance Data.Binary.Binary KeyboardButtonBuy'
    where {get = do {_text_0 <- Data.Binary.get;
                     GHC.Base.pure (KeyboardButtonBuy' _text_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._text}
instance Data.Binary.Binary KeyboardButtonCallback'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _requires_password_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _text_2 <- Data.Binary.get;
                     _data_3 <- Data.Binary.get;
                     GHC.Base.pure (KeyboardButtonCallback' _requires_password_1 _text_2 _data_3)};
           put to_be_encoded_4 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_4._requires_password,
                                                              0)];
                                     Data.Binary.put to_be_encoded_4._requires_password;
                                     Data.Binary.put to_be_encoded_4._text;
                                     Data.Binary.put to_be_encoded_4._data}}
instance Data.Binary.Binary KeyboardButtonGame'
    where {get = do {_text_0 <- Data.Binary.get;
                     GHC.Base.pure (KeyboardButtonGame' _text_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._text}
instance Data.Binary.Binary KeyboardButtonRequestGeoLocation'
    where {get = do {_text_0 <- Data.Binary.get;
                     GHC.Base.pure (KeyboardButtonRequestGeoLocation' _text_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._text}
instance Data.Binary.Binary KeyboardButtonRequestPeer'
    where {get = do {_text_0 <- Data.Binary.get;
                     _button_id_1 <- Data.Binary.get;
                     _peer_type_2 <- Data.Binary.get;
                     _max_quantity_3 <- Data.Binary.get;
                     GHC.Base.pure (KeyboardButtonRequestPeer' _text_0 _button_id_1 _peer_type_2 _max_quantity_3)};
           put to_be_encoded_4 = do {Data.Binary.put to_be_encoded_4._text;
                                     Data.Binary.put to_be_encoded_4._button_id;
                                     Data.Binary.put to_be_encoded_4._peer_type;
                                     Data.Binary.put to_be_encoded_4._max_quantity}}
instance Data.Binary.Binary KeyboardButtonRequestPhone'
    where {get = do {_text_0 <- Data.Binary.get;
                     GHC.Base.pure (KeyboardButtonRequestPhone' _text_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._text}
instance Data.Binary.Binary KeyboardButtonRequestPoll'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _quiz_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _text_2 <- Data.Binary.get;
                     GHC.Base.pure (KeyboardButtonRequestPoll' _quiz_1 _text_2)};
           put to_be_encoded_3 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_3._quiz,
                                                              0)];
                                     Data.Binary.put to_be_encoded_3._quiz;
                                     Data.Binary.put to_be_encoded_3._text}}
instance Data.Binary.Binary KeyboardButtonSimpleWebView'
    where {get = do {_text_0 <- Data.Binary.get;
                     _url_1 <- Data.Binary.get;
                     GHC.Base.pure (KeyboardButtonSimpleWebView' _text_0 _url_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._text;
                                     Data.Binary.put to_be_encoded_2._url}}
instance Data.Binary.Binary KeyboardButtonSwitchInline'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _same_peer_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _text_2 <- Data.Binary.get;
                     _query_3 <- Data.Binary.get;
                     _peer_types_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     GHC.Base.pure (KeyboardButtonSwitchInline' _same_peer_1 _text_2 _query_3 _peer_types_4)};
           put to_be_encoded_5 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_5._peer_types,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_5._same_peer,
                                                              0)];
                                     Data.Binary.put to_be_encoded_5._same_peer;
                                     Data.Binary.put to_be_encoded_5._text;
                                     Data.Binary.put to_be_encoded_5._query;
                                     Data.Binary.put to_be_encoded_5._peer_types}}
instance Data.Binary.Binary KeyboardButtonUrl'
    where {get = do {_text_0 <- Data.Binary.get;
                     _url_1 <- Data.Binary.get;
                     GHC.Base.pure (KeyboardButtonUrl' _text_0 _url_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._text;
                                     Data.Binary.put to_be_encoded_2._url}}
instance Data.Binary.Binary KeyboardButtonUrlAuth'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _text_1 <- Data.Binary.get;
                     _fwd_text_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _url_3 <- Data.Binary.get;
                     _button_id_4 <- Data.Binary.get;
                     GHC.Base.pure (KeyboardButtonUrlAuth' _text_1 _fwd_text_2 _url_3 _button_id_4)};
           put to_be_encoded_5 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_5._fwd_text,
                                                              0)];
                                     Data.Binary.put to_be_encoded_5._text;
                                     Data.Binary.put to_be_encoded_5._fwd_text;
                                     Data.Binary.put to_be_encoded_5._url;
                                     Data.Binary.put to_be_encoded_5._button_id}}
instance Data.Binary.Binary KeyboardButtonUserProfile'
    where {get = do {_text_0 <- Data.Binary.get;
                     _user_id_1 <- Data.Binary.get;
                     GHC.Base.pure (KeyboardButtonUserProfile' _text_0 _user_id_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._text;
                                     Data.Binary.put to_be_encoded_2._user_id}}
instance Data.Binary.Binary KeyboardButtonWebView'
    where {get = do {_text_0 <- Data.Binary.get;
                     _url_1 <- Data.Binary.get;
                     GHC.Base.pure (KeyboardButtonWebView' _text_0 _url_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._text;
                                     Data.Binary.put to_be_encoded_2._url}}
data KeyboardButton
    = InputKeyboardButtonUrlAuth !InputKeyboardButtonUrlAuth'
    | InputKeyboardButtonUserProfile !InputKeyboardButtonUserProfile'
    | KeyboardButton !KeyboardButton'
    | KeyboardButtonBuy !KeyboardButtonBuy'
    | KeyboardButtonCallback !KeyboardButtonCallback'
    | KeyboardButtonGame !KeyboardButtonGame'
    | KeyboardButtonRequestGeoLocation !KeyboardButtonRequestGeoLocation'
    | KeyboardButtonRequestPeer !KeyboardButtonRequestPeer'
    | KeyboardButtonRequestPhone !KeyboardButtonRequestPhone'
    | KeyboardButtonRequestPoll !KeyboardButtonRequestPoll'
    | KeyboardButtonSimpleWebView !KeyboardButtonSimpleWebView'
    | KeyboardButtonSwitchInline !KeyboardButtonSwitchInline'
    | KeyboardButtonUrl !KeyboardButtonUrl'
    | KeyboardButtonUrlAuth !KeyboardButtonUrlAuth'
    | KeyboardButtonUserProfile !KeyboardButtonUserProfile'
    | KeyboardButtonWebView !KeyboardButtonWebView'
data InputKeyboardButtonUrlAuth'
    = InputKeyboardButtonUrlAuth' {_request_write_access :: !(Maybe True'),
                                   _text :: !String',
                                   _fwd_text :: !(Maybe String'),
                                   _url :: !String',
                                   _bot :: !InputUser}
data InputKeyboardButtonUserProfile'
    = InputKeyboardButtonUserProfile' {_text :: !String',
                                       _user_id :: !InputUser}
data KeyboardButton' = KeyboardButton' {_text :: !String'}
data KeyboardButtonBuy' = KeyboardButtonBuy' {_text :: !String'}
data KeyboardButtonCallback'
    = KeyboardButtonCallback' {_requires_password :: !(Maybe True'),
                               _text :: !String',
                               _data :: !Bytes'}
data KeyboardButtonGame' = KeyboardButtonGame' {_text :: !String'}
data KeyboardButtonRequestGeoLocation'
    = KeyboardButtonRequestGeoLocation' {_text :: !String'}
data KeyboardButtonRequestPeer'
    = KeyboardButtonRequestPeer' {_text :: !String',
                                  _button_id :: !Int',
                                  _peer_type :: !RequestPeerType,
                                  _max_quantity :: !Int'}
data KeyboardButtonRequestPhone'
    = KeyboardButtonRequestPhone' {_text :: !String'}
data KeyboardButtonRequestPoll'
    = KeyboardButtonRequestPoll' {_quiz :: !(Maybe Bool),
                                  _text :: !String'}
data KeyboardButtonSimpleWebView'
    = KeyboardButtonSimpleWebView' {_text :: !String',
                                    _url :: !String'}
data KeyboardButtonSwitchInline'
    = KeyboardButtonSwitchInline' {_same_peer :: !(Maybe True'),
                                   _text :: !String',
                                   _query :: !String',
                                   _peer_types :: !(Maybe (Vector InlineQueryPeerType))}
data KeyboardButtonUrl'
    = KeyboardButtonUrl' {_text :: !String', _url :: !String'}
data KeyboardButtonUrlAuth'
    = KeyboardButtonUrlAuth' {_text :: !String',
                              _fwd_text :: !(Maybe String'),
                              _url :: !String',
                              _button_id :: !Int'}
data KeyboardButtonUserProfile'
    = KeyboardButtonUserProfile' {_text :: !String',
                                  _user_id :: !Long'}
data KeyboardButtonWebView'
    = KeyboardButtonWebView' {_text :: !String', _url :: !String'}
instance Data.Binary.Binary KeyboardButton
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3492708308 -> fmap InputKeyboardButtonUrlAuth Data.Binary.get;
                      3918005115 -> fmap InputKeyboardButtonUserProfile Data.Binary.get;
                      2734311552 -> fmap KeyboardButton Data.Binary.get;
                      2950250427 -> fmap KeyboardButtonBuy Data.Binary.get;
                      901503851 -> fmap KeyboardButtonCallback Data.Binary.get;
                      1358175439 -> fmap KeyboardButtonGame Data.Binary.get;
                      4235815743 -> fmap KeyboardButtonRequestGeoLocation Data.Binary.get;
                      1406648280 -> fmap KeyboardButtonRequestPeer Data.Binary.get;
                      2976541737 -> fmap KeyboardButtonRequestPhone Data.Binary.get;
                      3150401885 -> fmap KeyboardButtonRequestPoll Data.Binary.get;
                      2696958044 -> fmap KeyboardButtonSimpleWebView Data.Binary.get;
                      2478439349 -> fmap KeyboardButtonSwitchInline Data.Binary.get;
                      629866245 -> fmap KeyboardButtonUrl Data.Binary.get;
                      280464681 -> fmap KeyboardButtonUrlAuth Data.Binary.get;
                      814112961 -> fmap KeyboardButtonUserProfile Data.Binary.get;
                      326529584 -> fmap KeyboardButtonWebView Data.Binary.get}};
           put (InputKeyboardButtonUrlAuth tmp_1) = do {Data.Binary.Put.putWord32le 3492708308;
                                                        Data.Binary.put tmp_1};
           put (InputKeyboardButtonUserProfile tmp_2) = do {Data.Binary.Put.putWord32le 3918005115;
                                                            Data.Binary.put tmp_2};
           put (KeyboardButton tmp_3) = do {Data.Binary.Put.putWord32le 2734311552;
                                            Data.Binary.put tmp_3};
           put (KeyboardButtonBuy tmp_4) = do {Data.Binary.Put.putWord32le 2950250427;
                                               Data.Binary.put tmp_4};
           put (KeyboardButtonCallback tmp_5) = do {Data.Binary.Put.putWord32le 901503851;
                                                    Data.Binary.put tmp_5};
           put (KeyboardButtonGame tmp_6) = do {Data.Binary.Put.putWord32le 1358175439;
                                                Data.Binary.put tmp_6};
           put (KeyboardButtonRequestGeoLocation tmp_7) = do {Data.Binary.Put.putWord32le 4235815743;
                                                              Data.Binary.put tmp_7};
           put (KeyboardButtonRequestPeer tmp_8) = do {Data.Binary.Put.putWord32le 1406648280;
                                                       Data.Binary.put tmp_8};
           put (KeyboardButtonRequestPhone tmp_9) = do {Data.Binary.Put.putWord32le 2976541737;
                                                        Data.Binary.put tmp_9};
           put (KeyboardButtonRequestPoll tmp_10) = do {Data.Binary.Put.putWord32le 3150401885;
                                                        Data.Binary.put tmp_10};
           put (KeyboardButtonSimpleWebView tmp_11) = do {Data.Binary.Put.putWord32le 2696958044;
                                                          Data.Binary.put tmp_11};
           put (KeyboardButtonSwitchInline tmp_12) = do {Data.Binary.Put.putWord32le 2478439349;
                                                         Data.Binary.put tmp_12};
           put (KeyboardButtonUrl tmp_13) = do {Data.Binary.Put.putWord32le 629866245;
                                                Data.Binary.put tmp_13};
           put (KeyboardButtonUrlAuth tmp_14) = do {Data.Binary.Put.putWord32le 280464681;
                                                    Data.Binary.put tmp_14};
           put (KeyboardButtonUserProfile tmp_15) = do {Data.Binary.Put.putWord32le 814112961;
                                                        Data.Binary.put tmp_15};
           put (KeyboardButtonWebView tmp_16) = do {Data.Binary.Put.putWord32le 326529584;
                                                    Data.Binary.put tmp_16}}
instance Data.Binary.Binary KeyboardButtonRow'
    where {get = do {_buttons_0 <- Data.Binary.get;
                     GHC.Base.pure (KeyboardButtonRow' _buttons_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._buttons}
data KeyboardButtonRow = KeyboardButtonRow !KeyboardButtonRow'
data KeyboardButtonRow'
    = KeyboardButtonRow' {_buttons :: !(Vector KeyboardButton)}
instance Data.Binary.Binary KeyboardButtonRow
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2002815875 -> fmap KeyboardButtonRow Data.Binary.get}};
           put (KeyboardButtonRow tmp_1) = do {Data.Binary.Put.putWord32le 2002815875;
                                               Data.Binary.put tmp_1}}
instance Data.Binary.Binary LabeledPrice'
    where {get = do {_label_0 <- Data.Binary.get;
                     _amount_1 <- Data.Binary.get;
                     GHC.Base.pure (LabeledPrice' _label_0 _amount_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._label;
                                     Data.Binary.put to_be_encoded_2._amount}}
data LabeledPrice = LabeledPrice !LabeledPrice'
data LabeledPrice'
    = LabeledPrice' {_label :: !String', _amount :: !Long'}
instance Data.Binary.Binary LabeledPrice
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3408489464 -> fmap LabeledPrice Data.Binary.get}};
           put (LabeledPrice tmp_1) = do {Data.Binary.Put.putWord32le 3408489464;
                                          Data.Binary.put tmp_1}}
instance Data.Binary.Binary LangPackDifference'
    where {get = do {_lang_code_0 <- Data.Binary.get;
                     _from_version_1 <- Data.Binary.get;
                     _version_2 <- Data.Binary.get;
                     _strings_3 <- Data.Binary.get;
                     GHC.Base.pure (LangPackDifference' _lang_code_0 _from_version_1 _version_2 _strings_3)};
           put to_be_encoded_4 = do {Data.Binary.put to_be_encoded_4._lang_code;
                                     Data.Binary.put to_be_encoded_4._from_version;
                                     Data.Binary.put to_be_encoded_4._version;
                                     Data.Binary.put to_be_encoded_4._strings}}
data LangPackDifference = LangPackDifference !LangPackDifference'
data LangPackDifference'
    = LangPackDifference' {_lang_code :: !String',
                           _from_version :: !Int',
                           _version :: !Int',
                           _strings :: !(Vector LangPackString)}
instance Data.Binary.Binary LangPackDifference
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {4085629430 -> fmap LangPackDifference Data.Binary.get}};
           put (LangPackDifference tmp_1) = do {Data.Binary.Put.putWord32le 4085629430;
                                                Data.Binary.put tmp_1}}
instance Data.Binary.Binary LangPackLanguage'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _official_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _rtl_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _beta_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     _name_4 <- Data.Binary.get;
                     _native_name_5 <- Data.Binary.get;
                     _lang_code_6 <- Data.Binary.get;
                     _base_lang_code_7 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _plural_code_8 <- Data.Binary.get;
                     _strings_count_9 <- Data.Binary.get;
                     _translated_count_10 <- Data.Binary.get;
                     _translations_url_11 <- Data.Binary.get;
                     GHC.Base.pure (LangPackLanguage' _official_1 _rtl_2 _beta_3 _name_4 _native_name_5 _lang_code_6 _base_lang_code_7 _plural_code_8 _strings_count_9 _translated_count_10 _translations_url_11)};
           put to_be_encoded_12 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_12._base_lang_code,
                                                               1),
                                                              (Data.Maybe.isJust to_be_encoded_12._beta,
                                                               3),
                                                              (Data.Maybe.isJust to_be_encoded_12._rtl,
                                                               2),
                                                              (Data.Maybe.isJust to_be_encoded_12._official,
                                                               0)];
                                      Data.Binary.put to_be_encoded_12._official;
                                      Data.Binary.put to_be_encoded_12._rtl;
                                      Data.Binary.put to_be_encoded_12._beta;
                                      Data.Binary.put to_be_encoded_12._name;
                                      Data.Binary.put to_be_encoded_12._native_name;
                                      Data.Binary.put to_be_encoded_12._lang_code;
                                      Data.Binary.put to_be_encoded_12._base_lang_code;
                                      Data.Binary.put to_be_encoded_12._plural_code;
                                      Data.Binary.put to_be_encoded_12._strings_count;
                                      Data.Binary.put to_be_encoded_12._translated_count;
                                      Data.Binary.put to_be_encoded_12._translations_url}}
data LangPackLanguage = LangPackLanguage !LangPackLanguage'
data LangPackLanguage'
    = LangPackLanguage' {_official :: !(Maybe True'),
                         _rtl :: !(Maybe True'),
                         _beta :: !(Maybe True'),
                         _name :: !String',
                         _native_name :: !String',
                         _lang_code :: !String',
                         _base_lang_code :: !(Maybe String'),
                         _plural_code :: !String',
                         _strings_count :: !Int',
                         _translated_count :: !Int',
                         _translations_url :: !String'}
instance Data.Binary.Binary LangPackLanguage
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {4006239459 -> fmap LangPackLanguage Data.Binary.get}};
           put (LangPackLanguage tmp_1) = do {Data.Binary.Put.putWord32le 4006239459;
                                              Data.Binary.put tmp_1}}
instance Data.Binary.Binary LangPackString'
    where {get = do {_key_0 <- Data.Binary.get;
                     _value_1 <- Data.Binary.get;
                     GHC.Base.pure (LangPackString' _key_0 _value_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._key;
                                     Data.Binary.put to_be_encoded_2._value}}
instance Data.Binary.Binary LangPackStringDeleted'
    where {get = do {_key_0 <- Data.Binary.get;
                     GHC.Base.pure (LangPackStringDeleted' _key_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._key}
instance Data.Binary.Binary LangPackStringPluralized'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _key_1 <- Data.Binary.get;
                     _zero_value_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _one_value_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _two_value_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _few_value_5 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     _many_value_6 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 4);
                     _other_value_7 <- Data.Binary.get;
                     GHC.Base.pure (LangPackStringPluralized' _key_1 _zero_value_2 _one_value_3 _two_value_4 _few_value_5 _many_value_6 _other_value_7)};
           put to_be_encoded_8 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_8._many_value,
                                                              4),
                                                             (Data.Maybe.isJust to_be_encoded_8._few_value,
                                                              3),
                                                             (Data.Maybe.isJust to_be_encoded_8._two_value,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_8._one_value,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_8._zero_value,
                                                              0)];
                                     Data.Binary.put to_be_encoded_8._key;
                                     Data.Binary.put to_be_encoded_8._zero_value;
                                     Data.Binary.put to_be_encoded_8._one_value;
                                     Data.Binary.put to_be_encoded_8._two_value;
                                     Data.Binary.put to_be_encoded_8._few_value;
                                     Data.Binary.put to_be_encoded_8._many_value;
                                     Data.Binary.put to_be_encoded_8._other_value}}
data LangPackString
    = LangPackString !LangPackString'
    | LangPackStringDeleted !LangPackStringDeleted'
    | LangPackStringPluralized !LangPackStringPluralized'
data LangPackString'
    = LangPackString' {_key :: !String', _value :: !String'}
data LangPackStringDeleted'
    = LangPackStringDeleted' {_key :: !String'}
data LangPackStringPluralized'
    = LangPackStringPluralized' {_key :: !String',
                                 _zero_value :: !(Maybe String'),
                                 _one_value :: !(Maybe String'),
                                 _two_value :: !(Maybe String'),
                                 _few_value :: !(Maybe String'),
                                 _many_value :: !(Maybe String'),
                                 _other_value :: !String'}
instance Data.Binary.Binary LangPackString
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3402727926 -> fmap LangPackString Data.Binary.get;
                      695856818 -> fmap LangPackStringDeleted Data.Binary.get;
                      1816636575 -> fmap LangPackStringPluralized Data.Binary.get}};
           put (LangPackString tmp_1) = do {Data.Binary.Put.putWord32le 3402727926;
                                            Data.Binary.put tmp_1};
           put (LangPackStringDeleted tmp_2) = do {Data.Binary.Put.putWord32le 695856818;
                                                   Data.Binary.put tmp_2};
           put (LangPackStringPluralized tmp_3) = do {Data.Binary.Put.putWord32le 1816636575;
                                                      Data.Binary.put tmp_3}}
instance Data.Binary.Binary MaskCoords'
    where {get = do {_n_0 <- Data.Binary.get;
                     _x_1 <- Data.Binary.get;
                     _y_2 <- Data.Binary.get;
                     _zoom_3 <- Data.Binary.get;
                     GHC.Base.pure (MaskCoords' _n_0 _x_1 _y_2 _zoom_3)};
           put to_be_encoded_4 = do {Data.Binary.put to_be_encoded_4._n;
                                     Data.Binary.put to_be_encoded_4._x;
                                     Data.Binary.put to_be_encoded_4._y;
                                     Data.Binary.put to_be_encoded_4._zoom}}
data MaskCoords = MaskCoords !MaskCoords'
data MaskCoords'
    = MaskCoords' {_n :: !Int',
                   _x :: !Double',
                   _y :: !Double',
                   _zoom :: !Double'}
instance Data.Binary.Binary MaskCoords
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2933316530 -> fmap MaskCoords Data.Binary.get}};
           put (MaskCoords tmp_1) = do {Data.Binary.Put.putWord32le 2933316530;
                                        Data.Binary.put tmp_1}}
instance Data.Binary.Binary InputMediaAreaChannelPost'
    where {get = do {_coordinates_0 <- Data.Binary.get;
                     _channel_1 <- Data.Binary.get;
                     _msg_id_2 <- Data.Binary.get;
                     GHC.Base.pure (InputMediaAreaChannelPost' _coordinates_0 _channel_1 _msg_id_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._coordinates;
                                     Data.Binary.put to_be_encoded_3._channel;
                                     Data.Binary.put to_be_encoded_3._msg_id}}
instance Data.Binary.Binary InputMediaAreaVenue'
    where {get = do {_coordinates_0 <- Data.Binary.get;
                     _query_id_1 <- Data.Binary.get;
                     _result_id_2 <- Data.Binary.get;
                     GHC.Base.pure (InputMediaAreaVenue' _coordinates_0 _query_id_1 _result_id_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._coordinates;
                                     Data.Binary.put to_be_encoded_3._query_id;
                                     Data.Binary.put to_be_encoded_3._result_id}}
instance Data.Binary.Binary MediaAreaChannelPost'
    where {get = do {_coordinates_0 <- Data.Binary.get;
                     _channel_id_1 <- Data.Binary.get;
                     _msg_id_2 <- Data.Binary.get;
                     GHC.Base.pure (MediaAreaChannelPost' _coordinates_0 _channel_id_1 _msg_id_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._coordinates;
                                     Data.Binary.put to_be_encoded_3._channel_id;
                                     Data.Binary.put to_be_encoded_3._msg_id}}
instance Data.Binary.Binary MediaAreaGeoPoint'
    where {get = do {_coordinates_0 <- Data.Binary.get;
                     _geo_1 <- Data.Binary.get;
                     GHC.Base.pure (MediaAreaGeoPoint' _coordinates_0 _geo_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._coordinates;
                                     Data.Binary.put to_be_encoded_2._geo}}
instance Data.Binary.Binary MediaAreaSuggestedReaction'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _dark_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _flipped_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _coordinates_3 <- Data.Binary.get;
                     _reaction_4 <- Data.Binary.get;
                     GHC.Base.pure (MediaAreaSuggestedReaction' _dark_1 _flipped_2 _coordinates_3 _reaction_4)};
           put to_be_encoded_5 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_5._flipped,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_5._dark,
                                                              0)];
                                     Data.Binary.put to_be_encoded_5._dark;
                                     Data.Binary.put to_be_encoded_5._flipped;
                                     Data.Binary.put to_be_encoded_5._coordinates;
                                     Data.Binary.put to_be_encoded_5._reaction}}
instance Data.Binary.Binary MediaAreaVenue'
    where {get = do {_coordinates_0 <- Data.Binary.get;
                     _geo_1 <- Data.Binary.get;
                     _title_2 <- Data.Binary.get;
                     _address_3 <- Data.Binary.get;
                     _provider_4 <- Data.Binary.get;
                     _venue_id_5 <- Data.Binary.get;
                     _venue_type_6 <- Data.Binary.get;
                     GHC.Base.pure (MediaAreaVenue' _coordinates_0 _geo_1 _title_2 _address_3 _provider_4 _venue_id_5 _venue_type_6)};
           put to_be_encoded_7 = do {Data.Binary.put to_be_encoded_7._coordinates;
                                     Data.Binary.put to_be_encoded_7._geo;
                                     Data.Binary.put to_be_encoded_7._title;
                                     Data.Binary.put to_be_encoded_7._address;
                                     Data.Binary.put to_be_encoded_7._provider;
                                     Data.Binary.put to_be_encoded_7._venue_id;
                                     Data.Binary.put to_be_encoded_7._venue_type}}
data MediaArea
    = InputMediaAreaChannelPost !InputMediaAreaChannelPost'
    | InputMediaAreaVenue !InputMediaAreaVenue'
    | MediaAreaChannelPost !MediaAreaChannelPost'
    | MediaAreaGeoPoint !MediaAreaGeoPoint'
    | MediaAreaSuggestedReaction !MediaAreaSuggestedReaction'
    | MediaAreaVenue !MediaAreaVenue'
data InputMediaAreaChannelPost'
    = InputMediaAreaChannelPost' {_coordinates :: !MediaAreaCoordinates,
                                  _channel :: !InputChannel,
                                  _msg_id :: !Int'}
data InputMediaAreaVenue'
    = InputMediaAreaVenue' {_coordinates :: !MediaAreaCoordinates,
                            _query_id :: !Long',
                            _result_id :: !String'}
data MediaAreaChannelPost'
    = MediaAreaChannelPost' {_coordinates :: !MediaAreaCoordinates,
                             _channel_id :: !Long',
                             _msg_id :: !Int'}
data MediaAreaGeoPoint'
    = MediaAreaGeoPoint' {_coordinates :: !MediaAreaCoordinates,
                          _geo :: !GeoPoint}
data MediaAreaSuggestedReaction'
    = MediaAreaSuggestedReaction' {_dark :: !(Maybe True'),
                                   _flipped :: !(Maybe True'),
                                   _coordinates :: !MediaAreaCoordinates,
                                   _reaction :: !Reaction}
data MediaAreaVenue'
    = MediaAreaVenue' {_coordinates :: !MediaAreaCoordinates,
                       _geo :: !GeoPoint,
                       _title :: !String',
                       _address :: !String',
                       _provider :: !String',
                       _venue_id :: !String',
                       _venue_type :: !String'}
instance Data.Binary.Binary MediaArea
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {577893055 -> fmap InputMediaAreaChannelPost Data.Binary.get;
                      2994872703 -> fmap InputMediaAreaVenue Data.Binary.get;
                      1996756655 -> fmap MediaAreaChannelPost Data.Binary.get;
                      3750443810 -> fmap MediaAreaGeoPoint Data.Binary.get;
                      340088945 -> fmap MediaAreaSuggestedReaction Data.Binary.get;
                      3196246940 -> fmap MediaAreaVenue Data.Binary.get}};
           put (InputMediaAreaChannelPost tmp_1) = do {Data.Binary.Put.putWord32le 577893055;
                                                       Data.Binary.put tmp_1};
           put (InputMediaAreaVenue tmp_2) = do {Data.Binary.Put.putWord32le 2994872703;
                                                 Data.Binary.put tmp_2};
           put (MediaAreaChannelPost tmp_3) = do {Data.Binary.Put.putWord32le 1996756655;
                                                  Data.Binary.put tmp_3};
           put (MediaAreaGeoPoint tmp_4) = do {Data.Binary.Put.putWord32le 3750443810;
                                               Data.Binary.put tmp_4};
           put (MediaAreaSuggestedReaction tmp_5) = do {Data.Binary.Put.putWord32le 340088945;
                                                        Data.Binary.put tmp_5};
           put (MediaAreaVenue tmp_6) = do {Data.Binary.Put.putWord32le 3196246940;
                                            Data.Binary.put tmp_6}}
instance Data.Binary.Binary MediaAreaCoordinates'
    where {get = do {_x_0 <- Data.Binary.get;
                     _y_1 <- Data.Binary.get;
                     _w_2 <- Data.Binary.get;
                     _h_3 <- Data.Binary.get;
                     _rotation_4 <- Data.Binary.get;
                     GHC.Base.pure (MediaAreaCoordinates' _x_0 _y_1 _w_2 _h_3 _rotation_4)};
           put to_be_encoded_5 = do {Data.Binary.put to_be_encoded_5._x;
                                     Data.Binary.put to_be_encoded_5._y;
                                     Data.Binary.put to_be_encoded_5._w;
                                     Data.Binary.put to_be_encoded_5._h;
                                     Data.Binary.put to_be_encoded_5._rotation}}
data MediaAreaCoordinates
    = MediaAreaCoordinates !MediaAreaCoordinates'
data MediaAreaCoordinates'
    = MediaAreaCoordinates' {_x :: !Double',
                             _y :: !Double',
                             _w :: !Double',
                             _h :: !Double',
                             _rotation :: !Double'}
instance Data.Binary.Binary MediaAreaCoordinates
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {64088654 -> fmap MediaAreaCoordinates Data.Binary.get}};
           put (MediaAreaCoordinates tmp_1) = do {Data.Binary.Put.putWord32le 64088654;
                                                  Data.Binary.put tmp_1}}
instance Data.Binary.Binary Message'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _out_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _mentioned_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 4);
                     _media_unread_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 5);
                     _silent_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 13);
                     _post_5 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 14);
                     _from_scheduled_6 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 18);
                     _legacy_7 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 19);
                     _edit_hide_8 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 21);
                     _pinned_9 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 24);
                     _noforwards_10 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 26);
                     _invert_media_11 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 27);
                     _id_12 <- Data.Binary.get;
                     _from_id_13 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 8);
                     _peer_id_14 <- Data.Binary.get;
                     _saved_peer_id_15 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 28);
                     _fwd_from_16 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _via_bot_id_17 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 11);
                     _reply_to_18 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     _date_19 <- Data.Binary.get;
                     _message_20 <- Data.Binary.get;
                     _media_21 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 9);
                     _reply_markup_22 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 6);
                     _entities_23 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 7);
                     _views_24 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 10);
                     _forwards_25 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 10);
                     _replies_26 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 23);
                     _edit_date_27 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 15);
                     _post_author_28 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 16);
                     _grouped_id_29 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 17);
                     _reactions_30 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 20);
                     _restriction_reason_31 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 22);
                     _ttl_period_32 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 25);
                     GHC.Base.pure (Message' _out_1 _mentioned_2 _media_unread_3 _silent_4 _post_5 _from_scheduled_6 _legacy_7 _edit_hide_8 _pinned_9 _noforwards_10 _invert_media_11 _id_12 _from_id_13 _peer_id_14 _saved_peer_id_15 _fwd_from_16 _via_bot_id_17 _reply_to_18 _date_19 _message_20 _media_21 _reply_markup_22 _entities_23 _views_24 _forwards_25 _replies_26 _edit_date_27 _post_author_28 _grouped_id_29 _reactions_30 _restriction_reason_31 _ttl_period_32)};
           put to_be_encoded_33 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_33._ttl_period,
                                                               25),
                                                              (Data.Maybe.isJust to_be_encoded_33._restriction_reason,
                                                               22),
                                                              (Data.Maybe.isJust to_be_encoded_33._reactions,
                                                               20),
                                                              (Data.Maybe.isJust to_be_encoded_33._grouped_id,
                                                               17),
                                                              (Data.Maybe.isJust to_be_encoded_33._post_author,
                                                               16),
                                                              (Data.Maybe.isJust to_be_encoded_33._edit_date,
                                                               15),
                                                              (Data.Maybe.isJust to_be_encoded_33._replies,
                                                               23),
                                                              (Data.Maybe.isJust to_be_encoded_33._forwards,
                                                               10),
                                                              (Data.Maybe.isJust to_be_encoded_33._views,
                                                               10),
                                                              (Data.Maybe.isJust to_be_encoded_33._entities,
                                                               7),
                                                              (Data.Maybe.isJust to_be_encoded_33._reply_markup,
                                                               6),
                                                              (Data.Maybe.isJust to_be_encoded_33._media,
                                                               9),
                                                              (Data.Maybe.isJust to_be_encoded_33._reply_to,
                                                               3),
                                                              (Data.Maybe.isJust to_be_encoded_33._via_bot_id,
                                                               11),
                                                              (Data.Maybe.isJust to_be_encoded_33._fwd_from,
                                                               2),
                                                              (Data.Maybe.isJust to_be_encoded_33._saved_peer_id,
                                                               28),
                                                              (Data.Maybe.isJust to_be_encoded_33._from_id,
                                                               8),
                                                              (Data.Maybe.isJust to_be_encoded_33._invert_media,
                                                               27),
                                                              (Data.Maybe.isJust to_be_encoded_33._noforwards,
                                                               26),
                                                              (Data.Maybe.isJust to_be_encoded_33._pinned,
                                                               24),
                                                              (Data.Maybe.isJust to_be_encoded_33._edit_hide,
                                                               21),
                                                              (Data.Maybe.isJust to_be_encoded_33._legacy,
                                                               19),
                                                              (Data.Maybe.isJust to_be_encoded_33._from_scheduled,
                                                               18),
                                                              (Data.Maybe.isJust to_be_encoded_33._post,
                                                               14),
                                                              (Data.Maybe.isJust to_be_encoded_33._silent,
                                                               13),
                                                              (Data.Maybe.isJust to_be_encoded_33._media_unread,
                                                               5),
                                                              (Data.Maybe.isJust to_be_encoded_33._mentioned,
                                                               4),
                                                              (Data.Maybe.isJust to_be_encoded_33._out,
                                                               1)];
                                      Data.Binary.put to_be_encoded_33._out;
                                      Data.Binary.put to_be_encoded_33._mentioned;
                                      Data.Binary.put to_be_encoded_33._media_unread;
                                      Data.Binary.put to_be_encoded_33._silent;
                                      Data.Binary.put to_be_encoded_33._post;
                                      Data.Binary.put to_be_encoded_33._from_scheduled;
                                      Data.Binary.put to_be_encoded_33._legacy;
                                      Data.Binary.put to_be_encoded_33._edit_hide;
                                      Data.Binary.put to_be_encoded_33._pinned;
                                      Data.Binary.put to_be_encoded_33._noforwards;
                                      Data.Binary.put to_be_encoded_33._invert_media;
                                      Data.Binary.put to_be_encoded_33._id;
                                      Data.Binary.put to_be_encoded_33._from_id;
                                      Data.Binary.put to_be_encoded_33._peer_id;
                                      Data.Binary.put to_be_encoded_33._saved_peer_id;
                                      Data.Binary.put to_be_encoded_33._fwd_from;
                                      Data.Binary.put to_be_encoded_33._via_bot_id;
                                      Data.Binary.put to_be_encoded_33._reply_to;
                                      Data.Binary.put to_be_encoded_33._date;
                                      Data.Binary.put to_be_encoded_33._message;
                                      Data.Binary.put to_be_encoded_33._media;
                                      Data.Binary.put to_be_encoded_33._reply_markup;
                                      Data.Binary.put to_be_encoded_33._entities;
                                      Data.Binary.put to_be_encoded_33._views;
                                      Data.Binary.put to_be_encoded_33._forwards;
                                      Data.Binary.put to_be_encoded_33._replies;
                                      Data.Binary.put to_be_encoded_33._edit_date;
                                      Data.Binary.put to_be_encoded_33._post_author;
                                      Data.Binary.put to_be_encoded_33._grouped_id;
                                      Data.Binary.put to_be_encoded_33._reactions;
                                      Data.Binary.put to_be_encoded_33._restriction_reason;
                                      Data.Binary.put to_be_encoded_33._ttl_period}}
instance Data.Binary.Binary MessageEmpty'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _id_1 <- Data.Binary.get;
                     _peer_id_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     GHC.Base.pure (MessageEmpty' _id_1 _peer_id_2)};
           put to_be_encoded_3 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_3._peer_id,
                                                              0)];
                                     Data.Binary.put to_be_encoded_3._id;
                                     Data.Binary.put to_be_encoded_3._peer_id}}
instance Data.Binary.Binary MessageService'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _out_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _mentioned_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 4);
                     _media_unread_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 5);
                     _silent_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 13);
                     _post_5 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 14);
                     _legacy_6 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 19);
                     _id_7 <- Data.Binary.get;
                     _from_id_8 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 8);
                     _peer_id_9 <- Data.Binary.get;
                     _reply_to_10 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     _date_11 <- Data.Binary.get;
                     _action_12 <- Data.Binary.get;
                     _ttl_period_13 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 25);
                     GHC.Base.pure (MessageService' _out_1 _mentioned_2 _media_unread_3 _silent_4 _post_5 _legacy_6 _id_7 _from_id_8 _peer_id_9 _reply_to_10 _date_11 _action_12 _ttl_period_13)};
           put to_be_encoded_14 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_14._ttl_period,
                                                               25),
                                                              (Data.Maybe.isJust to_be_encoded_14._reply_to,
                                                               3),
                                                              (Data.Maybe.isJust to_be_encoded_14._from_id,
                                                               8),
                                                              (Data.Maybe.isJust to_be_encoded_14._legacy,
                                                               19),
                                                              (Data.Maybe.isJust to_be_encoded_14._post,
                                                               14),
                                                              (Data.Maybe.isJust to_be_encoded_14._silent,
                                                               13),
                                                              (Data.Maybe.isJust to_be_encoded_14._media_unread,
                                                               5),
                                                              (Data.Maybe.isJust to_be_encoded_14._mentioned,
                                                               4),
                                                              (Data.Maybe.isJust to_be_encoded_14._out,
                                                               1)];
                                      Data.Binary.put to_be_encoded_14._out;
                                      Data.Binary.put to_be_encoded_14._mentioned;
                                      Data.Binary.put to_be_encoded_14._media_unread;
                                      Data.Binary.put to_be_encoded_14._silent;
                                      Data.Binary.put to_be_encoded_14._post;
                                      Data.Binary.put to_be_encoded_14._legacy;
                                      Data.Binary.put to_be_encoded_14._id;
                                      Data.Binary.put to_be_encoded_14._from_id;
                                      Data.Binary.put to_be_encoded_14._peer_id;
                                      Data.Binary.put to_be_encoded_14._reply_to;
                                      Data.Binary.put to_be_encoded_14._date;
                                      Data.Binary.put to_be_encoded_14._action;
                                      Data.Binary.put to_be_encoded_14._ttl_period}}
data Message
    = Message !Message'
    | MessageEmpty !MessageEmpty'
    | MessageService !MessageService'
data Message'
    = Message' {_out :: !(Maybe True'),
                _mentioned :: !(Maybe True'),
                _media_unread :: !(Maybe True'),
                _silent :: !(Maybe True'),
                _post :: !(Maybe True'),
                _from_scheduled :: !(Maybe True'),
                _legacy :: !(Maybe True'),
                _edit_hide :: !(Maybe True'),
                _pinned :: !(Maybe True'),
                _noforwards :: !(Maybe True'),
                _invert_media :: !(Maybe True'),
                _id :: !Int',
                _from_id :: !(Maybe Peer),
                _peer_id :: !Peer,
                _saved_peer_id :: !(Maybe Peer),
                _fwd_from :: !(Maybe MessageFwdHeader),
                _via_bot_id :: !(Maybe Long'),
                _reply_to :: !(Maybe MessageReplyHeader),
                _date :: !Int',
                _message :: !String',
                _media :: !(Maybe MessageMedia),
                _reply_markup :: !(Maybe ReplyMarkup),
                _entities :: !(Maybe (Vector MessageEntity)),
                _views :: !(Maybe Int'),
                _forwards :: !(Maybe Int'),
                _replies :: !(Maybe MessageReplies),
                _edit_date :: !(Maybe Int'),
                _post_author :: !(Maybe String'),
                _grouped_id :: !(Maybe Long'),
                _reactions :: !(Maybe MessageReactions),
                _restriction_reason :: !(Maybe (Vector RestrictionReason)),
                _ttl_period :: !(Maybe Int')}
data MessageEmpty'
    = MessageEmpty' {_id :: !Int', _peer_id :: !(Maybe Peer)}
data MessageService'
    = MessageService' {_out :: !(Maybe True'),
                       _mentioned :: !(Maybe True'),
                       _media_unread :: !(Maybe True'),
                       _silent :: !(Maybe True'),
                       _post :: !(Maybe True'),
                       _legacy :: !(Maybe True'),
                       _id :: !Int',
                       _from_id :: !(Maybe Peer),
                       _peer_id :: !Peer,
                       _reply_to :: !(Maybe MessageReplyHeader),
                       _date :: !Int',
                       _action :: !MessageAction,
                       _ttl_period :: !(Maybe Int')}
instance Data.Binary.Binary Message
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1992213009 -> fmap Message Data.Binary.get;
                      2426849924 -> fmap MessageEmpty Data.Binary.get;
                      721967202 -> fmap MessageService Data.Binary.get}};
           put (Message tmp_1) = do {Data.Binary.Put.putWord32le 1992213009;
                                     Data.Binary.put tmp_1};
           put (MessageEmpty tmp_2) = do {Data.Binary.Put.putWord32le 2426849924;
                                          Data.Binary.put tmp_2};
           put (MessageService tmp_3) = do {Data.Binary.Put.putWord32le 721967202;
                                            Data.Binary.put tmp_3}}
instance Data.Binary.Binary MessageActionBotAllowed'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _attach_menu_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _from_request_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     _domain_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _app_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     GHC.Base.pure (MessageActionBotAllowed' _attach_menu_1 _from_request_2 _domain_3 _app_4)};
           put to_be_encoded_5 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_5._app,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_5._domain,
                                                              0),
                                                             (Data.Maybe.isJust to_be_encoded_5._from_request,
                                                              3),
                                                             (Data.Maybe.isJust to_be_encoded_5._attach_menu,
                                                              1)];
                                     Data.Binary.put to_be_encoded_5._attach_menu;
                                     Data.Binary.put to_be_encoded_5._from_request;
                                     Data.Binary.put to_be_encoded_5._domain;
                                     Data.Binary.put to_be_encoded_5._app}}
instance Data.Binary.Binary MessageActionChannelCreate'
    where {get = do {_title_0 <- Data.Binary.get;
                     GHC.Base.pure (MessageActionChannelCreate' _title_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._title}
instance Data.Binary.Binary MessageActionChannelMigrateFrom'
    where {get = do {_title_0 <- Data.Binary.get;
                     _chat_id_1 <- Data.Binary.get;
                     GHC.Base.pure (MessageActionChannelMigrateFrom' _title_0 _chat_id_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._title;
                                     Data.Binary.put to_be_encoded_2._chat_id}}
instance Data.Binary.Binary MessageActionChatAddUser'
    where {get = do {_users_0 <- Data.Binary.get;
                     GHC.Base.pure (MessageActionChatAddUser' _users_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._users}
instance Data.Binary.Binary MessageActionChatCreate'
    where {get = do {_title_0 <- Data.Binary.get;
                     _users_1 <- Data.Binary.get;
                     GHC.Base.pure (MessageActionChatCreate' _title_0 _users_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._title;
                                     Data.Binary.put to_be_encoded_2._users}}
instance Data.Binary.Binary MessageActionChatDeletePhoto'
    where {get = GHC.Base.pure MessageActionChatDeletePhoto';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary MessageActionChatDeleteUser'
    where {get = do {_user_id_0 <- Data.Binary.get;
                     GHC.Base.pure (MessageActionChatDeleteUser' _user_id_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._user_id}
instance Data.Binary.Binary MessageActionChatEditPhoto'
    where {get = do {_photo_0 <- Data.Binary.get;
                     GHC.Base.pure (MessageActionChatEditPhoto' _photo_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._photo}
instance Data.Binary.Binary MessageActionChatEditTitle'
    where {get = do {_title_0 <- Data.Binary.get;
                     GHC.Base.pure (MessageActionChatEditTitle' _title_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._title}
instance Data.Binary.Binary MessageActionChatJoinedByLink'
    where {get = do {_inviter_id_0 <- Data.Binary.get;
                     GHC.Base.pure (MessageActionChatJoinedByLink' _inviter_id_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._inviter_id}
instance Data.Binary.Binary MessageActionChatJoinedByRequest'
    where {get = GHC.Base.pure MessageActionChatJoinedByRequest';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary MessageActionChatMigrateTo'
    where {get = do {_channel_id_0 <- Data.Binary.get;
                     GHC.Base.pure (MessageActionChatMigrateTo' _channel_id_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._channel_id}
instance Data.Binary.Binary MessageActionContactSignUp'
    where {get = GHC.Base.pure MessageActionContactSignUp';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary MessageActionCustomAction'
    where {get = do {_message_0 <- Data.Binary.get;
                     GHC.Base.pure (MessageActionCustomAction' _message_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._message}
instance Data.Binary.Binary MessageActionEmpty'
    where {get = GHC.Base.pure MessageActionEmpty';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary MessageActionGameScore'
    where {get = do {_game_id_0 <- Data.Binary.get;
                     _score_1 <- Data.Binary.get;
                     GHC.Base.pure (MessageActionGameScore' _game_id_0 _score_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._game_id;
                                     Data.Binary.put to_be_encoded_2._score}}
instance Data.Binary.Binary MessageActionGeoProximityReached'
    where {get = do {_from_id_0 <- Data.Binary.get;
                     _to_id_1 <- Data.Binary.get;
                     _distance_2 <- Data.Binary.get;
                     GHC.Base.pure (MessageActionGeoProximityReached' _from_id_0 _to_id_1 _distance_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._from_id;
                                     Data.Binary.put to_be_encoded_3._to_id;
                                     Data.Binary.put to_be_encoded_3._distance}}
instance Data.Binary.Binary MessageActionGiftCode'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _via_giveaway_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _unclaimed_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _boost_peer_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _months_4 <- Data.Binary.get;
                     _slug_5 <- Data.Binary.get;
                     _currency_6 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _amount_7 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _crypto_currency_8 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     _crypto_amount_9 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     GHC.Base.pure (MessageActionGiftCode' _via_giveaway_1 _unclaimed_2 _boost_peer_3 _months_4 _slug_5 _currency_6 _amount_7 _crypto_currency_8 _crypto_amount_9)};
           put to_be_encoded_10 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_10._crypto_amount,
                                                               3),
                                                              (Data.Maybe.isJust to_be_encoded_10._crypto_currency,
                                                               3),
                                                              (Data.Maybe.isJust to_be_encoded_10._amount,
                                                               2),
                                                              (Data.Maybe.isJust to_be_encoded_10._currency,
                                                               2),
                                                              (Data.Maybe.isJust to_be_encoded_10._boost_peer,
                                                               1),
                                                              (Data.Maybe.isJust to_be_encoded_10._unclaimed,
                                                               2),
                                                              (Data.Maybe.isJust to_be_encoded_10._via_giveaway,
                                                               0)];
                                      Data.Binary.put to_be_encoded_10._via_giveaway;
                                      Data.Binary.put to_be_encoded_10._unclaimed;
                                      Data.Binary.put to_be_encoded_10._boost_peer;
                                      Data.Binary.put to_be_encoded_10._months;
                                      Data.Binary.put to_be_encoded_10._slug;
                                      Data.Binary.put to_be_encoded_10._currency;
                                      Data.Binary.put to_be_encoded_10._amount;
                                      Data.Binary.put to_be_encoded_10._crypto_currency;
                                      Data.Binary.put to_be_encoded_10._crypto_amount}}
instance Data.Binary.Binary MessageActionGiftPremium'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _currency_1 <- Data.Binary.get;
                     _amount_2 <- Data.Binary.get;
                     _months_3 <- Data.Binary.get;
                     _crypto_currency_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _crypto_amount_5 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     GHC.Base.pure (MessageActionGiftPremium' _currency_1 _amount_2 _months_3 _crypto_currency_4 _crypto_amount_5)};
           put to_be_encoded_6 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_6._crypto_amount,
                                                              0),
                                                             (Data.Maybe.isJust to_be_encoded_6._crypto_currency,
                                                              0)];
                                     Data.Binary.put to_be_encoded_6._currency;
                                     Data.Binary.put to_be_encoded_6._amount;
                                     Data.Binary.put to_be_encoded_6._months;
                                     Data.Binary.put to_be_encoded_6._crypto_currency;
                                     Data.Binary.put to_be_encoded_6._crypto_amount}}
instance Data.Binary.Binary MessageActionGiveawayLaunch'
    where {get = GHC.Base.pure MessageActionGiveawayLaunch';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary MessageActionGiveawayResults'
    where {get = do {_winners_count_0 <- Data.Binary.get;
                     _unclaimed_count_1 <- Data.Binary.get;
                     GHC.Base.pure (MessageActionGiveawayResults' _winners_count_0 _unclaimed_count_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._winners_count;
                                     Data.Binary.put to_be_encoded_2._unclaimed_count}}
instance Data.Binary.Binary MessageActionGroupCall'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _call_1 <- Data.Binary.get;
                     _duration_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     GHC.Base.pure (MessageActionGroupCall' _call_1 _duration_2)};
           put to_be_encoded_3 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_3._duration,
                                                              0)];
                                     Data.Binary.put to_be_encoded_3._call;
                                     Data.Binary.put to_be_encoded_3._duration}}
instance Data.Binary.Binary MessageActionGroupCallScheduled'
    where {get = do {_call_0 <- Data.Binary.get;
                     _schedule_date_1 <- Data.Binary.get;
                     GHC.Base.pure (MessageActionGroupCallScheduled' _call_0 _schedule_date_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._call;
                                     Data.Binary.put to_be_encoded_2._schedule_date}}
instance Data.Binary.Binary MessageActionHistoryClear'
    where {get = GHC.Base.pure MessageActionHistoryClear';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary MessageActionInviteToGroupCall'
    where {get = do {_call_0 <- Data.Binary.get;
                     _users_1 <- Data.Binary.get;
                     GHC.Base.pure (MessageActionInviteToGroupCall' _call_0 _users_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._call;
                                     Data.Binary.put to_be_encoded_2._users}}
instance Data.Binary.Binary MessageActionPaymentSent'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _recurring_init_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _recurring_used_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     _currency_3 <- Data.Binary.get;
                     _total_amount_4 <- Data.Binary.get;
                     _invoice_slug_5 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     GHC.Base.pure (MessageActionPaymentSent' _recurring_init_1 _recurring_used_2 _currency_3 _total_amount_4 _invoice_slug_5)};
           put to_be_encoded_6 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_6._invoice_slug,
                                                              0),
                                                             (Data.Maybe.isJust to_be_encoded_6._recurring_used,
                                                              3),
                                                             (Data.Maybe.isJust to_be_encoded_6._recurring_init,
                                                              2)];
                                     Data.Binary.put to_be_encoded_6._recurring_init;
                                     Data.Binary.put to_be_encoded_6._recurring_used;
                                     Data.Binary.put to_be_encoded_6._currency;
                                     Data.Binary.put to_be_encoded_6._total_amount;
                                     Data.Binary.put to_be_encoded_6._invoice_slug}}
instance Data.Binary.Binary MessageActionPaymentSentMe'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _recurring_init_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _recurring_used_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     _currency_3 <- Data.Binary.get;
                     _total_amount_4 <- Data.Binary.get;
                     _payload_5 <- Data.Binary.get;
                     _info_6 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _shipping_option_id_7 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _charge_8 <- Data.Binary.get;
                     GHC.Base.pure (MessageActionPaymentSentMe' _recurring_init_1 _recurring_used_2 _currency_3 _total_amount_4 _payload_5 _info_6 _shipping_option_id_7 _charge_8)};
           put to_be_encoded_9 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_9._shipping_option_id,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_9._info,
                                                              0),
                                                             (Data.Maybe.isJust to_be_encoded_9._recurring_used,
                                                              3),
                                                             (Data.Maybe.isJust to_be_encoded_9._recurring_init,
                                                              2)];
                                     Data.Binary.put to_be_encoded_9._recurring_init;
                                     Data.Binary.put to_be_encoded_9._recurring_used;
                                     Data.Binary.put to_be_encoded_9._currency;
                                     Data.Binary.put to_be_encoded_9._total_amount;
                                     Data.Binary.put to_be_encoded_9._payload;
                                     Data.Binary.put to_be_encoded_9._info;
                                     Data.Binary.put to_be_encoded_9._shipping_option_id;
                                     Data.Binary.put to_be_encoded_9._charge}}
instance Data.Binary.Binary MessageActionPhoneCall'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _video_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _call_id_2 <- Data.Binary.get;
                     _reason_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _duration_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     GHC.Base.pure (MessageActionPhoneCall' _video_1 _call_id_2 _reason_3 _duration_4)};
           put to_be_encoded_5 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_5._duration,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_5._reason,
                                                              0),
                                                             (Data.Maybe.isJust to_be_encoded_5._video,
                                                              2)];
                                     Data.Binary.put to_be_encoded_5._video;
                                     Data.Binary.put to_be_encoded_5._call_id;
                                     Data.Binary.put to_be_encoded_5._reason;
                                     Data.Binary.put to_be_encoded_5._duration}}
instance Data.Binary.Binary MessageActionPinMessage'
    where {get = GHC.Base.pure MessageActionPinMessage';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary MessageActionRequestedPeer'
    where {get = do {_button_id_0 <- Data.Binary.get;
                     _peers_1 <- Data.Binary.get;
                     GHC.Base.pure (MessageActionRequestedPeer' _button_id_0 _peers_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._button_id;
                                     Data.Binary.put to_be_encoded_2._peers}}
instance Data.Binary.Binary MessageActionScreenshotTaken'
    where {get = GHC.Base.pure MessageActionScreenshotTaken';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary MessageActionSecureValuesSent'
    where {get = do {_types_0 <- Data.Binary.get;
                     GHC.Base.pure (MessageActionSecureValuesSent' _types_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._types}
instance Data.Binary.Binary MessageActionSecureValuesSentMe'
    where {get = do {_values_0 <- Data.Binary.get;
                     _credentials_1 <- Data.Binary.get;
                     GHC.Base.pure (MessageActionSecureValuesSentMe' _values_0 _credentials_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._values;
                                     Data.Binary.put to_be_encoded_2._credentials}}
instance Data.Binary.Binary MessageActionSetChatTheme'
    where {get = do {_emoticon_0 <- Data.Binary.get;
                     GHC.Base.pure (MessageActionSetChatTheme' _emoticon_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._emoticon}
instance Data.Binary.Binary MessageActionSetChatWallPaper'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _same_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _for_both_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _wallpaper_3 <- Data.Binary.get;
                     GHC.Base.pure (MessageActionSetChatWallPaper' _same_1 _for_both_2 _wallpaper_3)};
           put to_be_encoded_4 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_4._for_both,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_4._same,
                                                              0)];
                                     Data.Binary.put to_be_encoded_4._same;
                                     Data.Binary.put to_be_encoded_4._for_both;
                                     Data.Binary.put to_be_encoded_4._wallpaper}}
instance Data.Binary.Binary MessageActionSetMessagesTTL'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _period_1 <- Data.Binary.get;
                     _auto_setting_from_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     GHC.Base.pure (MessageActionSetMessagesTTL' _period_1 _auto_setting_from_2)};
           put to_be_encoded_3 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_3._auto_setting_from,
                                                              0)];
                                     Data.Binary.put to_be_encoded_3._period;
                                     Data.Binary.put to_be_encoded_3._auto_setting_from}}
instance Data.Binary.Binary MessageActionSuggestProfilePhoto'
    where {get = do {_photo_0 <- Data.Binary.get;
                     GHC.Base.pure (MessageActionSuggestProfilePhoto' _photo_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._photo}
instance Data.Binary.Binary MessageActionTopicCreate'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _title_1 <- Data.Binary.get;
                     _icon_color_2 <- Data.Binary.get;
                     _icon_emoji_id_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     GHC.Base.pure (MessageActionTopicCreate' _title_1 _icon_color_2 _icon_emoji_id_3)};
           put to_be_encoded_4 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_4._icon_emoji_id,
                                                              0)];
                                     Data.Binary.put to_be_encoded_4._title;
                                     Data.Binary.put to_be_encoded_4._icon_color;
                                     Data.Binary.put to_be_encoded_4._icon_emoji_id}}
instance Data.Binary.Binary MessageActionTopicEdit'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _title_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _icon_emoji_id_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _closed_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _hidden_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     GHC.Base.pure (MessageActionTopicEdit' _title_1 _icon_emoji_id_2 _closed_3 _hidden_4)};
           put to_be_encoded_5 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_5._hidden,
                                                              3),
                                                             (Data.Maybe.isJust to_be_encoded_5._closed,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_5._icon_emoji_id,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_5._title,
                                                              0)];
                                     Data.Binary.put to_be_encoded_5._title;
                                     Data.Binary.put to_be_encoded_5._icon_emoji_id;
                                     Data.Binary.put to_be_encoded_5._closed;
                                     Data.Binary.put to_be_encoded_5._hidden}}
instance Data.Binary.Binary MessageActionWebViewDataSent'
    where {get = do {_text_0 <- Data.Binary.get;
                     GHC.Base.pure (MessageActionWebViewDataSent' _text_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._text}
instance Data.Binary.Binary MessageActionWebViewDataSentMe'
    where {get = do {_text_0 <- Data.Binary.get;
                     _data_1 <- Data.Binary.get;
                     GHC.Base.pure (MessageActionWebViewDataSentMe' _text_0 _data_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._text;
                                     Data.Binary.put to_be_encoded_2._data}}
data MessageAction
    = MessageActionBotAllowed !MessageActionBotAllowed'
    | MessageActionChannelCreate !MessageActionChannelCreate'
    | MessageActionChannelMigrateFrom !MessageActionChannelMigrateFrom'
    | MessageActionChatAddUser !MessageActionChatAddUser'
    | MessageActionChatCreate !MessageActionChatCreate'
    | MessageActionChatDeletePhoto !MessageActionChatDeletePhoto'
    | MessageActionChatDeleteUser !MessageActionChatDeleteUser'
    | MessageActionChatEditPhoto !MessageActionChatEditPhoto'
    | MessageActionChatEditTitle !MessageActionChatEditTitle'
    | MessageActionChatJoinedByLink !MessageActionChatJoinedByLink'
    | MessageActionChatJoinedByRequest !MessageActionChatJoinedByRequest'
    | MessageActionChatMigrateTo !MessageActionChatMigrateTo'
    | MessageActionContactSignUp !MessageActionContactSignUp'
    | MessageActionCustomAction !MessageActionCustomAction'
    | MessageActionEmpty !MessageActionEmpty'
    | MessageActionGameScore !MessageActionGameScore'
    | MessageActionGeoProximityReached !MessageActionGeoProximityReached'
    | MessageActionGiftCode !MessageActionGiftCode'
    | MessageActionGiftPremium !MessageActionGiftPremium'
    | MessageActionGiveawayLaunch !MessageActionGiveawayLaunch'
    | MessageActionGiveawayResults !MessageActionGiveawayResults'
    | MessageActionGroupCall !MessageActionGroupCall'
    | MessageActionGroupCallScheduled !MessageActionGroupCallScheduled'
    | MessageActionHistoryClear !MessageActionHistoryClear'
    | MessageActionInviteToGroupCall !MessageActionInviteToGroupCall'
    | MessageActionPaymentSent !MessageActionPaymentSent'
    | MessageActionPaymentSentMe !MessageActionPaymentSentMe'
    | MessageActionPhoneCall !MessageActionPhoneCall'
    | MessageActionPinMessage !MessageActionPinMessage'
    | MessageActionRequestedPeer !MessageActionRequestedPeer'
    | MessageActionScreenshotTaken !MessageActionScreenshotTaken'
    | MessageActionSecureValuesSent !MessageActionSecureValuesSent'
    | MessageActionSecureValuesSentMe !MessageActionSecureValuesSentMe'
    | MessageActionSetChatTheme !MessageActionSetChatTheme'
    | MessageActionSetChatWallPaper !MessageActionSetChatWallPaper'
    | MessageActionSetMessagesTTL !MessageActionSetMessagesTTL'
    | MessageActionSuggestProfilePhoto !MessageActionSuggestProfilePhoto'
    | MessageActionTopicCreate !MessageActionTopicCreate'
    | MessageActionTopicEdit !MessageActionTopicEdit'
    | MessageActionWebViewDataSent !MessageActionWebViewDataSent'
    | MessageActionWebViewDataSentMe !MessageActionWebViewDataSentMe'
data MessageActionBotAllowed'
    = MessageActionBotAllowed' {_attach_menu :: !(Maybe True'),
                                _from_request :: !(Maybe True'),
                                _domain :: !(Maybe String'),
                                _app :: !(Maybe BotApp)}
data MessageActionChannelCreate'
    = MessageActionChannelCreate' {_title :: !String'}
data MessageActionChannelMigrateFrom'
    = MessageActionChannelMigrateFrom' {_title :: !String',
                                        _chat_id :: !Long'}
data MessageActionChatAddUser'
    = MessageActionChatAddUser' {_users :: !(Vector Long')}
data MessageActionChatCreate'
    = MessageActionChatCreate' {_title :: !String',
                                _users :: !(Vector Long')}
data MessageActionChatDeletePhoto'
    = MessageActionChatDeletePhoto' {}
data MessageActionChatDeleteUser'
    = MessageActionChatDeleteUser' {_user_id :: !Long'}
data MessageActionChatEditPhoto'
    = MessageActionChatEditPhoto' {_photo :: !Photo}
data MessageActionChatEditTitle'
    = MessageActionChatEditTitle' {_title :: !String'}
data MessageActionChatJoinedByLink'
    = MessageActionChatJoinedByLink' {_inviter_id :: !Long'}
data MessageActionChatJoinedByRequest'
    = MessageActionChatJoinedByRequest' {}
data MessageActionChatMigrateTo'
    = MessageActionChatMigrateTo' {_channel_id :: !Long'}
data MessageActionContactSignUp' = MessageActionContactSignUp' {}
data MessageActionCustomAction'
    = MessageActionCustomAction' {_message :: !String'}
data MessageActionEmpty' = MessageActionEmpty' {}
data MessageActionGameScore'
    = MessageActionGameScore' {_game_id :: !Long', _score :: !Int'}
data MessageActionGeoProximityReached'
    = MessageActionGeoProximityReached' {_from_id :: !Peer,
                                         _to_id :: !Peer,
                                         _distance :: !Int'}
data MessageActionGiftCode'
    = MessageActionGiftCode' {_via_giveaway :: !(Maybe True'),
                              _unclaimed :: !(Maybe True'),
                              _boost_peer :: !(Maybe Peer),
                              _months :: !Int',
                              _slug :: !String',
                              _currency :: !(Maybe String'),
                              _amount :: !(Maybe Long'),
                              _crypto_currency :: !(Maybe String'),
                              _crypto_amount :: !(Maybe Long')}
data MessageActionGiftPremium'
    = MessageActionGiftPremium' {_currency :: !String',
                                 _amount :: !Long',
                                 _months :: !Int',
                                 _crypto_currency :: !(Maybe String'),
                                 _crypto_amount :: !(Maybe Long')}
data MessageActionGiveawayLaunch' = MessageActionGiveawayLaunch' {}
data MessageActionGiveawayResults'
    = MessageActionGiveawayResults' {_winners_count :: !Int',
                                     _unclaimed_count :: !Int'}
data MessageActionGroupCall'
    = MessageActionGroupCall' {_call :: !InputGroupCall,
                               _duration :: !(Maybe Int')}
data MessageActionGroupCallScheduled'
    = MessageActionGroupCallScheduled' {_call :: !InputGroupCall,
                                        _schedule_date :: !Int'}
data MessageActionHistoryClear' = MessageActionHistoryClear' {}
data MessageActionInviteToGroupCall'
    = MessageActionInviteToGroupCall' {_call :: !InputGroupCall,
                                       _users :: !(Vector Long')}
data MessageActionPaymentSent'
    = MessageActionPaymentSent' {_recurring_init :: !(Maybe True'),
                                 _recurring_used :: !(Maybe True'),
                                 _currency :: !String',
                                 _total_amount :: !Long',
                                 _invoice_slug :: !(Maybe String')}
data MessageActionPaymentSentMe'
    = MessageActionPaymentSentMe' {_recurring_init :: !(Maybe True'),
                                   _recurring_used :: !(Maybe True'),
                                   _currency :: !String',
                                   _total_amount :: !Long',
                                   _payload :: !Bytes',
                                   _info :: !(Maybe PaymentRequestedInfo),
                                   _shipping_option_id :: !(Maybe String'),
                                   _charge :: !PaymentCharge}
data MessageActionPhoneCall'
    = MessageActionPhoneCall' {_video :: !(Maybe True'),
                               _call_id :: !Long',
                               _reason :: !(Maybe PhoneCallDiscardReason),
                               _duration :: !(Maybe Int')}
data MessageActionPinMessage' = MessageActionPinMessage' {}
data MessageActionRequestedPeer'
    = MessageActionRequestedPeer' {_button_id :: !Int',
                                   _peers :: !(Vector Peer)}
data MessageActionScreenshotTaken'
    = MessageActionScreenshotTaken' {}
data MessageActionSecureValuesSent'
    = MessageActionSecureValuesSent' {_types :: !(Vector SecureValueType)}
data MessageActionSecureValuesSentMe'
    = MessageActionSecureValuesSentMe' {_values :: !(Vector SecureValue),
                                        _credentials :: !SecureCredentialsEncrypted}
data MessageActionSetChatTheme'
    = MessageActionSetChatTheme' {_emoticon :: !String'}
data MessageActionSetChatWallPaper'
    = MessageActionSetChatWallPaper' {_same :: !(Maybe True'),
                                      _for_both :: !(Maybe True'),
                                      _wallpaper :: !WallPaper}
data MessageActionSetMessagesTTL'
    = MessageActionSetMessagesTTL' {_period :: !Int',
                                    _auto_setting_from :: !(Maybe Long')}
data MessageActionSuggestProfilePhoto'
    = MessageActionSuggestProfilePhoto' {_photo :: !Photo}
data MessageActionTopicCreate'
    = MessageActionTopicCreate' {_title :: !String',
                                 _icon_color :: !Int',
                                 _icon_emoji_id :: !(Maybe Long')}
data MessageActionTopicEdit'
    = MessageActionTopicEdit' {_title :: !(Maybe String'),
                               _icon_emoji_id :: !(Maybe Long'),
                               _closed :: !(Maybe Bool),
                               _hidden :: !(Maybe Bool)}
data MessageActionWebViewDataSent'
    = MessageActionWebViewDataSent' {_text :: !String'}
data MessageActionWebViewDataSentMe'
    = MessageActionWebViewDataSentMe' {_text :: !String',
                                       _data :: !String'}
instance Data.Binary.Binary MessageAction
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3306608249 -> fmap MessageActionBotAllowed Data.Binary.get;
                      2513611922 -> fmap MessageActionChannelCreate Data.Binary.get;
                      3929622761 -> fmap MessageActionChannelMigrateFrom Data.Binary.get;
                      365886720 -> fmap MessageActionChatAddUser Data.Binary.get;
                      3175599021 -> fmap MessageActionChatCreate Data.Binary.get;
                      2514746351 -> fmap MessageActionChatDeletePhoto Data.Binary.get;
                      2755604684 -> fmap MessageActionChatDeleteUser Data.Binary.get;
                      2144015272 -> fmap MessageActionChatEditPhoto Data.Binary.get;
                      3047280218 -> fmap MessageActionChatEditTitle Data.Binary.get;
                      51520707 -> fmap MessageActionChatJoinedByLink Data.Binary.get;
                      3955008459 -> fmap MessageActionChatJoinedByRequest Data.Binary.get;
                      3775102866 -> fmap MessageActionChatMigrateTo Data.Binary.get;
                      4092747638 -> fmap MessageActionContactSignUp Data.Binary.get;
                      4209418070 -> fmap MessageActionCustomAction Data.Binary.get;
                      3064919984 -> fmap MessageActionEmpty Data.Binary.get;
                      2460428406 -> fmap MessageActionGameScore Data.Binary.get;
                      2564871831 -> fmap MessageActionGeoProximityReached Data.Binary.get;
                      1737240073 -> fmap MessageActionGiftCode Data.Binary.get;
                      3359468268 -> fmap MessageActionGiftPremium Data.Binary.get;
                      858499565 -> fmap MessageActionGiveawayLaunch Data.Binary.get;
                      715107781 -> fmap MessageActionGiveawayResults Data.Binary.get;
                      2047704898 -> fmap MessageActionGroupCall Data.Binary.get;
                      3013637729 -> fmap MessageActionGroupCallScheduled Data.Binary.get;
                      2679813636 -> fmap MessageActionHistoryClear Data.Binary.get;
                      1345295095 -> fmap MessageActionInviteToGroupCall Data.Binary.get;
                      2518040406 -> fmap MessageActionPaymentSent Data.Binary.get;
                      2402399015 -> fmap MessageActionPaymentSentMe Data.Binary.get;
                      2162236031 -> fmap MessageActionPhoneCall Data.Binary.get;
                      2495428845 -> fmap MessageActionPinMessage Data.Binary.get;
                      827428507 -> fmap MessageActionRequestedPeer Data.Binary.get;
                      1200788123 -> fmap MessageActionScreenshotTaken Data.Binary.get;
                      3646710100 -> fmap MessageActionSecureValuesSent Data.Binary.get;
                      455635795 -> fmap MessageActionSecureValuesSentMe Data.Binary.get;
                      2860016453 -> fmap MessageActionSetChatTheme Data.Binary.get;
                      1348510708 -> fmap MessageActionSetChatWallPaper Data.Binary.get;
                      1007897979 -> fmap MessageActionSetMessagesTTL Data.Binary.get;
                      1474192222 -> fmap MessageActionSuggestProfilePhoto Data.Binary.get;
                      228168278 -> fmap MessageActionTopicCreate Data.Binary.get;
                      3230943264 -> fmap MessageActionTopicEdit Data.Binary.get;
                      3032714421 -> fmap MessageActionWebViewDataSent Data.Binary.get;
                      1205698681 -> fmap MessageActionWebViewDataSentMe Data.Binary.get}};
           put (MessageActionBotAllowed tmp_1) = do {Data.Binary.Put.putWord32le 3306608249;
                                                     Data.Binary.put tmp_1};
           put (MessageActionChannelCreate tmp_2) = do {Data.Binary.Put.putWord32le 2513611922;
                                                        Data.Binary.put tmp_2};
           put (MessageActionChannelMigrateFrom tmp_3) = do {Data.Binary.Put.putWord32le 3929622761;
                                                             Data.Binary.put tmp_3};
           put (MessageActionChatAddUser tmp_4) = do {Data.Binary.Put.putWord32le 365886720;
                                                      Data.Binary.put tmp_4};
           put (MessageActionChatCreate tmp_5) = do {Data.Binary.Put.putWord32le 3175599021;
                                                     Data.Binary.put tmp_5};
           put (MessageActionChatDeletePhoto tmp_6) = do {Data.Binary.Put.putWord32le 2514746351;
                                                          Data.Binary.put tmp_6};
           put (MessageActionChatDeleteUser tmp_7) = do {Data.Binary.Put.putWord32le 2755604684;
                                                         Data.Binary.put tmp_7};
           put (MessageActionChatEditPhoto tmp_8) = do {Data.Binary.Put.putWord32le 2144015272;
                                                        Data.Binary.put tmp_8};
           put (MessageActionChatEditTitle tmp_9) = do {Data.Binary.Put.putWord32le 3047280218;
                                                        Data.Binary.put tmp_9};
           put (MessageActionChatJoinedByLink tmp_10) = do {Data.Binary.Put.putWord32le 51520707;
                                                            Data.Binary.put tmp_10};
           put (MessageActionChatJoinedByRequest tmp_11) = do {Data.Binary.Put.putWord32le 3955008459;
                                                               Data.Binary.put tmp_11};
           put (MessageActionChatMigrateTo tmp_12) = do {Data.Binary.Put.putWord32le 3775102866;
                                                         Data.Binary.put tmp_12};
           put (MessageActionContactSignUp tmp_13) = do {Data.Binary.Put.putWord32le 4092747638;
                                                         Data.Binary.put tmp_13};
           put (MessageActionCustomAction tmp_14) = do {Data.Binary.Put.putWord32le 4209418070;
                                                        Data.Binary.put tmp_14};
           put (MessageActionEmpty tmp_15) = do {Data.Binary.Put.putWord32le 3064919984;
                                                 Data.Binary.put tmp_15};
           put (MessageActionGameScore tmp_16) = do {Data.Binary.Put.putWord32le 2460428406;
                                                     Data.Binary.put tmp_16};
           put (MessageActionGeoProximityReached tmp_17) = do {Data.Binary.Put.putWord32le 2564871831;
                                                               Data.Binary.put tmp_17};
           put (MessageActionGiftCode tmp_18) = do {Data.Binary.Put.putWord32le 1737240073;
                                                    Data.Binary.put tmp_18};
           put (MessageActionGiftPremium tmp_19) = do {Data.Binary.Put.putWord32le 3359468268;
                                                       Data.Binary.put tmp_19};
           put (MessageActionGiveawayLaunch tmp_20) = do {Data.Binary.Put.putWord32le 858499565;
                                                          Data.Binary.put tmp_20};
           put (MessageActionGiveawayResults tmp_21) = do {Data.Binary.Put.putWord32le 715107781;
                                                           Data.Binary.put tmp_21};
           put (MessageActionGroupCall tmp_22) = do {Data.Binary.Put.putWord32le 2047704898;
                                                     Data.Binary.put tmp_22};
           put (MessageActionGroupCallScheduled tmp_23) = do {Data.Binary.Put.putWord32le 3013637729;
                                                              Data.Binary.put tmp_23};
           put (MessageActionHistoryClear tmp_24) = do {Data.Binary.Put.putWord32le 2679813636;
                                                        Data.Binary.put tmp_24};
           put (MessageActionInviteToGroupCall tmp_25) = do {Data.Binary.Put.putWord32le 1345295095;
                                                             Data.Binary.put tmp_25};
           put (MessageActionPaymentSent tmp_26) = do {Data.Binary.Put.putWord32le 2518040406;
                                                       Data.Binary.put tmp_26};
           put (MessageActionPaymentSentMe tmp_27) = do {Data.Binary.Put.putWord32le 2402399015;
                                                         Data.Binary.put tmp_27};
           put (MessageActionPhoneCall tmp_28) = do {Data.Binary.Put.putWord32le 2162236031;
                                                     Data.Binary.put tmp_28};
           put (MessageActionPinMessage tmp_29) = do {Data.Binary.Put.putWord32le 2495428845;
                                                      Data.Binary.put tmp_29};
           put (MessageActionRequestedPeer tmp_30) = do {Data.Binary.Put.putWord32le 827428507;
                                                         Data.Binary.put tmp_30};
           put (MessageActionScreenshotTaken tmp_31) = do {Data.Binary.Put.putWord32le 1200788123;
                                                           Data.Binary.put tmp_31};
           put (MessageActionSecureValuesSent tmp_32) = do {Data.Binary.Put.putWord32le 3646710100;
                                                            Data.Binary.put tmp_32};
           put (MessageActionSecureValuesSentMe tmp_33) = do {Data.Binary.Put.putWord32le 455635795;
                                                              Data.Binary.put tmp_33};
           put (MessageActionSetChatTheme tmp_34) = do {Data.Binary.Put.putWord32le 2860016453;
                                                        Data.Binary.put tmp_34};
           put (MessageActionSetChatWallPaper tmp_35) = do {Data.Binary.Put.putWord32le 1348510708;
                                                            Data.Binary.put tmp_35};
           put (MessageActionSetMessagesTTL tmp_36) = do {Data.Binary.Put.putWord32le 1007897979;
                                                          Data.Binary.put tmp_36};
           put (MessageActionSuggestProfilePhoto tmp_37) = do {Data.Binary.Put.putWord32le 1474192222;
                                                               Data.Binary.put tmp_37};
           put (MessageActionTopicCreate tmp_38) = do {Data.Binary.Put.putWord32le 228168278;
                                                       Data.Binary.put tmp_38};
           put (MessageActionTopicEdit tmp_39) = do {Data.Binary.Put.putWord32le 3230943264;
                                                     Data.Binary.put tmp_39};
           put (MessageActionWebViewDataSent tmp_40) = do {Data.Binary.Put.putWord32le 3032714421;
                                                           Data.Binary.put tmp_40};
           put (MessageActionWebViewDataSentMe tmp_41) = do {Data.Binary.Put.putWord32le 1205698681;
                                                             Data.Binary.put tmp_41}}
instance Data.Binary.Binary InputMessageEntityMentionName'
    where {get = do {_offset_0 <- Data.Binary.get;
                     _length_1 <- Data.Binary.get;
                     _user_id_2 <- Data.Binary.get;
                     GHC.Base.pure (InputMessageEntityMentionName' _offset_0 _length_1 _user_id_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._offset;
                                     Data.Binary.put to_be_encoded_3._length;
                                     Data.Binary.put to_be_encoded_3._user_id}}
instance Data.Binary.Binary MessageEntityBankCard'
    where {get = do {_offset_0 <- Data.Binary.get;
                     _length_1 <- Data.Binary.get;
                     GHC.Base.pure (MessageEntityBankCard' _offset_0 _length_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._offset;
                                     Data.Binary.put to_be_encoded_2._length}}
instance Data.Binary.Binary MessageEntityBlockquote'
    where {get = do {_offset_0 <- Data.Binary.get;
                     _length_1 <- Data.Binary.get;
                     GHC.Base.pure (MessageEntityBlockquote' _offset_0 _length_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._offset;
                                     Data.Binary.put to_be_encoded_2._length}}
instance Data.Binary.Binary MessageEntityBold'
    where {get = do {_offset_0 <- Data.Binary.get;
                     _length_1 <- Data.Binary.get;
                     GHC.Base.pure (MessageEntityBold' _offset_0 _length_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._offset;
                                     Data.Binary.put to_be_encoded_2._length}}
instance Data.Binary.Binary MessageEntityBotCommand'
    where {get = do {_offset_0 <- Data.Binary.get;
                     _length_1 <- Data.Binary.get;
                     GHC.Base.pure (MessageEntityBotCommand' _offset_0 _length_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._offset;
                                     Data.Binary.put to_be_encoded_2._length}}
instance Data.Binary.Binary MessageEntityCashtag'
    where {get = do {_offset_0 <- Data.Binary.get;
                     _length_1 <- Data.Binary.get;
                     GHC.Base.pure (MessageEntityCashtag' _offset_0 _length_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._offset;
                                     Data.Binary.put to_be_encoded_2._length}}
instance Data.Binary.Binary MessageEntityCode'
    where {get = do {_offset_0 <- Data.Binary.get;
                     _length_1 <- Data.Binary.get;
                     GHC.Base.pure (MessageEntityCode' _offset_0 _length_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._offset;
                                     Data.Binary.put to_be_encoded_2._length}}
instance Data.Binary.Binary MessageEntityCustomEmoji'
    where {get = do {_offset_0 <- Data.Binary.get;
                     _length_1 <- Data.Binary.get;
                     _document_id_2 <- Data.Binary.get;
                     GHC.Base.pure (MessageEntityCustomEmoji' _offset_0 _length_1 _document_id_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._offset;
                                     Data.Binary.put to_be_encoded_3._length;
                                     Data.Binary.put to_be_encoded_3._document_id}}
instance Data.Binary.Binary MessageEntityEmail'
    where {get = do {_offset_0 <- Data.Binary.get;
                     _length_1 <- Data.Binary.get;
                     GHC.Base.pure (MessageEntityEmail' _offset_0 _length_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._offset;
                                     Data.Binary.put to_be_encoded_2._length}}
instance Data.Binary.Binary MessageEntityHashtag'
    where {get = do {_offset_0 <- Data.Binary.get;
                     _length_1 <- Data.Binary.get;
                     GHC.Base.pure (MessageEntityHashtag' _offset_0 _length_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._offset;
                                     Data.Binary.put to_be_encoded_2._length}}
instance Data.Binary.Binary MessageEntityItalic'
    where {get = do {_offset_0 <- Data.Binary.get;
                     _length_1 <- Data.Binary.get;
                     GHC.Base.pure (MessageEntityItalic' _offset_0 _length_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._offset;
                                     Data.Binary.put to_be_encoded_2._length}}
instance Data.Binary.Binary MessageEntityMention'
    where {get = do {_offset_0 <- Data.Binary.get;
                     _length_1 <- Data.Binary.get;
                     GHC.Base.pure (MessageEntityMention' _offset_0 _length_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._offset;
                                     Data.Binary.put to_be_encoded_2._length}}
instance Data.Binary.Binary MessageEntityMentionName'
    where {get = do {_offset_0 <- Data.Binary.get;
                     _length_1 <- Data.Binary.get;
                     _user_id_2 <- Data.Binary.get;
                     GHC.Base.pure (MessageEntityMentionName' _offset_0 _length_1 _user_id_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._offset;
                                     Data.Binary.put to_be_encoded_3._length;
                                     Data.Binary.put to_be_encoded_3._user_id}}
instance Data.Binary.Binary MessageEntityPhone'
    where {get = do {_offset_0 <- Data.Binary.get;
                     _length_1 <- Data.Binary.get;
                     GHC.Base.pure (MessageEntityPhone' _offset_0 _length_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._offset;
                                     Data.Binary.put to_be_encoded_2._length}}
instance Data.Binary.Binary MessageEntityPre'
    where {get = do {_offset_0 <- Data.Binary.get;
                     _length_1 <- Data.Binary.get;
                     _language_2 <- Data.Binary.get;
                     GHC.Base.pure (MessageEntityPre' _offset_0 _length_1 _language_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._offset;
                                     Data.Binary.put to_be_encoded_3._length;
                                     Data.Binary.put to_be_encoded_3._language}}
instance Data.Binary.Binary MessageEntitySpoiler'
    where {get = do {_offset_0 <- Data.Binary.get;
                     _length_1 <- Data.Binary.get;
                     GHC.Base.pure (MessageEntitySpoiler' _offset_0 _length_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._offset;
                                     Data.Binary.put to_be_encoded_2._length}}
instance Data.Binary.Binary MessageEntityStrike'
    where {get = do {_offset_0 <- Data.Binary.get;
                     _length_1 <- Data.Binary.get;
                     GHC.Base.pure (MessageEntityStrike' _offset_0 _length_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._offset;
                                     Data.Binary.put to_be_encoded_2._length}}
instance Data.Binary.Binary MessageEntityTextUrl'
    where {get = do {_offset_0 <- Data.Binary.get;
                     _length_1 <- Data.Binary.get;
                     _url_2 <- Data.Binary.get;
                     GHC.Base.pure (MessageEntityTextUrl' _offset_0 _length_1 _url_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._offset;
                                     Data.Binary.put to_be_encoded_3._length;
                                     Data.Binary.put to_be_encoded_3._url}}
instance Data.Binary.Binary MessageEntityUnderline'
    where {get = do {_offset_0 <- Data.Binary.get;
                     _length_1 <- Data.Binary.get;
                     GHC.Base.pure (MessageEntityUnderline' _offset_0 _length_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._offset;
                                     Data.Binary.put to_be_encoded_2._length}}
instance Data.Binary.Binary MessageEntityUnknown'
    where {get = do {_offset_0 <- Data.Binary.get;
                     _length_1 <- Data.Binary.get;
                     GHC.Base.pure (MessageEntityUnknown' _offset_0 _length_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._offset;
                                     Data.Binary.put to_be_encoded_2._length}}
instance Data.Binary.Binary MessageEntityUrl'
    where {get = do {_offset_0 <- Data.Binary.get;
                     _length_1 <- Data.Binary.get;
                     GHC.Base.pure (MessageEntityUrl' _offset_0 _length_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._offset;
                                     Data.Binary.put to_be_encoded_2._length}}
data MessageEntity
    = InputMessageEntityMentionName !InputMessageEntityMentionName'
    | MessageEntityBankCard !MessageEntityBankCard'
    | MessageEntityBlockquote !MessageEntityBlockquote'
    | MessageEntityBold !MessageEntityBold'
    | MessageEntityBotCommand !MessageEntityBotCommand'
    | MessageEntityCashtag !MessageEntityCashtag'
    | MessageEntityCode !MessageEntityCode'
    | MessageEntityCustomEmoji !MessageEntityCustomEmoji'
    | MessageEntityEmail !MessageEntityEmail'
    | MessageEntityHashtag !MessageEntityHashtag'
    | MessageEntityItalic !MessageEntityItalic'
    | MessageEntityMention !MessageEntityMention'
    | MessageEntityMentionName !MessageEntityMentionName'
    | MessageEntityPhone !MessageEntityPhone'
    | MessageEntityPre !MessageEntityPre'
    | MessageEntitySpoiler !MessageEntitySpoiler'
    | MessageEntityStrike !MessageEntityStrike'
    | MessageEntityTextUrl !MessageEntityTextUrl'
    | MessageEntityUnderline !MessageEntityUnderline'
    | MessageEntityUnknown !MessageEntityUnknown'
    | MessageEntityUrl !MessageEntityUrl'
data InputMessageEntityMentionName'
    = InputMessageEntityMentionName' {_offset :: !Int',
                                      _length :: !Int',
                                      _user_id :: !InputUser}
data MessageEntityBankCard'
    = MessageEntityBankCard' {_offset :: !Int', _length :: !Int'}
data MessageEntityBlockquote'
    = MessageEntityBlockquote' {_offset :: !Int', _length :: !Int'}
data MessageEntityBold'
    = MessageEntityBold' {_offset :: !Int', _length :: !Int'}
data MessageEntityBotCommand'
    = MessageEntityBotCommand' {_offset :: !Int', _length :: !Int'}
data MessageEntityCashtag'
    = MessageEntityCashtag' {_offset :: !Int', _length :: !Int'}
data MessageEntityCode'
    = MessageEntityCode' {_offset :: !Int', _length :: !Int'}
data MessageEntityCustomEmoji'
    = MessageEntityCustomEmoji' {_offset :: !Int',
                                 _length :: !Int',
                                 _document_id :: !Long'}
data MessageEntityEmail'
    = MessageEntityEmail' {_offset :: !Int', _length :: !Int'}
data MessageEntityHashtag'
    = MessageEntityHashtag' {_offset :: !Int', _length :: !Int'}
data MessageEntityItalic'
    = MessageEntityItalic' {_offset :: !Int', _length :: !Int'}
data MessageEntityMention'
    = MessageEntityMention' {_offset :: !Int', _length :: !Int'}
data MessageEntityMentionName'
    = MessageEntityMentionName' {_offset :: !Int',
                                 _length :: !Int',
                                 _user_id :: !Long'}
data MessageEntityPhone'
    = MessageEntityPhone' {_offset :: !Int', _length :: !Int'}
data MessageEntityPre'
    = MessageEntityPre' {_offset :: !Int',
                         _length :: !Int',
                         _language :: !String'}
data MessageEntitySpoiler'
    = MessageEntitySpoiler' {_offset :: !Int', _length :: !Int'}
data MessageEntityStrike'
    = MessageEntityStrike' {_offset :: !Int', _length :: !Int'}
data MessageEntityTextUrl'
    = MessageEntityTextUrl' {_offset :: !Int',
                             _length :: !Int',
                             _url :: !String'}
data MessageEntityUnderline'
    = MessageEntityUnderline' {_offset :: !Int', _length :: !Int'}
data MessageEntityUnknown'
    = MessageEntityUnknown' {_offset :: !Int', _length :: !Int'}
data MessageEntityUrl'
    = MessageEntityUrl' {_offset :: !Int', _length :: !Int'}
instance Data.Binary.Binary MessageEntity
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {546203849 -> fmap InputMessageEntityMentionName Data.Binary.get;
                      1981704948 -> fmap MessageEntityBankCard Data.Binary.get;
                      34469328 -> fmap MessageEntityBlockquote Data.Binary.get;
                      3177253833 -> fmap MessageEntityBold Data.Binary.get;
                      1827637959 -> fmap MessageEntityBotCommand Data.Binary.get;
                      1280209983 -> fmap MessageEntityCashtag Data.Binary.get;
                      681706865 -> fmap MessageEntityCode Data.Binary.get;
                      3369010680 -> fmap MessageEntityCustomEmoji Data.Binary.get;
                      1692693954 -> fmap MessageEntityEmail Data.Binary.get;
                      1868782349 -> fmap MessageEntityHashtag Data.Binary.get;
                      2188348256 -> fmap MessageEntityItalic Data.Binary.get;
                      4194588573 -> fmap MessageEntityMention Data.Binary.get;
                      3699052864 -> fmap MessageEntityMentionName Data.Binary.get;
                      2607407947 -> fmap MessageEntityPhone Data.Binary.get;
                      1938967520 -> fmap MessageEntityPre Data.Binary.get;
                      852137487 -> fmap MessageEntitySpoiler Data.Binary.get;
                      3204879316 -> fmap MessageEntityStrike Data.Binary.get;
                      1990644519 -> fmap MessageEntityTextUrl Data.Binary.get;
                      2622389899 -> fmap MessageEntityUnderline Data.Binary.get;
                      3146955413 -> fmap MessageEntityUnknown Data.Binary.get;
                      1859134776 -> fmap MessageEntityUrl Data.Binary.get}};
           put (InputMessageEntityMentionName tmp_1) = do {Data.Binary.Put.putWord32le 546203849;
                                                           Data.Binary.put tmp_1};
           put (MessageEntityBankCard tmp_2) = do {Data.Binary.Put.putWord32le 1981704948;
                                                   Data.Binary.put tmp_2};
           put (MessageEntityBlockquote tmp_3) = do {Data.Binary.Put.putWord32le 34469328;
                                                     Data.Binary.put tmp_3};
           put (MessageEntityBold tmp_4) = do {Data.Binary.Put.putWord32le 3177253833;
                                               Data.Binary.put tmp_4};
           put (MessageEntityBotCommand tmp_5) = do {Data.Binary.Put.putWord32le 1827637959;
                                                     Data.Binary.put tmp_5};
           put (MessageEntityCashtag tmp_6) = do {Data.Binary.Put.putWord32le 1280209983;
                                                  Data.Binary.put tmp_6};
           put (MessageEntityCode tmp_7) = do {Data.Binary.Put.putWord32le 681706865;
                                               Data.Binary.put tmp_7};
           put (MessageEntityCustomEmoji tmp_8) = do {Data.Binary.Put.putWord32le 3369010680;
                                                      Data.Binary.put tmp_8};
           put (MessageEntityEmail tmp_9) = do {Data.Binary.Put.putWord32le 1692693954;
                                                Data.Binary.put tmp_9};
           put (MessageEntityHashtag tmp_10) = do {Data.Binary.Put.putWord32le 1868782349;
                                                   Data.Binary.put tmp_10};
           put (MessageEntityItalic tmp_11) = do {Data.Binary.Put.putWord32le 2188348256;
                                                  Data.Binary.put tmp_11};
           put (MessageEntityMention tmp_12) = do {Data.Binary.Put.putWord32le 4194588573;
                                                   Data.Binary.put tmp_12};
           put (MessageEntityMentionName tmp_13) = do {Data.Binary.Put.putWord32le 3699052864;
                                                       Data.Binary.put tmp_13};
           put (MessageEntityPhone tmp_14) = do {Data.Binary.Put.putWord32le 2607407947;
                                                 Data.Binary.put tmp_14};
           put (MessageEntityPre tmp_15) = do {Data.Binary.Put.putWord32le 1938967520;
                                               Data.Binary.put tmp_15};
           put (MessageEntitySpoiler tmp_16) = do {Data.Binary.Put.putWord32le 852137487;
                                                   Data.Binary.put tmp_16};
           put (MessageEntityStrike tmp_17) = do {Data.Binary.Put.putWord32le 3204879316;
                                                  Data.Binary.put tmp_17};
           put (MessageEntityTextUrl tmp_18) = do {Data.Binary.Put.putWord32le 1990644519;
                                                   Data.Binary.put tmp_18};
           put (MessageEntityUnderline tmp_19) = do {Data.Binary.Put.putWord32le 2622389899;
                                                     Data.Binary.put tmp_19};
           put (MessageEntityUnknown tmp_20) = do {Data.Binary.Put.putWord32le 3146955413;
                                                   Data.Binary.put tmp_20};
           put (MessageEntityUrl tmp_21) = do {Data.Binary.Put.putWord32le 1859134776;
                                               Data.Binary.put tmp_21}}
instance Data.Binary.Binary MessageExtendedMedia'
    where {get = do {_media_0 <- Data.Binary.get;
                     GHC.Base.pure (MessageExtendedMedia' _media_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._media}
instance Data.Binary.Binary MessageExtendedMediaPreview'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _w_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _h_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _thumb_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _video_duration_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     GHC.Base.pure (MessageExtendedMediaPreview' _w_1 _h_2 _thumb_3 _video_duration_4)};
           put to_be_encoded_5 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_5._video_duration,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_5._thumb,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_5._h,
                                                              0),
                                                             (Data.Maybe.isJust to_be_encoded_5._w,
                                                              0)];
                                     Data.Binary.put to_be_encoded_5._w;
                                     Data.Binary.put to_be_encoded_5._h;
                                     Data.Binary.put to_be_encoded_5._thumb;
                                     Data.Binary.put to_be_encoded_5._video_duration}}
data MessageExtendedMedia
    = MessageExtendedMedia !MessageExtendedMedia'
    | MessageExtendedMediaPreview !MessageExtendedMediaPreview'
data MessageExtendedMedia'
    = MessageExtendedMedia' {_media :: !MessageMedia}
data MessageExtendedMediaPreview'
    = MessageExtendedMediaPreview' {_w :: !(Maybe Int'),
                                    _h :: !(Maybe Int'),
                                    _thumb :: !(Maybe PhotoSize),
                                    _video_duration :: !(Maybe Int')}
instance Data.Binary.Binary MessageExtendedMedia
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3997670500 -> fmap MessageExtendedMedia Data.Binary.get;
                      2908916936 -> fmap MessageExtendedMediaPreview Data.Binary.get}};
           put (MessageExtendedMedia tmp_1) = do {Data.Binary.Put.putWord32le 3997670500;
                                                  Data.Binary.put tmp_1};
           put (MessageExtendedMediaPreview tmp_2) = do {Data.Binary.Put.putWord32le 2908916936;
                                                         Data.Binary.put tmp_2}}
instance Data.Binary.Binary MessageFwdHeader'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _imported_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 7);
                     _saved_out_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 11);
                     _from_id_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _from_name_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 5);
                     _date_5 <- Data.Binary.get;
                     _channel_post_6 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _post_author_7 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     _saved_from_peer_8 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 4);
                     _saved_from_msg_id_9 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 4);
                     _saved_from_id_10 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 8);
                     _saved_from_name_11 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 9);
                     _saved_date_12 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 10);
                     _psa_type_13 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 6);
                     GHC.Base.pure (MessageFwdHeader' _imported_1 _saved_out_2 _from_id_3 _from_name_4 _date_5 _channel_post_6 _post_author_7 _saved_from_peer_8 _saved_from_msg_id_9 _saved_from_id_10 _saved_from_name_11 _saved_date_12 _psa_type_13)};
           put to_be_encoded_14 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_14._psa_type,
                                                               6),
                                                              (Data.Maybe.isJust to_be_encoded_14._saved_date,
                                                               10),
                                                              (Data.Maybe.isJust to_be_encoded_14._saved_from_name,
                                                               9),
                                                              (Data.Maybe.isJust to_be_encoded_14._saved_from_id,
                                                               8),
                                                              (Data.Maybe.isJust to_be_encoded_14._saved_from_msg_id,
                                                               4),
                                                              (Data.Maybe.isJust to_be_encoded_14._saved_from_peer,
                                                               4),
                                                              (Data.Maybe.isJust to_be_encoded_14._post_author,
                                                               3),
                                                              (Data.Maybe.isJust to_be_encoded_14._channel_post,
                                                               2),
                                                              (Data.Maybe.isJust to_be_encoded_14._from_name,
                                                               5),
                                                              (Data.Maybe.isJust to_be_encoded_14._from_id,
                                                               0),
                                                              (Data.Maybe.isJust to_be_encoded_14._saved_out,
                                                               11),
                                                              (Data.Maybe.isJust to_be_encoded_14._imported,
                                                               7)];
                                      Data.Binary.put to_be_encoded_14._imported;
                                      Data.Binary.put to_be_encoded_14._saved_out;
                                      Data.Binary.put to_be_encoded_14._from_id;
                                      Data.Binary.put to_be_encoded_14._from_name;
                                      Data.Binary.put to_be_encoded_14._date;
                                      Data.Binary.put to_be_encoded_14._channel_post;
                                      Data.Binary.put to_be_encoded_14._post_author;
                                      Data.Binary.put to_be_encoded_14._saved_from_peer;
                                      Data.Binary.put to_be_encoded_14._saved_from_msg_id;
                                      Data.Binary.put to_be_encoded_14._saved_from_id;
                                      Data.Binary.put to_be_encoded_14._saved_from_name;
                                      Data.Binary.put to_be_encoded_14._saved_date;
                                      Data.Binary.put to_be_encoded_14._psa_type}}
data MessageFwdHeader = MessageFwdHeader !MessageFwdHeader'
data MessageFwdHeader'
    = MessageFwdHeader' {_imported :: !(Maybe True'),
                         _saved_out :: !(Maybe True'),
                         _from_id :: !(Maybe Peer),
                         _from_name :: !(Maybe String'),
                         _date :: !Int',
                         _channel_post :: !(Maybe Int'),
                         _post_author :: !(Maybe String'),
                         _saved_from_peer :: !(Maybe Peer),
                         _saved_from_msg_id :: !(Maybe Int'),
                         _saved_from_id :: !(Maybe Peer),
                         _saved_from_name :: !(Maybe String'),
                         _saved_date :: !(Maybe Int'),
                         _psa_type :: !(Maybe String')}
instance Data.Binary.Binary MessageFwdHeader
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1313731771 -> fmap MessageFwdHeader Data.Binary.get}};
           put (MessageFwdHeader tmp_1) = do {Data.Binary.Put.putWord32le 1313731771;
                                              Data.Binary.put tmp_1}}
instance Data.Binary.Binary MessageMediaContact'
    where {get = do {_phone_number_0 <- Data.Binary.get;
                     _first_name_1 <- Data.Binary.get;
                     _last_name_2 <- Data.Binary.get;
                     _vcard_3 <- Data.Binary.get;
                     _user_id_4 <- Data.Binary.get;
                     GHC.Base.pure (MessageMediaContact' _phone_number_0 _first_name_1 _last_name_2 _vcard_3 _user_id_4)};
           put to_be_encoded_5 = do {Data.Binary.put to_be_encoded_5._phone_number;
                                     Data.Binary.put to_be_encoded_5._first_name;
                                     Data.Binary.put to_be_encoded_5._last_name;
                                     Data.Binary.put to_be_encoded_5._vcard;
                                     Data.Binary.put to_be_encoded_5._user_id}}
instance Data.Binary.Binary MessageMediaDice'
    where {get = do {_value_0 <- Data.Binary.get;
                     _emoticon_1 <- Data.Binary.get;
                     GHC.Base.pure (MessageMediaDice' _value_0 _emoticon_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._value;
                                     Data.Binary.put to_be_encoded_2._emoticon}}
instance Data.Binary.Binary MessageMediaDocument'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _nopremium_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     _spoiler_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 4);
                     _video_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 6);
                     _round_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 7);
                     _voice_5 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 8);
                     _document_6 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _alt_document_7 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 5);
                     _ttl_seconds_8 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     GHC.Base.pure (MessageMediaDocument' _nopremium_1 _spoiler_2 _video_3 _round_4 _voice_5 _document_6 _alt_document_7 _ttl_seconds_8)};
           put to_be_encoded_9 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_9._ttl_seconds,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_9._alt_document,
                                                              5),
                                                             (Data.Maybe.isJust to_be_encoded_9._document,
                                                              0),
                                                             (Data.Maybe.isJust to_be_encoded_9._voice,
                                                              8),
                                                             (Data.Maybe.isJust to_be_encoded_9._round,
                                                              7),
                                                             (Data.Maybe.isJust to_be_encoded_9._video,
                                                              6),
                                                             (Data.Maybe.isJust to_be_encoded_9._spoiler,
                                                              4),
                                                             (Data.Maybe.isJust to_be_encoded_9._nopremium,
                                                              3)];
                                     Data.Binary.put to_be_encoded_9._nopremium;
                                     Data.Binary.put to_be_encoded_9._spoiler;
                                     Data.Binary.put to_be_encoded_9._video;
                                     Data.Binary.put to_be_encoded_9._round;
                                     Data.Binary.put to_be_encoded_9._voice;
                                     Data.Binary.put to_be_encoded_9._document;
                                     Data.Binary.put to_be_encoded_9._alt_document;
                                     Data.Binary.put to_be_encoded_9._ttl_seconds}}
instance Data.Binary.Binary MessageMediaEmpty'
    where {get = GHC.Base.pure MessageMediaEmpty';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary MessageMediaGame'
    where {get = do {_game_0 <- Data.Binary.get;
                     GHC.Base.pure (MessageMediaGame' _game_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._game}
instance Data.Binary.Binary MessageMediaGeo'
    where {get = do {_geo_0 <- Data.Binary.get;
                     GHC.Base.pure (MessageMediaGeo' _geo_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._geo}
instance Data.Binary.Binary MessageMediaGeoLive'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _geo_1 <- Data.Binary.get;
                     _heading_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _period_3 <- Data.Binary.get;
                     _proximity_notification_radius_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     GHC.Base.pure (MessageMediaGeoLive' _geo_1 _heading_2 _period_3 _proximity_notification_radius_4)};
           put to_be_encoded_5 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_5._proximity_notification_radius,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_5._heading,
                                                              0)];
                                     Data.Binary.put to_be_encoded_5._geo;
                                     Data.Binary.put to_be_encoded_5._heading;
                                     Data.Binary.put to_be_encoded_5._period;
                                     Data.Binary.put to_be_encoded_5._proximity_notification_radius}}
instance Data.Binary.Binary MessageMediaGiveaway'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _only_new_subscribers_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _winners_are_visible_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _channels_3 <- Data.Binary.get;
                     _countries_iso2_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _prize_description_5 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     _quantity_6 <- Data.Binary.get;
                     _months_7 <- Data.Binary.get;
                     _until_date_8 <- Data.Binary.get;
                     GHC.Base.pure (MessageMediaGiveaway' _only_new_subscribers_1 _winners_are_visible_2 _channels_3 _countries_iso2_4 _prize_description_5 _quantity_6 _months_7 _until_date_8)};
           put to_be_encoded_9 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_9._prize_description,
                                                              3),
                                                             (Data.Maybe.isJust to_be_encoded_9._countries_iso2,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_9._winners_are_visible,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_9._only_new_subscribers,
                                                              0)];
                                     Data.Binary.put to_be_encoded_9._only_new_subscribers;
                                     Data.Binary.put to_be_encoded_9._winners_are_visible;
                                     Data.Binary.put to_be_encoded_9._channels;
                                     Data.Binary.put to_be_encoded_9._countries_iso2;
                                     Data.Binary.put to_be_encoded_9._prize_description;
                                     Data.Binary.put to_be_encoded_9._quantity;
                                     Data.Binary.put to_be_encoded_9._months;
                                     Data.Binary.put to_be_encoded_9._until_date}}
instance Data.Binary.Binary MessageMediaGiveawayResults'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _only_new_subscribers_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _refunded_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _channel_id_3 <- Data.Binary.get;
                     _additional_peers_count_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     _launch_msg_id_5 <- Data.Binary.get;
                     _winners_count_6 <- Data.Binary.get;
                     _unclaimed_count_7 <- Data.Binary.get;
                     _winners_8 <- Data.Binary.get;
                     _months_9 <- Data.Binary.get;
                     _prize_description_10 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _until_date_11 <- Data.Binary.get;
                     GHC.Base.pure (MessageMediaGiveawayResults' _only_new_subscribers_1 _refunded_2 _channel_id_3 _additional_peers_count_4 _launch_msg_id_5 _winners_count_6 _unclaimed_count_7 _winners_8 _months_9 _prize_description_10 _until_date_11)};
           put to_be_encoded_12 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_12._prize_description,
                                                               1),
                                                              (Data.Maybe.isJust to_be_encoded_12._additional_peers_count,
                                                               3),
                                                              (Data.Maybe.isJust to_be_encoded_12._refunded,
                                                               2),
                                                              (Data.Maybe.isJust to_be_encoded_12._only_new_subscribers,
                                                               0)];
                                      Data.Binary.put to_be_encoded_12._only_new_subscribers;
                                      Data.Binary.put to_be_encoded_12._refunded;
                                      Data.Binary.put to_be_encoded_12._channel_id;
                                      Data.Binary.put to_be_encoded_12._additional_peers_count;
                                      Data.Binary.put to_be_encoded_12._launch_msg_id;
                                      Data.Binary.put to_be_encoded_12._winners_count;
                                      Data.Binary.put to_be_encoded_12._unclaimed_count;
                                      Data.Binary.put to_be_encoded_12._winners;
                                      Data.Binary.put to_be_encoded_12._months;
                                      Data.Binary.put to_be_encoded_12._prize_description;
                                      Data.Binary.put to_be_encoded_12._until_date}}
instance Data.Binary.Binary MessageMediaInvoice'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _shipping_address_requested_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _test_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     _title_3 <- Data.Binary.get;
                     _description_4 <- Data.Binary.get;
                     _photo_5 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _receipt_msg_id_6 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _currency_7 <- Data.Binary.get;
                     _total_amount_8 <- Data.Binary.get;
                     _start_param_9 <- Data.Binary.get;
                     _extended_media_10 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 4);
                     GHC.Base.pure (MessageMediaInvoice' _shipping_address_requested_1 _test_2 _title_3 _description_4 _photo_5 _receipt_msg_id_6 _currency_7 _total_amount_8 _start_param_9 _extended_media_10)};
           put to_be_encoded_11 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_11._extended_media,
                                                               4),
                                                              (Data.Maybe.isJust to_be_encoded_11._receipt_msg_id,
                                                               2),
                                                              (Data.Maybe.isJust to_be_encoded_11._photo,
                                                               0),
                                                              (Data.Maybe.isJust to_be_encoded_11._test,
                                                               3),
                                                              (Data.Maybe.isJust to_be_encoded_11._shipping_address_requested,
                                                               1)];
                                      Data.Binary.put to_be_encoded_11._shipping_address_requested;
                                      Data.Binary.put to_be_encoded_11._test;
                                      Data.Binary.put to_be_encoded_11._title;
                                      Data.Binary.put to_be_encoded_11._description;
                                      Data.Binary.put to_be_encoded_11._photo;
                                      Data.Binary.put to_be_encoded_11._receipt_msg_id;
                                      Data.Binary.put to_be_encoded_11._currency;
                                      Data.Binary.put to_be_encoded_11._total_amount;
                                      Data.Binary.put to_be_encoded_11._start_param;
                                      Data.Binary.put to_be_encoded_11._extended_media}}
instance Data.Binary.Binary MessageMediaPhoto'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _spoiler_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     _photo_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _ttl_seconds_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     GHC.Base.pure (MessageMediaPhoto' _spoiler_1 _photo_2 _ttl_seconds_3)};
           put to_be_encoded_4 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_4._ttl_seconds,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_4._photo,
                                                              0),
                                                             (Data.Maybe.isJust to_be_encoded_4._spoiler,
                                                              3)];
                                     Data.Binary.put to_be_encoded_4._spoiler;
                                     Data.Binary.put to_be_encoded_4._photo;
                                     Data.Binary.put to_be_encoded_4._ttl_seconds}}
instance Data.Binary.Binary MessageMediaPoll'
    where {get = do {_poll_0 <- Data.Binary.get;
                     _results_1 <- Data.Binary.get;
                     GHC.Base.pure (MessageMediaPoll' _poll_0 _results_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._poll;
                                     Data.Binary.put to_be_encoded_2._results}}
instance Data.Binary.Binary MessageMediaStory'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _via_mention_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _peer_2 <- Data.Binary.get;
                     _id_3 <- Data.Binary.get;
                     _story_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     GHC.Base.pure (MessageMediaStory' _via_mention_1 _peer_2 _id_3 _story_4)};
           put to_be_encoded_5 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_5._story,
                                                              0),
                                                             (Data.Maybe.isJust to_be_encoded_5._via_mention,
                                                              1)];
                                     Data.Binary.put to_be_encoded_5._via_mention;
                                     Data.Binary.put to_be_encoded_5._peer;
                                     Data.Binary.put to_be_encoded_5._id;
                                     Data.Binary.put to_be_encoded_5._story}}
instance Data.Binary.Binary MessageMediaUnsupported'
    where {get = GHC.Base.pure MessageMediaUnsupported';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary MessageMediaVenue'
    where {get = do {_geo_0 <- Data.Binary.get;
                     _title_1 <- Data.Binary.get;
                     _address_2 <- Data.Binary.get;
                     _provider_3 <- Data.Binary.get;
                     _venue_id_4 <- Data.Binary.get;
                     _venue_type_5 <- Data.Binary.get;
                     GHC.Base.pure (MessageMediaVenue' _geo_0 _title_1 _address_2 _provider_3 _venue_id_4 _venue_type_5)};
           put to_be_encoded_6 = do {Data.Binary.put to_be_encoded_6._geo;
                                     Data.Binary.put to_be_encoded_6._title;
                                     Data.Binary.put to_be_encoded_6._address;
                                     Data.Binary.put to_be_encoded_6._provider;
                                     Data.Binary.put to_be_encoded_6._venue_id;
                                     Data.Binary.put to_be_encoded_6._venue_type}}
instance Data.Binary.Binary MessageMediaWebPage'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _force_large_media_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _force_small_media_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _manual_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     _safe_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 4);
                     _webpage_5 <- Data.Binary.get;
                     GHC.Base.pure (MessageMediaWebPage' _force_large_media_1 _force_small_media_2 _manual_3 _safe_4 _webpage_5)};
           put to_be_encoded_6 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_6._safe,
                                                              4),
                                                             (Data.Maybe.isJust to_be_encoded_6._manual,
                                                              3),
                                                             (Data.Maybe.isJust to_be_encoded_6._force_small_media,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_6._force_large_media,
                                                              0)];
                                     Data.Binary.put to_be_encoded_6._force_large_media;
                                     Data.Binary.put to_be_encoded_6._force_small_media;
                                     Data.Binary.put to_be_encoded_6._manual;
                                     Data.Binary.put to_be_encoded_6._safe;
                                     Data.Binary.put to_be_encoded_6._webpage}}
data MessageMedia
    = MessageMediaContact !MessageMediaContact'
    | MessageMediaDice !MessageMediaDice'
    | MessageMediaDocument !MessageMediaDocument'
    | MessageMediaEmpty !MessageMediaEmpty'
    | MessageMediaGame !MessageMediaGame'
    | MessageMediaGeo !MessageMediaGeo'
    | MessageMediaGeoLive !MessageMediaGeoLive'
    | MessageMediaGiveaway !MessageMediaGiveaway'
    | MessageMediaGiveawayResults !MessageMediaGiveawayResults'
    | MessageMediaInvoice !MessageMediaInvoice'
    | MessageMediaPhoto !MessageMediaPhoto'
    | MessageMediaPoll !MessageMediaPoll'
    | MessageMediaStory !MessageMediaStory'
    | MessageMediaUnsupported !MessageMediaUnsupported'
    | MessageMediaVenue !MessageMediaVenue'
    | MessageMediaWebPage !MessageMediaWebPage'
data MessageMediaContact'
    = MessageMediaContact' {_phone_number :: !String',
                            _first_name :: !String',
                            _last_name :: !String',
                            _vcard :: !String',
                            _user_id :: !Long'}
data MessageMediaDice'
    = MessageMediaDice' {_value :: !Int', _emoticon :: !String'}
data MessageMediaDocument'
    = MessageMediaDocument' {_nopremium :: !(Maybe True'),
                             _spoiler :: !(Maybe True'),
                             _video :: !(Maybe True'),
                             _round :: !(Maybe True'),
                             _voice :: !(Maybe True'),
                             _document :: !(Maybe Document),
                             _alt_document :: !(Maybe Document),
                             _ttl_seconds :: !(Maybe Int')}
data MessageMediaEmpty' = MessageMediaEmpty' {}
data MessageMediaGame' = MessageMediaGame' {_game :: !Game}
data MessageMediaGeo' = MessageMediaGeo' {_geo :: !GeoPoint}
data MessageMediaGeoLive'
    = MessageMediaGeoLive' {_geo :: !GeoPoint,
                            _heading :: !(Maybe Int'),
                            _period :: !Int',
                            _proximity_notification_radius :: !(Maybe Int')}
data MessageMediaGiveaway'
    = MessageMediaGiveaway' {_only_new_subscribers :: !(Maybe True'),
                             _winners_are_visible :: !(Maybe True'),
                             _channels :: !(Vector Long'),
                             _countries_iso2 :: !(Maybe (Vector String')),
                             _prize_description :: !(Maybe String'),
                             _quantity :: !Int',
                             _months :: !Int',
                             _until_date :: !Int'}
data MessageMediaGiveawayResults'
    = MessageMediaGiveawayResults' {_only_new_subscribers :: !(Maybe True'),
                                    _refunded :: !(Maybe True'),
                                    _channel_id :: !Long',
                                    _additional_peers_count :: !(Maybe Int'),
                                    _launch_msg_id :: !Int',
                                    _winners_count :: !Int',
                                    _unclaimed_count :: !Int',
                                    _winners :: !(Vector Long'),
                                    _months :: !Int',
                                    _prize_description :: !(Maybe String'),
                                    _until_date :: !Int'}
data MessageMediaInvoice'
    = MessageMediaInvoice' {_shipping_address_requested :: !(Maybe True'),
                            _test :: !(Maybe True'),
                            _title :: !String',
                            _description :: !String',
                            _photo :: !(Maybe WebDocument),
                            _receipt_msg_id :: !(Maybe Int'),
                            _currency :: !String',
                            _total_amount :: !Long',
                            _start_param :: !String',
                            _extended_media :: !(Maybe MessageExtendedMedia)}
data MessageMediaPhoto'
    = MessageMediaPhoto' {_spoiler :: !(Maybe True'),
                          _photo :: !(Maybe Photo),
                          _ttl_seconds :: !(Maybe Int')}
data MessageMediaPoll'
    = MessageMediaPoll' {_poll :: !Poll, _results :: !PollResults}
data MessageMediaStory'
    = MessageMediaStory' {_via_mention :: !(Maybe True'),
                          _peer :: !Peer,
                          _id :: !Int',
                          _story :: !(Maybe StoryItem)}
data MessageMediaUnsupported' = MessageMediaUnsupported' {}
data MessageMediaVenue'
    = MessageMediaVenue' {_geo :: !GeoPoint,
                          _title :: !String',
                          _address :: !String',
                          _provider :: !String',
                          _venue_id :: !String',
                          _venue_type :: !String'}
data MessageMediaWebPage'
    = MessageMediaWebPage' {_force_large_media :: !(Maybe True'),
                            _force_small_media :: !(Maybe True'),
                            _manual :: !(Maybe True'),
                            _safe :: !(Maybe True'),
                            _webpage :: !WebPage}
instance Data.Binary.Binary MessageMedia
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1882335561 -> fmap MessageMediaContact Data.Binary.get;
                      1065280907 -> fmap MessageMediaDice Data.Binary.get;
                      1291114285 -> fmap MessageMediaDocument Data.Binary.get;
                      1038967584 -> fmap MessageMediaEmpty Data.Binary.get;
                      4256272392 -> fmap MessageMediaGame Data.Binary.get;
                      1457575028 -> fmap MessageMediaGeo Data.Binary.get;
                      3108030054 -> fmap MessageMediaGeoLive Data.Binary.get;
                      3668805040 -> fmap MessageMediaGiveaway Data.Binary.get;
                      3331919976 -> fmap MessageMediaGiveawayResults Data.Binary.get;
                      4138027219 -> fmap MessageMediaInvoice Data.Binary.get;
                      1766936791 -> fmap MessageMediaPhoto Data.Binary.get;
                      1272375192 -> fmap MessageMediaPoll Data.Binary.get;
                      1758159491 -> fmap MessageMediaStory Data.Binary.get;
                      2676290718 -> fmap MessageMediaUnsupported Data.Binary.get;
                      784356159 -> fmap MessageMediaVenue Data.Binary.get;
                      3723562043 -> fmap MessageMediaWebPage Data.Binary.get}};
           put (MessageMediaContact tmp_1) = do {Data.Binary.Put.putWord32le 1882335561;
                                                 Data.Binary.put tmp_1};
           put (MessageMediaDice tmp_2) = do {Data.Binary.Put.putWord32le 1065280907;
                                              Data.Binary.put tmp_2};
           put (MessageMediaDocument tmp_3) = do {Data.Binary.Put.putWord32le 1291114285;
                                                  Data.Binary.put tmp_3};
           put (MessageMediaEmpty tmp_4) = do {Data.Binary.Put.putWord32le 1038967584;
                                               Data.Binary.put tmp_4};
           put (MessageMediaGame tmp_5) = do {Data.Binary.Put.putWord32le 4256272392;
                                              Data.Binary.put tmp_5};
           put (MessageMediaGeo tmp_6) = do {Data.Binary.Put.putWord32le 1457575028;
                                             Data.Binary.put tmp_6};
           put (MessageMediaGeoLive tmp_7) = do {Data.Binary.Put.putWord32le 3108030054;
                                                 Data.Binary.put tmp_7};
           put (MessageMediaGiveaway tmp_8) = do {Data.Binary.Put.putWord32le 3668805040;
                                                  Data.Binary.put tmp_8};
           put (MessageMediaGiveawayResults tmp_9) = do {Data.Binary.Put.putWord32le 3331919976;
                                                         Data.Binary.put tmp_9};
           put (MessageMediaInvoice tmp_10) = do {Data.Binary.Put.putWord32le 4138027219;
                                                  Data.Binary.put tmp_10};
           put (MessageMediaPhoto tmp_11) = do {Data.Binary.Put.putWord32le 1766936791;
                                                Data.Binary.put tmp_11};
           put (MessageMediaPoll tmp_12) = do {Data.Binary.Put.putWord32le 1272375192;
                                               Data.Binary.put tmp_12};
           put (MessageMediaStory tmp_13) = do {Data.Binary.Put.putWord32le 1758159491;
                                                Data.Binary.put tmp_13};
           put (MessageMediaUnsupported tmp_14) = do {Data.Binary.Put.putWord32le 2676290718;
                                                      Data.Binary.put tmp_14};
           put (MessageMediaVenue tmp_15) = do {Data.Binary.Put.putWord32le 784356159;
                                                Data.Binary.put tmp_15};
           put (MessageMediaWebPage tmp_16) = do {Data.Binary.Put.putWord32le 3723562043;
                                                  Data.Binary.put tmp_16}}
instance Data.Binary.Binary MessagePeerReaction'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _big_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _unread_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _my_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _peer_id_4 <- Data.Binary.get;
                     _date_5 <- Data.Binary.get;
                     _reaction_6 <- Data.Binary.get;
                     GHC.Base.pure (MessagePeerReaction' _big_1 _unread_2 _my_3 _peer_id_4 _date_5 _reaction_6)};
           put to_be_encoded_7 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_7._my,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_7._unread,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_7._big,
                                                              0)];
                                     Data.Binary.put to_be_encoded_7._big;
                                     Data.Binary.put to_be_encoded_7._unread;
                                     Data.Binary.put to_be_encoded_7._my;
                                     Data.Binary.put to_be_encoded_7._peer_id;
                                     Data.Binary.put to_be_encoded_7._date;
                                     Data.Binary.put to_be_encoded_7._reaction}}
data MessagePeerReaction
    = MessagePeerReaction !MessagePeerReaction'
data MessagePeerReaction'
    = MessagePeerReaction' {_big :: !(Maybe True'),
                            _unread :: !(Maybe True'),
                            _my :: !(Maybe True'),
                            _peer_id :: !Peer,
                            _date :: !Int',
                            _reaction :: !Reaction}
instance Data.Binary.Binary MessagePeerReaction
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2356786748 -> fmap MessagePeerReaction Data.Binary.get}};
           put (MessagePeerReaction tmp_1) = do {Data.Binary.Put.putWord32le 2356786748;
                                                 Data.Binary.put tmp_1}}
instance Data.Binary.Binary MessagePeerVote'
    where {get = do {_peer_0 <- Data.Binary.get;
                     _option_1 <- Data.Binary.get;
                     _date_2 <- Data.Binary.get;
                     GHC.Base.pure (MessagePeerVote' _peer_0 _option_1 _date_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._peer;
                                     Data.Binary.put to_be_encoded_3._option;
                                     Data.Binary.put to_be_encoded_3._date}}
instance Data.Binary.Binary MessagePeerVoteInputOption'
    where {get = do {_peer_0 <- Data.Binary.get;
                     _date_1 <- Data.Binary.get;
                     GHC.Base.pure (MessagePeerVoteInputOption' _peer_0 _date_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._peer;
                                     Data.Binary.put to_be_encoded_2._date}}
instance Data.Binary.Binary MessagePeerVoteMultiple'
    where {get = do {_peer_0 <- Data.Binary.get;
                     _options_1 <- Data.Binary.get;
                     _date_2 <- Data.Binary.get;
                     GHC.Base.pure (MessagePeerVoteMultiple' _peer_0 _options_1 _date_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._peer;
                                     Data.Binary.put to_be_encoded_3._options;
                                     Data.Binary.put to_be_encoded_3._date}}
data MessagePeerVote
    = MessagePeerVote !MessagePeerVote'
    | MessagePeerVoteInputOption !MessagePeerVoteInputOption'
    | MessagePeerVoteMultiple !MessagePeerVoteMultiple'
data MessagePeerVote'
    = MessagePeerVote' {_peer :: !Peer,
                        _option :: !Bytes',
                        _date :: !Int'}
data MessagePeerVoteInputOption'
    = MessagePeerVoteInputOption' {_peer :: !Peer, _date :: !Int'}
data MessagePeerVoteMultiple'
    = MessagePeerVoteMultiple' {_peer :: !Peer,
                                _options :: !(Vector Bytes'),
                                _date :: !Int'}
instance Data.Binary.Binary MessagePeerVote
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3066834268 -> fmap MessagePeerVote Data.Binary.get;
                      1959634180 -> fmap MessagePeerVoteInputOption Data.Binary.get;
                      1177089766 -> fmap MessagePeerVoteMultiple Data.Binary.get}};
           put (MessagePeerVote tmp_1) = do {Data.Binary.Put.putWord32le 3066834268;
                                             Data.Binary.put tmp_1};
           put (MessagePeerVoteInputOption tmp_2) = do {Data.Binary.Put.putWord32le 1959634180;
                                                        Data.Binary.put tmp_2};
           put (MessagePeerVoteMultiple tmp_3) = do {Data.Binary.Put.putWord32le 1177089766;
                                                     Data.Binary.put tmp_3}}
instance Data.Binary.Binary MessageRange'
    where {get = do {_min_id_0 <- Data.Binary.get;
                     _max_id_1 <- Data.Binary.get;
                     GHC.Base.pure (MessageRange' _min_id_0 _max_id_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._min_id;
                                     Data.Binary.put to_be_encoded_2._max_id}}
data MessageRange = MessageRange !MessageRange'
data MessageRange'
    = MessageRange' {_min_id :: !Int', _max_id :: !Int'}
instance Data.Binary.Binary MessageRange
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {182649427 -> fmap MessageRange Data.Binary.get}};
           put (MessageRange tmp_1) = do {Data.Binary.Put.putWord32le 182649427;
                                          Data.Binary.put tmp_1}}
instance Data.Binary.Binary MessageReactions'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _min_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _can_see_list_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _results_3 <- Data.Binary.get;
                     _recent_reactions_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     GHC.Base.pure (MessageReactions' _min_1 _can_see_list_2 _results_3 _recent_reactions_4)};
           put to_be_encoded_5 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_5._recent_reactions,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_5._can_see_list,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_5._min,
                                                              0)];
                                     Data.Binary.put to_be_encoded_5._min;
                                     Data.Binary.put to_be_encoded_5._can_see_list;
                                     Data.Binary.put to_be_encoded_5._results;
                                     Data.Binary.put to_be_encoded_5._recent_reactions}}
data MessageReactions = MessageReactions !MessageReactions'
data MessageReactions'
    = MessageReactions' {_min :: !(Maybe True'),
                         _can_see_list :: !(Maybe True'),
                         _results :: !(Vector ReactionCount),
                         _recent_reactions :: !(Maybe (Vector MessagePeerReaction))}
instance Data.Binary.Binary MessageReactions
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1328256121 -> fmap MessageReactions Data.Binary.get}};
           put (MessageReactions tmp_1) = do {Data.Binary.Put.putWord32le 1328256121;
                                              Data.Binary.put tmp_1}}
instance Data.Binary.Binary MessageReplies'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _comments_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _replies_2 <- Data.Binary.get;
                     _replies_pts_3 <- Data.Binary.get;
                     _recent_repliers_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _channel_id_5 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _max_id_6 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _read_max_id_7 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     GHC.Base.pure (MessageReplies' _comments_1 _replies_2 _replies_pts_3 _recent_repliers_4 _channel_id_5 _max_id_6 _read_max_id_7)};
           put to_be_encoded_8 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_8._read_max_id,
                                                              3),
                                                             (Data.Maybe.isJust to_be_encoded_8._max_id,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_8._channel_id,
                                                              0),
                                                             (Data.Maybe.isJust to_be_encoded_8._recent_repliers,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_8._comments,
                                                              0)];
                                     Data.Binary.put to_be_encoded_8._comments;
                                     Data.Binary.put to_be_encoded_8._replies;
                                     Data.Binary.put to_be_encoded_8._replies_pts;
                                     Data.Binary.put to_be_encoded_8._recent_repliers;
                                     Data.Binary.put to_be_encoded_8._channel_id;
                                     Data.Binary.put to_be_encoded_8._max_id;
                                     Data.Binary.put to_be_encoded_8._read_max_id}}
data MessageReplies = MessageReplies !MessageReplies'
data MessageReplies'
    = MessageReplies' {_comments :: !(Maybe True'),
                       _replies :: !Int',
                       _replies_pts :: !Int',
                       _recent_repliers :: !(Maybe (Vector Peer)),
                       _channel_id :: !(Maybe Long'),
                       _max_id :: !(Maybe Int'),
                       _read_max_id :: !(Maybe Int')}
instance Data.Binary.Binary MessageReplies
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2211844034 -> fmap MessageReplies Data.Binary.get}};
           put (MessageReplies tmp_1) = do {Data.Binary.Put.putWord32le 2211844034;
                                            Data.Binary.put tmp_1}}
instance Data.Binary.Binary MessageReplyHeader'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _reply_to_scheduled_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _forum_topic_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     _quote_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 9);
                     _reply_to_msg_id_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 4);
                     _reply_to_peer_id_5 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _reply_from_6 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 5);
                     _reply_media_7 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 8);
                     _reply_to_top_id_8 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _quote_text_9 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 6);
                     _quote_entities_10 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 7);
                     _quote_offset_11 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 10);
                     GHC.Base.pure (MessageReplyHeader' _reply_to_scheduled_1 _forum_topic_2 _quote_3 _reply_to_msg_id_4 _reply_to_peer_id_5 _reply_from_6 _reply_media_7 _reply_to_top_id_8 _quote_text_9 _quote_entities_10 _quote_offset_11)};
           put to_be_encoded_12 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_12._quote_offset,
                                                               10),
                                                              (Data.Maybe.isJust to_be_encoded_12._quote_entities,
                                                               7),
                                                              (Data.Maybe.isJust to_be_encoded_12._quote_text,
                                                               6),
                                                              (Data.Maybe.isJust to_be_encoded_12._reply_to_top_id,
                                                               1),
                                                              (Data.Maybe.isJust to_be_encoded_12._reply_media,
                                                               8),
                                                              (Data.Maybe.isJust to_be_encoded_12._reply_from,
                                                               5),
                                                              (Data.Maybe.isJust to_be_encoded_12._reply_to_peer_id,
                                                               0),
                                                              (Data.Maybe.isJust to_be_encoded_12._reply_to_msg_id,
                                                               4),
                                                              (Data.Maybe.isJust to_be_encoded_12._quote,
                                                               9),
                                                              (Data.Maybe.isJust to_be_encoded_12._forum_topic,
                                                               3),
                                                              (Data.Maybe.isJust to_be_encoded_12._reply_to_scheduled,
                                                               2)];
                                      Data.Binary.put to_be_encoded_12._reply_to_scheduled;
                                      Data.Binary.put to_be_encoded_12._forum_topic;
                                      Data.Binary.put to_be_encoded_12._quote;
                                      Data.Binary.put to_be_encoded_12._reply_to_msg_id;
                                      Data.Binary.put to_be_encoded_12._reply_to_peer_id;
                                      Data.Binary.put to_be_encoded_12._reply_from;
                                      Data.Binary.put to_be_encoded_12._reply_media;
                                      Data.Binary.put to_be_encoded_12._reply_to_top_id;
                                      Data.Binary.put to_be_encoded_12._quote_text;
                                      Data.Binary.put to_be_encoded_12._quote_entities;
                                      Data.Binary.put to_be_encoded_12._quote_offset}}
instance Data.Binary.Binary MessageReplyStoryHeader'
    where {get = do {_user_id_0 <- Data.Binary.get;
                     _story_id_1 <- Data.Binary.get;
                     GHC.Base.pure (MessageReplyStoryHeader' _user_id_0 _story_id_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._user_id;
                                     Data.Binary.put to_be_encoded_2._story_id}}
data MessageReplyHeader
    = MessageReplyHeader !MessageReplyHeader'
    | MessageReplyStoryHeader !MessageReplyStoryHeader'
data MessageReplyHeader'
    = MessageReplyHeader' {_reply_to_scheduled :: !(Maybe True'),
                           _forum_topic :: !(Maybe True'),
                           _quote :: !(Maybe True'),
                           _reply_to_msg_id :: !(Maybe Int'),
                           _reply_to_peer_id :: !(Maybe Peer),
                           _reply_from :: !(Maybe MessageFwdHeader),
                           _reply_media :: !(Maybe MessageMedia),
                           _reply_to_top_id :: !(Maybe Int'),
                           _quote_text :: !(Maybe String'),
                           _quote_entities :: !(Maybe (Vector MessageEntity)),
                           _quote_offset :: !(Maybe Int')}
data MessageReplyStoryHeader'
    = MessageReplyStoryHeader' {_user_id :: !Long', _story_id :: !Int'}
instance Data.Binary.Binary MessageReplyHeader
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2948336091 -> fmap MessageReplyHeader Data.Binary.get;
                      2627256257 -> fmap MessageReplyStoryHeader Data.Binary.get}};
           put (MessageReplyHeader tmp_1) = do {Data.Binary.Put.putWord32le 2948336091;
                                                Data.Binary.put tmp_1};
           put (MessageReplyStoryHeader tmp_2) = do {Data.Binary.Put.putWord32le 2627256257;
                                                     Data.Binary.put tmp_2}}
instance Data.Binary.Binary MessageViews'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _views_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _forwards_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _replies_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     GHC.Base.pure (MessageViews' _views_1 _forwards_2 _replies_3)};
           put to_be_encoded_4 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_4._replies,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_4._forwards,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_4._views,
                                                              0)];
                                     Data.Binary.put to_be_encoded_4._views;
                                     Data.Binary.put to_be_encoded_4._forwards;
                                     Data.Binary.put to_be_encoded_4._replies}}
data MessageViews = MessageViews !MessageViews'
data MessageViews'
    = MessageViews' {_views :: !(Maybe Int'),
                     _forwards :: !(Maybe Int'),
                     _replies :: !(Maybe MessageReplies)}
instance Data.Binary.Binary MessageViews
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1163625789 -> fmap MessageViews Data.Binary.get}};
           put (MessageViews tmp_1) = do {Data.Binary.Put.putWord32le 1163625789;
                                          Data.Binary.put tmp_1}}
instance Data.Binary.Binary InputMessagesFilterChatPhotos'
    where {get = GHC.Base.pure InputMessagesFilterChatPhotos';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary InputMessagesFilterContacts'
    where {get = GHC.Base.pure InputMessagesFilterContacts';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary InputMessagesFilterDocument'
    where {get = GHC.Base.pure InputMessagesFilterDocument';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary InputMessagesFilterEmpty'
    where {get = GHC.Base.pure InputMessagesFilterEmpty';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary InputMessagesFilterGeo'
    where {get = GHC.Base.pure InputMessagesFilterGeo';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary InputMessagesFilterGif'
    where {get = GHC.Base.pure InputMessagesFilterGif';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary InputMessagesFilterMusic'
    where {get = GHC.Base.pure InputMessagesFilterMusic';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary InputMessagesFilterMyMentions'
    where {get = GHC.Base.pure InputMessagesFilterMyMentions';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary InputMessagesFilterPhoneCalls'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _missed_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     GHC.Base.pure (InputMessagesFilterPhoneCalls' _missed_1)};
           put to_be_encoded_2 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_2._missed,
                                                              0)];
                                     Data.Binary.put to_be_encoded_2._missed}}
instance Data.Binary.Binary InputMessagesFilterPhotoVideo'
    where {get = GHC.Base.pure InputMessagesFilterPhotoVideo';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary InputMessagesFilterPhotos'
    where {get = GHC.Base.pure InputMessagesFilterPhotos';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary InputMessagesFilterPinned'
    where {get = GHC.Base.pure InputMessagesFilterPinned';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary InputMessagesFilterRoundVideo'
    where {get = GHC.Base.pure InputMessagesFilterRoundVideo';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary InputMessagesFilterRoundVoice'
    where {get = GHC.Base.pure InputMessagesFilterRoundVoice';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary InputMessagesFilterUrl'
    where {get = GHC.Base.pure InputMessagesFilterUrl';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary InputMessagesFilterVideo'
    where {get = GHC.Base.pure InputMessagesFilterVideo';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary InputMessagesFilterVoice'
    where {get = GHC.Base.pure InputMessagesFilterVoice';
           put to_be_encoded_0 = do GHC.Base.pure ()}
data MessagesFilter
    = InputMessagesFilterChatPhotos !InputMessagesFilterChatPhotos'
    | InputMessagesFilterContacts !InputMessagesFilterContacts'
    | InputMessagesFilterDocument !InputMessagesFilterDocument'
    | InputMessagesFilterEmpty !InputMessagesFilterEmpty'
    | InputMessagesFilterGeo !InputMessagesFilterGeo'
    | InputMessagesFilterGif !InputMessagesFilterGif'
    | InputMessagesFilterMusic !InputMessagesFilterMusic'
    | InputMessagesFilterMyMentions !InputMessagesFilterMyMentions'
    | InputMessagesFilterPhoneCalls !InputMessagesFilterPhoneCalls'
    | InputMessagesFilterPhotoVideo !InputMessagesFilterPhotoVideo'
    | InputMessagesFilterPhotos !InputMessagesFilterPhotos'
    | InputMessagesFilterPinned !InputMessagesFilterPinned'
    | InputMessagesFilterRoundVideo !InputMessagesFilterRoundVideo'
    | InputMessagesFilterRoundVoice !InputMessagesFilterRoundVoice'
    | InputMessagesFilterUrl !InputMessagesFilterUrl'
    | InputMessagesFilterVideo !InputMessagesFilterVideo'
    | InputMessagesFilterVoice !InputMessagesFilterVoice'
data InputMessagesFilterChatPhotos'
    = InputMessagesFilterChatPhotos' {}
data InputMessagesFilterContacts' = InputMessagesFilterContacts' {}
data InputMessagesFilterDocument' = InputMessagesFilterDocument' {}
data InputMessagesFilterEmpty' = InputMessagesFilterEmpty' {}
data InputMessagesFilterGeo' = InputMessagesFilterGeo' {}
data InputMessagesFilterGif' = InputMessagesFilterGif' {}
data InputMessagesFilterMusic' = InputMessagesFilterMusic' {}
data InputMessagesFilterMyMentions'
    = InputMessagesFilterMyMentions' {}
data InputMessagesFilterPhoneCalls'
    = InputMessagesFilterPhoneCalls' {_missed :: !(Maybe True')}
data InputMessagesFilterPhotoVideo'
    = InputMessagesFilterPhotoVideo' {}
data InputMessagesFilterPhotos' = InputMessagesFilterPhotos' {}
data InputMessagesFilterPinned' = InputMessagesFilterPinned' {}
data InputMessagesFilterRoundVideo'
    = InputMessagesFilterRoundVideo' {}
data InputMessagesFilterRoundVoice'
    = InputMessagesFilterRoundVoice' {}
data InputMessagesFilterUrl' = InputMessagesFilterUrl' {}
data InputMessagesFilterVideo' = InputMessagesFilterVideo' {}
data InputMessagesFilterVoice' = InputMessagesFilterVoice' {}
instance Data.Binary.Binary MessagesFilter
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {975236280 -> fmap InputMessagesFilterChatPhotos Data.Binary.get;
                      3764575107 -> fmap InputMessagesFilterContacts Data.Binary.get;
                      2665345416 -> fmap InputMessagesFilterDocument Data.Binary.get;
                      1474492012 -> fmap InputMessagesFilterEmpty Data.Binary.get;
                      3875695885 -> fmap InputMessagesFilterGeo Data.Binary.get;
                      4291323271 -> fmap InputMessagesFilterGif Data.Binary.get;
                      928101534 -> fmap InputMessagesFilterMusic Data.Binary.get;
                      3254314650 -> fmap InputMessagesFilterMyMentions Data.Binary.get;
                      2160695144 -> fmap InputMessagesFilterPhoneCalls Data.Binary.get;
                      1458172132 -> fmap InputMessagesFilterPhotoVideo Data.Binary.get;
                      2517214492 -> fmap InputMessagesFilterPhotos Data.Binary.get;
                      464520273 -> fmap InputMessagesFilterPinned Data.Binary.get;
                      3041516115 -> fmap InputMessagesFilterRoundVideo Data.Binary.get;
                      2054952868 -> fmap InputMessagesFilterRoundVoice Data.Binary.get;
                      2129714567 -> fmap InputMessagesFilterUrl Data.Binary.get;
                      2680163941 -> fmap InputMessagesFilterVideo Data.Binary.get;
                      1358283666 -> fmap InputMessagesFilterVoice Data.Binary.get}};
           put (InputMessagesFilterChatPhotos tmp_1) = do {Data.Binary.Put.putWord32le 975236280;
                                                           Data.Binary.put tmp_1};
           put (InputMessagesFilterContacts tmp_2) = do {Data.Binary.Put.putWord32le 3764575107;
                                                         Data.Binary.put tmp_2};
           put (InputMessagesFilterDocument tmp_3) = do {Data.Binary.Put.putWord32le 2665345416;
                                                         Data.Binary.put tmp_3};
           put (InputMessagesFilterEmpty tmp_4) = do {Data.Binary.Put.putWord32le 1474492012;
                                                      Data.Binary.put tmp_4};
           put (InputMessagesFilterGeo tmp_5) = do {Data.Binary.Put.putWord32le 3875695885;
                                                    Data.Binary.put tmp_5};
           put (InputMessagesFilterGif tmp_6) = do {Data.Binary.Put.putWord32le 4291323271;
                                                    Data.Binary.put tmp_6};
           put (InputMessagesFilterMusic tmp_7) = do {Data.Binary.Put.putWord32le 928101534;
                                                      Data.Binary.put tmp_7};
           put (InputMessagesFilterMyMentions tmp_8) = do {Data.Binary.Put.putWord32le 3254314650;
                                                           Data.Binary.put tmp_8};
           put (InputMessagesFilterPhoneCalls tmp_9) = do {Data.Binary.Put.putWord32le 2160695144;
                                                           Data.Binary.put tmp_9};
           put (InputMessagesFilterPhotoVideo tmp_10) = do {Data.Binary.Put.putWord32le 1458172132;
                                                            Data.Binary.put tmp_10};
           put (InputMessagesFilterPhotos tmp_11) = do {Data.Binary.Put.putWord32le 2517214492;
                                                        Data.Binary.put tmp_11};
           put (InputMessagesFilterPinned tmp_12) = do {Data.Binary.Put.putWord32le 464520273;
                                                        Data.Binary.put tmp_12};
           put (InputMessagesFilterRoundVideo tmp_13) = do {Data.Binary.Put.putWord32le 3041516115;
                                                            Data.Binary.put tmp_13};
           put (InputMessagesFilterRoundVoice tmp_14) = do {Data.Binary.Put.putWord32le 2054952868;
                                                            Data.Binary.put tmp_14};
           put (InputMessagesFilterUrl tmp_15) = do {Data.Binary.Put.putWord32le 2129714567;
                                                     Data.Binary.put tmp_15};
           put (InputMessagesFilterVideo tmp_16) = do {Data.Binary.Put.putWord32le 2680163941;
                                                       Data.Binary.put tmp_16};
           put (InputMessagesFilterVoice tmp_17) = do {Data.Binary.Put.putWord32le 1358283666;
                                                       Data.Binary.put tmp_17}}
instance Data.Binary.Binary MyBoost'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _slot_1 <- Data.Binary.get;
                     _peer_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _date_3 <- Data.Binary.get;
                     _expires_4 <- Data.Binary.get;
                     _cooldown_until_date_5 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     GHC.Base.pure (MyBoost' _slot_1 _peer_2 _date_3 _expires_4 _cooldown_until_date_5)};
           put to_be_encoded_6 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_6._cooldown_until_date,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_6._peer,
                                                              0)];
                                     Data.Binary.put to_be_encoded_6._slot;
                                     Data.Binary.put to_be_encoded_6._peer;
                                     Data.Binary.put to_be_encoded_6._date;
                                     Data.Binary.put to_be_encoded_6._expires;
                                     Data.Binary.put to_be_encoded_6._cooldown_until_date}}
data MyBoost = MyBoost !MyBoost'
data MyBoost'
    = MyBoost' {_slot :: !Int',
                _peer :: !(Maybe Peer),
                _date :: !Int',
                _expires :: !Int',
                _cooldown_until_date :: !(Maybe Int')}
instance Data.Binary.Binary MyBoost
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3293069660 -> fmap MyBoost Data.Binary.get}};
           put (MyBoost tmp_1) = do {Data.Binary.Put.putWord32le 3293069660;
                                     Data.Binary.put tmp_1}}
instance Data.Binary.Binary NearestDc'
    where {get = do {_country_0 <- Data.Binary.get;
                     _this_dc_1 <- Data.Binary.get;
                     _nearest_dc_2 <- Data.Binary.get;
                     GHC.Base.pure (NearestDc' _country_0 _this_dc_1 _nearest_dc_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._country;
                                     Data.Binary.put to_be_encoded_3._this_dc;
                                     Data.Binary.put to_be_encoded_3._nearest_dc}}
data NearestDc = NearestDc !NearestDc'
data NearestDc'
    = NearestDc' {_country :: !String',
                  _this_dc :: !Int',
                  _nearest_dc :: !Int'}
instance Data.Binary.Binary NearestDc
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2384074613 -> fmap NearestDc Data.Binary.get}};
           put (NearestDc tmp_1) = do {Data.Binary.Put.putWord32le 2384074613;
                                       Data.Binary.put tmp_1}}
instance Data.Binary.Binary NotificationSoundDefault'
    where {get = GHC.Base.pure NotificationSoundDefault';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary NotificationSoundLocal'
    where {get = do {_title_0 <- Data.Binary.get;
                     _data_1 <- Data.Binary.get;
                     GHC.Base.pure (NotificationSoundLocal' _title_0 _data_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._title;
                                     Data.Binary.put to_be_encoded_2._data}}
instance Data.Binary.Binary NotificationSoundNone'
    where {get = GHC.Base.pure NotificationSoundNone';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary NotificationSoundRingtone'
    where {get = do {_id_0 <- Data.Binary.get;
                     GHC.Base.pure (NotificationSoundRingtone' _id_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._id}
data NotificationSound
    = NotificationSoundDefault !NotificationSoundDefault'
    | NotificationSoundLocal !NotificationSoundLocal'
    | NotificationSoundNone !NotificationSoundNone'
    | NotificationSoundRingtone !NotificationSoundRingtone'
data NotificationSoundDefault' = NotificationSoundDefault' {}
data NotificationSoundLocal'
    = NotificationSoundLocal' {_title :: !String', _data :: !String'}
data NotificationSoundNone' = NotificationSoundNone' {}
data NotificationSoundRingtone'
    = NotificationSoundRingtone' {_id :: !Long'}
instance Data.Binary.Binary NotificationSound
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2548612798 -> fmap NotificationSoundDefault Data.Binary.get;
                      2198575844 -> fmap NotificationSoundLocal Data.Binary.get;
                      1863070943 -> fmap NotificationSoundNone Data.Binary.get;
                      4285300809 -> fmap NotificationSoundRingtone Data.Binary.get}};
           put (NotificationSoundDefault tmp_1) = do {Data.Binary.Put.putWord32le 2548612798;
                                                      Data.Binary.put tmp_1};
           put (NotificationSoundLocal tmp_2) = do {Data.Binary.Put.putWord32le 2198575844;
                                                    Data.Binary.put tmp_2};
           put (NotificationSoundNone tmp_3) = do {Data.Binary.Put.putWord32le 1863070943;
                                                   Data.Binary.put tmp_3};
           put (NotificationSoundRingtone tmp_4) = do {Data.Binary.Put.putWord32le 4285300809;
                                                       Data.Binary.put tmp_4}}
instance Data.Binary.Binary NotifyBroadcasts'
    where {get = GHC.Base.pure NotifyBroadcasts';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary NotifyChats'
    where {get = GHC.Base.pure NotifyChats';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary NotifyForumTopic'
    where {get = do {_peer_0 <- Data.Binary.get;
                     _top_msg_id_1 <- Data.Binary.get;
                     GHC.Base.pure (NotifyForumTopic' _peer_0 _top_msg_id_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._peer;
                                     Data.Binary.put to_be_encoded_2._top_msg_id}}
instance Data.Binary.Binary NotifyPeer'
    where {get = do {_peer_0 <- Data.Binary.get;
                     GHC.Base.pure (NotifyPeer' _peer_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._peer}
instance Data.Binary.Binary NotifyUsers'
    where {get = GHC.Base.pure NotifyUsers';
           put to_be_encoded_0 = do GHC.Base.pure ()}
data NotifyPeer
    = NotifyBroadcasts !NotifyBroadcasts'
    | NotifyChats !NotifyChats'
    | NotifyForumTopic !NotifyForumTopic'
    | NotifyPeer !NotifyPeer'
    | NotifyUsers !NotifyUsers'
data NotifyBroadcasts' = NotifyBroadcasts' {}
data NotifyChats' = NotifyChats' {}
data NotifyForumTopic'
    = NotifyForumTopic' {_peer :: !Peer, _top_msg_id :: !Int'}
data NotifyPeer' = NotifyPeer' {_peer :: !Peer}
data NotifyUsers' = NotifyUsers' {}
instance Data.Binary.Binary NotifyPeer
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3591563503 -> fmap NotifyBroadcasts Data.Binary.get;
                      3221737155 -> fmap NotifyChats Data.Binary.get;
                      577659656 -> fmap NotifyForumTopic Data.Binary.get;
                      2681474008 -> fmap NotifyPeer Data.Binary.get;
                      3033021260 -> fmap NotifyUsers Data.Binary.get}};
           put (NotifyBroadcasts tmp_1) = do {Data.Binary.Put.putWord32le 3591563503;
                                              Data.Binary.put tmp_1};
           put (NotifyChats tmp_2) = do {Data.Binary.Put.putWord32le 3221737155;
                                         Data.Binary.put tmp_2};
           put (NotifyForumTopic tmp_3) = do {Data.Binary.Put.putWord32le 577659656;
                                              Data.Binary.put tmp_3};
           put (NotifyPeer tmp_4) = do {Data.Binary.Put.putWord32le 2681474008;
                                        Data.Binary.put tmp_4};
           put (NotifyUsers tmp_5) = do {Data.Binary.Put.putWord32le 3033021260;
                                         Data.Binary.put tmp_5}}
instance Data.Binary.Binary Null'
    where {get = GHC.Base.pure Null';
           put to_be_encoded_0 = do GHC.Base.pure ()}
data Null = Null !Null'
data Null' = Null' {}
instance Data.Binary.Binary Null
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1450380236 -> fmap Null Data.Binary.get}};
           put (Null tmp_1) = do {Data.Binary.Put.putWord32le 1450380236;
                                  Data.Binary.put tmp_1}}
instance Data.Binary.Binary Page'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _part_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _rtl_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _v2_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _url_4 <- Data.Binary.get;
                     _blocks_5 <- Data.Binary.get;
                     _photos_6 <- Data.Binary.get;
                     _documents_7 <- Data.Binary.get;
                     _views_8 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     GHC.Base.pure (Page' _part_1 _rtl_2 _v2_3 _url_4 _blocks_5 _photos_6 _documents_7 _views_8)};
           put to_be_encoded_9 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_9._views,
                                                              3),
                                                             (Data.Maybe.isJust to_be_encoded_9._v2,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_9._rtl,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_9._part,
                                                              0)];
                                     Data.Binary.put to_be_encoded_9._part;
                                     Data.Binary.put to_be_encoded_9._rtl;
                                     Data.Binary.put to_be_encoded_9._v2;
                                     Data.Binary.put to_be_encoded_9._url;
                                     Data.Binary.put to_be_encoded_9._blocks;
                                     Data.Binary.put to_be_encoded_9._photos;
                                     Data.Binary.put to_be_encoded_9._documents;
                                     Data.Binary.put to_be_encoded_9._views}}
data Page = Page !Page'
data Page'
    = Page' {_part :: !(Maybe True'),
             _rtl :: !(Maybe True'),
             _v2 :: !(Maybe True'),
             _url :: !String',
             _blocks :: !(Vector PageBlock),
             _photos :: !(Vector Photo),
             _documents :: !(Vector Document),
             _views :: !(Maybe Int')}
instance Data.Binary.Binary Page
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2556788493 -> fmap Page Data.Binary.get}};
           put (Page tmp_1) = do {Data.Binary.Put.putWord32le 2556788493;
                                  Data.Binary.put tmp_1}}
instance Data.Binary.Binary PageBlockAnchor'
    where {get = do {_name_0 <- Data.Binary.get;
                     GHC.Base.pure (PageBlockAnchor' _name_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._name}
instance Data.Binary.Binary PageBlockAudio'
    where {get = do {_audio_id_0 <- Data.Binary.get;
                     _caption_1 <- Data.Binary.get;
                     GHC.Base.pure (PageBlockAudio' _audio_id_0 _caption_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._audio_id;
                                     Data.Binary.put to_be_encoded_2._caption}}
instance Data.Binary.Binary PageBlockAuthorDate'
    where {get = do {_author_0 <- Data.Binary.get;
                     _published_date_1 <- Data.Binary.get;
                     GHC.Base.pure (PageBlockAuthorDate' _author_0 _published_date_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._author;
                                     Data.Binary.put to_be_encoded_2._published_date}}
instance Data.Binary.Binary PageBlockBlockquote'
    where {get = do {_text_0 <- Data.Binary.get;
                     _caption_1 <- Data.Binary.get;
                     GHC.Base.pure (PageBlockBlockquote' _text_0 _caption_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._text;
                                     Data.Binary.put to_be_encoded_2._caption}}
instance Data.Binary.Binary PageBlockChannel'
    where {get = do {_channel_0 <- Data.Binary.get;
                     GHC.Base.pure (PageBlockChannel' _channel_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._channel}
instance Data.Binary.Binary PageBlockCollage'
    where {get = do {_items_0 <- Data.Binary.get;
                     _caption_1 <- Data.Binary.get;
                     GHC.Base.pure (PageBlockCollage' _items_0 _caption_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._items;
                                     Data.Binary.put to_be_encoded_2._caption}}
instance Data.Binary.Binary PageBlockCover'
    where {get = do {_cover_0 <- Data.Binary.get;
                     GHC.Base.pure (PageBlockCover' _cover_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._cover}
instance Data.Binary.Binary PageBlockDetails'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _open_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _blocks_2 <- Data.Binary.get;
                     _title_3 <- Data.Binary.get;
                     GHC.Base.pure (PageBlockDetails' _open_1 _blocks_2 _title_3)};
           put to_be_encoded_4 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_4._open,
                                                              0)];
                                     Data.Binary.put to_be_encoded_4._open;
                                     Data.Binary.put to_be_encoded_4._blocks;
                                     Data.Binary.put to_be_encoded_4._title}}
instance Data.Binary.Binary PageBlockDivider'
    where {get = GHC.Base.pure PageBlockDivider';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary PageBlockEmbed'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _full_width_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _allow_scrolling_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     _url_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _html_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _poster_photo_id_5 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 4);
                     _w_6 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 5);
                     _h_7 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 5);
                     _caption_8 <- Data.Binary.get;
                     GHC.Base.pure (PageBlockEmbed' _full_width_1 _allow_scrolling_2 _url_3 _html_4 _poster_photo_id_5 _w_6 _h_7 _caption_8)};
           put to_be_encoded_9 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_9._h,
                                                              5),
                                                             (Data.Maybe.isJust to_be_encoded_9._w,
                                                              5),
                                                             (Data.Maybe.isJust to_be_encoded_9._poster_photo_id,
                                                              4),
                                                             (Data.Maybe.isJust to_be_encoded_9._html,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_9._url,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_9._allow_scrolling,
                                                              3),
                                                             (Data.Maybe.isJust to_be_encoded_9._full_width,
                                                              0)];
                                     Data.Binary.put to_be_encoded_9._full_width;
                                     Data.Binary.put to_be_encoded_9._allow_scrolling;
                                     Data.Binary.put to_be_encoded_9._url;
                                     Data.Binary.put to_be_encoded_9._html;
                                     Data.Binary.put to_be_encoded_9._poster_photo_id;
                                     Data.Binary.put to_be_encoded_9._w;
                                     Data.Binary.put to_be_encoded_9._h;
                                     Data.Binary.put to_be_encoded_9._caption}}
instance Data.Binary.Binary PageBlockEmbedPost'
    where {get = do {_url_0 <- Data.Binary.get;
                     _webpage_id_1 <- Data.Binary.get;
                     _author_photo_id_2 <- Data.Binary.get;
                     _author_3 <- Data.Binary.get;
                     _date_4 <- Data.Binary.get;
                     _blocks_5 <- Data.Binary.get;
                     _caption_6 <- Data.Binary.get;
                     GHC.Base.pure (PageBlockEmbedPost' _url_0 _webpage_id_1 _author_photo_id_2 _author_3 _date_4 _blocks_5 _caption_6)};
           put to_be_encoded_7 = do {Data.Binary.put to_be_encoded_7._url;
                                     Data.Binary.put to_be_encoded_7._webpage_id;
                                     Data.Binary.put to_be_encoded_7._author_photo_id;
                                     Data.Binary.put to_be_encoded_7._author;
                                     Data.Binary.put to_be_encoded_7._date;
                                     Data.Binary.put to_be_encoded_7._blocks;
                                     Data.Binary.put to_be_encoded_7._caption}}
instance Data.Binary.Binary PageBlockFooter'
    where {get = do {_text_0 <- Data.Binary.get;
                     GHC.Base.pure (PageBlockFooter' _text_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._text}
instance Data.Binary.Binary PageBlockHeader'
    where {get = do {_text_0 <- Data.Binary.get;
                     GHC.Base.pure (PageBlockHeader' _text_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._text}
instance Data.Binary.Binary PageBlockKicker'
    where {get = do {_text_0 <- Data.Binary.get;
                     GHC.Base.pure (PageBlockKicker' _text_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._text}
instance Data.Binary.Binary PageBlockList'
    where {get = do {_items_0 <- Data.Binary.get;
                     GHC.Base.pure (PageBlockList' _items_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._items}
instance Data.Binary.Binary PageBlockMap'
    where {get = do {_geo_0 <- Data.Binary.get;
                     _zoom_1 <- Data.Binary.get;
                     _w_2 <- Data.Binary.get;
                     _h_3 <- Data.Binary.get;
                     _caption_4 <- Data.Binary.get;
                     GHC.Base.pure (PageBlockMap' _geo_0 _zoom_1 _w_2 _h_3 _caption_4)};
           put to_be_encoded_5 = do {Data.Binary.put to_be_encoded_5._geo;
                                     Data.Binary.put to_be_encoded_5._zoom;
                                     Data.Binary.put to_be_encoded_5._w;
                                     Data.Binary.put to_be_encoded_5._h;
                                     Data.Binary.put to_be_encoded_5._caption}}
instance Data.Binary.Binary PageBlockOrderedList'
    where {get = do {_items_0 <- Data.Binary.get;
                     GHC.Base.pure (PageBlockOrderedList' _items_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._items}
instance Data.Binary.Binary PageBlockParagraph'
    where {get = do {_text_0 <- Data.Binary.get;
                     GHC.Base.pure (PageBlockParagraph' _text_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._text}
instance Data.Binary.Binary PageBlockPhoto'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _photo_id_1 <- Data.Binary.get;
                     _caption_2 <- Data.Binary.get;
                     _url_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _webpage_id_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     GHC.Base.pure (PageBlockPhoto' _photo_id_1 _caption_2 _url_3 _webpage_id_4)};
           put to_be_encoded_5 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_5._webpage_id,
                                                              0),
                                                             (Data.Maybe.isJust to_be_encoded_5._url,
                                                              0)];
                                     Data.Binary.put to_be_encoded_5._photo_id;
                                     Data.Binary.put to_be_encoded_5._caption;
                                     Data.Binary.put to_be_encoded_5._url;
                                     Data.Binary.put to_be_encoded_5._webpage_id}}
instance Data.Binary.Binary PageBlockPreformatted'
    where {get = do {_text_0 <- Data.Binary.get;
                     _language_1 <- Data.Binary.get;
                     GHC.Base.pure (PageBlockPreformatted' _text_0 _language_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._text;
                                     Data.Binary.put to_be_encoded_2._language}}
instance Data.Binary.Binary PageBlockPullquote'
    where {get = do {_text_0 <- Data.Binary.get;
                     _caption_1 <- Data.Binary.get;
                     GHC.Base.pure (PageBlockPullquote' _text_0 _caption_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._text;
                                     Data.Binary.put to_be_encoded_2._caption}}
instance Data.Binary.Binary PageBlockRelatedArticles'
    where {get = do {_title_0 <- Data.Binary.get;
                     _articles_1 <- Data.Binary.get;
                     GHC.Base.pure (PageBlockRelatedArticles' _title_0 _articles_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._title;
                                     Data.Binary.put to_be_encoded_2._articles}}
instance Data.Binary.Binary PageBlockSlideshow'
    where {get = do {_items_0 <- Data.Binary.get;
                     _caption_1 <- Data.Binary.get;
                     GHC.Base.pure (PageBlockSlideshow' _items_0 _caption_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._items;
                                     Data.Binary.put to_be_encoded_2._caption}}
instance Data.Binary.Binary PageBlockSubheader'
    where {get = do {_text_0 <- Data.Binary.get;
                     GHC.Base.pure (PageBlockSubheader' _text_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._text}
instance Data.Binary.Binary PageBlockSubtitle'
    where {get = do {_text_0 <- Data.Binary.get;
                     GHC.Base.pure (PageBlockSubtitle' _text_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._text}
instance Data.Binary.Binary PageBlockTable'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _bordered_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _striped_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _title_3 <- Data.Binary.get;
                     _rows_4 <- Data.Binary.get;
                     GHC.Base.pure (PageBlockTable' _bordered_1 _striped_2 _title_3 _rows_4)};
           put to_be_encoded_5 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_5._striped,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_5._bordered,
                                                              0)];
                                     Data.Binary.put to_be_encoded_5._bordered;
                                     Data.Binary.put to_be_encoded_5._striped;
                                     Data.Binary.put to_be_encoded_5._title;
                                     Data.Binary.put to_be_encoded_5._rows}}
instance Data.Binary.Binary PageBlockTitle'
    where {get = do {_text_0 <- Data.Binary.get;
                     GHC.Base.pure (PageBlockTitle' _text_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._text}
instance Data.Binary.Binary PageBlockUnsupported'
    where {get = GHC.Base.pure PageBlockUnsupported';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary PageBlockVideo'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _autoplay_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _loop_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _video_id_3 <- Data.Binary.get;
                     _caption_4 <- Data.Binary.get;
                     GHC.Base.pure (PageBlockVideo' _autoplay_1 _loop_2 _video_id_3 _caption_4)};
           put to_be_encoded_5 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_5._loop,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_5._autoplay,
                                                              0)];
                                     Data.Binary.put to_be_encoded_5._autoplay;
                                     Data.Binary.put to_be_encoded_5._loop;
                                     Data.Binary.put to_be_encoded_5._video_id;
                                     Data.Binary.put to_be_encoded_5._caption}}
data PageBlock
    = PageBlockAnchor !PageBlockAnchor'
    | PageBlockAudio !PageBlockAudio'
    | PageBlockAuthorDate !PageBlockAuthorDate'
    | PageBlockBlockquote !PageBlockBlockquote'
    | PageBlockChannel !PageBlockChannel'
    | PageBlockCollage !PageBlockCollage'
    | PageBlockCover !PageBlockCover'
    | PageBlockDetails !PageBlockDetails'
    | PageBlockDivider !PageBlockDivider'
    | PageBlockEmbed !PageBlockEmbed'
    | PageBlockEmbedPost !PageBlockEmbedPost'
    | PageBlockFooter !PageBlockFooter'
    | PageBlockHeader !PageBlockHeader'
    | PageBlockKicker !PageBlockKicker'
    | PageBlockList !PageBlockList'
    | PageBlockMap !PageBlockMap'
    | PageBlockOrderedList !PageBlockOrderedList'
    | PageBlockParagraph !PageBlockParagraph'
    | PageBlockPhoto !PageBlockPhoto'
    | PageBlockPreformatted !PageBlockPreformatted'
    | PageBlockPullquote !PageBlockPullquote'
    | PageBlockRelatedArticles !PageBlockRelatedArticles'
    | PageBlockSlideshow !PageBlockSlideshow'
    | PageBlockSubheader !PageBlockSubheader'
    | PageBlockSubtitle !PageBlockSubtitle'
    | PageBlockTable !PageBlockTable'
    | PageBlockTitle !PageBlockTitle'
    | PageBlockUnsupported !PageBlockUnsupported'
    | PageBlockVideo !PageBlockVideo'
data PageBlockAnchor' = PageBlockAnchor' {_name :: !String'}
data PageBlockAudio'
    = PageBlockAudio' {_audio_id :: !Long', _caption :: !PageCaption}
data PageBlockAuthorDate'
    = PageBlockAuthorDate' {_author :: !RichText,
                            _published_date :: !Int'}
data PageBlockBlockquote'
    = PageBlockBlockquote' {_text :: !RichText, _caption :: !RichText}
data PageBlockChannel' = PageBlockChannel' {_channel :: !Chat}
data PageBlockCollage'
    = PageBlockCollage' {_items :: !(Vector PageBlock),
                         _caption :: !PageCaption}
data PageBlockCover' = PageBlockCover' {_cover :: !PageBlock}
data PageBlockDetails'
    = PageBlockDetails' {_open :: !(Maybe True'),
                         _blocks :: !(Vector PageBlock),
                         _title :: !RichText}
data PageBlockDivider' = PageBlockDivider' {}
data PageBlockEmbed'
    = PageBlockEmbed' {_full_width :: !(Maybe True'),
                       _allow_scrolling :: !(Maybe True'),
                       _url :: !(Maybe String'),
                       _html :: !(Maybe String'),
                       _poster_photo_id :: !(Maybe Long'),
                       _w :: !(Maybe Int'),
                       _h :: !(Maybe Int'),
                       _caption :: !PageCaption}
data PageBlockEmbedPost'
    = PageBlockEmbedPost' {_url :: !String',
                           _webpage_id :: !Long',
                           _author_photo_id :: !Long',
                           _author :: !String',
                           _date :: !Int',
                           _blocks :: !(Vector PageBlock),
                           _caption :: !PageCaption}
data PageBlockFooter' = PageBlockFooter' {_text :: !RichText}
data PageBlockHeader' = PageBlockHeader' {_text :: !RichText}
data PageBlockKicker' = PageBlockKicker' {_text :: !RichText}
data PageBlockList'
    = PageBlockList' {_items :: !(Vector PageListItem)}
data PageBlockMap'
    = PageBlockMap' {_geo :: !GeoPoint,
                     _zoom :: !Int',
                     _w :: !Int',
                     _h :: !Int',
                     _caption :: !PageCaption}
data PageBlockOrderedList'
    = PageBlockOrderedList' {_items :: !(Vector PageListOrderedItem)}
data PageBlockParagraph' = PageBlockParagraph' {_text :: !RichText}
data PageBlockPhoto'
    = PageBlockPhoto' {_photo_id :: !Long',
                       _caption :: !PageCaption,
                       _url :: !(Maybe String'),
                       _webpage_id :: !(Maybe Long')}
data PageBlockPreformatted'
    = PageBlockPreformatted' {_text :: !RichText,
                              _language :: !String'}
data PageBlockPullquote'
    = PageBlockPullquote' {_text :: !RichText, _caption :: !RichText}
data PageBlockRelatedArticles'
    = PageBlockRelatedArticles' {_title :: !RichText,
                                 _articles :: !(Vector PageRelatedArticle)}
data PageBlockSlideshow'
    = PageBlockSlideshow' {_items :: !(Vector PageBlock),
                           _caption :: !PageCaption}
data PageBlockSubheader' = PageBlockSubheader' {_text :: !RichText}
data PageBlockSubtitle' = PageBlockSubtitle' {_text :: !RichText}
data PageBlockTable'
    = PageBlockTable' {_bordered :: !(Maybe True'),
                       _striped :: !(Maybe True'),
                       _title :: !RichText,
                       _rows :: !(Vector PageTableRow)}
data PageBlockTitle' = PageBlockTitle' {_text :: !RichText}
data PageBlockUnsupported' = PageBlockUnsupported' {}
data PageBlockVideo'
    = PageBlockVideo' {_autoplay :: !(Maybe True'),
                       _loop :: !(Maybe True'),
                       _video_id :: !Long',
                       _caption :: !PageCaption}
instance Data.Binary.Binary PageBlock
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3456972720 -> fmap PageBlockAnchor Data.Binary.get;
                      2151899626 -> fmap PageBlockAudio Data.Binary.get;
                      3132089824 -> fmap PageBlockAuthorDate Data.Binary.get;
                      641563686 -> fmap PageBlockBlockquote Data.Binary.get;
                      4011282869 -> fmap PageBlockChannel Data.Binary.get;
                      1705048653 -> fmap PageBlockCollage Data.Binary.get;
                      972174080 -> fmap PageBlockCover Data.Binary.get;
                      1987480557 -> fmap PageBlockDetails Data.Binary.get;
                      3676352904 -> fmap PageBlockDivider Data.Binary.get;
                      2826014149 -> fmap PageBlockEmbed Data.Binary.get;
                      4065961995 -> fmap PageBlockEmbedPost Data.Binary.get;
                      1216809369 -> fmap PageBlockFooter Data.Binary.get;
                      3218105580 -> fmap PageBlockHeader Data.Binary.get;
                      504660880 -> fmap PageBlockKicker Data.Binary.get;
                      3840442385 -> fmap PageBlockList Data.Binary.get;
                      2756656886 -> fmap PageBlockMap Data.Binary.get;
                      2592793057 -> fmap PageBlockOrderedList Data.Binary.get;
                      1182402406 -> fmap PageBlockParagraph Data.Binary.get;
                      391759200 -> fmap PageBlockPhoto Data.Binary.get;
                      3228621118 -> fmap PageBlockPreformatted Data.Binary.get;
                      1329878739 -> fmap PageBlockPullquote Data.Binary.get;
                      370236054 -> fmap PageBlockRelatedArticles Data.Binary.get;
                      52401552 -> fmap PageBlockSlideshow Data.Binary.get;
                      4046173921 -> fmap PageBlockSubheader Data.Binary.get;
                      2415565343 -> fmap PageBlockSubtitle Data.Binary.get;
                      3209554562 -> fmap PageBlockTable Data.Binary.get;
                      1890305021 -> fmap PageBlockTitle Data.Binary.get;
                      324435594 -> fmap PageBlockUnsupported Data.Binary.get;
                      2089805750 -> fmap PageBlockVideo Data.Binary.get}};
           put (PageBlockAnchor tmp_1) = do {Data.Binary.Put.putWord32le 3456972720;
                                             Data.Binary.put tmp_1};
           put (PageBlockAudio tmp_2) = do {Data.Binary.Put.putWord32le 2151899626;
                                            Data.Binary.put tmp_2};
           put (PageBlockAuthorDate tmp_3) = do {Data.Binary.Put.putWord32le 3132089824;
                                                 Data.Binary.put tmp_3};
           put (PageBlockBlockquote tmp_4) = do {Data.Binary.Put.putWord32le 641563686;
                                                 Data.Binary.put tmp_4};
           put (PageBlockChannel tmp_5) = do {Data.Binary.Put.putWord32le 4011282869;
                                              Data.Binary.put tmp_5};
           put (PageBlockCollage tmp_6) = do {Data.Binary.Put.putWord32le 1705048653;
                                              Data.Binary.put tmp_6};
           put (PageBlockCover tmp_7) = do {Data.Binary.Put.putWord32le 972174080;
                                            Data.Binary.put tmp_7};
           put (PageBlockDetails tmp_8) = do {Data.Binary.Put.putWord32le 1987480557;
                                              Data.Binary.put tmp_8};
           put (PageBlockDivider tmp_9) = do {Data.Binary.Put.putWord32le 3676352904;
                                              Data.Binary.put tmp_9};
           put (PageBlockEmbed tmp_10) = do {Data.Binary.Put.putWord32le 2826014149;
                                             Data.Binary.put tmp_10};
           put (PageBlockEmbedPost tmp_11) = do {Data.Binary.Put.putWord32le 4065961995;
                                                 Data.Binary.put tmp_11};
           put (PageBlockFooter tmp_12) = do {Data.Binary.Put.putWord32le 1216809369;
                                              Data.Binary.put tmp_12};
           put (PageBlockHeader tmp_13) = do {Data.Binary.Put.putWord32le 3218105580;
                                              Data.Binary.put tmp_13};
           put (PageBlockKicker tmp_14) = do {Data.Binary.Put.putWord32le 504660880;
                                              Data.Binary.put tmp_14};
           put (PageBlockList tmp_15) = do {Data.Binary.Put.putWord32le 3840442385;
                                            Data.Binary.put tmp_15};
           put (PageBlockMap tmp_16) = do {Data.Binary.Put.putWord32le 2756656886;
                                           Data.Binary.put tmp_16};
           put (PageBlockOrderedList tmp_17) = do {Data.Binary.Put.putWord32le 2592793057;
                                                   Data.Binary.put tmp_17};
           put (PageBlockParagraph tmp_18) = do {Data.Binary.Put.putWord32le 1182402406;
                                                 Data.Binary.put tmp_18};
           put (PageBlockPhoto tmp_19) = do {Data.Binary.Put.putWord32le 391759200;
                                             Data.Binary.put tmp_19};
           put (PageBlockPreformatted tmp_20) = do {Data.Binary.Put.putWord32le 3228621118;
                                                    Data.Binary.put tmp_20};
           put (PageBlockPullquote tmp_21) = do {Data.Binary.Put.putWord32le 1329878739;
                                                 Data.Binary.put tmp_21};
           put (PageBlockRelatedArticles tmp_22) = do {Data.Binary.Put.putWord32le 370236054;
                                                       Data.Binary.put tmp_22};
           put (PageBlockSlideshow tmp_23) = do {Data.Binary.Put.putWord32le 52401552;
                                                 Data.Binary.put tmp_23};
           put (PageBlockSubheader tmp_24) = do {Data.Binary.Put.putWord32le 4046173921;
                                                 Data.Binary.put tmp_24};
           put (PageBlockSubtitle tmp_25) = do {Data.Binary.Put.putWord32le 2415565343;
                                                Data.Binary.put tmp_25};
           put (PageBlockTable tmp_26) = do {Data.Binary.Put.putWord32le 3209554562;
                                             Data.Binary.put tmp_26};
           put (PageBlockTitle tmp_27) = do {Data.Binary.Put.putWord32le 1890305021;
                                             Data.Binary.put tmp_27};
           put (PageBlockUnsupported tmp_28) = do {Data.Binary.Put.putWord32le 324435594;
                                                   Data.Binary.put tmp_28};
           put (PageBlockVideo tmp_29) = do {Data.Binary.Put.putWord32le 2089805750;
                                             Data.Binary.put tmp_29}}
instance Data.Binary.Binary PageCaption'
    where {get = do {_text_0 <- Data.Binary.get;
                     _credit_1 <- Data.Binary.get;
                     GHC.Base.pure (PageCaption' _text_0 _credit_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._text;
                                     Data.Binary.put to_be_encoded_2._credit}}
data PageCaption = PageCaption !PageCaption'
data PageCaption'
    = PageCaption' {_text :: !RichText, _credit :: !RichText}
instance Data.Binary.Binary PageCaption
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1869903447 -> fmap PageCaption Data.Binary.get}};
           put (PageCaption tmp_1) = do {Data.Binary.Put.putWord32le 1869903447;
                                         Data.Binary.put tmp_1}}
instance Data.Binary.Binary PageListItemBlocks'
    where {get = do {_blocks_0 <- Data.Binary.get;
                     GHC.Base.pure (PageListItemBlocks' _blocks_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._blocks}
instance Data.Binary.Binary PageListItemText'
    where {get = do {_text_0 <- Data.Binary.get;
                     GHC.Base.pure (PageListItemText' _text_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._text}
data PageListItem
    = PageListItemBlocks !PageListItemBlocks'
    | PageListItemText !PageListItemText'
data PageListItemBlocks'
    = PageListItemBlocks' {_blocks :: !(Vector PageBlock)}
data PageListItemText' = PageListItemText' {_text :: !RichText}
instance Data.Binary.Binary PageListItem
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {635466748 -> fmap PageListItemBlocks Data.Binary.get;
                      3106911949 -> fmap PageListItemText Data.Binary.get}};
           put (PageListItemBlocks tmp_1) = do {Data.Binary.Put.putWord32le 635466748;
                                                Data.Binary.put tmp_1};
           put (PageListItemText tmp_2) = do {Data.Binary.Put.putWord32le 3106911949;
                                              Data.Binary.put tmp_2}}
instance Data.Binary.Binary PageListOrderedItemBlocks'
    where {get = do {_num_0 <- Data.Binary.get;
                     _blocks_1 <- Data.Binary.get;
                     GHC.Base.pure (PageListOrderedItemBlocks' _num_0 _blocks_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._num;
                                     Data.Binary.put to_be_encoded_2._blocks}}
instance Data.Binary.Binary PageListOrderedItemText'
    where {get = do {_num_0 <- Data.Binary.get;
                     _text_1 <- Data.Binary.get;
                     GHC.Base.pure (PageListOrderedItemText' _num_0 _text_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._num;
                                     Data.Binary.put to_be_encoded_2._text}}
data PageListOrderedItem
    = PageListOrderedItemBlocks !PageListOrderedItemBlocks'
    | PageListOrderedItemText !PageListOrderedItemText'
data PageListOrderedItemBlocks'
    = PageListOrderedItemBlocks' {_num :: !String',
                                  _blocks :: !(Vector PageBlock)}
data PageListOrderedItemText'
    = PageListOrderedItemText' {_num :: !String', _text :: !RichText}
instance Data.Binary.Binary PageListOrderedItem
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2564655414 -> fmap PageListOrderedItemBlocks Data.Binary.get;
                      1577484359 -> fmap PageListOrderedItemText Data.Binary.get}};
           put (PageListOrderedItemBlocks tmp_1) = do {Data.Binary.Put.putWord32le 2564655414;
                                                       Data.Binary.put tmp_1};
           put (PageListOrderedItemText tmp_2) = do {Data.Binary.Put.putWord32le 1577484359;
                                                     Data.Binary.put tmp_2}}
instance Data.Binary.Binary PageRelatedArticle'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _url_1 <- Data.Binary.get;
                     _webpage_id_2 <- Data.Binary.get;
                     _title_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _description_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _photo_id_5 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _author_6 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     _published_date_7 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 4);
                     GHC.Base.pure (PageRelatedArticle' _url_1 _webpage_id_2 _title_3 _description_4 _photo_id_5 _author_6 _published_date_7)};
           put to_be_encoded_8 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_8._published_date,
                                                              4),
                                                             (Data.Maybe.isJust to_be_encoded_8._author,
                                                              3),
                                                             (Data.Maybe.isJust to_be_encoded_8._photo_id,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_8._description,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_8._title,
                                                              0)];
                                     Data.Binary.put to_be_encoded_8._url;
                                     Data.Binary.put to_be_encoded_8._webpage_id;
                                     Data.Binary.put to_be_encoded_8._title;
                                     Data.Binary.put to_be_encoded_8._description;
                                     Data.Binary.put to_be_encoded_8._photo_id;
                                     Data.Binary.put to_be_encoded_8._author;
                                     Data.Binary.put to_be_encoded_8._published_date}}
data PageRelatedArticle = PageRelatedArticle !PageRelatedArticle'
data PageRelatedArticle'
    = PageRelatedArticle' {_url :: !String',
                           _webpage_id :: !Long',
                           _title :: !(Maybe String'),
                           _description :: !(Maybe String'),
                           _photo_id :: !(Maybe Long'),
                           _author :: !(Maybe String'),
                           _published_date :: !(Maybe Int')}
instance Data.Binary.Binary PageRelatedArticle
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3012615176 -> fmap PageRelatedArticle Data.Binary.get}};
           put (PageRelatedArticle tmp_1) = do {Data.Binary.Put.putWord32le 3012615176;
                                                Data.Binary.put tmp_1}}
instance Data.Binary.Binary PageTableCell'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _header_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _align_center_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     _align_right_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 4);
                     _valign_middle_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 5);
                     _valign_bottom_5 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 6);
                     _text_6 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 7);
                     _colspan_7 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _rowspan_8 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     GHC.Base.pure (PageTableCell' _header_1 _align_center_2 _align_right_3 _valign_middle_4 _valign_bottom_5 _text_6 _colspan_7 _rowspan_8)};
           put to_be_encoded_9 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_9._rowspan,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_9._colspan,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_9._text,
                                                              7),
                                                             (Data.Maybe.isJust to_be_encoded_9._valign_bottom,
                                                              6),
                                                             (Data.Maybe.isJust to_be_encoded_9._valign_middle,
                                                              5),
                                                             (Data.Maybe.isJust to_be_encoded_9._align_right,
                                                              4),
                                                             (Data.Maybe.isJust to_be_encoded_9._align_center,
                                                              3),
                                                             (Data.Maybe.isJust to_be_encoded_9._header,
                                                              0)];
                                     Data.Binary.put to_be_encoded_9._header;
                                     Data.Binary.put to_be_encoded_9._align_center;
                                     Data.Binary.put to_be_encoded_9._align_right;
                                     Data.Binary.put to_be_encoded_9._valign_middle;
                                     Data.Binary.put to_be_encoded_9._valign_bottom;
                                     Data.Binary.put to_be_encoded_9._text;
                                     Data.Binary.put to_be_encoded_9._colspan;
                                     Data.Binary.put to_be_encoded_9._rowspan}}
data PageTableCell = PageTableCell !PageTableCell'
data PageTableCell'
    = PageTableCell' {_header :: !(Maybe True'),
                      _align_center :: !(Maybe True'),
                      _align_right :: !(Maybe True'),
                      _valign_middle :: !(Maybe True'),
                      _valign_bottom :: !(Maybe True'),
                      _text :: !(Maybe RichText),
                      _colspan :: !(Maybe Int'),
                      _rowspan :: !(Maybe Int')}
instance Data.Binary.Binary PageTableCell
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {878078826 -> fmap PageTableCell Data.Binary.get}};
           put (PageTableCell tmp_1) = do {Data.Binary.Put.putWord32le 878078826;
                                           Data.Binary.put tmp_1}}
instance Data.Binary.Binary PageTableRow'
    where {get = do {_cells_0 <- Data.Binary.get;
                     GHC.Base.pure (PageTableRow' _cells_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._cells}
data PageTableRow = PageTableRow !PageTableRow'
data PageTableRow'
    = PageTableRow' {_cells :: !(Vector PageTableCell)}
instance Data.Binary.Binary PageTableRow
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3770729957 -> fmap PageTableRow Data.Binary.get}};
           put (PageTableRow tmp_1) = do {Data.Binary.Put.putWord32le 3770729957;
                                          Data.Binary.put tmp_1}}
instance Data.Binary.Binary PasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow'
    where {get = do {_salt1_0 <- Data.Binary.get;
                     _salt2_1 <- Data.Binary.get;
                     _g_2 <- Data.Binary.get;
                     _p_3 <- Data.Binary.get;
                     GHC.Base.pure (PasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow' _salt1_0 _salt2_1 _g_2 _p_3)};
           put to_be_encoded_4 = do {Data.Binary.put to_be_encoded_4._salt1;
                                     Data.Binary.put to_be_encoded_4._salt2;
                                     Data.Binary.put to_be_encoded_4._g;
                                     Data.Binary.put to_be_encoded_4._p}}
instance Data.Binary.Binary PasswordKdfAlgoUnknown'
    where {get = GHC.Base.pure PasswordKdfAlgoUnknown';
           put to_be_encoded_0 = do GHC.Base.pure ()}
data PasswordKdfAlgo
    = PasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow !PasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow'
    | PasswordKdfAlgoUnknown !PasswordKdfAlgoUnknown'
data PasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow'
    = PasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow' {_salt1 :: !Bytes',
                                                                          _salt2 :: !Bytes',
                                                                          _g :: !Int',
                                                                          _p :: !Bytes'}
data PasswordKdfAlgoUnknown' = PasswordKdfAlgoUnknown' {}
instance Data.Binary.Binary PasswordKdfAlgo
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {982592842 -> fmap PasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow Data.Binary.get;
                      3562713238 -> fmap PasswordKdfAlgoUnknown Data.Binary.get}};
           put (PasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow tmp_1) = do {Data.Binary.Put.putWord32le 982592842;
                                                                                               Data.Binary.put tmp_1};
           put (PasswordKdfAlgoUnknown tmp_2) = do {Data.Binary.Put.putWord32le 3562713238;
                                                    Data.Binary.put tmp_2}}
instance Data.Binary.Binary PaymentCharge'
    where {get = do {_id_0 <- Data.Binary.get;
                     _provider_charge_id_1 <- Data.Binary.get;
                     GHC.Base.pure (PaymentCharge' _id_0 _provider_charge_id_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._id;
                                     Data.Binary.put to_be_encoded_2._provider_charge_id}}
data PaymentCharge = PaymentCharge !PaymentCharge'
data PaymentCharge'
    = PaymentCharge' {_id :: !String', _provider_charge_id :: !String'}
instance Data.Binary.Binary PaymentCharge
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3926049406 -> fmap PaymentCharge Data.Binary.get}};
           put (PaymentCharge tmp_1) = do {Data.Binary.Put.putWord32le 3926049406;
                                           Data.Binary.put tmp_1}}
instance Data.Binary.Binary PaymentFormMethod'
    where {get = do {_url_0 <- Data.Binary.get;
                     _title_1 <- Data.Binary.get;
                     GHC.Base.pure (PaymentFormMethod' _url_0 _title_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._url;
                                     Data.Binary.put to_be_encoded_2._title}}
data PaymentFormMethod = PaymentFormMethod !PaymentFormMethod'
data PaymentFormMethod'
    = PaymentFormMethod' {_url :: !String', _title :: !String'}
instance Data.Binary.Binary PaymentFormMethod
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2298016283 -> fmap PaymentFormMethod Data.Binary.get}};
           put (PaymentFormMethod tmp_1) = do {Data.Binary.Put.putWord32le 2298016283;
                                               Data.Binary.put tmp_1}}
instance Data.Binary.Binary PaymentRequestedInfo'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _name_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _phone_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _email_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _shipping_address_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     GHC.Base.pure (PaymentRequestedInfo' _name_1 _phone_2 _email_3 _shipping_address_4)};
           put to_be_encoded_5 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_5._shipping_address,
                                                              3),
                                                             (Data.Maybe.isJust to_be_encoded_5._email,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_5._phone,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_5._name,
                                                              0)];
                                     Data.Binary.put to_be_encoded_5._name;
                                     Data.Binary.put to_be_encoded_5._phone;
                                     Data.Binary.put to_be_encoded_5._email;
                                     Data.Binary.put to_be_encoded_5._shipping_address}}
data PaymentRequestedInfo
    = PaymentRequestedInfo !PaymentRequestedInfo'
data PaymentRequestedInfo'
    = PaymentRequestedInfo' {_name :: !(Maybe String'),
                             _phone :: !(Maybe String'),
                             _email :: !(Maybe String'),
                             _shipping_address :: !(Maybe PostAddress)}
instance Data.Binary.Binary PaymentRequestedInfo
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2426158996 -> fmap PaymentRequestedInfo Data.Binary.get}};
           put (PaymentRequestedInfo tmp_1) = do {Data.Binary.Put.putWord32le 2426158996;
                                                  Data.Binary.put tmp_1}}
instance Data.Binary.Binary PaymentSavedCredentialsCard'
    where {get = do {_id_0 <- Data.Binary.get;
                     _title_1 <- Data.Binary.get;
                     GHC.Base.pure (PaymentSavedCredentialsCard' _id_0 _title_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._id;
                                     Data.Binary.put to_be_encoded_2._title}}
data PaymentSavedCredentials
    = PaymentSavedCredentialsCard !PaymentSavedCredentialsCard'
data PaymentSavedCredentialsCard'
    = PaymentSavedCredentialsCard' {_id :: !String',
                                    _title :: !String'}
instance Data.Binary.Binary PaymentSavedCredentials
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3452074527 -> fmap PaymentSavedCredentialsCard Data.Binary.get}};
           put (PaymentSavedCredentialsCard tmp_1) = do {Data.Binary.Put.putWord32le 3452074527;
                                                         Data.Binary.put tmp_1}}
instance Data.Binary.Binary PeerChannel'
    where {get = do {_channel_id_0 <- Data.Binary.get;
                     GHC.Base.pure (PeerChannel' _channel_id_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._channel_id}
instance Data.Binary.Binary PeerChat'
    where {get = do {_chat_id_0 <- Data.Binary.get;
                     GHC.Base.pure (PeerChat' _chat_id_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._chat_id}
instance Data.Binary.Binary PeerUser'
    where {get = do {_user_id_0 <- Data.Binary.get;
                     GHC.Base.pure (PeerUser' _user_id_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._user_id}
data Peer
    = PeerChannel !PeerChannel'
    | PeerChat !PeerChat'
    | PeerUser !PeerUser'
data PeerChannel' = PeerChannel' {_channel_id :: !Long'}
data PeerChat' = PeerChat' {_chat_id :: !Long'}
data PeerUser' = PeerUser' {_user_id :: !Long'}
instance Data.Binary.Binary Peer
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2728736542 -> fmap PeerChannel Data.Binary.get;
                      918946202 -> fmap PeerChat Data.Binary.get;
                      1498486562 -> fmap PeerUser Data.Binary.get}};
           put (PeerChannel tmp_1) = do {Data.Binary.Put.putWord32le 2728736542;
                                         Data.Binary.put tmp_1};
           put (PeerChat tmp_2) = do {Data.Binary.Put.putWord32le 918946202;
                                      Data.Binary.put tmp_2};
           put (PeerUser tmp_3) = do {Data.Binary.Put.putWord32le 1498486562;
                                      Data.Binary.put tmp_3}}
instance Data.Binary.Binary PeerBlocked'
    where {get = do {_peer_id_0 <- Data.Binary.get;
                     _date_1 <- Data.Binary.get;
                     GHC.Base.pure (PeerBlocked' _peer_id_0 _date_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._peer_id;
                                     Data.Binary.put to_be_encoded_2._date}}
data PeerBlocked = PeerBlocked !PeerBlocked'
data PeerBlocked'
    = PeerBlocked' {_peer_id :: !Peer, _date :: !Int'}
instance Data.Binary.Binary PeerBlocked
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3908927508 -> fmap PeerBlocked Data.Binary.get}};
           put (PeerBlocked tmp_1) = do {Data.Binary.Put.putWord32le 3908927508;
                                         Data.Binary.put tmp_1}}
instance Data.Binary.Binary PeerColor'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _color_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _background_emoji_id_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     GHC.Base.pure (PeerColor' _color_1 _background_emoji_id_2)};
           put to_be_encoded_3 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_3._background_emoji_id,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_3._color,
                                                              0)];
                                     Data.Binary.put to_be_encoded_3._color;
                                     Data.Binary.put to_be_encoded_3._background_emoji_id}}
data PeerColor = PeerColor !PeerColor'
data PeerColor'
    = PeerColor' {_color :: !(Maybe Int'),
                  _background_emoji_id :: !(Maybe Long')}
instance Data.Binary.Binary PeerColor
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3041614543 -> fmap PeerColor Data.Binary.get}};
           put (PeerColor tmp_1) = do {Data.Binary.Put.putWord32le 3041614543;
                                       Data.Binary.put tmp_1}}
instance Data.Binary.Binary PeerLocated'
    where {get = do {_peer_0 <- Data.Binary.get;
                     _expires_1 <- Data.Binary.get;
                     _distance_2 <- Data.Binary.get;
                     GHC.Base.pure (PeerLocated' _peer_0 _expires_1 _distance_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._peer;
                                     Data.Binary.put to_be_encoded_3._expires;
                                     Data.Binary.put to_be_encoded_3._distance}}
instance Data.Binary.Binary PeerSelfLocated'
    where {get = do {_expires_0 <- Data.Binary.get;
                     GHC.Base.pure (PeerSelfLocated' _expires_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._expires}
data PeerLocated
    = PeerLocated !PeerLocated'
    | PeerSelfLocated !PeerSelfLocated'
data PeerLocated'
    = PeerLocated' {_peer :: !Peer,
                    _expires :: !Int',
                    _distance :: !Int'}
data PeerSelfLocated' = PeerSelfLocated' {_expires :: !Int'}
instance Data.Binary.Binary PeerLocated
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3393592157 -> fmap PeerLocated Data.Binary.get;
                      4176226379 -> fmap PeerSelfLocated Data.Binary.get}};
           put (PeerLocated tmp_1) = do {Data.Binary.Put.putWord32le 3393592157;
                                         Data.Binary.put tmp_1};
           put (PeerSelfLocated tmp_2) = do {Data.Binary.Put.putWord32le 4176226379;
                                             Data.Binary.put tmp_2}}
instance Data.Binary.Binary PeerNotifySettings'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _show_previews_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _silent_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _mute_until_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _ios_sound_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     _android_sound_5 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 4);
                     _other_sound_6 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 5);
                     _stories_muted_7 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 6);
                     _stories_hide_sender_8 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 7);
                     _stories_ios_sound_9 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 8);
                     _stories_android_sound_10 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 9);
                     _stories_other_sound_11 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 10);
                     GHC.Base.pure (PeerNotifySettings' _show_previews_1 _silent_2 _mute_until_3 _ios_sound_4 _android_sound_5 _other_sound_6 _stories_muted_7 _stories_hide_sender_8 _stories_ios_sound_9 _stories_android_sound_10 _stories_other_sound_11)};
           put to_be_encoded_12 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_12._stories_other_sound,
                                                               10),
                                                              (Data.Maybe.isJust to_be_encoded_12._stories_android_sound,
                                                               9),
                                                              (Data.Maybe.isJust to_be_encoded_12._stories_ios_sound,
                                                               8),
                                                              (Data.Maybe.isJust to_be_encoded_12._stories_hide_sender,
                                                               7),
                                                              (Data.Maybe.isJust to_be_encoded_12._stories_muted,
                                                               6),
                                                              (Data.Maybe.isJust to_be_encoded_12._other_sound,
                                                               5),
                                                              (Data.Maybe.isJust to_be_encoded_12._android_sound,
                                                               4),
                                                              (Data.Maybe.isJust to_be_encoded_12._ios_sound,
                                                               3),
                                                              (Data.Maybe.isJust to_be_encoded_12._mute_until,
                                                               2),
                                                              (Data.Maybe.isJust to_be_encoded_12._silent,
                                                               1),
                                                              (Data.Maybe.isJust to_be_encoded_12._show_previews,
                                                               0)];
                                      Data.Binary.put to_be_encoded_12._show_previews;
                                      Data.Binary.put to_be_encoded_12._silent;
                                      Data.Binary.put to_be_encoded_12._mute_until;
                                      Data.Binary.put to_be_encoded_12._ios_sound;
                                      Data.Binary.put to_be_encoded_12._android_sound;
                                      Data.Binary.put to_be_encoded_12._other_sound;
                                      Data.Binary.put to_be_encoded_12._stories_muted;
                                      Data.Binary.put to_be_encoded_12._stories_hide_sender;
                                      Data.Binary.put to_be_encoded_12._stories_ios_sound;
                                      Data.Binary.put to_be_encoded_12._stories_android_sound;
                                      Data.Binary.put to_be_encoded_12._stories_other_sound}}
data PeerNotifySettings = PeerNotifySettings !PeerNotifySettings'
data PeerNotifySettings'
    = PeerNotifySettings' {_show_previews :: !(Maybe Bool),
                           _silent :: !(Maybe Bool),
                           _mute_until :: !(Maybe Int'),
                           _ios_sound :: !(Maybe NotificationSound),
                           _android_sound :: !(Maybe NotificationSound),
                           _other_sound :: !(Maybe NotificationSound),
                           _stories_muted :: !(Maybe Bool),
                           _stories_hide_sender :: !(Maybe Bool),
                           _stories_ios_sound :: !(Maybe NotificationSound),
                           _stories_android_sound :: !(Maybe NotificationSound),
                           _stories_other_sound :: !(Maybe NotificationSound)}
instance Data.Binary.Binary PeerNotifySettings
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2573347852 -> fmap PeerNotifySettings Data.Binary.get}};
           put (PeerNotifySettings tmp_1) = do {Data.Binary.Put.putWord32le 2573347852;
                                                Data.Binary.put tmp_1}}
instance Data.Binary.Binary PeerSettings'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _report_spam_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _add_contact_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _block_contact_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _share_contact_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     _need_contacts_exception_5 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 4);
                     _report_geo_6 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 5);
                     _autoarchived_7 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 7);
                     _invite_members_8 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 8);
                     _request_chat_broadcast_9 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 10);
                     _geo_distance_10 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 6);
                     _request_chat_title_11 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 9);
                     _request_chat_date_12 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 9);
                     GHC.Base.pure (PeerSettings' _report_spam_1 _add_contact_2 _block_contact_3 _share_contact_4 _need_contacts_exception_5 _report_geo_6 _autoarchived_7 _invite_members_8 _request_chat_broadcast_9 _geo_distance_10 _request_chat_title_11 _request_chat_date_12)};
           put to_be_encoded_13 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_13._request_chat_date,
                                                               9),
                                                              (Data.Maybe.isJust to_be_encoded_13._request_chat_title,
                                                               9),
                                                              (Data.Maybe.isJust to_be_encoded_13._geo_distance,
                                                               6),
                                                              (Data.Maybe.isJust to_be_encoded_13._request_chat_broadcast,
                                                               10),
                                                              (Data.Maybe.isJust to_be_encoded_13._invite_members,
                                                               8),
                                                              (Data.Maybe.isJust to_be_encoded_13._autoarchived,
                                                               7),
                                                              (Data.Maybe.isJust to_be_encoded_13._report_geo,
                                                               5),
                                                              (Data.Maybe.isJust to_be_encoded_13._need_contacts_exception,
                                                               4),
                                                              (Data.Maybe.isJust to_be_encoded_13._share_contact,
                                                               3),
                                                              (Data.Maybe.isJust to_be_encoded_13._block_contact,
                                                               2),
                                                              (Data.Maybe.isJust to_be_encoded_13._add_contact,
                                                               1),
                                                              (Data.Maybe.isJust to_be_encoded_13._report_spam,
                                                               0)];
                                      Data.Binary.put to_be_encoded_13._report_spam;
                                      Data.Binary.put to_be_encoded_13._add_contact;
                                      Data.Binary.put to_be_encoded_13._block_contact;
                                      Data.Binary.put to_be_encoded_13._share_contact;
                                      Data.Binary.put to_be_encoded_13._need_contacts_exception;
                                      Data.Binary.put to_be_encoded_13._report_geo;
                                      Data.Binary.put to_be_encoded_13._autoarchived;
                                      Data.Binary.put to_be_encoded_13._invite_members;
                                      Data.Binary.put to_be_encoded_13._request_chat_broadcast;
                                      Data.Binary.put to_be_encoded_13._geo_distance;
                                      Data.Binary.put to_be_encoded_13._request_chat_title;
                                      Data.Binary.put to_be_encoded_13._request_chat_date}}
data PeerSettings = PeerSettings !PeerSettings'
data PeerSettings'
    = PeerSettings' {_report_spam :: !(Maybe True'),
                     _add_contact :: !(Maybe True'),
                     _block_contact :: !(Maybe True'),
                     _share_contact :: !(Maybe True'),
                     _need_contacts_exception :: !(Maybe True'),
                     _report_geo :: !(Maybe True'),
                     _autoarchived :: !(Maybe True'),
                     _invite_members :: !(Maybe True'),
                     _request_chat_broadcast :: !(Maybe True'),
                     _geo_distance :: !(Maybe Int'),
                     _request_chat_title :: !(Maybe String'),
                     _request_chat_date :: !(Maybe Int')}
instance Data.Binary.Binary PeerSettings
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2769817869 -> fmap PeerSettings Data.Binary.get}};
           put (PeerSettings tmp_1) = do {Data.Binary.Put.putWord32le 2769817869;
                                          Data.Binary.put tmp_1}}
instance Data.Binary.Binary PeerStories'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _peer_1 <- Data.Binary.get;
                     _max_read_id_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _stories_3 <- Data.Binary.get;
                     GHC.Base.pure (PeerStories' _peer_1 _max_read_id_2 _stories_3)};
           put to_be_encoded_4 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_4._max_read_id,
                                                              0)];
                                     Data.Binary.put to_be_encoded_4._peer;
                                     Data.Binary.put to_be_encoded_4._max_read_id;
                                     Data.Binary.put to_be_encoded_4._stories}}
data PeerStories = PeerStories !PeerStories'
data PeerStories'
    = PeerStories' {_peer :: !Peer,
                    _max_read_id :: !(Maybe Int'),
                    _stories :: !(Vector StoryItem)}
instance Data.Binary.Binary PeerStories
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2587224473 -> fmap PeerStories Data.Binary.get}};
           put (PeerStories tmp_1) = do {Data.Binary.Put.putWord32le 2587224473;
                                         Data.Binary.put tmp_1}}
instance Data.Binary.Binary PhoneCall'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _p2p_allowed_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 5);
                     _video_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 6);
                     _id_3 <- Data.Binary.get;
                     _access_hash_4 <- Data.Binary.get;
                     _date_5 <- Data.Binary.get;
                     _admin_id_6 <- Data.Binary.get;
                     _participant_id_7 <- Data.Binary.get;
                     _g_a_or_b_8 <- Data.Binary.get;
                     _key_fingerprint_9 <- Data.Binary.get;
                     _protocol_10 <- Data.Binary.get;
                     _connections_11 <- Data.Binary.get;
                     _start_date_12 <- Data.Binary.get;
                     GHC.Base.pure (PhoneCall' _p2p_allowed_1 _video_2 _id_3 _access_hash_4 _date_5 _admin_id_6 _participant_id_7 _g_a_or_b_8 _key_fingerprint_9 _protocol_10 _connections_11 _start_date_12)};
           put to_be_encoded_13 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_13._video,
                                                               6),
                                                              (Data.Maybe.isJust to_be_encoded_13._p2p_allowed,
                                                               5)];
                                      Data.Binary.put to_be_encoded_13._p2p_allowed;
                                      Data.Binary.put to_be_encoded_13._video;
                                      Data.Binary.put to_be_encoded_13._id;
                                      Data.Binary.put to_be_encoded_13._access_hash;
                                      Data.Binary.put to_be_encoded_13._date;
                                      Data.Binary.put to_be_encoded_13._admin_id;
                                      Data.Binary.put to_be_encoded_13._participant_id;
                                      Data.Binary.put to_be_encoded_13._g_a_or_b;
                                      Data.Binary.put to_be_encoded_13._key_fingerprint;
                                      Data.Binary.put to_be_encoded_13._protocol;
                                      Data.Binary.put to_be_encoded_13._connections;
                                      Data.Binary.put to_be_encoded_13._start_date}}
instance Data.Binary.Binary PhoneCallAccepted'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _video_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 6);
                     _id_2 <- Data.Binary.get;
                     _access_hash_3 <- Data.Binary.get;
                     _date_4 <- Data.Binary.get;
                     _admin_id_5 <- Data.Binary.get;
                     _participant_id_6 <- Data.Binary.get;
                     _g_b_7 <- Data.Binary.get;
                     _protocol_8 <- Data.Binary.get;
                     GHC.Base.pure (PhoneCallAccepted' _video_1 _id_2 _access_hash_3 _date_4 _admin_id_5 _participant_id_6 _g_b_7 _protocol_8)};
           put to_be_encoded_9 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_9._video,
                                                              6)];
                                     Data.Binary.put to_be_encoded_9._video;
                                     Data.Binary.put to_be_encoded_9._id;
                                     Data.Binary.put to_be_encoded_9._access_hash;
                                     Data.Binary.put to_be_encoded_9._date;
                                     Data.Binary.put to_be_encoded_9._admin_id;
                                     Data.Binary.put to_be_encoded_9._participant_id;
                                     Data.Binary.put to_be_encoded_9._g_b;
                                     Data.Binary.put to_be_encoded_9._protocol}}
instance Data.Binary.Binary PhoneCallDiscarded'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _need_rating_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _need_debug_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     _video_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 6);
                     _id_4 <- Data.Binary.get;
                     _reason_5 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _duration_6 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     GHC.Base.pure (PhoneCallDiscarded' _need_rating_1 _need_debug_2 _video_3 _id_4 _reason_5 _duration_6)};
           put to_be_encoded_7 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_7._duration,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_7._reason,
                                                              0),
                                                             (Data.Maybe.isJust to_be_encoded_7._video,
                                                              6),
                                                             (Data.Maybe.isJust to_be_encoded_7._need_debug,
                                                              3),
                                                             (Data.Maybe.isJust to_be_encoded_7._need_rating,
                                                              2)];
                                     Data.Binary.put to_be_encoded_7._need_rating;
                                     Data.Binary.put to_be_encoded_7._need_debug;
                                     Data.Binary.put to_be_encoded_7._video;
                                     Data.Binary.put to_be_encoded_7._id;
                                     Data.Binary.put to_be_encoded_7._reason;
                                     Data.Binary.put to_be_encoded_7._duration}}
instance Data.Binary.Binary PhoneCallEmpty'
    where {get = do {_id_0 <- Data.Binary.get;
                     GHC.Base.pure (PhoneCallEmpty' _id_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._id}
instance Data.Binary.Binary PhoneCallRequested'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _video_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 6);
                     _id_2 <- Data.Binary.get;
                     _access_hash_3 <- Data.Binary.get;
                     _date_4 <- Data.Binary.get;
                     _admin_id_5 <- Data.Binary.get;
                     _participant_id_6 <- Data.Binary.get;
                     _g_a_hash_7 <- Data.Binary.get;
                     _protocol_8 <- Data.Binary.get;
                     GHC.Base.pure (PhoneCallRequested' _video_1 _id_2 _access_hash_3 _date_4 _admin_id_5 _participant_id_6 _g_a_hash_7 _protocol_8)};
           put to_be_encoded_9 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_9._video,
                                                              6)];
                                     Data.Binary.put to_be_encoded_9._video;
                                     Data.Binary.put to_be_encoded_9._id;
                                     Data.Binary.put to_be_encoded_9._access_hash;
                                     Data.Binary.put to_be_encoded_9._date;
                                     Data.Binary.put to_be_encoded_9._admin_id;
                                     Data.Binary.put to_be_encoded_9._participant_id;
                                     Data.Binary.put to_be_encoded_9._g_a_hash;
                                     Data.Binary.put to_be_encoded_9._protocol}}
instance Data.Binary.Binary PhoneCallWaiting'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _video_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 6);
                     _id_2 <- Data.Binary.get;
                     _access_hash_3 <- Data.Binary.get;
                     _date_4 <- Data.Binary.get;
                     _admin_id_5 <- Data.Binary.get;
                     _participant_id_6 <- Data.Binary.get;
                     _protocol_7 <- Data.Binary.get;
                     _receive_date_8 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     GHC.Base.pure (PhoneCallWaiting' _video_1 _id_2 _access_hash_3 _date_4 _admin_id_5 _participant_id_6 _protocol_7 _receive_date_8)};
           put to_be_encoded_9 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_9._receive_date,
                                                              0),
                                                             (Data.Maybe.isJust to_be_encoded_9._video,
                                                              6)];
                                     Data.Binary.put to_be_encoded_9._video;
                                     Data.Binary.put to_be_encoded_9._id;
                                     Data.Binary.put to_be_encoded_9._access_hash;
                                     Data.Binary.put to_be_encoded_9._date;
                                     Data.Binary.put to_be_encoded_9._admin_id;
                                     Data.Binary.put to_be_encoded_9._participant_id;
                                     Data.Binary.put to_be_encoded_9._protocol;
                                     Data.Binary.put to_be_encoded_9._receive_date}}
data PhoneCall
    = PhoneCall !PhoneCall'
    | PhoneCallAccepted !PhoneCallAccepted'
    | PhoneCallDiscarded !PhoneCallDiscarded'
    | PhoneCallEmpty !PhoneCallEmpty'
    | PhoneCallRequested !PhoneCallRequested'
    | PhoneCallWaiting !PhoneCallWaiting'
data PhoneCall'
    = PhoneCall' {_p2p_allowed :: !(Maybe True'),
                  _video :: !(Maybe True'),
                  _id :: !Long',
                  _access_hash :: !Long',
                  _date :: !Int',
                  _admin_id :: !Long',
                  _participant_id :: !Long',
                  _g_a_or_b :: !Bytes',
                  _key_fingerprint :: !Long',
                  _protocol :: !PhoneCallProtocol,
                  _connections :: !(Vector PhoneConnection),
                  _start_date :: !Int'}
data PhoneCallAccepted'
    = PhoneCallAccepted' {_video :: !(Maybe True'),
                          _id :: !Long',
                          _access_hash :: !Long',
                          _date :: !Int',
                          _admin_id :: !Long',
                          _participant_id :: !Long',
                          _g_b :: !Bytes',
                          _protocol :: !PhoneCallProtocol}
data PhoneCallDiscarded'
    = PhoneCallDiscarded' {_need_rating :: !(Maybe True'),
                           _need_debug :: !(Maybe True'),
                           _video :: !(Maybe True'),
                           _id :: !Long',
                           _reason :: !(Maybe PhoneCallDiscardReason),
                           _duration :: !(Maybe Int')}
data PhoneCallEmpty' = PhoneCallEmpty' {_id :: !Long'}
data PhoneCallRequested'
    = PhoneCallRequested' {_video :: !(Maybe True'),
                           _id :: !Long',
                           _access_hash :: !Long',
                           _date :: !Int',
                           _admin_id :: !Long',
                           _participant_id :: !Long',
                           _g_a_hash :: !Bytes',
                           _protocol :: !PhoneCallProtocol}
data PhoneCallWaiting'
    = PhoneCallWaiting' {_video :: !(Maybe True'),
                         _id :: !Long',
                         _access_hash :: !Long',
                         _date :: !Int',
                         _admin_id :: !Long',
                         _participant_id :: !Long',
                         _protocol :: !PhoneCallProtocol,
                         _receive_date :: !(Maybe Int')}
instance Data.Binary.Binary PhoneCall
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2524937319 -> fmap PhoneCall Data.Binary.get;
                      912311057 -> fmap PhoneCallAccepted Data.Binary.get;
                      1355435489 -> fmap PhoneCallDiscarded Data.Binary.get;
                      1399245077 -> fmap PhoneCallEmpty Data.Binary.get;
                      347139340 -> fmap PhoneCallRequested Data.Binary.get;
                      3307368215 -> fmap PhoneCallWaiting Data.Binary.get}};
           put (PhoneCall tmp_1) = do {Data.Binary.Put.putWord32le 2524937319;
                                       Data.Binary.put tmp_1};
           put (PhoneCallAccepted tmp_2) = do {Data.Binary.Put.putWord32le 912311057;
                                               Data.Binary.put tmp_2};
           put (PhoneCallDiscarded tmp_3) = do {Data.Binary.Put.putWord32le 1355435489;
                                                Data.Binary.put tmp_3};
           put (PhoneCallEmpty tmp_4) = do {Data.Binary.Put.putWord32le 1399245077;
                                            Data.Binary.put tmp_4};
           put (PhoneCallRequested tmp_5) = do {Data.Binary.Put.putWord32le 347139340;
                                                Data.Binary.put tmp_5};
           put (PhoneCallWaiting tmp_6) = do {Data.Binary.Put.putWord32le 3307368215;
                                              Data.Binary.put tmp_6}}
instance Data.Binary.Binary PhoneCallDiscardReasonBusy'
    where {get = GHC.Base.pure PhoneCallDiscardReasonBusy';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary PhoneCallDiscardReasonDisconnect'
    where {get = GHC.Base.pure PhoneCallDiscardReasonDisconnect';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary PhoneCallDiscardReasonHangup'
    where {get = GHC.Base.pure PhoneCallDiscardReasonHangup';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary PhoneCallDiscardReasonMissed'
    where {get = GHC.Base.pure PhoneCallDiscardReasonMissed';
           put to_be_encoded_0 = do GHC.Base.pure ()}
data PhoneCallDiscardReason
    = PhoneCallDiscardReasonBusy !PhoneCallDiscardReasonBusy'
    | PhoneCallDiscardReasonDisconnect !PhoneCallDiscardReasonDisconnect'
    | PhoneCallDiscardReasonHangup !PhoneCallDiscardReasonHangup'
    | PhoneCallDiscardReasonMissed !PhoneCallDiscardReasonMissed'
data PhoneCallDiscardReasonBusy' = PhoneCallDiscardReasonBusy' {}
data PhoneCallDiscardReasonDisconnect'
    = PhoneCallDiscardReasonDisconnect' {}
data PhoneCallDiscardReasonHangup'
    = PhoneCallDiscardReasonHangup' {}
data PhoneCallDiscardReasonMissed'
    = PhoneCallDiscardReasonMissed' {}
instance Data.Binary.Binary PhoneCallDiscardReason
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {4210550985 -> fmap PhoneCallDiscardReasonBusy Data.Binary.get;
                      3767910816 -> fmap PhoneCallDiscardReasonDisconnect Data.Binary.get;
                      1471006352 -> fmap PhoneCallDiscardReasonHangup Data.Binary.get;
                      2246320897 -> fmap PhoneCallDiscardReasonMissed Data.Binary.get}};
           put (PhoneCallDiscardReasonBusy tmp_1) = do {Data.Binary.Put.putWord32le 4210550985;
                                                        Data.Binary.put tmp_1};
           put (PhoneCallDiscardReasonDisconnect tmp_2) = do {Data.Binary.Put.putWord32le 3767910816;
                                                              Data.Binary.put tmp_2};
           put (PhoneCallDiscardReasonHangup tmp_3) = do {Data.Binary.Put.putWord32le 1471006352;
                                                          Data.Binary.put tmp_3};
           put (PhoneCallDiscardReasonMissed tmp_4) = do {Data.Binary.Put.putWord32le 2246320897;
                                                          Data.Binary.put tmp_4}}
instance Data.Binary.Binary PhoneCallProtocol'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _udp_p2p_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _udp_reflector_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _min_layer_3 <- Data.Binary.get;
                     _max_layer_4 <- Data.Binary.get;
                     _library_versions_5 <- Data.Binary.get;
                     GHC.Base.pure (PhoneCallProtocol' _udp_p2p_1 _udp_reflector_2 _min_layer_3 _max_layer_4 _library_versions_5)};
           put to_be_encoded_6 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_6._udp_reflector,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_6._udp_p2p,
                                                              0)];
                                     Data.Binary.put to_be_encoded_6._udp_p2p;
                                     Data.Binary.put to_be_encoded_6._udp_reflector;
                                     Data.Binary.put to_be_encoded_6._min_layer;
                                     Data.Binary.put to_be_encoded_6._max_layer;
                                     Data.Binary.put to_be_encoded_6._library_versions}}
data PhoneCallProtocol = PhoneCallProtocol !PhoneCallProtocol'
data PhoneCallProtocol'
    = PhoneCallProtocol' {_udp_p2p :: !(Maybe True'),
                          _udp_reflector :: !(Maybe True'),
                          _min_layer :: !Int',
                          _max_layer :: !Int',
                          _library_versions :: !(Vector String')}
instance Data.Binary.Binary PhoneCallProtocol
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {4236742600 -> fmap PhoneCallProtocol Data.Binary.get}};
           put (PhoneCallProtocol tmp_1) = do {Data.Binary.Put.putWord32le 4236742600;
                                               Data.Binary.put tmp_1}}
instance Data.Binary.Binary PhoneConnection'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _tcp_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _id_2 <- Data.Binary.get;
                     _ip_3 <- Data.Binary.get;
                     _ipv6_4 <- Data.Binary.get;
                     _port_5 <- Data.Binary.get;
                     _peer_tag_6 <- Data.Binary.get;
                     GHC.Base.pure (PhoneConnection' _tcp_1 _id_2 _ip_3 _ipv6_4 _port_5 _peer_tag_6)};
           put to_be_encoded_7 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_7._tcp,
                                                              0)];
                                     Data.Binary.put to_be_encoded_7._tcp;
                                     Data.Binary.put to_be_encoded_7._id;
                                     Data.Binary.put to_be_encoded_7._ip;
                                     Data.Binary.put to_be_encoded_7._ipv6;
                                     Data.Binary.put to_be_encoded_7._port;
                                     Data.Binary.put to_be_encoded_7._peer_tag}}
instance Data.Binary.Binary PhoneConnectionWebrtc'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _turn_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _stun_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _id_3 <- Data.Binary.get;
                     _ip_4 <- Data.Binary.get;
                     _ipv6_5 <- Data.Binary.get;
                     _port_6 <- Data.Binary.get;
                     _username_7 <- Data.Binary.get;
                     _password_8 <- Data.Binary.get;
                     GHC.Base.pure (PhoneConnectionWebrtc' _turn_1 _stun_2 _id_3 _ip_4 _ipv6_5 _port_6 _username_7 _password_8)};
           put to_be_encoded_9 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_9._stun,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_9._turn,
                                                              0)];
                                     Data.Binary.put to_be_encoded_9._turn;
                                     Data.Binary.put to_be_encoded_9._stun;
                                     Data.Binary.put to_be_encoded_9._id;
                                     Data.Binary.put to_be_encoded_9._ip;
                                     Data.Binary.put to_be_encoded_9._ipv6;
                                     Data.Binary.put to_be_encoded_9._port;
                                     Data.Binary.put to_be_encoded_9._username;
                                     Data.Binary.put to_be_encoded_9._password}}
data PhoneConnection
    = PhoneConnection !PhoneConnection'
    | PhoneConnectionWebrtc !PhoneConnectionWebrtc'
data PhoneConnection'
    = PhoneConnection' {_tcp :: !(Maybe True'),
                        _id :: !Long',
                        _ip :: !String',
                        _ipv6 :: !String',
                        _port :: !Int',
                        _peer_tag :: !Bytes'}
data PhoneConnectionWebrtc'
    = PhoneConnectionWebrtc' {_turn :: !(Maybe True'),
                              _stun :: !(Maybe True'),
                              _id :: !Long',
                              _ip :: !String',
                              _ipv6 :: !String',
                              _port :: !Int',
                              _username :: !String',
                              _password :: !String'}
instance Data.Binary.Binary PhoneConnection
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2629903303 -> fmap PhoneConnection Data.Binary.get;
                      1667228533 -> fmap PhoneConnectionWebrtc Data.Binary.get}};
           put (PhoneConnection tmp_1) = do {Data.Binary.Put.putWord32le 2629903303;
                                             Data.Binary.put tmp_1};
           put (PhoneConnectionWebrtc tmp_2) = do {Data.Binary.Put.putWord32le 1667228533;
                                                   Data.Binary.put tmp_2}}
instance Data.Binary.Binary Photo'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _has_stickers_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _id_2 <- Data.Binary.get;
                     _access_hash_3 <- Data.Binary.get;
                     _file_reference_4 <- Data.Binary.get;
                     _date_5 <- Data.Binary.get;
                     _sizes_6 <- Data.Binary.get;
                     _video_sizes_7 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _dc_id_8 <- Data.Binary.get;
                     GHC.Base.pure (Photo' _has_stickers_1 _id_2 _access_hash_3 _file_reference_4 _date_5 _sizes_6 _video_sizes_7 _dc_id_8)};
           put to_be_encoded_9 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_9._video_sizes,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_9._has_stickers,
                                                              0)];
                                     Data.Binary.put to_be_encoded_9._has_stickers;
                                     Data.Binary.put to_be_encoded_9._id;
                                     Data.Binary.put to_be_encoded_9._access_hash;
                                     Data.Binary.put to_be_encoded_9._file_reference;
                                     Data.Binary.put to_be_encoded_9._date;
                                     Data.Binary.put to_be_encoded_9._sizes;
                                     Data.Binary.put to_be_encoded_9._video_sizes;
                                     Data.Binary.put to_be_encoded_9._dc_id}}
instance Data.Binary.Binary PhotoEmpty'
    where {get = do {_id_0 <- Data.Binary.get;
                     GHC.Base.pure (PhotoEmpty' _id_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._id}
data Photo
    = Photo !Photo'
    | PhotoEmpty !PhotoEmpty'
data Photo'
    = Photo' {_has_stickers :: !(Maybe True'),
              _id :: !Long',
              _access_hash :: !Long',
              _file_reference :: !Bytes',
              _date :: !Int',
              _sizes :: !(Vector PhotoSize),
              _video_sizes :: !(Maybe (Vector VideoSize)),
              _dc_id :: !Int'}
data PhotoEmpty' = PhotoEmpty' {_id :: !Long'}
instance Data.Binary.Binary Photo
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {4212750949 -> fmap Photo Data.Binary.get;
                      590459437 -> fmap PhotoEmpty Data.Binary.get}};
           put (Photo tmp_1) = do {Data.Binary.Put.putWord32le 4212750949;
                                   Data.Binary.put tmp_1};
           put (PhotoEmpty tmp_2) = do {Data.Binary.Put.putWord32le 590459437;
                                        Data.Binary.put tmp_2}}
instance Data.Binary.Binary PhotoCachedSize'
    where {get = do {_type_0 <- Data.Binary.get;
                     _w_1 <- Data.Binary.get;
                     _h_2 <- Data.Binary.get;
                     _bytes_3 <- Data.Binary.get;
                     GHC.Base.pure (PhotoCachedSize' _type_0 _w_1 _h_2 _bytes_3)};
           put to_be_encoded_4 = do {Data.Binary.put to_be_encoded_4._type;
                                     Data.Binary.put to_be_encoded_4._w;
                                     Data.Binary.put to_be_encoded_4._h;
                                     Data.Binary.put to_be_encoded_4._bytes}}
instance Data.Binary.Binary PhotoPathSize'
    where {get = do {_type_0 <- Data.Binary.get;
                     _bytes_1 <- Data.Binary.get;
                     GHC.Base.pure (PhotoPathSize' _type_0 _bytes_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._type;
                                     Data.Binary.put to_be_encoded_2._bytes}}
instance Data.Binary.Binary PhotoSize'
    where {get = do {_type_0 <- Data.Binary.get;
                     _w_1 <- Data.Binary.get;
                     _h_2 <- Data.Binary.get;
                     _size_3 <- Data.Binary.get;
                     GHC.Base.pure (PhotoSize' _type_0 _w_1 _h_2 _size_3)};
           put to_be_encoded_4 = do {Data.Binary.put to_be_encoded_4._type;
                                     Data.Binary.put to_be_encoded_4._w;
                                     Data.Binary.put to_be_encoded_4._h;
                                     Data.Binary.put to_be_encoded_4._size}}
instance Data.Binary.Binary PhotoSizeEmpty'
    where {get = do {_type_0 <- Data.Binary.get;
                     GHC.Base.pure (PhotoSizeEmpty' _type_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._type}
instance Data.Binary.Binary PhotoSizeProgressive'
    where {get = do {_type_0 <- Data.Binary.get;
                     _w_1 <- Data.Binary.get;
                     _h_2 <- Data.Binary.get;
                     _sizes_3 <- Data.Binary.get;
                     GHC.Base.pure (PhotoSizeProgressive' _type_0 _w_1 _h_2 _sizes_3)};
           put to_be_encoded_4 = do {Data.Binary.put to_be_encoded_4._type;
                                     Data.Binary.put to_be_encoded_4._w;
                                     Data.Binary.put to_be_encoded_4._h;
                                     Data.Binary.put to_be_encoded_4._sizes}}
instance Data.Binary.Binary PhotoStrippedSize'
    where {get = do {_type_0 <- Data.Binary.get;
                     _bytes_1 <- Data.Binary.get;
                     GHC.Base.pure (PhotoStrippedSize' _type_0 _bytes_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._type;
                                     Data.Binary.put to_be_encoded_2._bytes}}
data PhotoSize
    = PhotoCachedSize !PhotoCachedSize'
    | PhotoPathSize !PhotoPathSize'
    | PhotoSize !PhotoSize'
    | PhotoSizeEmpty !PhotoSizeEmpty'
    | PhotoSizeProgressive !PhotoSizeProgressive'
    | PhotoStrippedSize !PhotoStrippedSize'
data PhotoCachedSize'
    = PhotoCachedSize' {_type :: !String',
                        _w :: !Int',
                        _h :: !Int',
                        _bytes :: !Bytes'}
data PhotoPathSize'
    = PhotoPathSize' {_type :: !String', _bytes :: !Bytes'}
data PhotoSize'
    = PhotoSize' {_type :: !String',
                  _w :: !Int',
                  _h :: !Int',
                  _size :: !Int'}
data PhotoSizeEmpty' = PhotoSizeEmpty' {_type :: !String'}
data PhotoSizeProgressive'
    = PhotoSizeProgressive' {_type :: !String',
                             _w :: !Int',
                             _h :: !Int',
                             _sizes :: !(Vector Int')}
data PhotoStrippedSize'
    = PhotoStrippedSize' {_type :: !String', _bytes :: !Bytes'}
instance Data.Binary.Binary PhotoSize
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {35527382 -> fmap PhotoCachedSize Data.Binary.get;
                      3626061121 -> fmap PhotoPathSize Data.Binary.get;
                      1976012384 -> fmap PhotoSize Data.Binary.get;
                      236446268 -> fmap PhotoSizeEmpty Data.Binary.get;
                      4198431637 -> fmap PhotoSizeProgressive Data.Binary.get;
                      3769678894 -> fmap PhotoStrippedSize Data.Binary.get}};
           put (PhotoCachedSize tmp_1) = do {Data.Binary.Put.putWord32le 35527382;
                                             Data.Binary.put tmp_1};
           put (PhotoPathSize tmp_2) = do {Data.Binary.Put.putWord32le 3626061121;
                                           Data.Binary.put tmp_2};
           put (PhotoSize tmp_3) = do {Data.Binary.Put.putWord32le 1976012384;
                                       Data.Binary.put tmp_3};
           put (PhotoSizeEmpty tmp_4) = do {Data.Binary.Put.putWord32le 236446268;
                                            Data.Binary.put tmp_4};
           put (PhotoSizeProgressive tmp_5) = do {Data.Binary.Put.putWord32le 4198431637;
                                                  Data.Binary.put tmp_5};
           put (PhotoStrippedSize tmp_6) = do {Data.Binary.Put.putWord32le 3769678894;
                                               Data.Binary.put tmp_6}}
instance Data.Binary.Binary Poll'
    where {get = do {_id_0 <- Data.Binary.get;
                     _flags_1 <- Data.Binary.Get.getWord32le;
                     _closed_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                     _public_voters_3 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 1);
                     _multiple_choice_4 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 2);
                     _quiz_5 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 3);
                     _question_6 <- Data.Binary.get;
                     _answers_7 <- Data.Binary.get;
                     _close_period_8 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 4);
                     _close_date_9 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 5);
                     GHC.Base.pure (Poll' _id_0 _closed_2 _public_voters_3 _multiple_choice_4 _quiz_5 _question_6 _answers_7 _close_period_8 _close_date_9)};
           put to_be_encoded_10 = do {Data.Binary.put to_be_encoded_10._id;
                                      Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_10._close_date,
                                                               5),
                                                              (Data.Maybe.isJust to_be_encoded_10._close_period,
                                                               4),
                                                              (Data.Maybe.isJust to_be_encoded_10._quiz,
                                                               3),
                                                              (Data.Maybe.isJust to_be_encoded_10._multiple_choice,
                                                               2),
                                                              (Data.Maybe.isJust to_be_encoded_10._public_voters,
                                                               1),
                                                              (Data.Maybe.isJust to_be_encoded_10._closed,
                                                               0)];
                                      Data.Binary.put to_be_encoded_10._closed;
                                      Data.Binary.put to_be_encoded_10._public_voters;
                                      Data.Binary.put to_be_encoded_10._multiple_choice;
                                      Data.Binary.put to_be_encoded_10._quiz;
                                      Data.Binary.put to_be_encoded_10._question;
                                      Data.Binary.put to_be_encoded_10._answers;
                                      Data.Binary.put to_be_encoded_10._close_period;
                                      Data.Binary.put to_be_encoded_10._close_date}}
data Poll = Poll !Poll'
data Poll'
    = Poll' {_id :: !Long',
             _closed :: !(Maybe True'),
             _public_voters :: !(Maybe True'),
             _multiple_choice :: !(Maybe True'),
             _quiz :: !(Maybe True'),
             _question :: !String',
             _answers :: !(Vector PollAnswer),
             _close_period :: !(Maybe Int'),
             _close_date :: !(Maybe Int')}
instance Data.Binary.Binary Poll
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2262925665 -> fmap Poll Data.Binary.get}};
           put (Poll tmp_1) = do {Data.Binary.Put.putWord32le 2262925665;
                                  Data.Binary.put tmp_1}}
instance Data.Binary.Binary PollAnswer'
    where {get = do {_text_0 <- Data.Binary.get;
                     _option_1 <- Data.Binary.get;
                     GHC.Base.pure (PollAnswer' _text_0 _option_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._text;
                                     Data.Binary.put to_be_encoded_2._option}}
data PollAnswer = PollAnswer !PollAnswer'
data PollAnswer'
    = PollAnswer' {_text :: !String', _option :: !Bytes'}
instance Data.Binary.Binary PollAnswer
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1823064809 -> fmap PollAnswer Data.Binary.get}};
           put (PollAnswer tmp_1) = do {Data.Binary.Put.putWord32le 1823064809;
                                        Data.Binary.put tmp_1}}
instance Data.Binary.Binary PollAnswerVoters'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _chosen_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _correct_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _option_3 <- Data.Binary.get;
                     _voters_4 <- Data.Binary.get;
                     GHC.Base.pure (PollAnswerVoters' _chosen_1 _correct_2 _option_3 _voters_4)};
           put to_be_encoded_5 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_5._correct,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_5._chosen,
                                                              0)];
                                     Data.Binary.put to_be_encoded_5._chosen;
                                     Data.Binary.put to_be_encoded_5._correct;
                                     Data.Binary.put to_be_encoded_5._option;
                                     Data.Binary.put to_be_encoded_5._voters}}
data PollAnswerVoters = PollAnswerVoters !PollAnswerVoters'
data PollAnswerVoters'
    = PollAnswerVoters' {_chosen :: !(Maybe True'),
                         _correct :: !(Maybe True'),
                         _option :: !Bytes',
                         _voters :: !Int'}
instance Data.Binary.Binary PollAnswerVoters
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {997055186 -> fmap PollAnswerVoters Data.Binary.get}};
           put (PollAnswerVoters tmp_1) = do {Data.Binary.Put.putWord32le 997055186;
                                              Data.Binary.put tmp_1}}
instance Data.Binary.Binary PollResults'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _min_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _results_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _total_voters_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _recent_voters_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     _solution_5 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 4);
                     _solution_entities_6 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 4);
                     GHC.Base.pure (PollResults' _min_1 _results_2 _total_voters_3 _recent_voters_4 _solution_5 _solution_entities_6)};
           put to_be_encoded_7 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_7._solution_entities,
                                                              4),
                                                             (Data.Maybe.isJust to_be_encoded_7._solution,
                                                              4),
                                                             (Data.Maybe.isJust to_be_encoded_7._recent_voters,
                                                              3),
                                                             (Data.Maybe.isJust to_be_encoded_7._total_voters,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_7._results,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_7._min,
                                                              0)];
                                     Data.Binary.put to_be_encoded_7._min;
                                     Data.Binary.put to_be_encoded_7._results;
                                     Data.Binary.put to_be_encoded_7._total_voters;
                                     Data.Binary.put to_be_encoded_7._recent_voters;
                                     Data.Binary.put to_be_encoded_7._solution;
                                     Data.Binary.put to_be_encoded_7._solution_entities}}
data PollResults = PollResults !PollResults'
data PollResults'
    = PollResults' {_min :: !(Maybe True'),
                    _results :: !(Maybe (Vector PollAnswerVoters)),
                    _total_voters :: !(Maybe Int'),
                    _recent_voters :: !(Maybe (Vector Peer)),
                    _solution :: !(Maybe String'),
                    _solution_entities :: !(Maybe (Vector MessageEntity))}
instance Data.Binary.Binary PollResults
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2061444128 -> fmap PollResults Data.Binary.get}};
           put (PollResults tmp_1) = do {Data.Binary.Put.putWord32le 2061444128;
                                         Data.Binary.put tmp_1}}
instance Data.Binary.Binary PopularContact'
    where {get = do {_client_id_0 <- Data.Binary.get;
                     _importers_1 <- Data.Binary.get;
                     GHC.Base.pure (PopularContact' _client_id_0 _importers_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._client_id;
                                     Data.Binary.put to_be_encoded_2._importers}}
data PopularContact = PopularContact !PopularContact'
data PopularContact'
    = PopularContact' {_client_id :: !Long', _importers :: !Int'}
instance Data.Binary.Binary PopularContact
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1558266229 -> fmap PopularContact Data.Binary.get}};
           put (PopularContact tmp_1) = do {Data.Binary.Put.putWord32le 1558266229;
                                            Data.Binary.put tmp_1}}
instance Data.Binary.Binary PostAddress'
    where {get = do {_street_line1_0 <- Data.Binary.get;
                     _street_line2_1 <- Data.Binary.get;
                     _city_2 <- Data.Binary.get;
                     _state_3 <- Data.Binary.get;
                     _country_iso2_4 <- Data.Binary.get;
                     _post_code_5 <- Data.Binary.get;
                     GHC.Base.pure (PostAddress' _street_line1_0 _street_line2_1 _city_2 _state_3 _country_iso2_4 _post_code_5)};
           put to_be_encoded_6 = do {Data.Binary.put to_be_encoded_6._street_line1;
                                     Data.Binary.put to_be_encoded_6._street_line2;
                                     Data.Binary.put to_be_encoded_6._city;
                                     Data.Binary.put to_be_encoded_6._state;
                                     Data.Binary.put to_be_encoded_6._country_iso2;
                                     Data.Binary.put to_be_encoded_6._post_code}}
data PostAddress = PostAddress !PostAddress'
data PostAddress'
    = PostAddress' {_street_line1 :: !String',
                    _street_line2 :: !String',
                    _city :: !String',
                    _state :: !String',
                    _country_iso2 :: !String',
                    _post_code :: !String'}
instance Data.Binary.Binary PostAddress
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {512535275 -> fmap PostAddress Data.Binary.get}};
           put (PostAddress tmp_1) = do {Data.Binary.Put.putWord32le 512535275;
                                         Data.Binary.put tmp_1}}
instance Data.Binary.Binary PostInteractionCountersMessage'
    where {get = do {_msg_id_0 <- Data.Binary.get;
                     _views_1 <- Data.Binary.get;
                     _forwards_2 <- Data.Binary.get;
                     _reactions_3 <- Data.Binary.get;
                     GHC.Base.pure (PostInteractionCountersMessage' _msg_id_0 _views_1 _forwards_2 _reactions_3)};
           put to_be_encoded_4 = do {Data.Binary.put to_be_encoded_4._msg_id;
                                     Data.Binary.put to_be_encoded_4._views;
                                     Data.Binary.put to_be_encoded_4._forwards;
                                     Data.Binary.put to_be_encoded_4._reactions}}
instance Data.Binary.Binary PostInteractionCountersStory'
    where {get = do {_story_id_0 <- Data.Binary.get;
                     _views_1 <- Data.Binary.get;
                     _forwards_2 <- Data.Binary.get;
                     _reactions_3 <- Data.Binary.get;
                     GHC.Base.pure (PostInteractionCountersStory' _story_id_0 _views_1 _forwards_2 _reactions_3)};
           put to_be_encoded_4 = do {Data.Binary.put to_be_encoded_4._story_id;
                                     Data.Binary.put to_be_encoded_4._views;
                                     Data.Binary.put to_be_encoded_4._forwards;
                                     Data.Binary.put to_be_encoded_4._reactions}}
data PostInteractionCounters
    = PostInteractionCountersMessage !PostInteractionCountersMessage'
    | PostInteractionCountersStory !PostInteractionCountersStory'
data PostInteractionCountersMessage'
    = PostInteractionCountersMessage' {_msg_id :: !Int',
                                       _views :: !Int',
                                       _forwards :: !Int',
                                       _reactions :: !Int'}
data PostInteractionCountersStory'
    = PostInteractionCountersStory' {_story_id :: !Int',
                                     _views :: !Int',
                                     _forwards :: !Int',
                                     _reactions :: !Int'}
instance Data.Binary.Binary PostInteractionCounters
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3875901055 -> fmap PostInteractionCountersMessage Data.Binary.get;
                      2319978023 -> fmap PostInteractionCountersStory Data.Binary.get}};
           put (PostInteractionCountersMessage tmp_1) = do {Data.Binary.Put.putWord32le 3875901055;
                                                            Data.Binary.put tmp_1};
           put (PostInteractionCountersStory tmp_2) = do {Data.Binary.Put.putWord32le 2319978023;
                                                          Data.Binary.put tmp_2}}
instance Data.Binary.Binary PremiumGiftCodeOption'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _users_1 <- Data.Binary.get;
                     _months_2 <- Data.Binary.get;
                     _store_product_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _store_quantity_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _currency_5 <- Data.Binary.get;
                     _amount_6 <- Data.Binary.get;
                     GHC.Base.pure (PremiumGiftCodeOption' _users_1 _months_2 _store_product_3 _store_quantity_4 _currency_5 _amount_6)};
           put to_be_encoded_7 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_7._store_quantity,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_7._store_product,
                                                              0)];
                                     Data.Binary.put to_be_encoded_7._users;
                                     Data.Binary.put to_be_encoded_7._months;
                                     Data.Binary.put to_be_encoded_7._store_product;
                                     Data.Binary.put to_be_encoded_7._store_quantity;
                                     Data.Binary.put to_be_encoded_7._currency;
                                     Data.Binary.put to_be_encoded_7._amount}}
data PremiumGiftCodeOption
    = PremiumGiftCodeOption !PremiumGiftCodeOption'
data PremiumGiftCodeOption'
    = PremiumGiftCodeOption' {_users :: !Int',
                              _months :: !Int',
                              _store_product :: !(Maybe String'),
                              _store_quantity :: !(Maybe Int'),
                              _currency :: !String',
                              _amount :: !Long'}
instance Data.Binary.Binary PremiumGiftCodeOption
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {629052971 -> fmap PremiumGiftCodeOption Data.Binary.get}};
           put (PremiumGiftCodeOption tmp_1) = do {Data.Binary.Put.putWord32le 629052971;
                                                   Data.Binary.put tmp_1}}
instance Data.Binary.Binary PremiumGiftOption'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _months_1 <- Data.Binary.get;
                     _currency_2 <- Data.Binary.get;
                     _amount_3 <- Data.Binary.get;
                     _bot_url_4 <- Data.Binary.get;
                     _store_product_5 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     GHC.Base.pure (PremiumGiftOption' _months_1 _currency_2 _amount_3 _bot_url_4 _store_product_5)};
           put to_be_encoded_6 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_6._store_product,
                                                              0)];
                                     Data.Binary.put to_be_encoded_6._months;
                                     Data.Binary.put to_be_encoded_6._currency;
                                     Data.Binary.put to_be_encoded_6._amount;
                                     Data.Binary.put to_be_encoded_6._bot_url;
                                     Data.Binary.put to_be_encoded_6._store_product}}
data PremiumGiftOption = PremiumGiftOption !PremiumGiftOption'
data PremiumGiftOption'
    = PremiumGiftOption' {_months :: !Int',
                          _currency :: !String',
                          _amount :: !Long',
                          _bot_url :: !String',
                          _store_product :: !(Maybe String')}
instance Data.Binary.Binary PremiumGiftOption
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1958953753 -> fmap PremiumGiftOption Data.Binary.get}};
           put (PremiumGiftOption tmp_1) = do {Data.Binary.Put.putWord32le 1958953753;
                                               Data.Binary.put tmp_1}}
instance Data.Binary.Binary PremiumSubscriptionOption'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _current_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _can_purchase_upgrade_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _transaction_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     _months_4 <- Data.Binary.get;
                     _currency_5 <- Data.Binary.get;
                     _amount_6 <- Data.Binary.get;
                     _bot_url_7 <- Data.Binary.get;
                     _store_product_8 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     GHC.Base.pure (PremiumSubscriptionOption' _current_1 _can_purchase_upgrade_2 _transaction_3 _months_4 _currency_5 _amount_6 _bot_url_7 _store_product_8)};
           put to_be_encoded_9 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_9._store_product,
                                                              0),
                                                             (Data.Maybe.isJust to_be_encoded_9._transaction,
                                                              3),
                                                             (Data.Maybe.isJust to_be_encoded_9._can_purchase_upgrade,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_9._current,
                                                              1)];
                                     Data.Binary.put to_be_encoded_9._current;
                                     Data.Binary.put to_be_encoded_9._can_purchase_upgrade;
                                     Data.Binary.put to_be_encoded_9._transaction;
                                     Data.Binary.put to_be_encoded_9._months;
                                     Data.Binary.put to_be_encoded_9._currency;
                                     Data.Binary.put to_be_encoded_9._amount;
                                     Data.Binary.put to_be_encoded_9._bot_url;
                                     Data.Binary.put to_be_encoded_9._store_product}}
data PremiumSubscriptionOption
    = PremiumSubscriptionOption !PremiumSubscriptionOption'
data PremiumSubscriptionOption'
    = PremiumSubscriptionOption' {_current :: !(Maybe True'),
                                  _can_purchase_upgrade :: !(Maybe True'),
                                  _transaction :: !(Maybe String'),
                                  _months :: !Int',
                                  _currency :: !String',
                                  _amount :: !Long',
                                  _bot_url :: !String',
                                  _store_product :: !(Maybe String')}
instance Data.Binary.Binary PremiumSubscriptionOption
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1596792306 -> fmap PremiumSubscriptionOption Data.Binary.get}};
           put (PremiumSubscriptionOption tmp_1) = do {Data.Binary.Put.putWord32le 1596792306;
                                                       Data.Binary.put tmp_1}}
instance Data.Binary.Binary PrepaidGiveaway'
    where {get = do {_id_0 <- Data.Binary.get;
                     _months_1 <- Data.Binary.get;
                     _quantity_2 <- Data.Binary.get;
                     _date_3 <- Data.Binary.get;
                     GHC.Base.pure (PrepaidGiveaway' _id_0 _months_1 _quantity_2 _date_3)};
           put to_be_encoded_4 = do {Data.Binary.put to_be_encoded_4._id;
                                     Data.Binary.put to_be_encoded_4._months;
                                     Data.Binary.put to_be_encoded_4._quantity;
                                     Data.Binary.put to_be_encoded_4._date}}
data PrepaidGiveaway = PrepaidGiveaway !PrepaidGiveaway'
data PrepaidGiveaway'
    = PrepaidGiveaway' {_id :: !Long',
                        _months :: !Int',
                        _quantity :: !Int',
                        _date :: !Int'}
instance Data.Binary.Binary PrepaidGiveaway
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2991824212 -> fmap PrepaidGiveaway Data.Binary.get}};
           put (PrepaidGiveaway tmp_1) = do {Data.Binary.Put.putWord32le 2991824212;
                                             Data.Binary.put tmp_1}}
instance Data.Binary.Binary PrivacyKeyAbout'
    where {get = GHC.Base.pure PrivacyKeyAbout';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary PrivacyKeyAddedByPhone'
    where {get = GHC.Base.pure PrivacyKeyAddedByPhone';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary PrivacyKeyChatInvite'
    where {get = GHC.Base.pure PrivacyKeyChatInvite';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary PrivacyKeyForwards'
    where {get = GHC.Base.pure PrivacyKeyForwards';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary PrivacyKeyPhoneCall'
    where {get = GHC.Base.pure PrivacyKeyPhoneCall';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary PrivacyKeyPhoneNumber'
    where {get = GHC.Base.pure PrivacyKeyPhoneNumber';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary PrivacyKeyPhoneP2P'
    where {get = GHC.Base.pure PrivacyKeyPhoneP2P';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary PrivacyKeyProfilePhoto'
    where {get = GHC.Base.pure PrivacyKeyProfilePhoto';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary PrivacyKeyStatusTimestamp'
    where {get = GHC.Base.pure PrivacyKeyStatusTimestamp';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary PrivacyKeyVoiceMessages'
    where {get = GHC.Base.pure PrivacyKeyVoiceMessages';
           put to_be_encoded_0 = do GHC.Base.pure ()}
data PrivacyKey
    = PrivacyKeyAbout !PrivacyKeyAbout'
    | PrivacyKeyAddedByPhone !PrivacyKeyAddedByPhone'
    | PrivacyKeyChatInvite !PrivacyKeyChatInvite'
    | PrivacyKeyForwards !PrivacyKeyForwards'
    | PrivacyKeyPhoneCall !PrivacyKeyPhoneCall'
    | PrivacyKeyPhoneNumber !PrivacyKeyPhoneNumber'
    | PrivacyKeyPhoneP2P !PrivacyKeyPhoneP2P'
    | PrivacyKeyProfilePhoto !PrivacyKeyProfilePhoto'
    | PrivacyKeyStatusTimestamp !PrivacyKeyStatusTimestamp'
    | PrivacyKeyVoiceMessages !PrivacyKeyVoiceMessages'
data PrivacyKeyAbout' = PrivacyKeyAbout' {}
data PrivacyKeyAddedByPhone' = PrivacyKeyAddedByPhone' {}
data PrivacyKeyChatInvite' = PrivacyKeyChatInvite' {}
data PrivacyKeyForwards' = PrivacyKeyForwards' {}
data PrivacyKeyPhoneCall' = PrivacyKeyPhoneCall' {}
data PrivacyKeyPhoneNumber' = PrivacyKeyPhoneNumber' {}
data PrivacyKeyPhoneP2P' = PrivacyKeyPhoneP2P' {}
data PrivacyKeyProfilePhoto' = PrivacyKeyProfilePhoto' {}
data PrivacyKeyStatusTimestamp' = PrivacyKeyStatusTimestamp' {}
data PrivacyKeyVoiceMessages' = PrivacyKeyVoiceMessages' {}
instance Data.Binary.Binary PrivacyKey
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2760292193 -> fmap PrivacyKeyAbout Data.Binary.get;
                      1124062251 -> fmap PrivacyKeyAddedByPhone Data.Binary.get;
                      1343122938 -> fmap PrivacyKeyChatInvite Data.Binary.get;
                      1777096355 -> fmap PrivacyKeyForwards Data.Binary.get;
                      1030105979 -> fmap PrivacyKeyPhoneCall Data.Binary.get;
                      3516589165 -> fmap PrivacyKeyPhoneNumber Data.Binary.get;
                      961092808 -> fmap PrivacyKeyPhoneP2P Data.Binary.get;
                      2517966829 -> fmap PrivacyKeyProfilePhoto Data.Binary.get;
                      3157175088 -> fmap PrivacyKeyStatusTimestamp Data.Binary.get;
                      110621716 -> fmap PrivacyKeyVoiceMessages Data.Binary.get}};
           put (PrivacyKeyAbout tmp_1) = do {Data.Binary.Put.putWord32le 2760292193;
                                             Data.Binary.put tmp_1};
           put (PrivacyKeyAddedByPhone tmp_2) = do {Data.Binary.Put.putWord32le 1124062251;
                                                    Data.Binary.put tmp_2};
           put (PrivacyKeyChatInvite tmp_3) = do {Data.Binary.Put.putWord32le 1343122938;
                                                  Data.Binary.put tmp_3};
           put (PrivacyKeyForwards tmp_4) = do {Data.Binary.Put.putWord32le 1777096355;
                                                Data.Binary.put tmp_4};
           put (PrivacyKeyPhoneCall tmp_5) = do {Data.Binary.Put.putWord32le 1030105979;
                                                 Data.Binary.put tmp_5};
           put (PrivacyKeyPhoneNumber tmp_6) = do {Data.Binary.Put.putWord32le 3516589165;
                                                   Data.Binary.put tmp_6};
           put (PrivacyKeyPhoneP2P tmp_7) = do {Data.Binary.Put.putWord32le 961092808;
                                                Data.Binary.put tmp_7};
           put (PrivacyKeyProfilePhoto tmp_8) = do {Data.Binary.Put.putWord32le 2517966829;
                                                    Data.Binary.put tmp_8};
           put (PrivacyKeyStatusTimestamp tmp_9) = do {Data.Binary.Put.putWord32le 3157175088;
                                                       Data.Binary.put tmp_9};
           put (PrivacyKeyVoiceMessages tmp_10) = do {Data.Binary.Put.putWord32le 110621716;
                                                      Data.Binary.put tmp_10}}
instance Data.Binary.Binary PrivacyValueAllowAll'
    where {get = GHC.Base.pure PrivacyValueAllowAll';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary PrivacyValueAllowChatParticipants'
    where {get = do {_chats_0 <- Data.Binary.get;
                     GHC.Base.pure (PrivacyValueAllowChatParticipants' _chats_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._chats}
instance Data.Binary.Binary PrivacyValueAllowCloseFriends'
    where {get = GHC.Base.pure PrivacyValueAllowCloseFriends';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary PrivacyValueAllowContacts'
    where {get = GHC.Base.pure PrivacyValueAllowContacts';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary PrivacyValueAllowUsers'
    where {get = do {_users_0 <- Data.Binary.get;
                     GHC.Base.pure (PrivacyValueAllowUsers' _users_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._users}
instance Data.Binary.Binary PrivacyValueDisallowAll'
    where {get = GHC.Base.pure PrivacyValueDisallowAll';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary PrivacyValueDisallowChatParticipants'
    where {get = do {_chats_0 <- Data.Binary.get;
                     GHC.Base.pure (PrivacyValueDisallowChatParticipants' _chats_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._chats}
instance Data.Binary.Binary PrivacyValueDisallowContacts'
    where {get = GHC.Base.pure PrivacyValueDisallowContacts';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary PrivacyValueDisallowUsers'
    where {get = do {_users_0 <- Data.Binary.get;
                     GHC.Base.pure (PrivacyValueDisallowUsers' _users_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._users}
data PrivacyRule
    = PrivacyValueAllowAll !PrivacyValueAllowAll'
    | PrivacyValueAllowChatParticipants !PrivacyValueAllowChatParticipants'
    | PrivacyValueAllowCloseFriends !PrivacyValueAllowCloseFriends'
    | PrivacyValueAllowContacts !PrivacyValueAllowContacts'
    | PrivacyValueAllowUsers !PrivacyValueAllowUsers'
    | PrivacyValueDisallowAll !PrivacyValueDisallowAll'
    | PrivacyValueDisallowChatParticipants !PrivacyValueDisallowChatParticipants'
    | PrivacyValueDisallowContacts !PrivacyValueDisallowContacts'
    | PrivacyValueDisallowUsers !PrivacyValueDisallowUsers'
data PrivacyValueAllowAll' = PrivacyValueAllowAll' {}
data PrivacyValueAllowChatParticipants'
    = PrivacyValueAllowChatParticipants' {_chats :: !(Vector Long')}
data PrivacyValueAllowCloseFriends'
    = PrivacyValueAllowCloseFriends' {}
data PrivacyValueAllowContacts' = PrivacyValueAllowContacts' {}
data PrivacyValueAllowUsers'
    = PrivacyValueAllowUsers' {_users :: !(Vector Long')}
data PrivacyValueDisallowAll' = PrivacyValueDisallowAll' {}
data PrivacyValueDisallowChatParticipants'
    = PrivacyValueDisallowChatParticipants' {_chats :: !(Vector Long')}
data PrivacyValueDisallowContacts'
    = PrivacyValueDisallowContacts' {}
data PrivacyValueDisallowUsers'
    = PrivacyValueDisallowUsers' {_users :: !(Vector Long')}
instance Data.Binary.Binary PrivacyRule
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1698855810 -> fmap PrivacyValueAllowAll Data.Binary.get;
                      1796427406 -> fmap PrivacyValueAllowChatParticipants Data.Binary.get;
                      4159232155 -> fmap PrivacyValueAllowCloseFriends Data.Binary.get;
                      4294843308 -> fmap PrivacyValueAllowContacts Data.Binary.get;
                      3096469426 -> fmap PrivacyValueAllowUsers Data.Binary.get;
                      2339628899 -> fmap PrivacyValueDisallowAll Data.Binary.get;
                      1103656293 -> fmap PrivacyValueDisallowChatParticipants Data.Binary.get;
                      4169726490 -> fmap PrivacyValueDisallowContacts Data.Binary.get;
                      3831632193 -> fmap PrivacyValueDisallowUsers Data.Binary.get}};
           put (PrivacyValueAllowAll tmp_1) = do {Data.Binary.Put.putWord32le 1698855810;
                                                  Data.Binary.put tmp_1};
           put (PrivacyValueAllowChatParticipants tmp_2) = do {Data.Binary.Put.putWord32le 1796427406;
                                                               Data.Binary.put tmp_2};
           put (PrivacyValueAllowCloseFriends tmp_3) = do {Data.Binary.Put.putWord32le 4159232155;
                                                           Data.Binary.put tmp_3};
           put (PrivacyValueAllowContacts tmp_4) = do {Data.Binary.Put.putWord32le 4294843308;
                                                       Data.Binary.put tmp_4};
           put (PrivacyValueAllowUsers tmp_5) = do {Data.Binary.Put.putWord32le 3096469426;
                                                    Data.Binary.put tmp_5};
           put (PrivacyValueDisallowAll tmp_6) = do {Data.Binary.Put.putWord32le 2339628899;
                                                     Data.Binary.put tmp_6};
           put (PrivacyValueDisallowChatParticipants tmp_7) = do {Data.Binary.Put.putWord32le 1103656293;
                                                                  Data.Binary.put tmp_7};
           put (PrivacyValueDisallowContacts tmp_8) = do {Data.Binary.Put.putWord32le 4169726490;
                                                          Data.Binary.put tmp_8};
           put (PrivacyValueDisallowUsers tmp_9) = do {Data.Binary.Put.putWord32le 3831632193;
                                                       Data.Binary.put tmp_9}}
instance Data.Binary.Binary PublicForwardMessage'
    where {get = do {_message_0 <- Data.Binary.get;
                     GHC.Base.pure (PublicForwardMessage' _message_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._message}
instance Data.Binary.Binary PublicForwardStory'
    where {get = do {_peer_0 <- Data.Binary.get;
                     _story_1 <- Data.Binary.get;
                     GHC.Base.pure (PublicForwardStory' _peer_0 _story_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._peer;
                                     Data.Binary.put to_be_encoded_2._story}}
data PublicForward
    = PublicForwardMessage !PublicForwardMessage'
    | PublicForwardStory !PublicForwardStory'
data PublicForwardMessage'
    = PublicForwardMessage' {_message :: !Message}
data PublicForwardStory'
    = PublicForwardStory' {_peer :: !Peer, _story :: !StoryItem}
instance Data.Binary.Binary PublicForward
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {32685898 -> fmap PublicForwardMessage Data.Binary.get;
                      3992169936 -> fmap PublicForwardStory Data.Binary.get}};
           put (PublicForwardMessage tmp_1) = do {Data.Binary.Put.putWord32le 32685898;
                                                  Data.Binary.put tmp_1};
           put (PublicForwardStory tmp_2) = do {Data.Binary.Put.putWord32le 3992169936;
                                                Data.Binary.put tmp_2}}
instance Data.Binary.Binary ReactionCustomEmoji'
    where {get = do {_document_id_0 <- Data.Binary.get;
                     GHC.Base.pure (ReactionCustomEmoji' _document_id_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._document_id}
instance Data.Binary.Binary ReactionEmoji'
    where {get = do {_emoticon_0 <- Data.Binary.get;
                     GHC.Base.pure (ReactionEmoji' _emoticon_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._emoticon}
instance Data.Binary.Binary ReactionEmpty'
    where {get = GHC.Base.pure ReactionEmpty';
           put to_be_encoded_0 = do GHC.Base.pure ()}
data Reaction
    = ReactionCustomEmoji !ReactionCustomEmoji'
    | ReactionEmoji !ReactionEmoji'
    | ReactionEmpty !ReactionEmpty'
data ReactionCustomEmoji'
    = ReactionCustomEmoji' {_document_id :: !Long'}
data ReactionEmoji' = ReactionEmoji' {_emoticon :: !String'}
data ReactionEmpty' = ReactionEmpty' {}
instance Data.Binary.Binary Reaction
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2302016627 -> fmap ReactionCustomEmoji Data.Binary.get;
                      455247544 -> fmap ReactionEmoji Data.Binary.get;
                      2046153753 -> fmap ReactionEmpty Data.Binary.get}};
           put (ReactionCustomEmoji tmp_1) = do {Data.Binary.Put.putWord32le 2302016627;
                                                 Data.Binary.put tmp_1};
           put (ReactionEmoji tmp_2) = do {Data.Binary.Put.putWord32le 455247544;
                                           Data.Binary.put tmp_2};
           put (ReactionEmpty tmp_3) = do {Data.Binary.Put.putWord32le 2046153753;
                                           Data.Binary.put tmp_3}}
instance Data.Binary.Binary ReactionCount'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _chosen_order_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _reaction_2 <- Data.Binary.get;
                     _count_3 <- Data.Binary.get;
                     GHC.Base.pure (ReactionCount' _chosen_order_1 _reaction_2 _count_3)};
           put to_be_encoded_4 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_4._chosen_order,
                                                              0)];
                                     Data.Binary.put to_be_encoded_4._chosen_order;
                                     Data.Binary.put to_be_encoded_4._reaction;
                                     Data.Binary.put to_be_encoded_4._count}}
data ReactionCount = ReactionCount !ReactionCount'
data ReactionCount'
    = ReactionCount' {_chosen_order :: !(Maybe Int'),
                      _reaction :: !Reaction,
                      _count :: !Int'}
instance Data.Binary.Binary ReactionCount
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2748435328 -> fmap ReactionCount Data.Binary.get}};
           put (ReactionCount tmp_1) = do {Data.Binary.Put.putWord32le 2748435328;
                                           Data.Binary.put tmp_1}}
instance Data.Binary.Binary ReadParticipantDate'
    where {get = do {_user_id_0 <- Data.Binary.get;
                     _date_1 <- Data.Binary.get;
                     GHC.Base.pure (ReadParticipantDate' _user_id_0 _date_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._user_id;
                                     Data.Binary.put to_be_encoded_2._date}}
data ReadParticipantDate
    = ReadParticipantDate !ReadParticipantDate'
data ReadParticipantDate'
    = ReadParticipantDate' {_user_id :: !Long', _date :: !Int'}
instance Data.Binary.Binary ReadParticipantDate
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1246753138 -> fmap ReadParticipantDate Data.Binary.get}};
           put (ReadParticipantDate tmp_1) = do {Data.Binary.Put.putWord32le 1246753138;
                                                 Data.Binary.put tmp_1}}
instance Data.Binary.Binary ReceivedNotifyMessage'
    where {get = do {_id_0 <- Data.Binary.get;
                     _flags_1 <- Data.Binary.get;
                     GHC.Base.pure (ReceivedNotifyMessage' _id_0 _flags_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._id;
                                     Data.Binary.put to_be_encoded_2._flags}}
data ReceivedNotifyMessage
    = ReceivedNotifyMessage !ReceivedNotifyMessage'
data ReceivedNotifyMessage'
    = ReceivedNotifyMessage' {_id :: !Int', _flags :: !Int'}
instance Data.Binary.Binary ReceivedNotifyMessage
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2743383929 -> fmap ReceivedNotifyMessage Data.Binary.get}};
           put (ReceivedNotifyMessage tmp_1) = do {Data.Binary.Put.putWord32le 2743383929;
                                                   Data.Binary.put tmp_1}}
instance Data.Binary.Binary RecentMeUrlChat'
    where {get = do {_url_0 <- Data.Binary.get;
                     _chat_id_1 <- Data.Binary.get;
                     GHC.Base.pure (RecentMeUrlChat' _url_0 _chat_id_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._url;
                                     Data.Binary.put to_be_encoded_2._chat_id}}
instance Data.Binary.Binary RecentMeUrlChatInvite'
    where {get = do {_url_0 <- Data.Binary.get;
                     _chat_invite_1 <- Data.Binary.get;
                     GHC.Base.pure (RecentMeUrlChatInvite' _url_0 _chat_invite_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._url;
                                     Data.Binary.put to_be_encoded_2._chat_invite}}
instance Data.Binary.Binary RecentMeUrlStickerSet'
    where {get = do {_url_0 <- Data.Binary.get;
                     _set_1 <- Data.Binary.get;
                     GHC.Base.pure (RecentMeUrlStickerSet' _url_0 _set_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._url;
                                     Data.Binary.put to_be_encoded_2._set}}
instance Data.Binary.Binary RecentMeUrlUnknown'
    where {get = do {_url_0 <- Data.Binary.get;
                     GHC.Base.pure (RecentMeUrlUnknown' _url_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._url}
instance Data.Binary.Binary RecentMeUrlUser'
    where {get = do {_url_0 <- Data.Binary.get;
                     _user_id_1 <- Data.Binary.get;
                     GHC.Base.pure (RecentMeUrlUser' _url_0 _user_id_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._url;
                                     Data.Binary.put to_be_encoded_2._user_id}}
data RecentMeUrl
    = RecentMeUrlChat !RecentMeUrlChat'
    | RecentMeUrlChatInvite !RecentMeUrlChatInvite'
    | RecentMeUrlStickerSet !RecentMeUrlStickerSet'
    | RecentMeUrlUnknown !RecentMeUrlUnknown'
    | RecentMeUrlUser !RecentMeUrlUser'
data RecentMeUrlChat'
    = RecentMeUrlChat' {_url :: !String', _chat_id :: !Long'}
data RecentMeUrlChatInvite'
    = RecentMeUrlChatInvite' {_url :: !String',
                              _chat_invite :: !ChatInvite}
data RecentMeUrlStickerSet'
    = RecentMeUrlStickerSet' {_url :: !String',
                              _set :: !StickerSetCovered}
data RecentMeUrlUnknown' = RecentMeUrlUnknown' {_url :: !String'}
data RecentMeUrlUser'
    = RecentMeUrlUser' {_url :: !String', _user_id :: !Long'}
instance Data.Binary.Binary RecentMeUrl
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3000660434 -> fmap RecentMeUrlChat Data.Binary.get;
                      3947431965 -> fmap RecentMeUrlChatInvite Data.Binary.get;
                      3154794460 -> fmap RecentMeUrlStickerSet Data.Binary.get;
                      1189204285 -> fmap RecentMeUrlUnknown Data.Binary.get;
                      3106671074 -> fmap RecentMeUrlUser Data.Binary.get}};
           put (RecentMeUrlChat tmp_1) = do {Data.Binary.Put.putWord32le 3000660434;
                                             Data.Binary.put tmp_1};
           put (RecentMeUrlChatInvite tmp_2) = do {Data.Binary.Put.putWord32le 3947431965;
                                                   Data.Binary.put tmp_2};
           put (RecentMeUrlStickerSet tmp_3) = do {Data.Binary.Put.putWord32le 3154794460;
                                                   Data.Binary.put tmp_3};
           put (RecentMeUrlUnknown tmp_4) = do {Data.Binary.Put.putWord32le 1189204285;
                                                Data.Binary.put tmp_4};
           put (RecentMeUrlUser tmp_5) = do {Data.Binary.Put.putWord32le 3106671074;
                                             Data.Binary.put tmp_5}}
instance Data.Binary.Binary ReplyInlineMarkup'
    where {get = do {_rows_0 <- Data.Binary.get;
                     GHC.Base.pure (ReplyInlineMarkup' _rows_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._rows}
instance Data.Binary.Binary ReplyKeyboardForceReply'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _single_use_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _selective_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _placeholder_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     GHC.Base.pure (ReplyKeyboardForceReply' _single_use_1 _selective_2 _placeholder_3)};
           put to_be_encoded_4 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_4._placeholder,
                                                              3),
                                                             (Data.Maybe.isJust to_be_encoded_4._selective,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_4._single_use,
                                                              1)];
                                     Data.Binary.put to_be_encoded_4._single_use;
                                     Data.Binary.put to_be_encoded_4._selective;
                                     Data.Binary.put to_be_encoded_4._placeholder}}
instance Data.Binary.Binary ReplyKeyboardHide'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _selective_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     GHC.Base.pure (ReplyKeyboardHide' _selective_1)};
           put to_be_encoded_2 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_2._selective,
                                                              2)];
                                     Data.Binary.put to_be_encoded_2._selective}}
instance Data.Binary.Binary ReplyKeyboardMarkup'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _resize_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _single_use_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _selective_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _persistent_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 4);
                     _rows_5 <- Data.Binary.get;
                     _placeholder_6 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     GHC.Base.pure (ReplyKeyboardMarkup' _resize_1 _single_use_2 _selective_3 _persistent_4 _rows_5 _placeholder_6)};
           put to_be_encoded_7 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_7._placeholder,
                                                              3),
                                                             (Data.Maybe.isJust to_be_encoded_7._persistent,
                                                              4),
                                                             (Data.Maybe.isJust to_be_encoded_7._selective,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_7._single_use,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_7._resize,
                                                              0)];
                                     Data.Binary.put to_be_encoded_7._resize;
                                     Data.Binary.put to_be_encoded_7._single_use;
                                     Data.Binary.put to_be_encoded_7._selective;
                                     Data.Binary.put to_be_encoded_7._persistent;
                                     Data.Binary.put to_be_encoded_7._rows;
                                     Data.Binary.put to_be_encoded_7._placeholder}}
data ReplyMarkup
    = ReplyInlineMarkup !ReplyInlineMarkup'
    | ReplyKeyboardForceReply !ReplyKeyboardForceReply'
    | ReplyKeyboardHide !ReplyKeyboardHide'
    | ReplyKeyboardMarkup !ReplyKeyboardMarkup'
data ReplyInlineMarkup'
    = ReplyInlineMarkup' {_rows :: !(Vector KeyboardButtonRow)}
data ReplyKeyboardForceReply'
    = ReplyKeyboardForceReply' {_single_use :: !(Maybe True'),
                                _selective :: !(Maybe True'),
                                _placeholder :: !(Maybe String')}
data ReplyKeyboardHide'
    = ReplyKeyboardHide' {_selective :: !(Maybe True')}
data ReplyKeyboardMarkup'
    = ReplyKeyboardMarkup' {_resize :: !(Maybe True'),
                            _single_use :: !(Maybe True'),
                            _selective :: !(Maybe True'),
                            _persistent :: !(Maybe True'),
                            _rows :: !(Vector KeyboardButtonRow),
                            _placeholder :: !(Maybe String')}
instance Data.Binary.Binary ReplyMarkup
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1218642516 -> fmap ReplyInlineMarkup Data.Binary.get;
                      2259946248 -> fmap ReplyKeyboardForceReply Data.Binary.get;
                      2688441221 -> fmap ReplyKeyboardHide Data.Binary.get;
                      2245892561 -> fmap ReplyKeyboardMarkup Data.Binary.get}};
           put (ReplyInlineMarkup tmp_1) = do {Data.Binary.Put.putWord32le 1218642516;
                                               Data.Binary.put tmp_1};
           put (ReplyKeyboardForceReply tmp_2) = do {Data.Binary.Put.putWord32le 2259946248;
                                                     Data.Binary.put tmp_2};
           put (ReplyKeyboardHide tmp_3) = do {Data.Binary.Put.putWord32le 2688441221;
                                               Data.Binary.put tmp_3};
           put (ReplyKeyboardMarkup tmp_4) = do {Data.Binary.Put.putWord32le 2245892561;
                                                 Data.Binary.put tmp_4}}
instance Data.Binary.Binary InputReportReasonChildAbuse'
    where {get = GHC.Base.pure InputReportReasonChildAbuse';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary InputReportReasonCopyright'
    where {get = GHC.Base.pure InputReportReasonCopyright';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary InputReportReasonFake'
    where {get = GHC.Base.pure InputReportReasonFake';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary InputReportReasonGeoIrrelevant'
    where {get = GHC.Base.pure InputReportReasonGeoIrrelevant';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary InputReportReasonIllegalDrugs'
    where {get = GHC.Base.pure InputReportReasonIllegalDrugs';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary InputReportReasonOther'
    where {get = GHC.Base.pure InputReportReasonOther';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary InputReportReasonPersonalDetails'
    where {get = GHC.Base.pure InputReportReasonPersonalDetails';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary InputReportReasonPornography'
    where {get = GHC.Base.pure InputReportReasonPornography';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary InputReportReasonSpam'
    where {get = GHC.Base.pure InputReportReasonSpam';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary InputReportReasonViolence'
    where {get = GHC.Base.pure InputReportReasonViolence';
           put to_be_encoded_0 = do GHC.Base.pure ()}
data ReportReason
    = InputReportReasonChildAbuse !InputReportReasonChildAbuse'
    | InputReportReasonCopyright !InputReportReasonCopyright'
    | InputReportReasonFake !InputReportReasonFake'
    | InputReportReasonGeoIrrelevant !InputReportReasonGeoIrrelevant'
    | InputReportReasonIllegalDrugs !InputReportReasonIllegalDrugs'
    | InputReportReasonOther !InputReportReasonOther'
    | InputReportReasonPersonalDetails !InputReportReasonPersonalDetails'
    | InputReportReasonPornography !InputReportReasonPornography'
    | InputReportReasonSpam !InputReportReasonSpam'
    | InputReportReasonViolence !InputReportReasonViolence'
data InputReportReasonChildAbuse' = InputReportReasonChildAbuse' {}
data InputReportReasonCopyright' = InputReportReasonCopyright' {}
data InputReportReasonFake' = InputReportReasonFake' {}
data InputReportReasonGeoIrrelevant'
    = InputReportReasonGeoIrrelevant' {}
data InputReportReasonIllegalDrugs'
    = InputReportReasonIllegalDrugs' {}
data InputReportReasonOther' = InputReportReasonOther' {}
data InputReportReasonPersonalDetails'
    = InputReportReasonPersonalDetails' {}
data InputReportReasonPornography'
    = InputReportReasonPornography' {}
data InputReportReasonSpam' = InputReportReasonSpam' {}
data InputReportReasonViolence' = InputReportReasonViolence' {}
instance Data.Binary.Binary ReportReason
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2918469347 -> fmap InputReportReasonChildAbuse Data.Binary.get;
                      2609510714 -> fmap InputReportReasonCopyright Data.Binary.get;
                      4124956391 -> fmap InputReportReasonFake Data.Binary.get;
                      3688169197 -> fmap InputReportReasonGeoIrrelevant Data.Binary.get;
                      177124030 -> fmap InputReportReasonIllegalDrugs Data.Binary.get;
                      3252986545 -> fmap InputReportReasonOther Data.Binary.get;
                      2663876157 -> fmap InputReportReasonPersonalDetails Data.Binary.get;
                      777640226 -> fmap InputReportReasonPornography Data.Binary.get;
                      1490799288 -> fmap InputReportReasonSpam Data.Binary.get;
                      505595789 -> fmap InputReportReasonViolence Data.Binary.get}};
           put (InputReportReasonChildAbuse tmp_1) = do {Data.Binary.Put.putWord32le 2918469347;
                                                         Data.Binary.put tmp_1};
           put (InputReportReasonCopyright tmp_2) = do {Data.Binary.Put.putWord32le 2609510714;
                                                        Data.Binary.put tmp_2};
           put (InputReportReasonFake tmp_3) = do {Data.Binary.Put.putWord32le 4124956391;
                                                   Data.Binary.put tmp_3};
           put (InputReportReasonGeoIrrelevant tmp_4) = do {Data.Binary.Put.putWord32le 3688169197;
                                                            Data.Binary.put tmp_4};
           put (InputReportReasonIllegalDrugs tmp_5) = do {Data.Binary.Put.putWord32le 177124030;
                                                           Data.Binary.put tmp_5};
           put (InputReportReasonOther tmp_6) = do {Data.Binary.Put.putWord32le 3252986545;
                                                    Data.Binary.put tmp_6};
           put (InputReportReasonPersonalDetails tmp_7) = do {Data.Binary.Put.putWord32le 2663876157;
                                                              Data.Binary.put tmp_7};
           put (InputReportReasonPornography tmp_8) = do {Data.Binary.Put.putWord32le 777640226;
                                                          Data.Binary.put tmp_8};
           put (InputReportReasonSpam tmp_9) = do {Data.Binary.Put.putWord32le 1490799288;
                                                   Data.Binary.put tmp_9};
           put (InputReportReasonViolence tmp_10) = do {Data.Binary.Put.putWord32le 505595789;
                                                        Data.Binary.put tmp_10}}
instance Data.Binary.Binary RequestPeerTypeBroadcast'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _creator_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _has_username_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     _user_admin_rights_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _bot_admin_rights_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     GHC.Base.pure (RequestPeerTypeBroadcast' _creator_1 _has_username_2 _user_admin_rights_3 _bot_admin_rights_4)};
           put to_be_encoded_5 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_5._bot_admin_rights,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_5._user_admin_rights,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_5._has_username,
                                                              3),
                                                             (Data.Maybe.isJust to_be_encoded_5._creator,
                                                              0)];
                                     Data.Binary.put to_be_encoded_5._creator;
                                     Data.Binary.put to_be_encoded_5._has_username;
                                     Data.Binary.put to_be_encoded_5._user_admin_rights;
                                     Data.Binary.put to_be_encoded_5._bot_admin_rights}}
instance Data.Binary.Binary RequestPeerTypeChat'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _creator_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _bot_participant_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 5);
                     _has_username_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     _forum_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 4);
                     _user_admin_rights_5 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _bot_admin_rights_6 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     GHC.Base.pure (RequestPeerTypeChat' _creator_1 _bot_participant_2 _has_username_3 _forum_4 _user_admin_rights_5 _bot_admin_rights_6)};
           put to_be_encoded_7 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_7._bot_admin_rights,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_7._user_admin_rights,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_7._forum,
                                                              4),
                                                             (Data.Maybe.isJust to_be_encoded_7._has_username,
                                                              3),
                                                             (Data.Maybe.isJust to_be_encoded_7._bot_participant,
                                                              5),
                                                             (Data.Maybe.isJust to_be_encoded_7._creator,
                                                              0)];
                                     Data.Binary.put to_be_encoded_7._creator;
                                     Data.Binary.put to_be_encoded_7._bot_participant;
                                     Data.Binary.put to_be_encoded_7._has_username;
                                     Data.Binary.put to_be_encoded_7._forum;
                                     Data.Binary.put to_be_encoded_7._user_admin_rights;
                                     Data.Binary.put to_be_encoded_7._bot_admin_rights}}
instance Data.Binary.Binary RequestPeerTypeUser'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _bot_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _premium_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     GHC.Base.pure (RequestPeerTypeUser' _bot_1 _premium_2)};
           put to_be_encoded_3 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_3._premium,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_3._bot,
                                                              0)];
                                     Data.Binary.put to_be_encoded_3._bot;
                                     Data.Binary.put to_be_encoded_3._premium}}
data RequestPeerType
    = RequestPeerTypeBroadcast !RequestPeerTypeBroadcast'
    | RequestPeerTypeChat !RequestPeerTypeChat'
    | RequestPeerTypeUser !RequestPeerTypeUser'
data RequestPeerTypeBroadcast'
    = RequestPeerTypeBroadcast' {_creator :: !(Maybe True'),
                                 _has_username :: !(Maybe Bool),
                                 _user_admin_rights :: !(Maybe ChatAdminRights),
                                 _bot_admin_rights :: !(Maybe ChatAdminRights)}
data RequestPeerTypeChat'
    = RequestPeerTypeChat' {_creator :: !(Maybe True'),
                            _bot_participant :: !(Maybe True'),
                            _has_username :: !(Maybe Bool),
                            _forum :: !(Maybe Bool),
                            _user_admin_rights :: !(Maybe ChatAdminRights),
                            _bot_admin_rights :: !(Maybe ChatAdminRights)}
data RequestPeerTypeUser'
    = RequestPeerTypeUser' {_bot :: !(Maybe Bool),
                            _premium :: !(Maybe Bool)}
instance Data.Binary.Binary RequestPeerType
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {865857388 -> fmap RequestPeerTypeBroadcast Data.Binary.get;
                      3387977243 -> fmap RequestPeerTypeChat Data.Binary.get;
                      1597737472 -> fmap RequestPeerTypeUser Data.Binary.get}};
           put (RequestPeerTypeBroadcast tmp_1) = do {Data.Binary.Put.putWord32le 865857388;
                                                      Data.Binary.put tmp_1};
           put (RequestPeerTypeChat tmp_2) = do {Data.Binary.Put.putWord32le 3387977243;
                                                 Data.Binary.put tmp_2};
           put (RequestPeerTypeUser tmp_3) = do {Data.Binary.Put.putWord32le 1597737472;
                                                 Data.Binary.put tmp_3}}
instance Data.Binary.Binary RestrictionReason'
    where {get = do {_platform_0 <- Data.Binary.get;
                     _reason_1 <- Data.Binary.get;
                     _text_2 <- Data.Binary.get;
                     GHC.Base.pure (RestrictionReason' _platform_0 _reason_1 _text_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._platform;
                                     Data.Binary.put to_be_encoded_3._reason;
                                     Data.Binary.put to_be_encoded_3._text}}
data RestrictionReason = RestrictionReason !RestrictionReason'
data RestrictionReason'
    = RestrictionReason' {_platform :: !String',
                          _reason :: !String',
                          _text :: !String'}
instance Data.Binary.Binary RestrictionReason
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3497176244 -> fmap RestrictionReason Data.Binary.get}};
           put (RestrictionReason tmp_1) = do {Data.Binary.Put.putWord32le 3497176244;
                                               Data.Binary.put tmp_1}}
instance Data.Binary.Binary TextAnchor'
    where {get = do {_text_0 <- Data.Binary.get;
                     _name_1 <- Data.Binary.get;
                     GHC.Base.pure (TextAnchor' _text_0 _name_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._text;
                                     Data.Binary.put to_be_encoded_2._name}}
instance Data.Binary.Binary TextBold'
    where {get = do {_text_0 <- Data.Binary.get;
                     GHC.Base.pure (TextBold' _text_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._text}
instance Data.Binary.Binary TextConcat'
    where {get = do {_texts_0 <- Data.Binary.get;
                     GHC.Base.pure (TextConcat' _texts_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._texts}
instance Data.Binary.Binary TextEmail'
    where {get = do {_text_0 <- Data.Binary.get;
                     _email_1 <- Data.Binary.get;
                     GHC.Base.pure (TextEmail' _text_0 _email_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._text;
                                     Data.Binary.put to_be_encoded_2._email}}
instance Data.Binary.Binary TextEmpty'
    where {get = GHC.Base.pure TextEmpty';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary TextFixed'
    where {get = do {_text_0 <- Data.Binary.get;
                     GHC.Base.pure (TextFixed' _text_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._text}
instance Data.Binary.Binary TextImage'
    where {get = do {_document_id_0 <- Data.Binary.get;
                     _w_1 <- Data.Binary.get;
                     _h_2 <- Data.Binary.get;
                     GHC.Base.pure (TextImage' _document_id_0 _w_1 _h_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._document_id;
                                     Data.Binary.put to_be_encoded_3._w;
                                     Data.Binary.put to_be_encoded_3._h}}
instance Data.Binary.Binary TextItalic'
    where {get = do {_text_0 <- Data.Binary.get;
                     GHC.Base.pure (TextItalic' _text_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._text}
instance Data.Binary.Binary TextMarked'
    where {get = do {_text_0 <- Data.Binary.get;
                     GHC.Base.pure (TextMarked' _text_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._text}
instance Data.Binary.Binary TextPhone'
    where {get = do {_text_0 <- Data.Binary.get;
                     _phone_1 <- Data.Binary.get;
                     GHC.Base.pure (TextPhone' _text_0 _phone_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._text;
                                     Data.Binary.put to_be_encoded_2._phone}}
instance Data.Binary.Binary TextPlain'
    where {get = do {_text_0 <- Data.Binary.get;
                     GHC.Base.pure (TextPlain' _text_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._text}
instance Data.Binary.Binary TextStrike'
    where {get = do {_text_0 <- Data.Binary.get;
                     GHC.Base.pure (TextStrike' _text_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._text}
instance Data.Binary.Binary TextSubscript'
    where {get = do {_text_0 <- Data.Binary.get;
                     GHC.Base.pure (TextSubscript' _text_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._text}
instance Data.Binary.Binary TextSuperscript'
    where {get = do {_text_0 <- Data.Binary.get;
                     GHC.Base.pure (TextSuperscript' _text_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._text}
instance Data.Binary.Binary TextUnderline'
    where {get = do {_text_0 <- Data.Binary.get;
                     GHC.Base.pure (TextUnderline' _text_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._text}
instance Data.Binary.Binary TextUrl'
    where {get = do {_text_0 <- Data.Binary.get;
                     _url_1 <- Data.Binary.get;
                     _webpage_id_2 <- Data.Binary.get;
                     GHC.Base.pure (TextUrl' _text_0 _url_1 _webpage_id_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._text;
                                     Data.Binary.put to_be_encoded_3._url;
                                     Data.Binary.put to_be_encoded_3._webpage_id}}
data RichText
    = TextAnchor !TextAnchor'
    | TextBold !TextBold'
    | TextConcat !TextConcat'
    | TextEmail !TextEmail'
    | TextEmpty !TextEmpty'
    | TextFixed !TextFixed'
    | TextImage !TextImage'
    | TextItalic !TextItalic'
    | TextMarked !TextMarked'
    | TextPhone !TextPhone'
    | TextPlain !TextPlain'
    | TextStrike !TextStrike'
    | TextSubscript !TextSubscript'
    | TextSuperscript !TextSuperscript'
    | TextUnderline !TextUnderline'
    | TextUrl !TextUrl'
data TextAnchor'
    = TextAnchor' {_text :: !RichText, _name :: !String'}
data TextBold' = TextBold' {_text :: !RichText}
data TextConcat' = TextConcat' {_texts :: !(Vector RichText)}
data TextEmail'
    = TextEmail' {_text :: !RichText, _email :: !String'}
data TextEmpty' = TextEmpty' {}
data TextFixed' = TextFixed' {_text :: !RichText}
data TextImage'
    = TextImage' {_document_id :: !Long', _w :: !Int', _h :: !Int'}
data TextItalic' = TextItalic' {_text :: !RichText}
data TextMarked' = TextMarked' {_text :: !RichText}
data TextPhone'
    = TextPhone' {_text :: !RichText, _phone :: !String'}
data TextPlain' = TextPlain' {_text :: !String'}
data TextStrike' = TextStrike' {_text :: !RichText}
data TextSubscript' = TextSubscript' {_text :: !RichText}
data TextSuperscript' = TextSuperscript' {_text :: !RichText}
data TextUnderline' = TextUnderline' {_text :: !RichText}
data TextUrl'
    = TextUrl' {_text :: !RichText,
                _url :: !String',
                _webpage_id :: !Long'}
instance Data.Binary.Binary RichText
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {894777186 -> fmap TextAnchor Data.Binary.get;
                      1730456516 -> fmap TextBold Data.Binary.get;
                      2120376535 -> fmap TextConcat Data.Binary.get;
                      3730443734 -> fmap TextEmail Data.Binary.get;
                      3695018575 -> fmap TextEmpty Data.Binary.get;
                      1816074681 -> fmap TextFixed Data.Binary.get;
                      136105807 -> fmap TextImage Data.Binary.get;
                      3641877916 -> fmap TextItalic Data.Binary.get;
                      55281185 -> fmap TextMarked Data.Binary.get;
                      483104362 -> fmap TextPhone Data.Binary.get;
                      1950782688 -> fmap TextPlain Data.Binary.get;
                      2616769429 -> fmap TextStrike Data.Binary.get;
                      3983181060 -> fmap TextSubscript Data.Binary.get;
                      3355139585 -> fmap TextSuperscript Data.Binary.get;
                      3240501956 -> fmap TextUnderline Data.Binary.get;
                      1009288385 -> fmap TextUrl Data.Binary.get}};
           put (TextAnchor tmp_1) = do {Data.Binary.Put.putWord32le 894777186;
                                        Data.Binary.put tmp_1};
           put (TextBold tmp_2) = do {Data.Binary.Put.putWord32le 1730456516;
                                      Data.Binary.put tmp_2};
           put (TextConcat tmp_3) = do {Data.Binary.Put.putWord32le 2120376535;
                                        Data.Binary.put tmp_3};
           put (TextEmail tmp_4) = do {Data.Binary.Put.putWord32le 3730443734;
                                       Data.Binary.put tmp_4};
           put (TextEmpty tmp_5) = do {Data.Binary.Put.putWord32le 3695018575;
                                       Data.Binary.put tmp_5};
           put (TextFixed tmp_6) = do {Data.Binary.Put.putWord32le 1816074681;
                                       Data.Binary.put tmp_6};
           put (TextImage tmp_7) = do {Data.Binary.Put.putWord32le 136105807;
                                       Data.Binary.put tmp_7};
           put (TextItalic tmp_8) = do {Data.Binary.Put.putWord32le 3641877916;
                                        Data.Binary.put tmp_8};
           put (TextMarked tmp_9) = do {Data.Binary.Put.putWord32le 55281185;
                                        Data.Binary.put tmp_9};
           put (TextPhone tmp_10) = do {Data.Binary.Put.putWord32le 483104362;
                                        Data.Binary.put tmp_10};
           put (TextPlain tmp_11) = do {Data.Binary.Put.putWord32le 1950782688;
                                        Data.Binary.put tmp_11};
           put (TextStrike tmp_12) = do {Data.Binary.Put.putWord32le 2616769429;
                                         Data.Binary.put tmp_12};
           put (TextSubscript tmp_13) = do {Data.Binary.Put.putWord32le 3983181060;
                                            Data.Binary.put tmp_13};
           put (TextSuperscript tmp_14) = do {Data.Binary.Put.putWord32le 3355139585;
                                              Data.Binary.put tmp_14};
           put (TextUnderline tmp_15) = do {Data.Binary.Put.putWord32le 3240501956;
                                            Data.Binary.put tmp_15};
           put (TextUrl tmp_16) = do {Data.Binary.Put.putWord32le 1009288385;
                                      Data.Binary.put tmp_16}}
instance Data.Binary.Binary SavedPhoneContact'
    where {get = do {_phone_0 <- Data.Binary.get;
                     _first_name_1 <- Data.Binary.get;
                     _last_name_2 <- Data.Binary.get;
                     _date_3 <- Data.Binary.get;
                     GHC.Base.pure (SavedPhoneContact' _phone_0 _first_name_1 _last_name_2 _date_3)};
           put to_be_encoded_4 = do {Data.Binary.put to_be_encoded_4._phone;
                                     Data.Binary.put to_be_encoded_4._first_name;
                                     Data.Binary.put to_be_encoded_4._last_name;
                                     Data.Binary.put to_be_encoded_4._date}}
data SavedContact = SavedPhoneContact !SavedPhoneContact'
data SavedPhoneContact'
    = SavedPhoneContact' {_phone :: !String',
                          _first_name :: !String',
                          _last_name :: !String',
                          _date :: !Int'}
instance Data.Binary.Binary SavedContact
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {289586518 -> fmap SavedPhoneContact Data.Binary.get}};
           put (SavedPhoneContact tmp_1) = do {Data.Binary.Put.putWord32le 289586518;
                                               Data.Binary.put tmp_1}}
instance Data.Binary.Binary SavedDialog'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _pinned_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _peer_2 <- Data.Binary.get;
                     _top_message_3 <- Data.Binary.get;
                     GHC.Base.pure (SavedDialog' _pinned_1 _peer_2 _top_message_3)};
           put to_be_encoded_4 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_4._pinned,
                                                              2)];
                                     Data.Binary.put to_be_encoded_4._pinned;
                                     Data.Binary.put to_be_encoded_4._peer;
                                     Data.Binary.put to_be_encoded_4._top_message}}
data SavedDialog = SavedDialog !SavedDialog'
data SavedDialog'
    = SavedDialog' {_pinned :: !(Maybe True'),
                    _peer :: !Peer,
                    _top_message :: !Int'}
instance Data.Binary.Binary SavedDialog
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3179793260 -> fmap SavedDialog Data.Binary.get}};
           put (SavedDialog tmp_1) = do {Data.Binary.Put.putWord32le 3179793260;
                                         Data.Binary.put tmp_1}}
instance Data.Binary.Binary SearchResultsCalendarPeriod'
    where {get = do {_date_0 <- Data.Binary.get;
                     _min_msg_id_1 <- Data.Binary.get;
                     _max_msg_id_2 <- Data.Binary.get;
                     _count_3 <- Data.Binary.get;
                     GHC.Base.pure (SearchResultsCalendarPeriod' _date_0 _min_msg_id_1 _max_msg_id_2 _count_3)};
           put to_be_encoded_4 = do {Data.Binary.put to_be_encoded_4._date;
                                     Data.Binary.put to_be_encoded_4._min_msg_id;
                                     Data.Binary.put to_be_encoded_4._max_msg_id;
                                     Data.Binary.put to_be_encoded_4._count}}
data SearchResultsCalendarPeriod
    = SearchResultsCalendarPeriod !SearchResultsCalendarPeriod'
data SearchResultsCalendarPeriod'
    = SearchResultsCalendarPeriod' {_date :: !Int',
                                    _min_msg_id :: !Int',
                                    _max_msg_id :: !Int',
                                    _count :: !Int'}
instance Data.Binary.Binary SearchResultsCalendarPeriod
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3383776159 -> fmap SearchResultsCalendarPeriod Data.Binary.get}};
           put (SearchResultsCalendarPeriod tmp_1) = do {Data.Binary.Put.putWord32le 3383776159;
                                                         Data.Binary.put tmp_1}}
instance Data.Binary.Binary SearchResultPosition'
    where {get = do {_msg_id_0 <- Data.Binary.get;
                     _date_1 <- Data.Binary.get;
                     _offset_2 <- Data.Binary.get;
                     GHC.Base.pure (SearchResultPosition' _msg_id_0 _date_1 _offset_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._msg_id;
                                     Data.Binary.put to_be_encoded_3._date;
                                     Data.Binary.put to_be_encoded_3._offset}}
data SearchResultsPosition
    = SearchResultPosition !SearchResultPosition'
data SearchResultPosition'
    = SearchResultPosition' {_msg_id :: !Int',
                             _date :: !Int',
                             _offset :: !Int'}
instance Data.Binary.Binary SearchResultsPosition
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2137295719 -> fmap SearchResultPosition Data.Binary.get}};
           put (SearchResultPosition tmp_1) = do {Data.Binary.Put.putWord32le 2137295719;
                                                  Data.Binary.put tmp_1}}
instance Data.Binary.Binary SecureCredentialsEncrypted'
    where {get = do {_data_0 <- Data.Binary.get;
                     _hash_1 <- Data.Binary.get;
                     _secret_2 <- Data.Binary.get;
                     GHC.Base.pure (SecureCredentialsEncrypted' _data_0 _hash_1 _secret_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._data;
                                     Data.Binary.put to_be_encoded_3._hash;
                                     Data.Binary.put to_be_encoded_3._secret}}
data SecureCredentialsEncrypted
    = SecureCredentialsEncrypted !SecureCredentialsEncrypted'
data SecureCredentialsEncrypted'
    = SecureCredentialsEncrypted' {_data :: !Bytes',
                                   _hash :: !Bytes',
                                   _secret :: !Bytes'}
instance Data.Binary.Binary SecureCredentialsEncrypted
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {871426631 -> fmap SecureCredentialsEncrypted Data.Binary.get}};
           put (SecureCredentialsEncrypted tmp_1) = do {Data.Binary.Put.putWord32le 871426631;
                                                        Data.Binary.put tmp_1}}
instance Data.Binary.Binary SecureData'
    where {get = do {_data_0 <- Data.Binary.get;
                     _data_hash_1 <- Data.Binary.get;
                     _secret_2 <- Data.Binary.get;
                     GHC.Base.pure (SecureData' _data_0 _data_hash_1 _secret_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._data;
                                     Data.Binary.put to_be_encoded_3._data_hash;
                                     Data.Binary.put to_be_encoded_3._secret}}
data SecureData = SecureData !SecureData'
data SecureData'
    = SecureData' {_data :: !Bytes',
                   _data_hash :: !Bytes',
                   _secret :: !Bytes'}
instance Data.Binary.Binary SecureData
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2330640067 -> fmap SecureData Data.Binary.get}};
           put (SecureData tmp_1) = do {Data.Binary.Put.putWord32le 2330640067;
                                        Data.Binary.put tmp_1}}
instance Data.Binary.Binary SecureFile'
    where {get = do {_id_0 <- Data.Binary.get;
                     _access_hash_1 <- Data.Binary.get;
                     _size_2 <- Data.Binary.get;
                     _dc_id_3 <- Data.Binary.get;
                     _date_4 <- Data.Binary.get;
                     _file_hash_5 <- Data.Binary.get;
                     _secret_6 <- Data.Binary.get;
                     GHC.Base.pure (SecureFile' _id_0 _access_hash_1 _size_2 _dc_id_3 _date_4 _file_hash_5 _secret_6)};
           put to_be_encoded_7 = do {Data.Binary.put to_be_encoded_7._id;
                                     Data.Binary.put to_be_encoded_7._access_hash;
                                     Data.Binary.put to_be_encoded_7._size;
                                     Data.Binary.put to_be_encoded_7._dc_id;
                                     Data.Binary.put to_be_encoded_7._date;
                                     Data.Binary.put to_be_encoded_7._file_hash;
                                     Data.Binary.put to_be_encoded_7._secret}}
instance Data.Binary.Binary SecureFileEmpty'
    where {get = GHC.Base.pure SecureFileEmpty';
           put to_be_encoded_0 = do GHC.Base.pure ()}
data SecureFile
    = SecureFile !SecureFile'
    | SecureFileEmpty !SecureFileEmpty'
data SecureFile'
    = SecureFile' {_id :: !Long',
                   _access_hash :: !Long',
                   _size :: !Long',
                   _dc_id :: !Int',
                   _date :: !Int',
                   _file_hash :: !Bytes',
                   _secret :: !Bytes'}
data SecureFileEmpty' = SecureFileEmpty' {}
instance Data.Binary.Binary SecureFile
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2097791614 -> fmap SecureFile Data.Binary.get;
                      1679398724 -> fmap SecureFileEmpty Data.Binary.get}};
           put (SecureFile tmp_1) = do {Data.Binary.Put.putWord32le 2097791614;
                                        Data.Binary.put tmp_1};
           put (SecureFileEmpty tmp_2) = do {Data.Binary.Put.putWord32le 1679398724;
                                             Data.Binary.put tmp_2}}
instance Data.Binary.Binary SecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000'
    where {get = do {_salt_0 <- Data.Binary.get;
                     GHC.Base.pure (SecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000' _salt_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._salt}
instance Data.Binary.Binary SecurePasswordKdfAlgoSHA512'
    where {get = do {_salt_0 <- Data.Binary.get;
                     GHC.Base.pure (SecurePasswordKdfAlgoSHA512' _salt_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._salt}
instance Data.Binary.Binary SecurePasswordKdfAlgoUnknown'
    where {get = GHC.Base.pure SecurePasswordKdfAlgoUnknown';
           put to_be_encoded_0 = do GHC.Base.pure ()}
data SecurePasswordKdfAlgo
    = SecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000 !SecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000'
    | SecurePasswordKdfAlgoSHA512 !SecurePasswordKdfAlgoSHA512'
    | SecurePasswordKdfAlgoUnknown !SecurePasswordKdfAlgoUnknown'
data SecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000'
    = SecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000' {_salt :: !Bytes'}
data SecurePasswordKdfAlgoSHA512'
    = SecurePasswordKdfAlgoSHA512' {_salt :: !Bytes'}
data SecurePasswordKdfAlgoUnknown'
    = SecurePasswordKdfAlgoUnknown' {}
instance Data.Binary.Binary SecurePasswordKdfAlgo
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3153255840 -> fmap SecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000 Data.Binary.get;
                      2252807570 -> fmap SecurePasswordKdfAlgoSHA512 Data.Binary.get;
                      4883767 -> fmap SecurePasswordKdfAlgoUnknown Data.Binary.get}};
           put (SecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000 tmp_1) = do {Data.Binary.Put.putWord32le 3153255840;
                                                                             Data.Binary.put tmp_1};
           put (SecurePasswordKdfAlgoSHA512 tmp_2) = do {Data.Binary.Put.putWord32le 2252807570;
                                                         Data.Binary.put tmp_2};
           put (SecurePasswordKdfAlgoUnknown tmp_3) = do {Data.Binary.Put.putWord32le 4883767;
                                                          Data.Binary.put tmp_3}}
instance Data.Binary.Binary SecurePlainEmail'
    where {get = do {_email_0 <- Data.Binary.get;
                     GHC.Base.pure (SecurePlainEmail' _email_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._email}
instance Data.Binary.Binary SecurePlainPhone'
    where {get = do {_phone_0 <- Data.Binary.get;
                     GHC.Base.pure (SecurePlainPhone' _phone_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._phone}
data SecurePlainData
    = SecurePlainEmail !SecurePlainEmail'
    | SecurePlainPhone !SecurePlainPhone'
data SecurePlainEmail' = SecurePlainEmail' {_email :: !String'}
data SecurePlainPhone' = SecurePlainPhone' {_phone :: !String'}
instance Data.Binary.Binary SecurePlainData
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {569137759 -> fmap SecurePlainEmail Data.Binary.get;
                      2103482845 -> fmap SecurePlainPhone Data.Binary.get}};
           put (SecurePlainEmail tmp_1) = do {Data.Binary.Put.putWord32le 569137759;
                                              Data.Binary.put tmp_1};
           put (SecurePlainPhone tmp_2) = do {Data.Binary.Put.putWord32le 2103482845;
                                              Data.Binary.put tmp_2}}
instance Data.Binary.Binary SecureRequiredType'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _native_names_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _selfie_required_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _translation_required_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _type_4 <- Data.Binary.get;
                     GHC.Base.pure (SecureRequiredType' _native_names_1 _selfie_required_2 _translation_required_3 _type_4)};
           put to_be_encoded_5 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_5._translation_required,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_5._selfie_required,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_5._native_names,
                                                              0)];
                                     Data.Binary.put to_be_encoded_5._native_names;
                                     Data.Binary.put to_be_encoded_5._selfie_required;
                                     Data.Binary.put to_be_encoded_5._translation_required;
                                     Data.Binary.put to_be_encoded_5._type}}
instance Data.Binary.Binary SecureRequiredTypeOneOf'
    where {get = do {_types_0 <- Data.Binary.get;
                     GHC.Base.pure (SecureRequiredTypeOneOf' _types_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._types}
data SecureRequiredType
    = SecureRequiredType !SecureRequiredType'
    | SecureRequiredTypeOneOf !SecureRequiredTypeOneOf'
data SecureRequiredType'
    = SecureRequiredType' {_native_names :: !(Maybe True'),
                           _selfie_required :: !(Maybe True'),
                           _translation_required :: !(Maybe True'),
                           _type :: !SecureValueType}
data SecureRequiredTypeOneOf'
    = SecureRequiredTypeOneOf' {_types :: !(Vector SecureRequiredType)}
instance Data.Binary.Binary SecureRequiredType
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2191366618 -> fmap SecureRequiredType Data.Binary.get;
                      41187252 -> fmap SecureRequiredTypeOneOf Data.Binary.get}};
           put (SecureRequiredType tmp_1) = do {Data.Binary.Put.putWord32le 2191366618;
                                                Data.Binary.put tmp_1};
           put (SecureRequiredTypeOneOf tmp_2) = do {Data.Binary.Put.putWord32le 41187252;
                                                     Data.Binary.put tmp_2}}
instance Data.Binary.Binary SecureSecretSettings'
    where {get = do {_secure_algo_0 <- Data.Binary.get;
                     _secure_secret_1 <- Data.Binary.get;
                     _secure_secret_id_2 <- Data.Binary.get;
                     GHC.Base.pure (SecureSecretSettings' _secure_algo_0 _secure_secret_1 _secure_secret_id_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._secure_algo;
                                     Data.Binary.put to_be_encoded_3._secure_secret;
                                     Data.Binary.put to_be_encoded_3._secure_secret_id}}
data SecureSecretSettings
    = SecureSecretSettings !SecureSecretSettings'
data SecureSecretSettings'
    = SecureSecretSettings' {_secure_algo :: !SecurePasswordKdfAlgo,
                             _secure_secret :: !Bytes',
                             _secure_secret_id :: !Long'}
instance Data.Binary.Binary SecureSecretSettings
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {354925740 -> fmap SecureSecretSettings Data.Binary.get}};
           put (SecureSecretSettings tmp_1) = do {Data.Binary.Put.putWord32le 354925740;
                                                  Data.Binary.put tmp_1}}
instance Data.Binary.Binary SecureValue'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _type_1 <- Data.Binary.get;
                     _data_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _front_side_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _reverse_side_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _selfie_5 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     _translation_6 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 6);
                     _files_7 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 4);
                     _plain_data_8 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 5);
                     _hash_9 <- Data.Binary.get;
                     GHC.Base.pure (SecureValue' _type_1 _data_2 _front_side_3 _reverse_side_4 _selfie_5 _translation_6 _files_7 _plain_data_8 _hash_9)};
           put to_be_encoded_10 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_10._plain_data,
                                                               5),
                                                              (Data.Maybe.isJust to_be_encoded_10._files,
                                                               4),
                                                              (Data.Maybe.isJust to_be_encoded_10._translation,
                                                               6),
                                                              (Data.Maybe.isJust to_be_encoded_10._selfie,
                                                               3),
                                                              (Data.Maybe.isJust to_be_encoded_10._reverse_side,
                                                               2),
                                                              (Data.Maybe.isJust to_be_encoded_10._front_side,
                                                               1),
                                                              (Data.Maybe.isJust to_be_encoded_10._data,
                                                               0)];
                                      Data.Binary.put to_be_encoded_10._type;
                                      Data.Binary.put to_be_encoded_10._data;
                                      Data.Binary.put to_be_encoded_10._front_side;
                                      Data.Binary.put to_be_encoded_10._reverse_side;
                                      Data.Binary.put to_be_encoded_10._selfie;
                                      Data.Binary.put to_be_encoded_10._translation;
                                      Data.Binary.put to_be_encoded_10._files;
                                      Data.Binary.put to_be_encoded_10._plain_data;
                                      Data.Binary.put to_be_encoded_10._hash}}
data SecureValue = SecureValue !SecureValue'
data SecureValue'
    = SecureValue' {_type :: !SecureValueType,
                    _data :: !(Maybe SecureData),
                    _front_side :: !(Maybe SecureFile),
                    _reverse_side :: !(Maybe SecureFile),
                    _selfie :: !(Maybe SecureFile),
                    _translation :: !(Maybe (Vector SecureFile)),
                    _files :: !(Maybe (Vector SecureFile)),
                    _plain_data :: !(Maybe SecurePlainData),
                    _hash :: !Bytes'}
instance Data.Binary.Binary SecureValue
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {411017418 -> fmap SecureValue Data.Binary.get}};
           put (SecureValue tmp_1) = do {Data.Binary.Put.putWord32le 411017418;
                                         Data.Binary.put tmp_1}}
instance Data.Binary.Binary SecureValueError'
    where {get = do {_type_0 <- Data.Binary.get;
                     _hash_1 <- Data.Binary.get;
                     _text_2 <- Data.Binary.get;
                     GHC.Base.pure (SecureValueError' _type_0 _hash_1 _text_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._type;
                                     Data.Binary.put to_be_encoded_3._hash;
                                     Data.Binary.put to_be_encoded_3._text}}
instance Data.Binary.Binary SecureValueErrorData'
    where {get = do {_type_0 <- Data.Binary.get;
                     _data_hash_1 <- Data.Binary.get;
                     _field_2 <- Data.Binary.get;
                     _text_3 <- Data.Binary.get;
                     GHC.Base.pure (SecureValueErrorData' _type_0 _data_hash_1 _field_2 _text_3)};
           put to_be_encoded_4 = do {Data.Binary.put to_be_encoded_4._type;
                                     Data.Binary.put to_be_encoded_4._data_hash;
                                     Data.Binary.put to_be_encoded_4._field;
                                     Data.Binary.put to_be_encoded_4._text}}
instance Data.Binary.Binary SecureValueErrorFile'
    where {get = do {_type_0 <- Data.Binary.get;
                     _file_hash_1 <- Data.Binary.get;
                     _text_2 <- Data.Binary.get;
                     GHC.Base.pure (SecureValueErrorFile' _type_0 _file_hash_1 _text_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._type;
                                     Data.Binary.put to_be_encoded_3._file_hash;
                                     Data.Binary.put to_be_encoded_3._text}}
instance Data.Binary.Binary SecureValueErrorFiles'
    where {get = do {_type_0 <- Data.Binary.get;
                     _file_hash_1 <- Data.Binary.get;
                     _text_2 <- Data.Binary.get;
                     GHC.Base.pure (SecureValueErrorFiles' _type_0 _file_hash_1 _text_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._type;
                                     Data.Binary.put to_be_encoded_3._file_hash;
                                     Data.Binary.put to_be_encoded_3._text}}
instance Data.Binary.Binary SecureValueErrorFrontSide'
    where {get = do {_type_0 <- Data.Binary.get;
                     _file_hash_1 <- Data.Binary.get;
                     _text_2 <- Data.Binary.get;
                     GHC.Base.pure (SecureValueErrorFrontSide' _type_0 _file_hash_1 _text_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._type;
                                     Data.Binary.put to_be_encoded_3._file_hash;
                                     Data.Binary.put to_be_encoded_3._text}}
instance Data.Binary.Binary SecureValueErrorReverseSide'
    where {get = do {_type_0 <- Data.Binary.get;
                     _file_hash_1 <- Data.Binary.get;
                     _text_2 <- Data.Binary.get;
                     GHC.Base.pure (SecureValueErrorReverseSide' _type_0 _file_hash_1 _text_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._type;
                                     Data.Binary.put to_be_encoded_3._file_hash;
                                     Data.Binary.put to_be_encoded_3._text}}
instance Data.Binary.Binary SecureValueErrorSelfie'
    where {get = do {_type_0 <- Data.Binary.get;
                     _file_hash_1 <- Data.Binary.get;
                     _text_2 <- Data.Binary.get;
                     GHC.Base.pure (SecureValueErrorSelfie' _type_0 _file_hash_1 _text_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._type;
                                     Data.Binary.put to_be_encoded_3._file_hash;
                                     Data.Binary.put to_be_encoded_3._text}}
instance Data.Binary.Binary SecureValueErrorTranslationFile'
    where {get = do {_type_0 <- Data.Binary.get;
                     _file_hash_1 <- Data.Binary.get;
                     _text_2 <- Data.Binary.get;
                     GHC.Base.pure (SecureValueErrorTranslationFile' _type_0 _file_hash_1 _text_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._type;
                                     Data.Binary.put to_be_encoded_3._file_hash;
                                     Data.Binary.put to_be_encoded_3._text}}
instance Data.Binary.Binary SecureValueErrorTranslationFiles'
    where {get = do {_type_0 <- Data.Binary.get;
                     _file_hash_1 <- Data.Binary.get;
                     _text_2 <- Data.Binary.get;
                     GHC.Base.pure (SecureValueErrorTranslationFiles' _type_0 _file_hash_1 _text_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._type;
                                     Data.Binary.put to_be_encoded_3._file_hash;
                                     Data.Binary.put to_be_encoded_3._text}}
data SecureValueError
    = SecureValueError !SecureValueError'
    | SecureValueErrorData !SecureValueErrorData'
    | SecureValueErrorFile !SecureValueErrorFile'
    | SecureValueErrorFiles !SecureValueErrorFiles'
    | SecureValueErrorFrontSide !SecureValueErrorFrontSide'
    | SecureValueErrorReverseSide !SecureValueErrorReverseSide'
    | SecureValueErrorSelfie !SecureValueErrorSelfie'
    | SecureValueErrorTranslationFile !SecureValueErrorTranslationFile'
    | SecureValueErrorTranslationFiles !SecureValueErrorTranslationFiles'
data SecureValueError'
    = SecureValueError' {_type :: !SecureValueType,
                         _hash :: !Bytes',
                         _text :: !String'}
data SecureValueErrorData'
    = SecureValueErrorData' {_type :: !SecureValueType,
                             _data_hash :: !Bytes',
                             _field :: !String',
                             _text :: !String'}
data SecureValueErrorFile'
    = SecureValueErrorFile' {_type :: !SecureValueType,
                             _file_hash :: !Bytes',
                             _text :: !String'}
data SecureValueErrorFiles'
    = SecureValueErrorFiles' {_type :: !SecureValueType,
                              _file_hash :: !(Vector Bytes'),
                              _text :: !String'}
data SecureValueErrorFrontSide'
    = SecureValueErrorFrontSide' {_type :: !SecureValueType,
                                  _file_hash :: !Bytes',
                                  _text :: !String'}
data SecureValueErrorReverseSide'
    = SecureValueErrorReverseSide' {_type :: !SecureValueType,
                                    _file_hash :: !Bytes',
                                    _text :: !String'}
data SecureValueErrorSelfie'
    = SecureValueErrorSelfie' {_type :: !SecureValueType,
                               _file_hash :: !Bytes',
                               _text :: !String'}
data SecureValueErrorTranslationFile'
    = SecureValueErrorTranslationFile' {_type :: !SecureValueType,
                                        _file_hash :: !Bytes',
                                        _text :: !String'}
data SecureValueErrorTranslationFiles'
    = SecureValueErrorTranslationFiles' {_type :: !SecureValueType,
                                         _file_hash :: !(Vector Bytes'),
                                         _text :: !String'}
instance Data.Binary.Binary SecureValueError
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2258466191 -> fmap SecureValueError Data.Binary.get;
                      3903065049 -> fmap SecureValueErrorData Data.Binary.get;
                      2054162547 -> fmap SecureValueErrorFile Data.Binary.get;
                      1717706985 -> fmap SecureValueErrorFiles Data.Binary.get;
                      12467706 -> fmap SecureValueErrorFrontSide Data.Binary.get;
                      2257201829 -> fmap SecureValueErrorReverseSide Data.Binary.get;
                      3845639894 -> fmap SecureValueErrorSelfie Data.Binary.get;
                      2702460784 -> fmap SecureValueErrorTranslationFile Data.Binary.get;
                      878931416 -> fmap SecureValueErrorTranslationFiles Data.Binary.get}};
           put (SecureValueError tmp_1) = do {Data.Binary.Put.putWord32le 2258466191;
                                              Data.Binary.put tmp_1};
           put (SecureValueErrorData tmp_2) = do {Data.Binary.Put.putWord32le 3903065049;
                                                  Data.Binary.put tmp_2};
           put (SecureValueErrorFile tmp_3) = do {Data.Binary.Put.putWord32le 2054162547;
                                                  Data.Binary.put tmp_3};
           put (SecureValueErrorFiles tmp_4) = do {Data.Binary.Put.putWord32le 1717706985;
                                                   Data.Binary.put tmp_4};
           put (SecureValueErrorFrontSide tmp_5) = do {Data.Binary.Put.putWord32le 12467706;
                                                       Data.Binary.put tmp_5};
           put (SecureValueErrorReverseSide tmp_6) = do {Data.Binary.Put.putWord32le 2257201829;
                                                         Data.Binary.put tmp_6};
           put (SecureValueErrorSelfie tmp_7) = do {Data.Binary.Put.putWord32le 3845639894;
                                                    Data.Binary.put tmp_7};
           put (SecureValueErrorTranslationFile tmp_8) = do {Data.Binary.Put.putWord32le 2702460784;
                                                             Data.Binary.put tmp_8};
           put (SecureValueErrorTranslationFiles tmp_9) = do {Data.Binary.Put.putWord32le 878931416;
                                                              Data.Binary.put tmp_9}}
instance Data.Binary.Binary SecureValueHash'
    where {get = do {_type_0 <- Data.Binary.get;
                     _hash_1 <- Data.Binary.get;
                     GHC.Base.pure (SecureValueHash' _type_0 _hash_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._type;
                                     Data.Binary.put to_be_encoded_2._hash}}
data SecureValueHash = SecureValueHash !SecureValueHash'
data SecureValueHash'
    = SecureValueHash' {_type :: !SecureValueType, _hash :: !Bytes'}
instance Data.Binary.Binary SecureValueHash
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3978218928 -> fmap SecureValueHash Data.Binary.get}};
           put (SecureValueHash tmp_1) = do {Data.Binary.Put.putWord32le 3978218928;
                                             Data.Binary.put tmp_1}}
instance Data.Binary.Binary SecureValueTypeAddress'
    where {get = GHC.Base.pure SecureValueTypeAddress';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary SecureValueTypeBankStatement'
    where {get = GHC.Base.pure SecureValueTypeBankStatement';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary SecureValueTypeDriverLicense'
    where {get = GHC.Base.pure SecureValueTypeDriverLicense';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary SecureValueTypeEmail'
    where {get = GHC.Base.pure SecureValueTypeEmail';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary SecureValueTypeIdentityCard'
    where {get = GHC.Base.pure SecureValueTypeIdentityCard';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary SecureValueTypeInternalPassport'
    where {get = GHC.Base.pure SecureValueTypeInternalPassport';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary SecureValueTypePassport'
    where {get = GHC.Base.pure SecureValueTypePassport';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary SecureValueTypePassportRegistration'
    where {get = GHC.Base.pure SecureValueTypePassportRegistration';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary SecureValueTypePersonalDetails'
    where {get = GHC.Base.pure SecureValueTypePersonalDetails';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary SecureValueTypePhone'
    where {get = GHC.Base.pure SecureValueTypePhone';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary SecureValueTypeRentalAgreement'
    where {get = GHC.Base.pure SecureValueTypeRentalAgreement';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary SecureValueTypeTemporaryRegistration'
    where {get = GHC.Base.pure SecureValueTypeTemporaryRegistration';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary SecureValueTypeUtilityBill'
    where {get = GHC.Base.pure SecureValueTypeUtilityBill';
           put to_be_encoded_0 = do GHC.Base.pure ()}
data SecureValueType
    = SecureValueTypeAddress !SecureValueTypeAddress'
    | SecureValueTypeBankStatement !SecureValueTypeBankStatement'
    | SecureValueTypeDriverLicense !SecureValueTypeDriverLicense'
    | SecureValueTypeEmail !SecureValueTypeEmail'
    | SecureValueTypeIdentityCard !SecureValueTypeIdentityCard'
    | SecureValueTypeInternalPassport !SecureValueTypeInternalPassport'
    | SecureValueTypePassport !SecureValueTypePassport'
    | SecureValueTypePassportRegistration !SecureValueTypePassportRegistration'
    | SecureValueTypePersonalDetails !SecureValueTypePersonalDetails'
    | SecureValueTypePhone !SecureValueTypePhone'
    | SecureValueTypeRentalAgreement !SecureValueTypeRentalAgreement'
    | SecureValueTypeTemporaryRegistration !SecureValueTypeTemporaryRegistration'
    | SecureValueTypeUtilityBill !SecureValueTypeUtilityBill'
data SecureValueTypeAddress' = SecureValueTypeAddress' {}
data SecureValueTypeBankStatement'
    = SecureValueTypeBankStatement' {}
data SecureValueTypeDriverLicense'
    = SecureValueTypeDriverLicense' {}
data SecureValueTypeEmail' = SecureValueTypeEmail' {}
data SecureValueTypeIdentityCard' = SecureValueTypeIdentityCard' {}
data SecureValueTypeInternalPassport'
    = SecureValueTypeInternalPassport' {}
data SecureValueTypePassport' = SecureValueTypePassport' {}
data SecureValueTypePassportRegistration'
    = SecureValueTypePassportRegistration' {}
data SecureValueTypePersonalDetails'
    = SecureValueTypePersonalDetails' {}
data SecureValueTypePhone' = SecureValueTypePhone' {}
data SecureValueTypeRentalAgreement'
    = SecureValueTypeRentalAgreement' {}
data SecureValueTypeTemporaryRegistration'
    = SecureValueTypeTemporaryRegistration' {}
data SecureValueTypeUtilityBill' = SecureValueTypeUtilityBill' {}
instance Data.Binary.Binary SecureValueType
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3420659238 -> fmap SecureValueTypeAddress Data.Binary.get;
                      2299755533 -> fmap SecureValueTypeBankStatement Data.Binary.get;
                      115615172 -> fmap SecureValueTypeDriverLicense Data.Binary.get;
                      2386339822 -> fmap SecureValueTypeEmail Data.Binary.get;
                      2698015819 -> fmap SecureValueTypeIdentityCard Data.Binary.get;
                      2577698595 -> fmap SecureValueTypeInternalPassport Data.Binary.get;
                      1034709504 -> fmap SecureValueTypePassport Data.Binary.get;
                      2581823594 -> fmap SecureValueTypePassportRegistration Data.Binary.get;
                      2636808675 -> fmap SecureValueTypePersonalDetails Data.Binary.get;
                      3005262555 -> fmap SecureValueTypePhone Data.Binary.get;
                      2340959368 -> fmap SecureValueTypeRentalAgreement Data.Binary.get;
                      3926060083 -> fmap SecureValueTypeTemporaryRegistration Data.Binary.get;
                      4231435598 -> fmap SecureValueTypeUtilityBill Data.Binary.get}};
           put (SecureValueTypeAddress tmp_1) = do {Data.Binary.Put.putWord32le 3420659238;
                                                    Data.Binary.put tmp_1};
           put (SecureValueTypeBankStatement tmp_2) = do {Data.Binary.Put.putWord32le 2299755533;
                                                          Data.Binary.put tmp_2};
           put (SecureValueTypeDriverLicense tmp_3) = do {Data.Binary.Put.putWord32le 115615172;
                                                          Data.Binary.put tmp_3};
           put (SecureValueTypeEmail tmp_4) = do {Data.Binary.Put.putWord32le 2386339822;
                                                  Data.Binary.put tmp_4};
           put (SecureValueTypeIdentityCard tmp_5) = do {Data.Binary.Put.putWord32le 2698015819;
                                                         Data.Binary.put tmp_5};
           put (SecureValueTypeInternalPassport tmp_6) = do {Data.Binary.Put.putWord32le 2577698595;
                                                             Data.Binary.put tmp_6};
           put (SecureValueTypePassport tmp_7) = do {Data.Binary.Put.putWord32le 1034709504;
                                                     Data.Binary.put tmp_7};
           put (SecureValueTypePassportRegistration tmp_8) = do {Data.Binary.Put.putWord32le 2581823594;
                                                                 Data.Binary.put tmp_8};
           put (SecureValueTypePersonalDetails tmp_9) = do {Data.Binary.Put.putWord32le 2636808675;
                                                            Data.Binary.put tmp_9};
           put (SecureValueTypePhone tmp_10) = do {Data.Binary.Put.putWord32le 3005262555;
                                                   Data.Binary.put tmp_10};
           put (SecureValueTypeRentalAgreement tmp_11) = do {Data.Binary.Put.putWord32le 2340959368;
                                                             Data.Binary.put tmp_11};
           put (SecureValueTypeTemporaryRegistration tmp_12) = do {Data.Binary.Put.putWord32le 3926060083;
                                                                   Data.Binary.put tmp_12};
           put (SecureValueTypeUtilityBill tmp_13) = do {Data.Binary.Put.putWord32le 4231435598;
                                                         Data.Binary.put tmp_13}}
instance Data.Binary.Binary SendAsPeer'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _premium_required_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _peer_2 <- Data.Binary.get;
                     GHC.Base.pure (SendAsPeer' _premium_required_1 _peer_2)};
           put to_be_encoded_3 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_3._premium_required,
                                                              0)];
                                     Data.Binary.put to_be_encoded_3._premium_required;
                                     Data.Binary.put to_be_encoded_3._peer}}
data SendAsPeer = SendAsPeer !SendAsPeer'
data SendAsPeer'
    = SendAsPeer' {_premium_required :: !(Maybe True'), _peer :: !Peer}
instance Data.Binary.Binary SendAsPeer
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3088871476 -> fmap SendAsPeer Data.Binary.get}};
           put (SendAsPeer tmp_1) = do {Data.Binary.Put.putWord32le 3088871476;
                                        Data.Binary.put tmp_1}}
instance Data.Binary.Binary SendMessageCancelAction'
    where {get = GHC.Base.pure SendMessageCancelAction';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary SendMessageChooseContactAction'
    where {get = GHC.Base.pure SendMessageChooseContactAction';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary SendMessageChooseStickerAction'
    where {get = GHC.Base.pure SendMessageChooseStickerAction';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary SendMessageEmojiInteraction'
    where {get = do {_emoticon_0 <- Data.Binary.get;
                     _msg_id_1 <- Data.Binary.get;
                     _interaction_2 <- Data.Binary.get;
                     GHC.Base.pure (SendMessageEmojiInteraction' _emoticon_0 _msg_id_1 _interaction_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._emoticon;
                                     Data.Binary.put to_be_encoded_3._msg_id;
                                     Data.Binary.put to_be_encoded_3._interaction}}
instance Data.Binary.Binary SendMessageEmojiInteractionSeen'
    where {get = do {_emoticon_0 <- Data.Binary.get;
                     GHC.Base.pure (SendMessageEmojiInteractionSeen' _emoticon_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._emoticon}
instance Data.Binary.Binary SendMessageGamePlayAction'
    where {get = GHC.Base.pure SendMessageGamePlayAction';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary SendMessageGeoLocationAction'
    where {get = GHC.Base.pure SendMessageGeoLocationAction';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary SendMessageHistoryImportAction'
    where {get = do {_progress_0 <- Data.Binary.get;
                     GHC.Base.pure (SendMessageHistoryImportAction' _progress_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._progress}
instance Data.Binary.Binary SendMessageRecordAudioAction'
    where {get = GHC.Base.pure SendMessageRecordAudioAction';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary SendMessageRecordRoundAction'
    where {get = GHC.Base.pure SendMessageRecordRoundAction';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary SendMessageRecordVideoAction'
    where {get = GHC.Base.pure SendMessageRecordVideoAction';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary SendMessageTypingAction'
    where {get = GHC.Base.pure SendMessageTypingAction';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary SendMessageUploadAudioAction'
    where {get = do {_progress_0 <- Data.Binary.get;
                     GHC.Base.pure (SendMessageUploadAudioAction' _progress_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._progress}
instance Data.Binary.Binary SendMessageUploadDocumentAction'
    where {get = do {_progress_0 <- Data.Binary.get;
                     GHC.Base.pure (SendMessageUploadDocumentAction' _progress_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._progress}
instance Data.Binary.Binary SendMessageUploadPhotoAction'
    where {get = do {_progress_0 <- Data.Binary.get;
                     GHC.Base.pure (SendMessageUploadPhotoAction' _progress_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._progress}
instance Data.Binary.Binary SendMessageUploadRoundAction'
    where {get = do {_progress_0 <- Data.Binary.get;
                     GHC.Base.pure (SendMessageUploadRoundAction' _progress_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._progress}
instance Data.Binary.Binary SendMessageUploadVideoAction'
    where {get = do {_progress_0 <- Data.Binary.get;
                     GHC.Base.pure (SendMessageUploadVideoAction' _progress_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._progress}
instance Data.Binary.Binary SpeakingInGroupCallAction'
    where {get = GHC.Base.pure SpeakingInGroupCallAction';
           put to_be_encoded_0 = do GHC.Base.pure ()}
data SendMessageAction
    = SendMessageCancelAction !SendMessageCancelAction'
    | SendMessageChooseContactAction !SendMessageChooseContactAction'
    | SendMessageChooseStickerAction !SendMessageChooseStickerAction'
    | SendMessageEmojiInteraction !SendMessageEmojiInteraction'
    | SendMessageEmojiInteractionSeen !SendMessageEmojiInteractionSeen'
    | SendMessageGamePlayAction !SendMessageGamePlayAction'
    | SendMessageGeoLocationAction !SendMessageGeoLocationAction'
    | SendMessageHistoryImportAction !SendMessageHistoryImportAction'
    | SendMessageRecordAudioAction !SendMessageRecordAudioAction'
    | SendMessageRecordRoundAction !SendMessageRecordRoundAction'
    | SendMessageRecordVideoAction !SendMessageRecordVideoAction'
    | SendMessageTypingAction !SendMessageTypingAction'
    | SendMessageUploadAudioAction !SendMessageUploadAudioAction'
    | SendMessageUploadDocumentAction !SendMessageUploadDocumentAction'
    | SendMessageUploadPhotoAction !SendMessageUploadPhotoAction'
    | SendMessageUploadRoundAction !SendMessageUploadRoundAction'
    | SendMessageUploadVideoAction !SendMessageUploadVideoAction'
    | SpeakingInGroupCallAction !SpeakingInGroupCallAction'
data SendMessageCancelAction' = SendMessageCancelAction' {}
data SendMessageChooseContactAction'
    = SendMessageChooseContactAction' {}
data SendMessageChooseStickerAction'
    = SendMessageChooseStickerAction' {}
data SendMessageEmojiInteraction'
    = SendMessageEmojiInteraction' {_emoticon :: !String',
                                    _msg_id :: !Int',
                                    _interaction :: !DataJSON}
data SendMessageEmojiInteractionSeen'
    = SendMessageEmojiInteractionSeen' {_emoticon :: !String'}
data SendMessageGamePlayAction' = SendMessageGamePlayAction' {}
data SendMessageGeoLocationAction'
    = SendMessageGeoLocationAction' {}
data SendMessageHistoryImportAction'
    = SendMessageHistoryImportAction' {_progress :: !Int'}
data SendMessageRecordAudioAction'
    = SendMessageRecordAudioAction' {}
data SendMessageRecordRoundAction'
    = SendMessageRecordRoundAction' {}
data SendMessageRecordVideoAction'
    = SendMessageRecordVideoAction' {}
data SendMessageTypingAction' = SendMessageTypingAction' {}
data SendMessageUploadAudioAction'
    = SendMessageUploadAudioAction' {_progress :: !Int'}
data SendMessageUploadDocumentAction'
    = SendMessageUploadDocumentAction' {_progress :: !Int'}
data SendMessageUploadPhotoAction'
    = SendMessageUploadPhotoAction' {_progress :: !Int'}
data SendMessageUploadRoundAction'
    = SendMessageUploadRoundAction' {_progress :: !Int'}
data SendMessageUploadVideoAction'
    = SendMessageUploadVideoAction' {_progress :: !Int'}
data SpeakingInGroupCallAction' = SpeakingInGroupCallAction' {}
instance Data.Binary.Binary SendMessageAction
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {4250847477 -> fmap SendMessageCancelAction Data.Binary.get;
                      1653390447 -> fmap SendMessageChooseContactAction Data.Binary.get;
                      2958739121 -> fmap SendMessageChooseStickerAction Data.Binary.get;
                      630664139 -> fmap SendMessageEmojiInteraction Data.Binary.get;
                      3060109358 -> fmap SendMessageEmojiInteractionSeen Data.Binary.get;
                      3714748232 -> fmap SendMessageGamePlayAction Data.Binary.get;
                      393186209 -> fmap SendMessageGeoLocationAction Data.Binary.get;
                      3688534598 -> fmap SendMessageHistoryImportAction Data.Binary.get;
                      3576656887 -> fmap SendMessageRecordAudioAction Data.Binary.get;
                      2297593788 -> fmap SendMessageRecordRoundAction Data.Binary.get;
                      2710034031 -> fmap SendMessageRecordVideoAction Data.Binary.get;
                      381645902 -> fmap SendMessageTypingAction Data.Binary.get;
                      4082227115 -> fmap SendMessageUploadAudioAction Data.Binary.get;
                      2852968932 -> fmap SendMessageUploadDocumentAction Data.Binary.get;
                      3520285222 -> fmap SendMessageUploadPhotoAction Data.Binary.get;
                      608050278 -> fmap SendMessageUploadRoundAction Data.Binary.get;
                      3916839660 -> fmap SendMessageUploadVideoAction Data.Binary.get;
                      3643548293 -> fmap SpeakingInGroupCallAction Data.Binary.get}};
           put (SendMessageCancelAction tmp_1) = do {Data.Binary.Put.putWord32le 4250847477;
                                                     Data.Binary.put tmp_1};
           put (SendMessageChooseContactAction tmp_2) = do {Data.Binary.Put.putWord32le 1653390447;
                                                            Data.Binary.put tmp_2};
           put (SendMessageChooseStickerAction tmp_3) = do {Data.Binary.Put.putWord32le 2958739121;
                                                            Data.Binary.put tmp_3};
           put (SendMessageEmojiInteraction tmp_4) = do {Data.Binary.Put.putWord32le 630664139;
                                                         Data.Binary.put tmp_4};
           put (SendMessageEmojiInteractionSeen tmp_5) = do {Data.Binary.Put.putWord32le 3060109358;
                                                             Data.Binary.put tmp_5};
           put (SendMessageGamePlayAction tmp_6) = do {Data.Binary.Put.putWord32le 3714748232;
                                                       Data.Binary.put tmp_6};
           put (SendMessageGeoLocationAction tmp_7) = do {Data.Binary.Put.putWord32le 393186209;
                                                          Data.Binary.put tmp_7};
           put (SendMessageHistoryImportAction tmp_8) = do {Data.Binary.Put.putWord32le 3688534598;
                                                            Data.Binary.put tmp_8};
           put (SendMessageRecordAudioAction tmp_9) = do {Data.Binary.Put.putWord32le 3576656887;
                                                          Data.Binary.put tmp_9};
           put (SendMessageRecordRoundAction tmp_10) = do {Data.Binary.Put.putWord32le 2297593788;
                                                           Data.Binary.put tmp_10};
           put (SendMessageRecordVideoAction tmp_11) = do {Data.Binary.Put.putWord32le 2710034031;
                                                           Data.Binary.put tmp_11};
           put (SendMessageTypingAction tmp_12) = do {Data.Binary.Put.putWord32le 381645902;
                                                      Data.Binary.put tmp_12};
           put (SendMessageUploadAudioAction tmp_13) = do {Data.Binary.Put.putWord32le 4082227115;
                                                           Data.Binary.put tmp_13};
           put (SendMessageUploadDocumentAction tmp_14) = do {Data.Binary.Put.putWord32le 2852968932;
                                                              Data.Binary.put tmp_14};
           put (SendMessageUploadPhotoAction tmp_15) = do {Data.Binary.Put.putWord32le 3520285222;
                                                           Data.Binary.put tmp_15};
           put (SendMessageUploadRoundAction tmp_16) = do {Data.Binary.Put.putWord32le 608050278;
                                                           Data.Binary.put tmp_16};
           put (SendMessageUploadVideoAction tmp_17) = do {Data.Binary.Put.putWord32le 3916839660;
                                                           Data.Binary.put tmp_17};
           put (SpeakingInGroupCallAction tmp_18) = do {Data.Binary.Put.putWord32le 3643548293;
                                                        Data.Binary.put tmp_18}}
instance Data.Binary.Binary ShippingOption'
    where {get = do {_id_0 <- Data.Binary.get;
                     _title_1 <- Data.Binary.get;
                     _prices_2 <- Data.Binary.get;
                     GHC.Base.pure (ShippingOption' _id_0 _title_1 _prices_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._id;
                                     Data.Binary.put to_be_encoded_3._title;
                                     Data.Binary.put to_be_encoded_3._prices}}
data ShippingOption = ShippingOption !ShippingOption'
data ShippingOption'
    = ShippingOption' {_id :: !String',
                       _title :: !String',
                       _prices :: !(Vector LabeledPrice)}
instance Data.Binary.Binary ShippingOption
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3055631583 -> fmap ShippingOption Data.Binary.get}};
           put (ShippingOption tmp_1) = do {Data.Binary.Put.putWord32le 3055631583;
                                            Data.Binary.put tmp_1}}
instance Data.Binary.Binary SimpleWebViewResultUrl'
    where {get = do {_url_0 <- Data.Binary.get;
                     GHC.Base.pure (SimpleWebViewResultUrl' _url_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._url}
data SimpleWebViewResult
    = SimpleWebViewResultUrl !SimpleWebViewResultUrl'
data SimpleWebViewResultUrl'
    = SimpleWebViewResultUrl' {_url :: !String'}
instance Data.Binary.Binary SimpleWebViewResult
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2284811963 -> fmap SimpleWebViewResultUrl Data.Binary.get}};
           put (SimpleWebViewResultUrl tmp_1) = do {Data.Binary.Put.putWord32le 2284811963;
                                                    Data.Binary.put tmp_1}}
instance Data.Binary.Binary SponsoredMessage'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _recommended_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 5);
                     _show_peer_photo_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 6);
                     _random_id_3 <- Data.Binary.get;
                     _from_id_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     _chat_invite_5 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 4);
                     _chat_invite_hash_6 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 4);
                     _channel_post_7 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _start_param_8 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _webpage_9 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 9);
                     _app_10 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 10);
                     _message_11 <- Data.Binary.get;
                     _entities_12 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _button_text_13 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 11);
                     _sponsor_info_14 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 7);
                     _additional_info_15 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 8);
                     GHC.Base.pure (SponsoredMessage' _recommended_1 _show_peer_photo_2 _random_id_3 _from_id_4 _chat_invite_5 _chat_invite_hash_6 _channel_post_7 _start_param_8 _webpage_9 _app_10 _message_11 _entities_12 _button_text_13 _sponsor_info_14 _additional_info_15)};
           put to_be_encoded_16 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_16._additional_info,
                                                               8),
                                                              (Data.Maybe.isJust to_be_encoded_16._sponsor_info,
                                                               7),
                                                              (Data.Maybe.isJust to_be_encoded_16._button_text,
                                                               11),
                                                              (Data.Maybe.isJust to_be_encoded_16._entities,
                                                               1),
                                                              (Data.Maybe.isJust to_be_encoded_16._app,
                                                               10),
                                                              (Data.Maybe.isJust to_be_encoded_16._webpage,
                                                               9),
                                                              (Data.Maybe.isJust to_be_encoded_16._start_param,
                                                               0),
                                                              (Data.Maybe.isJust to_be_encoded_16._channel_post,
                                                               2),
                                                              (Data.Maybe.isJust to_be_encoded_16._chat_invite_hash,
                                                               4),
                                                              (Data.Maybe.isJust to_be_encoded_16._chat_invite,
                                                               4),
                                                              (Data.Maybe.isJust to_be_encoded_16._from_id,
                                                               3),
                                                              (Data.Maybe.isJust to_be_encoded_16._show_peer_photo,
                                                               6),
                                                              (Data.Maybe.isJust to_be_encoded_16._recommended,
                                                               5)];
                                      Data.Binary.put to_be_encoded_16._recommended;
                                      Data.Binary.put to_be_encoded_16._show_peer_photo;
                                      Data.Binary.put to_be_encoded_16._random_id;
                                      Data.Binary.put to_be_encoded_16._from_id;
                                      Data.Binary.put to_be_encoded_16._chat_invite;
                                      Data.Binary.put to_be_encoded_16._chat_invite_hash;
                                      Data.Binary.put to_be_encoded_16._channel_post;
                                      Data.Binary.put to_be_encoded_16._start_param;
                                      Data.Binary.put to_be_encoded_16._webpage;
                                      Data.Binary.put to_be_encoded_16._app;
                                      Data.Binary.put to_be_encoded_16._message;
                                      Data.Binary.put to_be_encoded_16._entities;
                                      Data.Binary.put to_be_encoded_16._button_text;
                                      Data.Binary.put to_be_encoded_16._sponsor_info;
                                      Data.Binary.put to_be_encoded_16._additional_info}}
data SponsoredMessage = SponsoredMessage !SponsoredMessage'
data SponsoredMessage'
    = SponsoredMessage' {_recommended :: !(Maybe True'),
                         _show_peer_photo :: !(Maybe True'),
                         _random_id :: !Bytes',
                         _from_id :: !(Maybe Peer),
                         _chat_invite :: !(Maybe ChatInvite),
                         _chat_invite_hash :: !(Maybe String'),
                         _channel_post :: !(Maybe Int'),
                         _start_param :: !(Maybe String'),
                         _webpage :: !(Maybe SponsoredWebPage),
                         _app :: !(Maybe BotApp),
                         _message :: !String',
                         _entities :: !(Maybe (Vector MessageEntity)),
                         _button_text :: !(Maybe String'),
                         _sponsor_info :: !(Maybe String'),
                         _additional_info :: !(Maybe String')}
instance Data.Binary.Binary SponsoredMessage
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3981673463 -> fmap SponsoredMessage Data.Binary.get}};
           put (SponsoredMessage tmp_1) = do {Data.Binary.Put.putWord32le 3981673463;
                                              Data.Binary.put tmp_1}}
instance Data.Binary.Binary SponsoredWebPage'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _url_1 <- Data.Binary.get;
                     _site_name_2 <- Data.Binary.get;
                     _photo_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     GHC.Base.pure (SponsoredWebPage' _url_1 _site_name_2 _photo_3)};
           put to_be_encoded_4 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_4._photo,
                                                              0)];
                                     Data.Binary.put to_be_encoded_4._url;
                                     Data.Binary.put to_be_encoded_4._site_name;
                                     Data.Binary.put to_be_encoded_4._photo}}
data SponsoredWebPage = SponsoredWebPage !SponsoredWebPage'
data SponsoredWebPage'
    = SponsoredWebPage' {_url :: !String',
                         _site_name :: !String',
                         _photo :: !(Maybe Photo)}
instance Data.Binary.Binary SponsoredWebPage
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1035529315 -> fmap SponsoredWebPage Data.Binary.get}};
           put (SponsoredWebPage tmp_1) = do {Data.Binary.Put.putWord32le 1035529315;
                                              Data.Binary.put tmp_1}}
instance Data.Binary.Binary StatsAbsValueAndPrev'
    where {get = do {_current_0 <- Data.Binary.get;
                     _previous_1 <- Data.Binary.get;
                     GHC.Base.pure (StatsAbsValueAndPrev' _current_0 _previous_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._current;
                                     Data.Binary.put to_be_encoded_2._previous}}
data StatsAbsValueAndPrev
    = StatsAbsValueAndPrev !StatsAbsValueAndPrev'
data StatsAbsValueAndPrev'
    = StatsAbsValueAndPrev' {_current :: !Double',
                             _previous :: !Double'}
instance Data.Binary.Binary StatsAbsValueAndPrev
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3410210014 -> fmap StatsAbsValueAndPrev Data.Binary.get}};
           put (StatsAbsValueAndPrev tmp_1) = do {Data.Binary.Put.putWord32le 3410210014;
                                                  Data.Binary.put tmp_1}}
instance Data.Binary.Binary StatsDateRangeDays'
    where {get = do {_min_date_0 <- Data.Binary.get;
                     _max_date_1 <- Data.Binary.get;
                     GHC.Base.pure (StatsDateRangeDays' _min_date_0 _max_date_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._min_date;
                                     Data.Binary.put to_be_encoded_2._max_date}}
data StatsDateRangeDays = StatsDateRangeDays !StatsDateRangeDays'
data StatsDateRangeDays'
    = StatsDateRangeDays' {_min_date :: !Int', _max_date :: !Int'}
instance Data.Binary.Binary StatsDateRangeDays
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3057118639 -> fmap StatsDateRangeDays Data.Binary.get}};
           put (StatsDateRangeDays tmp_1) = do {Data.Binary.Put.putWord32le 3057118639;
                                                Data.Binary.put tmp_1}}
instance Data.Binary.Binary StatsGraph'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _json_1 <- Data.Binary.get;
                     _zoom_token_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     GHC.Base.pure (StatsGraph' _json_1 _zoom_token_2)};
           put to_be_encoded_3 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_3._zoom_token,
                                                              0)];
                                     Data.Binary.put to_be_encoded_3._json;
                                     Data.Binary.put to_be_encoded_3._zoom_token}}
instance Data.Binary.Binary StatsGraphAsync'
    where {get = do {_token_0 <- Data.Binary.get;
                     GHC.Base.pure (StatsGraphAsync' _token_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._token}
instance Data.Binary.Binary StatsGraphError'
    where {get = do {_error_0 <- Data.Binary.get;
                     GHC.Base.pure (StatsGraphError' _error_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._error}
data StatsGraph
    = StatsGraph !StatsGraph'
    | StatsGraphAsync !StatsGraphAsync'
    | StatsGraphError !StatsGraphError'
data StatsGraph'
    = StatsGraph' {_json :: !DataJSON, _zoom_token :: !(Maybe String')}
data StatsGraphAsync' = StatsGraphAsync' {_token :: !String'}
data StatsGraphError' = StatsGraphError' {_error :: !String'}
instance Data.Binary.Binary StatsGraph
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2393138358 -> fmap StatsGraph Data.Binary.get;
                      1244130093 -> fmap StatsGraphAsync Data.Binary.get;
                      3202127906 -> fmap StatsGraphError Data.Binary.get}};
           put (StatsGraph tmp_1) = do {Data.Binary.Put.putWord32le 2393138358;
                                        Data.Binary.put tmp_1};
           put (StatsGraphAsync tmp_2) = do {Data.Binary.Put.putWord32le 1244130093;
                                             Data.Binary.put tmp_2};
           put (StatsGraphError tmp_3) = do {Data.Binary.Put.putWord32le 3202127906;
                                             Data.Binary.put tmp_3}}
instance Data.Binary.Binary StatsGroupTopAdmin'
    where {get = do {_user_id_0 <- Data.Binary.get;
                     _deleted_1 <- Data.Binary.get;
                     _kicked_2 <- Data.Binary.get;
                     _banned_3 <- Data.Binary.get;
                     GHC.Base.pure (StatsGroupTopAdmin' _user_id_0 _deleted_1 _kicked_2 _banned_3)};
           put to_be_encoded_4 = do {Data.Binary.put to_be_encoded_4._user_id;
                                     Data.Binary.put to_be_encoded_4._deleted;
                                     Data.Binary.put to_be_encoded_4._kicked;
                                     Data.Binary.put to_be_encoded_4._banned}}
data StatsGroupTopAdmin = StatsGroupTopAdmin !StatsGroupTopAdmin'
data StatsGroupTopAdmin'
    = StatsGroupTopAdmin' {_user_id :: !Long',
                           _deleted :: !Int',
                           _kicked :: !Int',
                           _banned :: !Int'}
instance Data.Binary.Binary StatsGroupTopAdmin
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3612888199 -> fmap StatsGroupTopAdmin Data.Binary.get}};
           put (StatsGroupTopAdmin tmp_1) = do {Data.Binary.Put.putWord32le 3612888199;
                                                Data.Binary.put tmp_1}}
instance Data.Binary.Binary StatsGroupTopInviter'
    where {get = do {_user_id_0 <- Data.Binary.get;
                     _invitations_1 <- Data.Binary.get;
                     GHC.Base.pure (StatsGroupTopInviter' _user_id_0 _invitations_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._user_id;
                                     Data.Binary.put to_be_encoded_2._invitations}}
data StatsGroupTopInviter
    = StatsGroupTopInviter !StatsGroupTopInviter'
data StatsGroupTopInviter'
    = StatsGroupTopInviter' {_user_id :: !Long', _invitations :: !Int'}
instance Data.Binary.Binary StatsGroupTopInviter
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1398765469 -> fmap StatsGroupTopInviter Data.Binary.get}};
           put (StatsGroupTopInviter tmp_1) = do {Data.Binary.Put.putWord32le 1398765469;
                                                  Data.Binary.put tmp_1}}
instance Data.Binary.Binary StatsGroupTopPoster'
    where {get = do {_user_id_0 <- Data.Binary.get;
                     _messages_1 <- Data.Binary.get;
                     _avg_chars_2 <- Data.Binary.get;
                     GHC.Base.pure (StatsGroupTopPoster' _user_id_0 _messages_1 _avg_chars_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._user_id;
                                     Data.Binary.put to_be_encoded_3._messages;
                                     Data.Binary.put to_be_encoded_3._avg_chars}}
data StatsGroupTopPoster
    = StatsGroupTopPoster !StatsGroupTopPoster'
data StatsGroupTopPoster'
    = StatsGroupTopPoster' {_user_id :: !Long',
                            _messages :: !Int',
                            _avg_chars :: !Int'}
instance Data.Binary.Binary StatsGroupTopPoster
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2634330011 -> fmap StatsGroupTopPoster Data.Binary.get}};
           put (StatsGroupTopPoster tmp_1) = do {Data.Binary.Put.putWord32le 2634330011;
                                                 Data.Binary.put tmp_1}}
instance Data.Binary.Binary StatsPercentValue'
    where {get = do {_part_0 <- Data.Binary.get;
                     _total_1 <- Data.Binary.get;
                     GHC.Base.pure (StatsPercentValue' _part_0 _total_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._part;
                                     Data.Binary.put to_be_encoded_2._total}}
data StatsPercentValue = StatsPercentValue !StatsPercentValue'
data StatsPercentValue'
    = StatsPercentValue' {_part :: !Double', _total :: !Double'}
instance Data.Binary.Binary StatsPercentValue
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3419287520 -> fmap StatsPercentValue Data.Binary.get}};
           put (StatsPercentValue tmp_1) = do {Data.Binary.Put.putWord32le 3419287520;
                                               Data.Binary.put tmp_1}}
instance Data.Binary.Binary StatsURL'
    where {get = do {_url_0 <- Data.Binary.get;
                     GHC.Base.pure (StatsURL' _url_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._url}
data StatsURL = StatsURL !StatsURL'
data StatsURL' = StatsURL' {_url :: !String'}
instance Data.Binary.Binary StatsURL
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1202287072 -> fmap StatsURL Data.Binary.get}};
           put (StatsURL tmp_1) = do {Data.Binary.Put.putWord32le 1202287072;
                                      Data.Binary.put tmp_1}}
instance Data.Binary.Binary StickerKeyword'
    where {get = do {_document_id_0 <- Data.Binary.get;
                     _keyword_1 <- Data.Binary.get;
                     GHC.Base.pure (StickerKeyword' _document_id_0 _keyword_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._document_id;
                                     Data.Binary.put to_be_encoded_2._keyword}}
data StickerKeyword = StickerKeyword !StickerKeyword'
data StickerKeyword'
    = StickerKeyword' {_document_id :: !Long',
                       _keyword :: !(Vector String')}
instance Data.Binary.Binary StickerKeyword
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {4244550300 -> fmap StickerKeyword Data.Binary.get}};
           put (StickerKeyword tmp_1) = do {Data.Binary.Put.putWord32le 4244550300;
                                            Data.Binary.put tmp_1}}
instance Data.Binary.Binary StickerPack'
    where {get = do {_emoticon_0 <- Data.Binary.get;
                     _documents_1 <- Data.Binary.get;
                     GHC.Base.pure (StickerPack' _emoticon_0 _documents_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._emoticon;
                                     Data.Binary.put to_be_encoded_2._documents}}
data StickerPack = StickerPack !StickerPack'
data StickerPack'
    = StickerPack' {_emoticon :: !String',
                    _documents :: !(Vector Long')}
instance Data.Binary.Binary StickerPack
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {313694676 -> fmap StickerPack Data.Binary.get}};
           put (StickerPack tmp_1) = do {Data.Binary.Put.putWord32le 313694676;
                                         Data.Binary.put tmp_1}}
instance Data.Binary.Binary StickerSet'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _archived_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _official_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _masks_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     _animated_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 5);
                     _videos_5 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 6);
                     _emojis_6 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 7);
                     _text_color_7 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 9);
                     _channel_emoji_status_8 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 10);
                     _installed_date_9 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _id_10 <- Data.Binary.get;
                     _access_hash_11 <- Data.Binary.get;
                     _title_12 <- Data.Binary.get;
                     _short_name_13 <- Data.Binary.get;
                     _thumbs_14 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 4);
                     _thumb_dc_id_15 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 4);
                     _thumb_version_16 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 4);
                     _thumb_document_id_17 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 8);
                     _count_18 <- Data.Binary.get;
                     _hash_19 <- Data.Binary.get;
                     GHC.Base.pure (StickerSet' _archived_1 _official_2 _masks_3 _animated_4 _videos_5 _emojis_6 _text_color_7 _channel_emoji_status_8 _installed_date_9 _id_10 _access_hash_11 _title_12 _short_name_13 _thumbs_14 _thumb_dc_id_15 _thumb_version_16 _thumb_document_id_17 _count_18 _hash_19)};
           put to_be_encoded_20 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_20._thumb_document_id,
                                                               8),
                                                              (Data.Maybe.isJust to_be_encoded_20._thumb_version,
                                                               4),
                                                              (Data.Maybe.isJust to_be_encoded_20._thumb_dc_id,
                                                               4),
                                                              (Data.Maybe.isJust to_be_encoded_20._thumbs,
                                                               4),
                                                              (Data.Maybe.isJust to_be_encoded_20._installed_date,
                                                               0),
                                                              (Data.Maybe.isJust to_be_encoded_20._channel_emoji_status,
                                                               10),
                                                              (Data.Maybe.isJust to_be_encoded_20._text_color,
                                                               9),
                                                              (Data.Maybe.isJust to_be_encoded_20._emojis,
                                                               7),
                                                              (Data.Maybe.isJust to_be_encoded_20._videos,
                                                               6),
                                                              (Data.Maybe.isJust to_be_encoded_20._animated,
                                                               5),
                                                              (Data.Maybe.isJust to_be_encoded_20._masks,
                                                               3),
                                                              (Data.Maybe.isJust to_be_encoded_20._official,
                                                               2),
                                                              (Data.Maybe.isJust to_be_encoded_20._archived,
                                                               1)];
                                      Data.Binary.put to_be_encoded_20._archived;
                                      Data.Binary.put to_be_encoded_20._official;
                                      Data.Binary.put to_be_encoded_20._masks;
                                      Data.Binary.put to_be_encoded_20._animated;
                                      Data.Binary.put to_be_encoded_20._videos;
                                      Data.Binary.put to_be_encoded_20._emojis;
                                      Data.Binary.put to_be_encoded_20._text_color;
                                      Data.Binary.put to_be_encoded_20._channel_emoji_status;
                                      Data.Binary.put to_be_encoded_20._installed_date;
                                      Data.Binary.put to_be_encoded_20._id;
                                      Data.Binary.put to_be_encoded_20._access_hash;
                                      Data.Binary.put to_be_encoded_20._title;
                                      Data.Binary.put to_be_encoded_20._short_name;
                                      Data.Binary.put to_be_encoded_20._thumbs;
                                      Data.Binary.put to_be_encoded_20._thumb_dc_id;
                                      Data.Binary.put to_be_encoded_20._thumb_version;
                                      Data.Binary.put to_be_encoded_20._thumb_document_id;
                                      Data.Binary.put to_be_encoded_20._count;
                                      Data.Binary.put to_be_encoded_20._hash}}
data StickerSet = StickerSet !StickerSet'
data StickerSet'
    = StickerSet' {_archived :: !(Maybe True'),
                   _official :: !(Maybe True'),
                   _masks :: !(Maybe True'),
                   _animated :: !(Maybe True'),
                   _videos :: !(Maybe True'),
                   _emojis :: !(Maybe True'),
                   _text_color :: !(Maybe True'),
                   _channel_emoji_status :: !(Maybe True'),
                   _installed_date :: !(Maybe Int'),
                   _id :: !Long',
                   _access_hash :: !Long',
                   _title :: !String',
                   _short_name :: !String',
                   _thumbs :: !(Maybe (Vector PhotoSize)),
                   _thumb_dc_id :: !(Maybe Int'),
                   _thumb_version :: !(Maybe Int'),
                   _thumb_document_id :: !(Maybe Long'),
                   _count :: !Int',
                   _hash :: !Int'}
instance Data.Binary.Binary StickerSet
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {768691932 -> fmap StickerSet Data.Binary.get}};
           put (StickerSet tmp_1) = do {Data.Binary.Put.putWord32le 768691932;
                                        Data.Binary.put tmp_1}}
instance Data.Binary.Binary StickerSetCovered'
    where {get = do {_set_0 <- Data.Binary.get;
                     _cover_1 <- Data.Binary.get;
                     GHC.Base.pure (StickerSetCovered' _set_0 _cover_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._set;
                                     Data.Binary.put to_be_encoded_2._cover}}
instance Data.Binary.Binary StickerSetFullCovered'
    where {get = do {_set_0 <- Data.Binary.get;
                     _packs_1 <- Data.Binary.get;
                     _keywords_2 <- Data.Binary.get;
                     _documents_3 <- Data.Binary.get;
                     GHC.Base.pure (StickerSetFullCovered' _set_0 _packs_1 _keywords_2 _documents_3)};
           put to_be_encoded_4 = do {Data.Binary.put to_be_encoded_4._set;
                                     Data.Binary.put to_be_encoded_4._packs;
                                     Data.Binary.put to_be_encoded_4._keywords;
                                     Data.Binary.put to_be_encoded_4._documents}}
instance Data.Binary.Binary StickerSetMultiCovered'
    where {get = do {_set_0 <- Data.Binary.get;
                     _covers_1 <- Data.Binary.get;
                     GHC.Base.pure (StickerSetMultiCovered' _set_0 _covers_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._set;
                                     Data.Binary.put to_be_encoded_2._covers}}
instance Data.Binary.Binary StickerSetNoCovered'
    where {get = do {_set_0 <- Data.Binary.get;
                     GHC.Base.pure (StickerSetNoCovered' _set_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._set}
data StickerSetCovered
    = StickerSetCovered !StickerSetCovered'
    | StickerSetFullCovered !StickerSetFullCovered'
    | StickerSetMultiCovered !StickerSetMultiCovered'
    | StickerSetNoCovered !StickerSetNoCovered'
data StickerSetCovered'
    = StickerSetCovered' {_set :: !StickerSet, _cover :: !Document}
data StickerSetFullCovered'
    = StickerSetFullCovered' {_set :: !StickerSet,
                              _packs :: !(Vector StickerPack),
                              _keywords :: !(Vector StickerKeyword),
                              _documents :: !(Vector Document)}
data StickerSetMultiCovered'
    = StickerSetMultiCovered' {_set :: !StickerSet,
                               _covers :: !(Vector Document)}
data StickerSetNoCovered'
    = StickerSetNoCovered' {_set :: !StickerSet}
instance Data.Binary.Binary StickerSetCovered
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1678812626 -> fmap StickerSetCovered Data.Binary.get;
                      1087454222 -> fmap StickerSetFullCovered Data.Binary.get;
                      872932635 -> fmap StickerSetMultiCovered Data.Binary.get;
                      2008112412 -> fmap StickerSetNoCovered Data.Binary.get}};
           put (StickerSetCovered tmp_1) = do {Data.Binary.Put.putWord32le 1678812626;
                                               Data.Binary.put tmp_1};
           put (StickerSetFullCovered tmp_2) = do {Data.Binary.Put.putWord32le 1087454222;
                                                   Data.Binary.put tmp_2};
           put (StickerSetMultiCovered tmp_3) = do {Data.Binary.Put.putWord32le 872932635;
                                                    Data.Binary.put tmp_3};
           put (StickerSetNoCovered tmp_4) = do {Data.Binary.Put.putWord32le 2008112412;
                                                 Data.Binary.put tmp_4}}
instance Data.Binary.Binary StoriesStealthMode'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _active_until_date_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _cooldown_until_date_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     GHC.Base.pure (StoriesStealthMode' _active_until_date_1 _cooldown_until_date_2)};
           put to_be_encoded_3 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_3._cooldown_until_date,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_3._active_until_date,
                                                              0)];
                                     Data.Binary.put to_be_encoded_3._active_until_date;
                                     Data.Binary.put to_be_encoded_3._cooldown_until_date}}
data StoriesStealthMode = StoriesStealthMode !StoriesStealthMode'
data StoriesStealthMode'
    = StoriesStealthMode' {_active_until_date :: !(Maybe Int'),
                           _cooldown_until_date :: !(Maybe Int')}
instance Data.Binary.Binary StoriesStealthMode
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1898850301 -> fmap StoriesStealthMode Data.Binary.get}};
           put (StoriesStealthMode tmp_1) = do {Data.Binary.Put.putWord32le 1898850301;
                                                Data.Binary.put tmp_1}}
instance Data.Binary.Binary StoryFwdHeader'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _modified_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     _from_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _from_name_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _story_id_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     GHC.Base.pure (StoryFwdHeader' _modified_1 _from_2 _from_name_3 _story_id_4)};
           put to_be_encoded_5 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_5._story_id,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_5._from_name,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_5._from,
                                                              0),
                                                             (Data.Maybe.isJust to_be_encoded_5._modified,
                                                              3)];
                                     Data.Binary.put to_be_encoded_5._modified;
                                     Data.Binary.put to_be_encoded_5._from;
                                     Data.Binary.put to_be_encoded_5._from_name;
                                     Data.Binary.put to_be_encoded_5._story_id}}
data StoryFwdHeader = StoryFwdHeader !StoryFwdHeader'
data StoryFwdHeader'
    = StoryFwdHeader' {_modified :: !(Maybe True'),
                       _from :: !(Maybe Peer),
                       _from_name :: !(Maybe String'),
                       _story_id :: !(Maybe Int')}
instance Data.Binary.Binary StoryFwdHeader
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3089555792 -> fmap StoryFwdHeader Data.Binary.get}};
           put (StoryFwdHeader tmp_1) = do {Data.Binary.Put.putWord32le 3089555792;
                                            Data.Binary.put tmp_1}}
instance Data.Binary.Binary StoryItem'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _pinned_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 5);
                     _public_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 7);
                     _close_friends_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 8);
                     _min_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 9);
                     _noforwards_5 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 10);
                     _edited_6 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 11);
                     _contacts_7 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 12);
                     _selected_contacts_8 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 13);
                     _out_9 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 16);
                     _id_10 <- Data.Binary.get;
                     _date_11 <- Data.Binary.get;
                     _fwd_from_12 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 17);
                     _expire_date_13 <- Data.Binary.get;
                     _caption_14 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _entities_15 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _media_16 <- Data.Binary.get;
                     _media_areas_17 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 14);
                     _privacy_18 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _views_19 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     _sent_reaction_20 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 15);
                     GHC.Base.pure (StoryItem' _pinned_1 _public_2 _close_friends_3 _min_4 _noforwards_5 _edited_6 _contacts_7 _selected_contacts_8 _out_9 _id_10 _date_11 _fwd_from_12 _expire_date_13 _caption_14 _entities_15 _media_16 _media_areas_17 _privacy_18 _views_19 _sent_reaction_20)};
           put to_be_encoded_21 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_21._sent_reaction,
                                                               15),
                                                              (Data.Maybe.isJust to_be_encoded_21._views,
                                                               3),
                                                              (Data.Maybe.isJust to_be_encoded_21._privacy,
                                                               2),
                                                              (Data.Maybe.isJust to_be_encoded_21._media_areas,
                                                               14),
                                                              (Data.Maybe.isJust to_be_encoded_21._entities,
                                                               1),
                                                              (Data.Maybe.isJust to_be_encoded_21._caption,
                                                               0),
                                                              (Data.Maybe.isJust to_be_encoded_21._fwd_from,
                                                               17),
                                                              (Data.Maybe.isJust to_be_encoded_21._out,
                                                               16),
                                                              (Data.Maybe.isJust to_be_encoded_21._selected_contacts,
                                                               13),
                                                              (Data.Maybe.isJust to_be_encoded_21._contacts,
                                                               12),
                                                              (Data.Maybe.isJust to_be_encoded_21._edited,
                                                               11),
                                                              (Data.Maybe.isJust to_be_encoded_21._noforwards,
                                                               10),
                                                              (Data.Maybe.isJust to_be_encoded_21._min,
                                                               9),
                                                              (Data.Maybe.isJust to_be_encoded_21._close_friends,
                                                               8),
                                                              (Data.Maybe.isJust to_be_encoded_21._public,
                                                               7),
                                                              (Data.Maybe.isJust to_be_encoded_21._pinned,
                                                               5)];
                                      Data.Binary.put to_be_encoded_21._pinned;
                                      Data.Binary.put to_be_encoded_21._public;
                                      Data.Binary.put to_be_encoded_21._close_friends;
                                      Data.Binary.put to_be_encoded_21._min;
                                      Data.Binary.put to_be_encoded_21._noforwards;
                                      Data.Binary.put to_be_encoded_21._edited;
                                      Data.Binary.put to_be_encoded_21._contacts;
                                      Data.Binary.put to_be_encoded_21._selected_contacts;
                                      Data.Binary.put to_be_encoded_21._out;
                                      Data.Binary.put to_be_encoded_21._id;
                                      Data.Binary.put to_be_encoded_21._date;
                                      Data.Binary.put to_be_encoded_21._fwd_from;
                                      Data.Binary.put to_be_encoded_21._expire_date;
                                      Data.Binary.put to_be_encoded_21._caption;
                                      Data.Binary.put to_be_encoded_21._entities;
                                      Data.Binary.put to_be_encoded_21._media;
                                      Data.Binary.put to_be_encoded_21._media_areas;
                                      Data.Binary.put to_be_encoded_21._privacy;
                                      Data.Binary.put to_be_encoded_21._views;
                                      Data.Binary.put to_be_encoded_21._sent_reaction}}
instance Data.Binary.Binary StoryItemDeleted'
    where {get = do {_id_0 <- Data.Binary.get;
                     GHC.Base.pure (StoryItemDeleted' _id_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._id}
instance Data.Binary.Binary StoryItemSkipped'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _close_friends_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 8);
                     _id_2 <- Data.Binary.get;
                     _date_3 <- Data.Binary.get;
                     _expire_date_4 <- Data.Binary.get;
                     GHC.Base.pure (StoryItemSkipped' _close_friends_1 _id_2 _date_3 _expire_date_4)};
           put to_be_encoded_5 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_5._close_friends,
                                                              8)];
                                     Data.Binary.put to_be_encoded_5._close_friends;
                                     Data.Binary.put to_be_encoded_5._id;
                                     Data.Binary.put to_be_encoded_5._date;
                                     Data.Binary.put to_be_encoded_5._expire_date}}
data StoryItem
    = StoryItem !StoryItem'
    | StoryItemDeleted !StoryItemDeleted'
    | StoryItemSkipped !StoryItemSkipped'
data StoryItem'
    = StoryItem' {_pinned :: !(Maybe True'),
                  _public :: !(Maybe True'),
                  _close_friends :: !(Maybe True'),
                  _min :: !(Maybe True'),
                  _noforwards :: !(Maybe True'),
                  _edited :: !(Maybe True'),
                  _contacts :: !(Maybe True'),
                  _selected_contacts :: !(Maybe True'),
                  _out :: !(Maybe True'),
                  _id :: !Int',
                  _date :: !Int',
                  _fwd_from :: !(Maybe StoryFwdHeader),
                  _expire_date :: !Int',
                  _caption :: !(Maybe String'),
                  _entities :: !(Maybe (Vector MessageEntity)),
                  _media :: !MessageMedia,
                  _media_areas :: !(Maybe (Vector MediaArea)),
                  _privacy :: !(Maybe (Vector PrivacyRule)),
                  _views :: !(Maybe StoryViews),
                  _sent_reaction :: !(Maybe Reaction)}
data StoryItemDeleted' = StoryItemDeleted' {_id :: !Int'}
data StoryItemSkipped'
    = StoryItemSkipped' {_close_friends :: !(Maybe True'),
                         _id :: !Int',
                         _date :: !Int',
                         _expire_date :: !Int'}
instance Data.Binary.Binary StoryItem
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2942526881 -> fmap StoryItem Data.Binary.get;
                      1374088783 -> fmap StoryItemDeleted Data.Binary.get;
                      4289579283 -> fmap StoryItemSkipped Data.Binary.get}};
           put (StoryItem tmp_1) = do {Data.Binary.Put.putWord32le 2942526881;
                                       Data.Binary.put tmp_1};
           put (StoryItemDeleted tmp_2) = do {Data.Binary.Put.putWord32le 1374088783;
                                              Data.Binary.put tmp_2};
           put (StoryItemSkipped tmp_3) = do {Data.Binary.Put.putWord32le 4289579283;
                                              Data.Binary.put tmp_3}}
instance Data.Binary.Binary StoryReaction'
    where {get = do {_peer_id_0 <- Data.Binary.get;
                     _date_1 <- Data.Binary.get;
                     _reaction_2 <- Data.Binary.get;
                     GHC.Base.pure (StoryReaction' _peer_id_0 _date_1 _reaction_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._peer_id;
                                     Data.Binary.put to_be_encoded_3._date;
                                     Data.Binary.put to_be_encoded_3._reaction}}
instance Data.Binary.Binary StoryReactionPublicForward'
    where {get = do {_message_0 <- Data.Binary.get;
                     GHC.Base.pure (StoryReactionPublicForward' _message_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._message}
instance Data.Binary.Binary StoryReactionPublicRepost'
    where {get = do {_peer_id_0 <- Data.Binary.get;
                     _story_1 <- Data.Binary.get;
                     GHC.Base.pure (StoryReactionPublicRepost' _peer_id_0 _story_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._peer_id;
                                     Data.Binary.put to_be_encoded_2._story}}
data StoryReaction
    = StoryReaction !StoryReaction'
    | StoryReactionPublicForward !StoryReactionPublicForward'
    | StoryReactionPublicRepost !StoryReactionPublicRepost'
data StoryReaction'
    = StoryReaction' {_peer_id :: !Peer,
                      _date :: !Int',
                      _reaction :: !Reaction}
data StoryReactionPublicForward'
    = StoryReactionPublicForward' {_message :: !Message}
data StoryReactionPublicRepost'
    = StoryReactionPublicRepost' {_peer_id :: !Peer,
                                  _story :: !StoryItem}
instance Data.Binary.Binary StoryReaction
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1620104917 -> fmap StoryReaction Data.Binary.get;
                      3148555843 -> fmap StoryReactionPublicForward Data.Binary.get;
                      3486322451 -> fmap StoryReactionPublicRepost Data.Binary.get}};
           put (StoryReaction tmp_1) = do {Data.Binary.Put.putWord32le 1620104917;
                                           Data.Binary.put tmp_1};
           put (StoryReactionPublicForward tmp_2) = do {Data.Binary.Put.putWord32le 3148555843;
                                                        Data.Binary.put tmp_2};
           put (StoryReactionPublicRepost tmp_3) = do {Data.Binary.Put.putWord32le 3486322451;
                                                       Data.Binary.put tmp_3}}
instance Data.Binary.Binary StoryView'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _blocked_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _blocked_my_stories_from_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _user_id_3 <- Data.Binary.get;
                     _date_4 <- Data.Binary.get;
                     _reaction_5 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     GHC.Base.pure (StoryView' _blocked_1 _blocked_my_stories_from_2 _user_id_3 _date_4 _reaction_5)};
           put to_be_encoded_6 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_6._reaction,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_6._blocked_my_stories_from,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_6._blocked,
                                                              0)];
                                     Data.Binary.put to_be_encoded_6._blocked;
                                     Data.Binary.put to_be_encoded_6._blocked_my_stories_from;
                                     Data.Binary.put to_be_encoded_6._user_id;
                                     Data.Binary.put to_be_encoded_6._date;
                                     Data.Binary.put to_be_encoded_6._reaction}}
instance Data.Binary.Binary StoryViewPublicForward'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _blocked_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _blocked_my_stories_from_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _message_3 <- Data.Binary.get;
                     GHC.Base.pure (StoryViewPublicForward' _blocked_1 _blocked_my_stories_from_2 _message_3)};
           put to_be_encoded_4 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_4._blocked_my_stories_from,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_4._blocked,
                                                              0)];
                                     Data.Binary.put to_be_encoded_4._blocked;
                                     Data.Binary.put to_be_encoded_4._blocked_my_stories_from;
                                     Data.Binary.put to_be_encoded_4._message}}
instance Data.Binary.Binary StoryViewPublicRepost'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _blocked_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _blocked_my_stories_from_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _peer_id_3 <- Data.Binary.get;
                     _story_4 <- Data.Binary.get;
                     GHC.Base.pure (StoryViewPublicRepost' _blocked_1 _blocked_my_stories_from_2 _peer_id_3 _story_4)};
           put to_be_encoded_5 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_5._blocked_my_stories_from,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_5._blocked,
                                                              0)];
                                     Data.Binary.put to_be_encoded_5._blocked;
                                     Data.Binary.put to_be_encoded_5._blocked_my_stories_from;
                                     Data.Binary.put to_be_encoded_5._peer_id;
                                     Data.Binary.put to_be_encoded_5._story}}
data StoryView
    = StoryView !StoryView'
    | StoryViewPublicForward !StoryViewPublicForward'
    | StoryViewPublicRepost !StoryViewPublicRepost'
data StoryView'
    = StoryView' {_blocked :: !(Maybe True'),
                  _blocked_my_stories_from :: !(Maybe True'),
                  _user_id :: !Long',
                  _date :: !Int',
                  _reaction :: !(Maybe Reaction)}
data StoryViewPublicForward'
    = StoryViewPublicForward' {_blocked :: !(Maybe True'),
                               _blocked_my_stories_from :: !(Maybe True'),
                               _message :: !Message}
data StoryViewPublicRepost'
    = StoryViewPublicRepost' {_blocked :: !(Maybe True'),
                              _blocked_my_stories_from :: !(Maybe True'),
                              _peer_id :: !Peer,
                              _story :: !StoryItem}
instance Data.Binary.Binary StoryView
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2965236421 -> fmap StoryView Data.Binary.get;
                      2424530699 -> fmap StoryViewPublicForward Data.Binary.get;
                      3178549065 -> fmap StoryViewPublicRepost Data.Binary.get}};
           put (StoryView tmp_1) = do {Data.Binary.Put.putWord32le 2965236421;
                                       Data.Binary.put tmp_1};
           put (StoryViewPublicForward tmp_2) = do {Data.Binary.Put.putWord32le 2424530699;
                                                    Data.Binary.put tmp_2};
           put (StoryViewPublicRepost tmp_3) = do {Data.Binary.Put.putWord32le 3178549065;
                                                   Data.Binary.put tmp_3}}
instance Data.Binary.Binary StoryViews'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _has_viewers_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _views_count_2 <- Data.Binary.get;
                     _forwards_count_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _reactions_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     _reactions_count_5 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 4);
                     _recent_viewers_6 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     GHC.Base.pure (StoryViews' _has_viewers_1 _views_count_2 _forwards_count_3 _reactions_4 _reactions_count_5 _recent_viewers_6)};
           put to_be_encoded_7 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_7._recent_viewers,
                                                              0),
                                                             (Data.Maybe.isJust to_be_encoded_7._reactions_count,
                                                              4),
                                                             (Data.Maybe.isJust to_be_encoded_7._reactions,
                                                              3),
                                                             (Data.Maybe.isJust to_be_encoded_7._forwards_count,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_7._has_viewers,
                                                              1)];
                                     Data.Binary.put to_be_encoded_7._has_viewers;
                                     Data.Binary.put to_be_encoded_7._views_count;
                                     Data.Binary.put to_be_encoded_7._forwards_count;
                                     Data.Binary.put to_be_encoded_7._reactions;
                                     Data.Binary.put to_be_encoded_7._reactions_count;
                                     Data.Binary.put to_be_encoded_7._recent_viewers}}
data StoryViews = StoryViews !StoryViews'
data StoryViews'
    = StoryViews' {_has_viewers :: !(Maybe True'),
                   _views_count :: !Int',
                   _forwards_count :: !(Maybe Int'),
                   _reactions :: !(Maybe (Vector ReactionCount)),
                   _reactions_count :: !(Maybe Int'),
                   _recent_viewers :: !(Maybe (Vector Long'))}
instance Data.Binary.Binary StoryViews
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2371443926 -> fmap StoryViews Data.Binary.get}};
           put (StoryViews tmp_1) = do {Data.Binary.Put.putWord32le 2371443926;
                                        Data.Binary.put tmp_1}}
instance Data.Binary.Binary TextWithEntities'
    where {get = do {_text_0 <- Data.Binary.get;
                     _entities_1 <- Data.Binary.get;
                     GHC.Base.pure (TextWithEntities' _text_0 _entities_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._text;
                                     Data.Binary.put to_be_encoded_2._entities}}
data TextWithEntities = TextWithEntities !TextWithEntities'
data TextWithEntities'
    = TextWithEntities' {_text :: !String',
                         _entities :: !(Vector MessageEntity)}
instance Data.Binary.Binary TextWithEntities
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1964978502 -> fmap TextWithEntities Data.Binary.get}};
           put (TextWithEntities tmp_1) = do {Data.Binary.Put.putWord32le 1964978502;
                                              Data.Binary.put tmp_1}}
instance Data.Binary.Binary Theme'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _creator_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _default_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _for_chat_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 5);
                     _id_4 <- Data.Binary.get;
                     _access_hash_5 <- Data.Binary.get;
                     _slug_6 <- Data.Binary.get;
                     _title_7 <- Data.Binary.get;
                     _document_8 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _settings_9 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     _emoticon_10 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 6);
                     _installs_count_11 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 4);
                     GHC.Base.pure (Theme' _creator_1 _default_2 _for_chat_3 _id_4 _access_hash_5 _slug_6 _title_7 _document_8 _settings_9 _emoticon_10 _installs_count_11)};
           put to_be_encoded_12 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_12._installs_count,
                                                               4),
                                                              (Data.Maybe.isJust to_be_encoded_12._emoticon,
                                                               6),
                                                              (Data.Maybe.isJust to_be_encoded_12._settings,
                                                               3),
                                                              (Data.Maybe.isJust to_be_encoded_12._document,
                                                               2),
                                                              (Data.Maybe.isJust to_be_encoded_12._for_chat,
                                                               5),
                                                              (Data.Maybe.isJust to_be_encoded_12._default,
                                                               1),
                                                              (Data.Maybe.isJust to_be_encoded_12._creator,
                                                               0)];
                                      Data.Binary.put to_be_encoded_12._creator;
                                      Data.Binary.put to_be_encoded_12._default;
                                      Data.Binary.put to_be_encoded_12._for_chat;
                                      Data.Binary.put to_be_encoded_12._id;
                                      Data.Binary.put to_be_encoded_12._access_hash;
                                      Data.Binary.put to_be_encoded_12._slug;
                                      Data.Binary.put to_be_encoded_12._title;
                                      Data.Binary.put to_be_encoded_12._document;
                                      Data.Binary.put to_be_encoded_12._settings;
                                      Data.Binary.put to_be_encoded_12._emoticon;
                                      Data.Binary.put to_be_encoded_12._installs_count}}
data Theme = Theme !Theme'
data Theme'
    = Theme' {_creator :: !(Maybe True'),
              _default :: !(Maybe True'),
              _for_chat :: !(Maybe True'),
              _id :: !Long',
              _access_hash :: !Long',
              _slug :: !String',
              _title :: !String',
              _document :: !(Maybe Document),
              _settings :: !(Maybe (Vector ThemeSettings)),
              _emoticon :: !(Maybe String'),
              _installs_count :: !(Maybe Int')}
instance Data.Binary.Binary Theme
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2685298646 -> fmap Theme Data.Binary.get}};
           put (Theme tmp_1) = do {Data.Binary.Put.putWord32le 2685298646;
                                   Data.Binary.put tmp_1}}
instance Data.Binary.Binary ThemeSettings'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _message_colors_animated_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _base_theme_2 <- Data.Binary.get;
                     _accent_color_3 <- Data.Binary.get;
                     _outbox_accent_color_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     _message_colors_5 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _wallpaper_6 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     GHC.Base.pure (ThemeSettings' _message_colors_animated_1 _base_theme_2 _accent_color_3 _outbox_accent_color_4 _message_colors_5 _wallpaper_6)};
           put to_be_encoded_7 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_7._wallpaper,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_7._message_colors,
                                                              0),
                                                             (Data.Maybe.isJust to_be_encoded_7._outbox_accent_color,
                                                              3),
                                                             (Data.Maybe.isJust to_be_encoded_7._message_colors_animated,
                                                              2)];
                                     Data.Binary.put to_be_encoded_7._message_colors_animated;
                                     Data.Binary.put to_be_encoded_7._base_theme;
                                     Data.Binary.put to_be_encoded_7._accent_color;
                                     Data.Binary.put to_be_encoded_7._outbox_accent_color;
                                     Data.Binary.put to_be_encoded_7._message_colors;
                                     Data.Binary.put to_be_encoded_7._wallpaper}}
data ThemeSettings = ThemeSettings !ThemeSettings'
data ThemeSettings'
    = ThemeSettings' {_message_colors_animated :: !(Maybe True'),
                      _base_theme :: !BaseTheme,
                      _accent_color :: !Int',
                      _outbox_accent_color :: !(Maybe Int'),
                      _message_colors :: !(Maybe (Vector Int')),
                      _wallpaper :: !(Maybe WallPaper)}
instance Data.Binary.Binary ThemeSettings
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {4200117972 -> fmap ThemeSettings Data.Binary.get}};
           put (ThemeSettings tmp_1) = do {Data.Binary.Put.putWord32le 4200117972;
                                           Data.Binary.put tmp_1}}
instance Data.Binary.Binary TopPeer'
    where {get = do {_peer_0 <- Data.Binary.get;
                     _rating_1 <- Data.Binary.get;
                     GHC.Base.pure (TopPeer' _peer_0 _rating_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._peer;
                                     Data.Binary.put to_be_encoded_2._rating}}
data TopPeer = TopPeer !TopPeer'
data TopPeer' = TopPeer' {_peer :: !Peer, _rating :: !Double'}
instance Data.Binary.Binary TopPeer
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3989684315 -> fmap TopPeer Data.Binary.get}};
           put (TopPeer tmp_1) = do {Data.Binary.Put.putWord32le 3989684315;
                                     Data.Binary.put tmp_1}}
instance Data.Binary.Binary TopPeerCategoryBotsInline'
    where {get = GHC.Base.pure TopPeerCategoryBotsInline';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary TopPeerCategoryBotsPM'
    where {get = GHC.Base.pure TopPeerCategoryBotsPM';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary TopPeerCategoryChannels'
    where {get = GHC.Base.pure TopPeerCategoryChannels';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary TopPeerCategoryCorrespondents'
    where {get = GHC.Base.pure TopPeerCategoryCorrespondents';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary TopPeerCategoryForwardChats'
    where {get = GHC.Base.pure TopPeerCategoryForwardChats';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary TopPeerCategoryForwardUsers'
    where {get = GHC.Base.pure TopPeerCategoryForwardUsers';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary TopPeerCategoryGroups'
    where {get = GHC.Base.pure TopPeerCategoryGroups';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary TopPeerCategoryPhoneCalls'
    where {get = GHC.Base.pure TopPeerCategoryPhoneCalls';
           put to_be_encoded_0 = do GHC.Base.pure ()}
data TopPeerCategory
    = TopPeerCategoryBotsInline !TopPeerCategoryBotsInline'
    | TopPeerCategoryBotsPM !TopPeerCategoryBotsPM'
    | TopPeerCategoryChannels !TopPeerCategoryChannels'
    | TopPeerCategoryCorrespondents !TopPeerCategoryCorrespondents'
    | TopPeerCategoryForwardChats !TopPeerCategoryForwardChats'
    | TopPeerCategoryForwardUsers !TopPeerCategoryForwardUsers'
    | TopPeerCategoryGroups !TopPeerCategoryGroups'
    | TopPeerCategoryPhoneCalls !TopPeerCategoryPhoneCalls'
data TopPeerCategoryBotsInline' = TopPeerCategoryBotsInline' {}
data TopPeerCategoryBotsPM' = TopPeerCategoryBotsPM' {}
data TopPeerCategoryChannels' = TopPeerCategoryChannels' {}
data TopPeerCategoryCorrespondents'
    = TopPeerCategoryCorrespondents' {}
data TopPeerCategoryForwardChats' = TopPeerCategoryForwardChats' {}
data TopPeerCategoryForwardUsers' = TopPeerCategoryForwardUsers' {}
data TopPeerCategoryGroups' = TopPeerCategoryGroups' {}
data TopPeerCategoryPhoneCalls' = TopPeerCategoryPhoneCalls' {}
instance Data.Binary.Binary TopPeerCategory
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {344356834 -> fmap TopPeerCategoryBotsInline Data.Binary.get;
                      2875595611 -> fmap TopPeerCategoryBotsPM Data.Binary.get;
                      371037736 -> fmap TopPeerCategoryChannels Data.Binary.get;
                      104314861 -> fmap TopPeerCategoryCorrespondents Data.Binary.get;
                      4226728176 -> fmap TopPeerCategoryForwardChats Data.Binary.get;
                      2822794409 -> fmap TopPeerCategoryForwardUsers Data.Binary.get;
                      3172442442 -> fmap TopPeerCategoryGroups Data.Binary.get;
                      511092620 -> fmap TopPeerCategoryPhoneCalls Data.Binary.get}};
           put (TopPeerCategoryBotsInline tmp_1) = do {Data.Binary.Put.putWord32le 344356834;
                                                       Data.Binary.put tmp_1};
           put (TopPeerCategoryBotsPM tmp_2) = do {Data.Binary.Put.putWord32le 2875595611;
                                                   Data.Binary.put tmp_2};
           put (TopPeerCategoryChannels tmp_3) = do {Data.Binary.Put.putWord32le 371037736;
                                                     Data.Binary.put tmp_3};
           put (TopPeerCategoryCorrespondents tmp_4) = do {Data.Binary.Put.putWord32le 104314861;
                                                           Data.Binary.put tmp_4};
           put (TopPeerCategoryForwardChats tmp_5) = do {Data.Binary.Put.putWord32le 4226728176;
                                                         Data.Binary.put tmp_5};
           put (TopPeerCategoryForwardUsers tmp_6) = do {Data.Binary.Put.putWord32le 2822794409;
                                                         Data.Binary.put tmp_6};
           put (TopPeerCategoryGroups tmp_7) = do {Data.Binary.Put.putWord32le 3172442442;
                                                   Data.Binary.put tmp_7};
           put (TopPeerCategoryPhoneCalls tmp_8) = do {Data.Binary.Put.putWord32le 511092620;
                                                       Data.Binary.put tmp_8}}
instance Data.Binary.Binary TopPeerCategoryPeers'
    where {get = do {_category_0 <- Data.Binary.get;
                     _count_1 <- Data.Binary.get;
                     _peers_2 <- Data.Binary.get;
                     GHC.Base.pure (TopPeerCategoryPeers' _category_0 _count_1 _peers_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._category;
                                     Data.Binary.put to_be_encoded_3._count;
                                     Data.Binary.put to_be_encoded_3._peers}}
data TopPeerCategoryPeers
    = TopPeerCategoryPeers !TopPeerCategoryPeers'
data TopPeerCategoryPeers'
    = TopPeerCategoryPeers' {_category :: !TopPeerCategory,
                             _count :: !Int',
                             _peers :: !(Vector TopPeer)}
instance Data.Binary.Binary TopPeerCategoryPeers
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {4219683473 -> fmap TopPeerCategoryPeers Data.Binary.get}};
           put (TopPeerCategoryPeers tmp_1) = do {Data.Binary.Put.putWord32le 4219683473;
                                                  Data.Binary.put tmp_1}}
instance Data.Binary.Binary True'
    where {get = GHC.Base.pure True';
           put to_be_encoded_0 = do GHC.Base.pure ()}
data True = True !True'
data True' = True' {}
instance Data.Binary.Binary True
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1072550713 -> fmap True Data.Binary.get}};
           put (True tmp_1) = do {Data.Binary.Put.putWord32le 1072550713;
                                  Data.Binary.put tmp_1}}
instance Data.Binary.Binary UpdateAttachMenuBots'
    where {get = GHC.Base.pure UpdateAttachMenuBots';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary UpdateAutoSaveSettings'
    where {get = GHC.Base.pure UpdateAutoSaveSettings';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary UpdateBotCallbackQuery'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _query_id_1 <- Data.Binary.get;
                     _user_id_2 <- Data.Binary.get;
                     _peer_3 <- Data.Binary.get;
                     _msg_id_4 <- Data.Binary.get;
                     _chat_instance_5 <- Data.Binary.get;
                     _data_6 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _game_short_name_7 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     GHC.Base.pure (UpdateBotCallbackQuery' _query_id_1 _user_id_2 _peer_3 _msg_id_4 _chat_instance_5 _data_6 _game_short_name_7)};
           put to_be_encoded_8 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_8._game_short_name,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_8._data,
                                                              0)];
                                     Data.Binary.put to_be_encoded_8._query_id;
                                     Data.Binary.put to_be_encoded_8._user_id;
                                     Data.Binary.put to_be_encoded_8._peer;
                                     Data.Binary.put to_be_encoded_8._msg_id;
                                     Data.Binary.put to_be_encoded_8._chat_instance;
                                     Data.Binary.put to_be_encoded_8._data;
                                     Data.Binary.put to_be_encoded_8._game_short_name}}
instance Data.Binary.Binary UpdateBotChatBoost'
    where {get = do {_peer_0 <- Data.Binary.get;
                     _boost_1 <- Data.Binary.get;
                     _qts_2 <- Data.Binary.get;
                     GHC.Base.pure (UpdateBotChatBoost' _peer_0 _boost_1 _qts_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._peer;
                                     Data.Binary.put to_be_encoded_3._boost;
                                     Data.Binary.put to_be_encoded_3._qts}}
instance Data.Binary.Binary UpdateBotChatInviteRequester'
    where {get = do {_peer_0 <- Data.Binary.get;
                     _date_1 <- Data.Binary.get;
                     _user_id_2 <- Data.Binary.get;
                     _about_3 <- Data.Binary.get;
                     _invite_4 <- Data.Binary.get;
                     _qts_5 <- Data.Binary.get;
                     GHC.Base.pure (UpdateBotChatInviteRequester' _peer_0 _date_1 _user_id_2 _about_3 _invite_4 _qts_5)};
           put to_be_encoded_6 = do {Data.Binary.put to_be_encoded_6._peer;
                                     Data.Binary.put to_be_encoded_6._date;
                                     Data.Binary.put to_be_encoded_6._user_id;
                                     Data.Binary.put to_be_encoded_6._about;
                                     Data.Binary.put to_be_encoded_6._invite;
                                     Data.Binary.put to_be_encoded_6._qts}}
instance Data.Binary.Binary UpdateBotCommands'
    where {get = do {_peer_0 <- Data.Binary.get;
                     _bot_id_1 <- Data.Binary.get;
                     _commands_2 <- Data.Binary.get;
                     GHC.Base.pure (UpdateBotCommands' _peer_0 _bot_id_1 _commands_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._peer;
                                     Data.Binary.put to_be_encoded_3._bot_id;
                                     Data.Binary.put to_be_encoded_3._commands}}
instance Data.Binary.Binary UpdateBotInlineQuery'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _query_id_1 <- Data.Binary.get;
                     _user_id_2 <- Data.Binary.get;
                     _query_3 <- Data.Binary.get;
                     _geo_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _peer_type_5 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _offset_6 <- Data.Binary.get;
                     GHC.Base.pure (UpdateBotInlineQuery' _query_id_1 _user_id_2 _query_3 _geo_4 _peer_type_5 _offset_6)};
           put to_be_encoded_7 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_7._peer_type,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_7._geo,
                                                              0)];
                                     Data.Binary.put to_be_encoded_7._query_id;
                                     Data.Binary.put to_be_encoded_7._user_id;
                                     Data.Binary.put to_be_encoded_7._query;
                                     Data.Binary.put to_be_encoded_7._geo;
                                     Data.Binary.put to_be_encoded_7._peer_type;
                                     Data.Binary.put to_be_encoded_7._offset}}
instance Data.Binary.Binary UpdateBotInlineSend'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _user_id_1 <- Data.Binary.get;
                     _query_2 <- Data.Binary.get;
                     _geo_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _id_4 <- Data.Binary.get;
                     _msg_id_5 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     GHC.Base.pure (UpdateBotInlineSend' _user_id_1 _query_2 _geo_3 _id_4 _msg_id_5)};
           put to_be_encoded_6 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_6._msg_id,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_6._geo,
                                                              0)];
                                     Data.Binary.put to_be_encoded_6._user_id;
                                     Data.Binary.put to_be_encoded_6._query;
                                     Data.Binary.put to_be_encoded_6._geo;
                                     Data.Binary.put to_be_encoded_6._id;
                                     Data.Binary.put to_be_encoded_6._msg_id}}
instance Data.Binary.Binary UpdateBotMenuButton'
    where {get = do {_bot_id_0 <- Data.Binary.get;
                     _button_1 <- Data.Binary.get;
                     GHC.Base.pure (UpdateBotMenuButton' _bot_id_0 _button_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._bot_id;
                                     Data.Binary.put to_be_encoded_2._button}}
instance Data.Binary.Binary UpdateBotMessageReaction'
    where {get = do {_peer_0 <- Data.Binary.get;
                     _msg_id_1 <- Data.Binary.get;
                     _date_2 <- Data.Binary.get;
                     _actor_3 <- Data.Binary.get;
                     _old_reactions_4 <- Data.Binary.get;
                     _new_reactions_5 <- Data.Binary.get;
                     _qts_6 <- Data.Binary.get;
                     GHC.Base.pure (UpdateBotMessageReaction' _peer_0 _msg_id_1 _date_2 _actor_3 _old_reactions_4 _new_reactions_5 _qts_6)};
           put to_be_encoded_7 = do {Data.Binary.put to_be_encoded_7._peer;
                                     Data.Binary.put to_be_encoded_7._msg_id;
                                     Data.Binary.put to_be_encoded_7._date;
                                     Data.Binary.put to_be_encoded_7._actor;
                                     Data.Binary.put to_be_encoded_7._old_reactions;
                                     Data.Binary.put to_be_encoded_7._new_reactions;
                                     Data.Binary.put to_be_encoded_7._qts}}
instance Data.Binary.Binary UpdateBotMessageReactions'
    where {get = do {_peer_0 <- Data.Binary.get;
                     _msg_id_1 <- Data.Binary.get;
                     _date_2 <- Data.Binary.get;
                     _reactions_3 <- Data.Binary.get;
                     _qts_4 <- Data.Binary.get;
                     GHC.Base.pure (UpdateBotMessageReactions' _peer_0 _msg_id_1 _date_2 _reactions_3 _qts_4)};
           put to_be_encoded_5 = do {Data.Binary.put to_be_encoded_5._peer;
                                     Data.Binary.put to_be_encoded_5._msg_id;
                                     Data.Binary.put to_be_encoded_5._date;
                                     Data.Binary.put to_be_encoded_5._reactions;
                                     Data.Binary.put to_be_encoded_5._qts}}
instance Data.Binary.Binary UpdateBotPrecheckoutQuery'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _query_id_1 <- Data.Binary.get;
                     _user_id_2 <- Data.Binary.get;
                     _payload_3 <- Data.Binary.get;
                     _info_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _shipping_option_id_5 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _currency_6 <- Data.Binary.get;
                     _total_amount_7 <- Data.Binary.get;
                     GHC.Base.pure (UpdateBotPrecheckoutQuery' _query_id_1 _user_id_2 _payload_3 _info_4 _shipping_option_id_5 _currency_6 _total_amount_7)};
           put to_be_encoded_8 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_8._shipping_option_id,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_8._info,
                                                              0)];
                                     Data.Binary.put to_be_encoded_8._query_id;
                                     Data.Binary.put to_be_encoded_8._user_id;
                                     Data.Binary.put to_be_encoded_8._payload;
                                     Data.Binary.put to_be_encoded_8._info;
                                     Data.Binary.put to_be_encoded_8._shipping_option_id;
                                     Data.Binary.put to_be_encoded_8._currency;
                                     Data.Binary.put to_be_encoded_8._total_amount}}
instance Data.Binary.Binary UpdateBotShippingQuery'
    where {get = do {_query_id_0 <- Data.Binary.get;
                     _user_id_1 <- Data.Binary.get;
                     _payload_2 <- Data.Binary.get;
                     _shipping_address_3 <- Data.Binary.get;
                     GHC.Base.pure (UpdateBotShippingQuery' _query_id_0 _user_id_1 _payload_2 _shipping_address_3)};
           put to_be_encoded_4 = do {Data.Binary.put to_be_encoded_4._query_id;
                                     Data.Binary.put to_be_encoded_4._user_id;
                                     Data.Binary.put to_be_encoded_4._payload;
                                     Data.Binary.put to_be_encoded_4._shipping_address}}
instance Data.Binary.Binary UpdateBotStopped'
    where {get = do {_user_id_0 <- Data.Binary.get;
                     _date_1 <- Data.Binary.get;
                     _stopped_2 <- Data.Binary.get;
                     _qts_3 <- Data.Binary.get;
                     GHC.Base.pure (UpdateBotStopped' _user_id_0 _date_1 _stopped_2 _qts_3)};
           put to_be_encoded_4 = do {Data.Binary.put to_be_encoded_4._user_id;
                                     Data.Binary.put to_be_encoded_4._date;
                                     Data.Binary.put to_be_encoded_4._stopped;
                                     Data.Binary.put to_be_encoded_4._qts}}
instance Data.Binary.Binary UpdateBotWebhookJSON'
    where {get = do {_data_0 <- Data.Binary.get;
                     GHC.Base.pure (UpdateBotWebhookJSON' _data_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._data}
instance Data.Binary.Binary UpdateBotWebhookJSONQuery'
    where {get = do {_query_id_0 <- Data.Binary.get;
                     _data_1 <- Data.Binary.get;
                     _timeout_2 <- Data.Binary.get;
                     GHC.Base.pure (UpdateBotWebhookJSONQuery' _query_id_0 _data_1 _timeout_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._query_id;
                                     Data.Binary.put to_be_encoded_3._data;
                                     Data.Binary.put to_be_encoded_3._timeout}}
instance Data.Binary.Binary UpdateChannel'
    where {get = do {_channel_id_0 <- Data.Binary.get;
                     GHC.Base.pure (UpdateChannel' _channel_id_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._channel_id}
instance Data.Binary.Binary UpdateChannelAvailableMessages'
    where {get = do {_channel_id_0 <- Data.Binary.get;
                     _available_min_id_1 <- Data.Binary.get;
                     GHC.Base.pure (UpdateChannelAvailableMessages' _channel_id_0 _available_min_id_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._channel_id;
                                     Data.Binary.put to_be_encoded_2._available_min_id}}
instance Data.Binary.Binary UpdateChannelMessageForwards'
    where {get = do {_channel_id_0 <- Data.Binary.get;
                     _id_1 <- Data.Binary.get;
                     _forwards_2 <- Data.Binary.get;
                     GHC.Base.pure (UpdateChannelMessageForwards' _channel_id_0 _id_1 _forwards_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._channel_id;
                                     Data.Binary.put to_be_encoded_3._id;
                                     Data.Binary.put to_be_encoded_3._forwards}}
instance Data.Binary.Binary UpdateChannelMessageViews'
    where {get = do {_channel_id_0 <- Data.Binary.get;
                     _id_1 <- Data.Binary.get;
                     _views_2 <- Data.Binary.get;
                     GHC.Base.pure (UpdateChannelMessageViews' _channel_id_0 _id_1 _views_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._channel_id;
                                     Data.Binary.put to_be_encoded_3._id;
                                     Data.Binary.put to_be_encoded_3._views}}
instance Data.Binary.Binary UpdateChannelParticipant'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _via_chatlist_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     _channel_id_2 <- Data.Binary.get;
                     _date_3 <- Data.Binary.get;
                     _actor_id_4 <- Data.Binary.get;
                     _user_id_5 <- Data.Binary.get;
                     _prev_participant_6 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _new_participant_7 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _invite_8 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _qts_9 <- Data.Binary.get;
                     GHC.Base.pure (UpdateChannelParticipant' _via_chatlist_1 _channel_id_2 _date_3 _actor_id_4 _user_id_5 _prev_participant_6 _new_participant_7 _invite_8 _qts_9)};
           put to_be_encoded_10 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_10._invite,
                                                               2),
                                                              (Data.Maybe.isJust to_be_encoded_10._new_participant,
                                                               1),
                                                              (Data.Maybe.isJust to_be_encoded_10._prev_participant,
                                                               0),
                                                              (Data.Maybe.isJust to_be_encoded_10._via_chatlist,
                                                               3)];
                                      Data.Binary.put to_be_encoded_10._via_chatlist;
                                      Data.Binary.put to_be_encoded_10._channel_id;
                                      Data.Binary.put to_be_encoded_10._date;
                                      Data.Binary.put to_be_encoded_10._actor_id;
                                      Data.Binary.put to_be_encoded_10._user_id;
                                      Data.Binary.put to_be_encoded_10._prev_participant;
                                      Data.Binary.put to_be_encoded_10._new_participant;
                                      Data.Binary.put to_be_encoded_10._invite;
                                      Data.Binary.put to_be_encoded_10._qts}}
instance Data.Binary.Binary UpdateChannelPinnedTopic'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _pinned_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _channel_id_2 <- Data.Binary.get;
                     _topic_id_3 <- Data.Binary.get;
                     GHC.Base.pure (UpdateChannelPinnedTopic' _pinned_1 _channel_id_2 _topic_id_3)};
           put to_be_encoded_4 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_4._pinned,
                                                              0)];
                                     Data.Binary.put to_be_encoded_4._pinned;
                                     Data.Binary.put to_be_encoded_4._channel_id;
                                     Data.Binary.put to_be_encoded_4._topic_id}}
instance Data.Binary.Binary UpdateChannelPinnedTopics'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _channel_id_1 <- Data.Binary.get;
                     _order_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     GHC.Base.pure (UpdateChannelPinnedTopics' _channel_id_1 _order_2)};
           put to_be_encoded_3 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_3._order,
                                                              0)];
                                     Data.Binary.put to_be_encoded_3._channel_id;
                                     Data.Binary.put to_be_encoded_3._order}}
instance Data.Binary.Binary UpdateChannelReadMessagesContents'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _channel_id_1 <- Data.Binary.get;
                     _top_msg_id_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _messages_3 <- Data.Binary.get;
                     GHC.Base.pure (UpdateChannelReadMessagesContents' _channel_id_1 _top_msg_id_2 _messages_3)};
           put to_be_encoded_4 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_4._top_msg_id,
                                                              0)];
                                     Data.Binary.put to_be_encoded_4._channel_id;
                                     Data.Binary.put to_be_encoded_4._top_msg_id;
                                     Data.Binary.put to_be_encoded_4._messages}}
instance Data.Binary.Binary UpdateChannelTooLong'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _channel_id_1 <- Data.Binary.get;
                     _pts_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     GHC.Base.pure (UpdateChannelTooLong' _channel_id_1 _pts_2)};
           put to_be_encoded_3 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_3._pts,
                                                              0)];
                                     Data.Binary.put to_be_encoded_3._channel_id;
                                     Data.Binary.put to_be_encoded_3._pts}}
instance Data.Binary.Binary UpdateChannelUserTyping'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _channel_id_1 <- Data.Binary.get;
                     _top_msg_id_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _from_id_3 <- Data.Binary.get;
                     _action_4 <- Data.Binary.get;
                     GHC.Base.pure (UpdateChannelUserTyping' _channel_id_1 _top_msg_id_2 _from_id_3 _action_4)};
           put to_be_encoded_5 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_5._top_msg_id,
                                                              0)];
                                     Data.Binary.put to_be_encoded_5._channel_id;
                                     Data.Binary.put to_be_encoded_5._top_msg_id;
                                     Data.Binary.put to_be_encoded_5._from_id;
                                     Data.Binary.put to_be_encoded_5._action}}
instance Data.Binary.Binary UpdateChannelViewForumAsMessages'
    where {get = do {_channel_id_0 <- Data.Binary.get;
                     _enabled_1 <- Data.Binary.get;
                     GHC.Base.pure (UpdateChannelViewForumAsMessages' _channel_id_0 _enabled_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._channel_id;
                                     Data.Binary.put to_be_encoded_2._enabled}}
instance Data.Binary.Binary UpdateChannelWebPage'
    where {get = do {_channel_id_0 <- Data.Binary.get;
                     _webpage_1 <- Data.Binary.get;
                     _pts_2 <- Data.Binary.get;
                     _pts_count_3 <- Data.Binary.get;
                     GHC.Base.pure (UpdateChannelWebPage' _channel_id_0 _webpage_1 _pts_2 _pts_count_3)};
           put to_be_encoded_4 = do {Data.Binary.put to_be_encoded_4._channel_id;
                                     Data.Binary.put to_be_encoded_4._webpage;
                                     Data.Binary.put to_be_encoded_4._pts;
                                     Data.Binary.put to_be_encoded_4._pts_count}}
instance Data.Binary.Binary UpdateChat'
    where {get = do {_chat_id_0 <- Data.Binary.get;
                     GHC.Base.pure (UpdateChat' _chat_id_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._chat_id}
instance Data.Binary.Binary UpdateChatDefaultBannedRights'
    where {get = do {_peer_0 <- Data.Binary.get;
                     _default_banned_rights_1 <- Data.Binary.get;
                     _version_2 <- Data.Binary.get;
                     GHC.Base.pure (UpdateChatDefaultBannedRights' _peer_0 _default_banned_rights_1 _version_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._peer;
                                     Data.Binary.put to_be_encoded_3._default_banned_rights;
                                     Data.Binary.put to_be_encoded_3._version}}
instance Data.Binary.Binary UpdateChatParticipant'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _chat_id_1 <- Data.Binary.get;
                     _date_2 <- Data.Binary.get;
                     _actor_id_3 <- Data.Binary.get;
                     _user_id_4 <- Data.Binary.get;
                     _prev_participant_5 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _new_participant_6 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _invite_7 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _qts_8 <- Data.Binary.get;
                     GHC.Base.pure (UpdateChatParticipant' _chat_id_1 _date_2 _actor_id_3 _user_id_4 _prev_participant_5 _new_participant_6 _invite_7 _qts_8)};
           put to_be_encoded_9 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_9._invite,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_9._new_participant,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_9._prev_participant,
                                                              0)];
                                     Data.Binary.put to_be_encoded_9._chat_id;
                                     Data.Binary.put to_be_encoded_9._date;
                                     Data.Binary.put to_be_encoded_9._actor_id;
                                     Data.Binary.put to_be_encoded_9._user_id;
                                     Data.Binary.put to_be_encoded_9._prev_participant;
                                     Data.Binary.put to_be_encoded_9._new_participant;
                                     Data.Binary.put to_be_encoded_9._invite;
                                     Data.Binary.put to_be_encoded_9._qts}}
instance Data.Binary.Binary UpdateChatParticipantAdd'
    where {get = do {_chat_id_0 <- Data.Binary.get;
                     _user_id_1 <- Data.Binary.get;
                     _inviter_id_2 <- Data.Binary.get;
                     _date_3 <- Data.Binary.get;
                     _version_4 <- Data.Binary.get;
                     GHC.Base.pure (UpdateChatParticipantAdd' _chat_id_0 _user_id_1 _inviter_id_2 _date_3 _version_4)};
           put to_be_encoded_5 = do {Data.Binary.put to_be_encoded_5._chat_id;
                                     Data.Binary.put to_be_encoded_5._user_id;
                                     Data.Binary.put to_be_encoded_5._inviter_id;
                                     Data.Binary.put to_be_encoded_5._date;
                                     Data.Binary.put to_be_encoded_5._version}}
instance Data.Binary.Binary UpdateChatParticipantAdmin'
    where {get = do {_chat_id_0 <- Data.Binary.get;
                     _user_id_1 <- Data.Binary.get;
                     _is_admin_2 <- Data.Binary.get;
                     _version_3 <- Data.Binary.get;
                     GHC.Base.pure (UpdateChatParticipantAdmin' _chat_id_0 _user_id_1 _is_admin_2 _version_3)};
           put to_be_encoded_4 = do {Data.Binary.put to_be_encoded_4._chat_id;
                                     Data.Binary.put to_be_encoded_4._user_id;
                                     Data.Binary.put to_be_encoded_4._is_admin;
                                     Data.Binary.put to_be_encoded_4._version}}
instance Data.Binary.Binary UpdateChatParticipantDelete'
    where {get = do {_chat_id_0 <- Data.Binary.get;
                     _user_id_1 <- Data.Binary.get;
                     _version_2 <- Data.Binary.get;
                     GHC.Base.pure (UpdateChatParticipantDelete' _chat_id_0 _user_id_1 _version_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._chat_id;
                                     Data.Binary.put to_be_encoded_3._user_id;
                                     Data.Binary.put to_be_encoded_3._version}}
instance Data.Binary.Binary UpdateChatParticipants'
    where {get = do {_participants_0 <- Data.Binary.get;
                     GHC.Base.pure (UpdateChatParticipants' _participants_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._participants}
instance Data.Binary.Binary UpdateChatUserTyping'
    where {get = do {_chat_id_0 <- Data.Binary.get;
                     _from_id_1 <- Data.Binary.get;
                     _action_2 <- Data.Binary.get;
                     GHC.Base.pure (UpdateChatUserTyping' _chat_id_0 _from_id_1 _action_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._chat_id;
                                     Data.Binary.put to_be_encoded_3._from_id;
                                     Data.Binary.put to_be_encoded_3._action}}
instance Data.Binary.Binary UpdateConfig'
    where {get = GHC.Base.pure UpdateConfig';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary UpdateContactsReset'
    where {get = GHC.Base.pure UpdateContactsReset';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary UpdateDcOptions'
    where {get = do {_dc_options_0 <- Data.Binary.get;
                     GHC.Base.pure (UpdateDcOptions' _dc_options_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._dc_options}
instance Data.Binary.Binary UpdateDeleteChannelMessages'
    where {get = do {_channel_id_0 <- Data.Binary.get;
                     _messages_1 <- Data.Binary.get;
                     _pts_2 <- Data.Binary.get;
                     _pts_count_3 <- Data.Binary.get;
                     GHC.Base.pure (UpdateDeleteChannelMessages' _channel_id_0 _messages_1 _pts_2 _pts_count_3)};
           put to_be_encoded_4 = do {Data.Binary.put to_be_encoded_4._channel_id;
                                     Data.Binary.put to_be_encoded_4._messages;
                                     Data.Binary.put to_be_encoded_4._pts;
                                     Data.Binary.put to_be_encoded_4._pts_count}}
instance Data.Binary.Binary UpdateDeleteMessages'
    where {get = do {_messages_0 <- Data.Binary.get;
                     _pts_1 <- Data.Binary.get;
                     _pts_count_2 <- Data.Binary.get;
                     GHC.Base.pure (UpdateDeleteMessages' _messages_0 _pts_1 _pts_count_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._messages;
                                     Data.Binary.put to_be_encoded_3._pts;
                                     Data.Binary.put to_be_encoded_3._pts_count}}
instance Data.Binary.Binary UpdateDeleteScheduledMessages'
    where {get = do {_peer_0 <- Data.Binary.get;
                     _messages_1 <- Data.Binary.get;
                     GHC.Base.pure (UpdateDeleteScheduledMessages' _peer_0 _messages_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._peer;
                                     Data.Binary.put to_be_encoded_2._messages}}
instance Data.Binary.Binary UpdateDialogFilter'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _id_1 <- Data.Binary.get;
                     _filter_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     GHC.Base.pure (UpdateDialogFilter' _id_1 _filter_2)};
           put to_be_encoded_3 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_3._filter,
                                                              0)];
                                     Data.Binary.put to_be_encoded_3._id;
                                     Data.Binary.put to_be_encoded_3._filter}}
instance Data.Binary.Binary UpdateDialogFilterOrder'
    where {get = do {_order_0 <- Data.Binary.get;
                     GHC.Base.pure (UpdateDialogFilterOrder' _order_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._order}
instance Data.Binary.Binary UpdateDialogFilters'
    where {get = GHC.Base.pure UpdateDialogFilters';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary UpdateDialogPinned'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _pinned_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _folder_id_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _peer_3 <- Data.Binary.get;
                     GHC.Base.pure (UpdateDialogPinned' _pinned_1 _folder_id_2 _peer_3)};
           put to_be_encoded_4 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_4._folder_id,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_4._pinned,
                                                              0)];
                                     Data.Binary.put to_be_encoded_4._pinned;
                                     Data.Binary.put to_be_encoded_4._folder_id;
                                     Data.Binary.put to_be_encoded_4._peer}}
instance Data.Binary.Binary UpdateDialogUnreadMark'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _unread_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _peer_2 <- Data.Binary.get;
                     GHC.Base.pure (UpdateDialogUnreadMark' _unread_1 _peer_2)};
           put to_be_encoded_3 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_3._unread,
                                                              0)];
                                     Data.Binary.put to_be_encoded_3._unread;
                                     Data.Binary.put to_be_encoded_3._peer}}
instance Data.Binary.Binary UpdateDraftMessage'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _peer_1 <- Data.Binary.get;
                     _top_msg_id_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _draft_3 <- Data.Binary.get;
                     GHC.Base.pure (UpdateDraftMessage' _peer_1 _top_msg_id_2 _draft_3)};
           put to_be_encoded_4 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_4._top_msg_id,
                                                              0)];
                                     Data.Binary.put to_be_encoded_4._peer;
                                     Data.Binary.put to_be_encoded_4._top_msg_id;
                                     Data.Binary.put to_be_encoded_4._draft}}
instance Data.Binary.Binary UpdateEditChannelMessage'
    where {get = do {_message_0 <- Data.Binary.get;
                     _pts_1 <- Data.Binary.get;
                     _pts_count_2 <- Data.Binary.get;
                     GHC.Base.pure (UpdateEditChannelMessage' _message_0 _pts_1 _pts_count_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._message;
                                     Data.Binary.put to_be_encoded_3._pts;
                                     Data.Binary.put to_be_encoded_3._pts_count}}
instance Data.Binary.Binary UpdateEditMessage'
    where {get = do {_message_0 <- Data.Binary.get;
                     _pts_1 <- Data.Binary.get;
                     _pts_count_2 <- Data.Binary.get;
                     GHC.Base.pure (UpdateEditMessage' _message_0 _pts_1 _pts_count_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._message;
                                     Data.Binary.put to_be_encoded_3._pts;
                                     Data.Binary.put to_be_encoded_3._pts_count}}
instance Data.Binary.Binary UpdateEncryptedChatTyping'
    where {get = do {_chat_id_0 <- Data.Binary.get;
                     GHC.Base.pure (UpdateEncryptedChatTyping' _chat_id_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._chat_id}
instance Data.Binary.Binary UpdateEncryptedMessagesRead'
    where {get = do {_chat_id_0 <- Data.Binary.get;
                     _max_date_1 <- Data.Binary.get;
                     _date_2 <- Data.Binary.get;
                     GHC.Base.pure (UpdateEncryptedMessagesRead' _chat_id_0 _max_date_1 _date_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._chat_id;
                                     Data.Binary.put to_be_encoded_3._max_date;
                                     Data.Binary.put to_be_encoded_3._date}}
instance Data.Binary.Binary UpdateEncryption'
    where {get = do {_chat_0 <- Data.Binary.get;
                     _date_1 <- Data.Binary.get;
                     GHC.Base.pure (UpdateEncryption' _chat_0 _date_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._chat;
                                     Data.Binary.put to_be_encoded_2._date}}
instance Data.Binary.Binary UpdateFavedStickers'
    where {get = GHC.Base.pure UpdateFavedStickers';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary UpdateFolderPeers'
    where {get = do {_folder_peers_0 <- Data.Binary.get;
                     _pts_1 <- Data.Binary.get;
                     _pts_count_2 <- Data.Binary.get;
                     GHC.Base.pure (UpdateFolderPeers' _folder_peers_0 _pts_1 _pts_count_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._folder_peers;
                                     Data.Binary.put to_be_encoded_3._pts;
                                     Data.Binary.put to_be_encoded_3._pts_count}}
instance Data.Binary.Binary UpdateGeoLiveViewed'
    where {get = do {_peer_0 <- Data.Binary.get;
                     _msg_id_1 <- Data.Binary.get;
                     GHC.Base.pure (UpdateGeoLiveViewed' _peer_0 _msg_id_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._peer;
                                     Data.Binary.put to_be_encoded_2._msg_id}}
instance Data.Binary.Binary UpdateGroupCall'
    where {get = do {_chat_id_0 <- Data.Binary.get;
                     _call_1 <- Data.Binary.get;
                     GHC.Base.pure (UpdateGroupCall' _chat_id_0 _call_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._chat_id;
                                     Data.Binary.put to_be_encoded_2._call}}
instance Data.Binary.Binary UpdateGroupCallConnection'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _presentation_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _params_2 <- Data.Binary.get;
                     GHC.Base.pure (UpdateGroupCallConnection' _presentation_1 _params_2)};
           put to_be_encoded_3 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_3._presentation,
                                                              0)];
                                     Data.Binary.put to_be_encoded_3._presentation;
                                     Data.Binary.put to_be_encoded_3._params}}
instance Data.Binary.Binary UpdateGroupCallParticipants'
    where {get = do {_call_0 <- Data.Binary.get;
                     _participants_1 <- Data.Binary.get;
                     _version_2 <- Data.Binary.get;
                     GHC.Base.pure (UpdateGroupCallParticipants' _call_0 _participants_1 _version_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._call;
                                     Data.Binary.put to_be_encoded_3._participants;
                                     Data.Binary.put to_be_encoded_3._version}}
instance Data.Binary.Binary UpdateGroupInvitePrivacyForbidden'
    where {get = do {_user_id_0 <- Data.Binary.get;
                     GHC.Base.pure (UpdateGroupInvitePrivacyForbidden' _user_id_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._user_id}
instance Data.Binary.Binary UpdateInlineBotCallbackQuery'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _query_id_1 <- Data.Binary.get;
                     _user_id_2 <- Data.Binary.get;
                     _msg_id_3 <- Data.Binary.get;
                     _chat_instance_4 <- Data.Binary.get;
                     _data_5 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _game_short_name_6 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     GHC.Base.pure (UpdateInlineBotCallbackQuery' _query_id_1 _user_id_2 _msg_id_3 _chat_instance_4 _data_5 _game_short_name_6)};
           put to_be_encoded_7 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_7._game_short_name,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_7._data,
                                                              0)];
                                     Data.Binary.put to_be_encoded_7._query_id;
                                     Data.Binary.put to_be_encoded_7._user_id;
                                     Data.Binary.put to_be_encoded_7._msg_id;
                                     Data.Binary.put to_be_encoded_7._chat_instance;
                                     Data.Binary.put to_be_encoded_7._data;
                                     Data.Binary.put to_be_encoded_7._game_short_name}}
instance Data.Binary.Binary UpdateLangPack'
    where {get = do {_difference_0 <- Data.Binary.get;
                     GHC.Base.pure (UpdateLangPack' _difference_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._difference}
instance Data.Binary.Binary UpdateLangPackTooLong'
    where {get = do {_lang_code_0 <- Data.Binary.get;
                     GHC.Base.pure (UpdateLangPackTooLong' _lang_code_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._lang_code}
instance Data.Binary.Binary UpdateLoginToken'
    where {get = GHC.Base.pure UpdateLoginToken';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary UpdateMessageExtendedMedia'
    where {get = do {_peer_0 <- Data.Binary.get;
                     _msg_id_1 <- Data.Binary.get;
                     _extended_media_2 <- Data.Binary.get;
                     GHC.Base.pure (UpdateMessageExtendedMedia' _peer_0 _msg_id_1 _extended_media_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._peer;
                                     Data.Binary.put to_be_encoded_3._msg_id;
                                     Data.Binary.put to_be_encoded_3._extended_media}}
instance Data.Binary.Binary UpdateMessageID'
    where {get = do {_id_0 <- Data.Binary.get;
                     _random_id_1 <- Data.Binary.get;
                     GHC.Base.pure (UpdateMessageID' _id_0 _random_id_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._id;
                                     Data.Binary.put to_be_encoded_2._random_id}}
instance Data.Binary.Binary UpdateMessagePoll'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _poll_id_1 <- Data.Binary.get;
                     _poll_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _results_3 <- Data.Binary.get;
                     GHC.Base.pure (UpdateMessagePoll' _poll_id_1 _poll_2 _results_3)};
           put to_be_encoded_4 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_4._poll,
                                                              0)];
                                     Data.Binary.put to_be_encoded_4._poll_id;
                                     Data.Binary.put to_be_encoded_4._poll;
                                     Data.Binary.put to_be_encoded_4._results}}
instance Data.Binary.Binary UpdateMessagePollVote'
    where {get = do {_poll_id_0 <- Data.Binary.get;
                     _peer_1 <- Data.Binary.get;
                     _options_2 <- Data.Binary.get;
                     _qts_3 <- Data.Binary.get;
                     GHC.Base.pure (UpdateMessagePollVote' _poll_id_0 _peer_1 _options_2 _qts_3)};
           put to_be_encoded_4 = do {Data.Binary.put to_be_encoded_4._poll_id;
                                     Data.Binary.put to_be_encoded_4._peer;
                                     Data.Binary.put to_be_encoded_4._options;
                                     Data.Binary.put to_be_encoded_4._qts}}
instance Data.Binary.Binary UpdateMessageReactions'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _peer_1 <- Data.Binary.get;
                     _msg_id_2 <- Data.Binary.get;
                     _top_msg_id_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _reactions_4 <- Data.Binary.get;
                     GHC.Base.pure (UpdateMessageReactions' _peer_1 _msg_id_2 _top_msg_id_3 _reactions_4)};
           put to_be_encoded_5 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_5._top_msg_id,
                                                              0)];
                                     Data.Binary.put to_be_encoded_5._peer;
                                     Data.Binary.put to_be_encoded_5._msg_id;
                                     Data.Binary.put to_be_encoded_5._top_msg_id;
                                     Data.Binary.put to_be_encoded_5._reactions}}
instance Data.Binary.Binary UpdateMoveStickerSetToTop'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _masks_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _emojis_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _stickerset_3 <- Data.Binary.get;
                     GHC.Base.pure (UpdateMoveStickerSetToTop' _masks_1 _emojis_2 _stickerset_3)};
           put to_be_encoded_4 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_4._emojis,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_4._masks,
                                                              0)];
                                     Data.Binary.put to_be_encoded_4._masks;
                                     Data.Binary.put to_be_encoded_4._emojis;
                                     Data.Binary.put to_be_encoded_4._stickerset}}
instance Data.Binary.Binary UpdateNewAuthorization'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _unconfirmed_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _hash_2 <- Data.Binary.get;
                     _date_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _device_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _location_5 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     GHC.Base.pure (UpdateNewAuthorization' _unconfirmed_1 _hash_2 _date_3 _device_4 _location_5)};
           put to_be_encoded_6 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_6._location,
                                                              0),
                                                             (Data.Maybe.isJust to_be_encoded_6._device,
                                                              0),
                                                             (Data.Maybe.isJust to_be_encoded_6._date,
                                                              0),
                                                             (Data.Maybe.isJust to_be_encoded_6._unconfirmed,
                                                              0)];
                                     Data.Binary.put to_be_encoded_6._unconfirmed;
                                     Data.Binary.put to_be_encoded_6._hash;
                                     Data.Binary.put to_be_encoded_6._date;
                                     Data.Binary.put to_be_encoded_6._device;
                                     Data.Binary.put to_be_encoded_6._location}}
instance Data.Binary.Binary UpdateNewChannelMessage'
    where {get = do {_message_0 <- Data.Binary.get;
                     _pts_1 <- Data.Binary.get;
                     _pts_count_2 <- Data.Binary.get;
                     GHC.Base.pure (UpdateNewChannelMessage' _message_0 _pts_1 _pts_count_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._message;
                                     Data.Binary.put to_be_encoded_3._pts;
                                     Data.Binary.put to_be_encoded_3._pts_count}}
instance Data.Binary.Binary UpdateNewEncryptedMessage'
    where {get = do {_message_0 <- Data.Binary.get;
                     _qts_1 <- Data.Binary.get;
                     GHC.Base.pure (UpdateNewEncryptedMessage' _message_0 _qts_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._message;
                                     Data.Binary.put to_be_encoded_2._qts}}
instance Data.Binary.Binary UpdateNewMessage'
    where {get = do {_message_0 <- Data.Binary.get;
                     _pts_1 <- Data.Binary.get;
                     _pts_count_2 <- Data.Binary.get;
                     GHC.Base.pure (UpdateNewMessage' _message_0 _pts_1 _pts_count_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._message;
                                     Data.Binary.put to_be_encoded_3._pts;
                                     Data.Binary.put to_be_encoded_3._pts_count}}
instance Data.Binary.Binary UpdateNewScheduledMessage'
    where {get = do {_message_0 <- Data.Binary.get;
                     GHC.Base.pure (UpdateNewScheduledMessage' _message_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._message}
instance Data.Binary.Binary UpdateNewStickerSet'
    where {get = do {_stickerset_0 <- Data.Binary.get;
                     GHC.Base.pure (UpdateNewStickerSet' _stickerset_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._stickerset}
instance Data.Binary.Binary UpdateNotifySettings'
    where {get = do {_peer_0 <- Data.Binary.get;
                     _notify_settings_1 <- Data.Binary.get;
                     GHC.Base.pure (UpdateNotifySettings' _peer_0 _notify_settings_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._peer;
                                     Data.Binary.put to_be_encoded_2._notify_settings}}
instance Data.Binary.Binary UpdatePeerBlocked'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _blocked_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _blocked_my_stories_from_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _peer_id_3 <- Data.Binary.get;
                     GHC.Base.pure (UpdatePeerBlocked' _blocked_1 _blocked_my_stories_from_2 _peer_id_3)};
           put to_be_encoded_4 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_4._blocked_my_stories_from,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_4._blocked,
                                                              0)];
                                     Data.Binary.put to_be_encoded_4._blocked;
                                     Data.Binary.put to_be_encoded_4._blocked_my_stories_from;
                                     Data.Binary.put to_be_encoded_4._peer_id}}
instance Data.Binary.Binary UpdatePeerHistoryTTL'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _peer_1 <- Data.Binary.get;
                     _ttl_period_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     GHC.Base.pure (UpdatePeerHistoryTTL' _peer_1 _ttl_period_2)};
           put to_be_encoded_3 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_3._ttl_period,
                                                              0)];
                                     Data.Binary.put to_be_encoded_3._peer;
                                     Data.Binary.put to_be_encoded_3._ttl_period}}
instance Data.Binary.Binary UpdatePeerLocated'
    where {get = do {_peers_0 <- Data.Binary.get;
                     GHC.Base.pure (UpdatePeerLocated' _peers_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._peers}
instance Data.Binary.Binary UpdatePeerSettings'
    where {get = do {_peer_0 <- Data.Binary.get;
                     _settings_1 <- Data.Binary.get;
                     GHC.Base.pure (UpdatePeerSettings' _peer_0 _settings_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._peer;
                                     Data.Binary.put to_be_encoded_2._settings}}
instance Data.Binary.Binary UpdatePeerWallpaper'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _wallpaper_overridden_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _peer_2 <- Data.Binary.get;
                     _wallpaper_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     GHC.Base.pure (UpdatePeerWallpaper' _wallpaper_overridden_1 _peer_2 _wallpaper_3)};
           put to_be_encoded_4 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_4._wallpaper,
                                                              0),
                                                             (Data.Maybe.isJust to_be_encoded_4._wallpaper_overridden,
                                                              1)];
                                     Data.Binary.put to_be_encoded_4._wallpaper_overridden;
                                     Data.Binary.put to_be_encoded_4._peer;
                                     Data.Binary.put to_be_encoded_4._wallpaper}}
instance Data.Binary.Binary UpdatePendingJoinRequests'
    where {get = do {_peer_0 <- Data.Binary.get;
                     _requests_pending_1 <- Data.Binary.get;
                     _recent_requesters_2 <- Data.Binary.get;
                     GHC.Base.pure (UpdatePendingJoinRequests' _peer_0 _requests_pending_1 _recent_requesters_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._peer;
                                     Data.Binary.put to_be_encoded_3._requests_pending;
                                     Data.Binary.put to_be_encoded_3._recent_requesters}}
instance Data.Binary.Binary UpdatePhoneCall'
    where {get = do {_phone_call_0 <- Data.Binary.get;
                     GHC.Base.pure (UpdatePhoneCall' _phone_call_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._phone_call}
instance Data.Binary.Binary UpdatePhoneCallSignalingData'
    where {get = do {_phone_call_id_0 <- Data.Binary.get;
                     _data_1 <- Data.Binary.get;
                     GHC.Base.pure (UpdatePhoneCallSignalingData' _phone_call_id_0 _data_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._phone_call_id;
                                     Data.Binary.put to_be_encoded_2._data}}
instance Data.Binary.Binary UpdatePinnedChannelMessages'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _pinned_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _channel_id_2 <- Data.Binary.get;
                     _messages_3 <- Data.Binary.get;
                     _pts_4 <- Data.Binary.get;
                     _pts_count_5 <- Data.Binary.get;
                     GHC.Base.pure (UpdatePinnedChannelMessages' _pinned_1 _channel_id_2 _messages_3 _pts_4 _pts_count_5)};
           put to_be_encoded_6 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_6._pinned,
                                                              0)];
                                     Data.Binary.put to_be_encoded_6._pinned;
                                     Data.Binary.put to_be_encoded_6._channel_id;
                                     Data.Binary.put to_be_encoded_6._messages;
                                     Data.Binary.put to_be_encoded_6._pts;
                                     Data.Binary.put to_be_encoded_6._pts_count}}
instance Data.Binary.Binary UpdatePinnedDialogs'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _folder_id_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _order_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     GHC.Base.pure (UpdatePinnedDialogs' _folder_id_1 _order_2)};
           put to_be_encoded_3 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_3._order,
                                                              0),
                                                             (Data.Maybe.isJust to_be_encoded_3._folder_id,
                                                              1)];
                                     Data.Binary.put to_be_encoded_3._folder_id;
                                     Data.Binary.put to_be_encoded_3._order}}
instance Data.Binary.Binary UpdatePinnedMessages'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _pinned_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _peer_2 <- Data.Binary.get;
                     _messages_3 <- Data.Binary.get;
                     _pts_4 <- Data.Binary.get;
                     _pts_count_5 <- Data.Binary.get;
                     GHC.Base.pure (UpdatePinnedMessages' _pinned_1 _peer_2 _messages_3 _pts_4 _pts_count_5)};
           put to_be_encoded_6 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_6._pinned,
                                                              0)];
                                     Data.Binary.put to_be_encoded_6._pinned;
                                     Data.Binary.put to_be_encoded_6._peer;
                                     Data.Binary.put to_be_encoded_6._messages;
                                     Data.Binary.put to_be_encoded_6._pts;
                                     Data.Binary.put to_be_encoded_6._pts_count}}
instance Data.Binary.Binary UpdatePinnedSavedDialogs'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _order_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     GHC.Base.pure (UpdatePinnedSavedDialogs' _order_1)};
           put to_be_encoded_2 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_2._order,
                                                              0)];
                                     Data.Binary.put to_be_encoded_2._order}}
instance Data.Binary.Binary UpdatePrivacy'
    where {get = do {_key_0 <- Data.Binary.get;
                     _rules_1 <- Data.Binary.get;
                     GHC.Base.pure (UpdatePrivacy' _key_0 _rules_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._key;
                                     Data.Binary.put to_be_encoded_2._rules}}
instance Data.Binary.Binary UpdatePtsChanged'
    where {get = GHC.Base.pure UpdatePtsChanged';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary UpdateReadChannelDiscussionInbox'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _channel_id_1 <- Data.Binary.get;
                     _top_msg_id_2 <- Data.Binary.get;
                     _read_max_id_3 <- Data.Binary.get;
                     _broadcast_id_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _broadcast_post_5 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     GHC.Base.pure (UpdateReadChannelDiscussionInbox' _channel_id_1 _top_msg_id_2 _read_max_id_3 _broadcast_id_4 _broadcast_post_5)};
           put to_be_encoded_6 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_6._broadcast_post,
                                                              0),
                                                             (Data.Maybe.isJust to_be_encoded_6._broadcast_id,
                                                              0)];
                                     Data.Binary.put to_be_encoded_6._channel_id;
                                     Data.Binary.put to_be_encoded_6._top_msg_id;
                                     Data.Binary.put to_be_encoded_6._read_max_id;
                                     Data.Binary.put to_be_encoded_6._broadcast_id;
                                     Data.Binary.put to_be_encoded_6._broadcast_post}}
instance Data.Binary.Binary UpdateReadChannelDiscussionOutbox'
    where {get = do {_channel_id_0 <- Data.Binary.get;
                     _top_msg_id_1 <- Data.Binary.get;
                     _read_max_id_2 <- Data.Binary.get;
                     GHC.Base.pure (UpdateReadChannelDiscussionOutbox' _channel_id_0 _top_msg_id_1 _read_max_id_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._channel_id;
                                     Data.Binary.put to_be_encoded_3._top_msg_id;
                                     Data.Binary.put to_be_encoded_3._read_max_id}}
instance Data.Binary.Binary UpdateReadChannelInbox'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _folder_id_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _channel_id_2 <- Data.Binary.get;
                     _max_id_3 <- Data.Binary.get;
                     _still_unread_count_4 <- Data.Binary.get;
                     _pts_5 <- Data.Binary.get;
                     GHC.Base.pure (UpdateReadChannelInbox' _folder_id_1 _channel_id_2 _max_id_3 _still_unread_count_4 _pts_5)};
           put to_be_encoded_6 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_6._folder_id,
                                                              0)];
                                     Data.Binary.put to_be_encoded_6._folder_id;
                                     Data.Binary.put to_be_encoded_6._channel_id;
                                     Data.Binary.put to_be_encoded_6._max_id;
                                     Data.Binary.put to_be_encoded_6._still_unread_count;
                                     Data.Binary.put to_be_encoded_6._pts}}
instance Data.Binary.Binary UpdateReadChannelOutbox'
    where {get = do {_channel_id_0 <- Data.Binary.get;
                     _max_id_1 <- Data.Binary.get;
                     GHC.Base.pure (UpdateReadChannelOutbox' _channel_id_0 _max_id_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._channel_id;
                                     Data.Binary.put to_be_encoded_2._max_id}}
instance Data.Binary.Binary UpdateReadFeaturedEmojiStickers'
    where {get = GHC.Base.pure UpdateReadFeaturedEmojiStickers';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary UpdateReadFeaturedStickers'
    where {get = GHC.Base.pure UpdateReadFeaturedStickers';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary UpdateReadHistoryInbox'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _folder_id_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _peer_2 <- Data.Binary.get;
                     _max_id_3 <- Data.Binary.get;
                     _still_unread_count_4 <- Data.Binary.get;
                     _pts_5 <- Data.Binary.get;
                     _pts_count_6 <- Data.Binary.get;
                     GHC.Base.pure (UpdateReadHistoryInbox' _folder_id_1 _peer_2 _max_id_3 _still_unread_count_4 _pts_5 _pts_count_6)};
           put to_be_encoded_7 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_7._folder_id,
                                                              0)];
                                     Data.Binary.put to_be_encoded_7._folder_id;
                                     Data.Binary.put to_be_encoded_7._peer;
                                     Data.Binary.put to_be_encoded_7._max_id;
                                     Data.Binary.put to_be_encoded_7._still_unread_count;
                                     Data.Binary.put to_be_encoded_7._pts;
                                     Data.Binary.put to_be_encoded_7._pts_count}}
instance Data.Binary.Binary UpdateReadHistoryOutbox'
    where {get = do {_peer_0 <- Data.Binary.get;
                     _max_id_1 <- Data.Binary.get;
                     _pts_2 <- Data.Binary.get;
                     _pts_count_3 <- Data.Binary.get;
                     GHC.Base.pure (UpdateReadHistoryOutbox' _peer_0 _max_id_1 _pts_2 _pts_count_3)};
           put to_be_encoded_4 = do {Data.Binary.put to_be_encoded_4._peer;
                                     Data.Binary.put to_be_encoded_4._max_id;
                                     Data.Binary.put to_be_encoded_4._pts;
                                     Data.Binary.put to_be_encoded_4._pts_count}}
instance Data.Binary.Binary UpdateReadMessagesContents'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _messages_1 <- Data.Binary.get;
                     _pts_2 <- Data.Binary.get;
                     _pts_count_3 <- Data.Binary.get;
                     _date_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     GHC.Base.pure (UpdateReadMessagesContents' _messages_1 _pts_2 _pts_count_3 _date_4)};
           put to_be_encoded_5 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_5._date,
                                                              0)];
                                     Data.Binary.put to_be_encoded_5._messages;
                                     Data.Binary.put to_be_encoded_5._pts;
                                     Data.Binary.put to_be_encoded_5._pts_count;
                                     Data.Binary.put to_be_encoded_5._date}}
instance Data.Binary.Binary UpdateReadStories'
    where {get = do {_peer_0 <- Data.Binary.get;
                     _max_id_1 <- Data.Binary.get;
                     GHC.Base.pure (UpdateReadStories' _peer_0 _max_id_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._peer;
                                     Data.Binary.put to_be_encoded_2._max_id}}
instance Data.Binary.Binary UpdateRecentEmojiStatuses'
    where {get = GHC.Base.pure UpdateRecentEmojiStatuses';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary UpdateRecentReactions'
    where {get = GHC.Base.pure UpdateRecentReactions';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary UpdateRecentStickers'
    where {get = GHC.Base.pure UpdateRecentStickers';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary UpdateSavedDialogPinned'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _pinned_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _peer_2 <- Data.Binary.get;
                     GHC.Base.pure (UpdateSavedDialogPinned' _pinned_1 _peer_2)};
           put to_be_encoded_3 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_3._pinned,
                                                              0)];
                                     Data.Binary.put to_be_encoded_3._pinned;
                                     Data.Binary.put to_be_encoded_3._peer}}
instance Data.Binary.Binary UpdateSavedGifs'
    where {get = GHC.Base.pure UpdateSavedGifs';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary UpdateSavedRingtones'
    where {get = GHC.Base.pure UpdateSavedRingtones';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary UpdateSentStoryReaction'
    where {get = do {_peer_0 <- Data.Binary.get;
                     _story_id_1 <- Data.Binary.get;
                     _reaction_2 <- Data.Binary.get;
                     GHC.Base.pure (UpdateSentStoryReaction' _peer_0 _story_id_1 _reaction_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._peer;
                                     Data.Binary.put to_be_encoded_3._story_id;
                                     Data.Binary.put to_be_encoded_3._reaction}}
instance Data.Binary.Binary UpdateServiceNotification'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _popup_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _invert_media_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _inbox_date_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _type_4 <- Data.Binary.get;
                     _message_5 <- Data.Binary.get;
                     _media_6 <- Data.Binary.get;
                     _entities_7 <- Data.Binary.get;
                     GHC.Base.pure (UpdateServiceNotification' _popup_1 _invert_media_2 _inbox_date_3 _type_4 _message_5 _media_6 _entities_7)};
           put to_be_encoded_8 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_8._inbox_date,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_8._invert_media,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_8._popup,
                                                              0)];
                                     Data.Binary.put to_be_encoded_8._popup;
                                     Data.Binary.put to_be_encoded_8._invert_media;
                                     Data.Binary.put to_be_encoded_8._inbox_date;
                                     Data.Binary.put to_be_encoded_8._type;
                                     Data.Binary.put to_be_encoded_8._message;
                                     Data.Binary.put to_be_encoded_8._media;
                                     Data.Binary.put to_be_encoded_8._entities}}
instance Data.Binary.Binary UpdateStickerSets'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _masks_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _emojis_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     GHC.Base.pure (UpdateStickerSets' _masks_1 _emojis_2)};
           put to_be_encoded_3 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_3._emojis,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_3._masks,
                                                              0)];
                                     Data.Binary.put to_be_encoded_3._masks;
                                     Data.Binary.put to_be_encoded_3._emojis}}
instance Data.Binary.Binary UpdateStickerSetsOrder'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _masks_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _emojis_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _order_3 <- Data.Binary.get;
                     GHC.Base.pure (UpdateStickerSetsOrder' _masks_1 _emojis_2 _order_3)};
           put to_be_encoded_4 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_4._emojis,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_4._masks,
                                                              0)];
                                     Data.Binary.put to_be_encoded_4._masks;
                                     Data.Binary.put to_be_encoded_4._emojis;
                                     Data.Binary.put to_be_encoded_4._order}}
instance Data.Binary.Binary UpdateStoriesStealthMode'
    where {get = do {_stealth_mode_0 <- Data.Binary.get;
                     GHC.Base.pure (UpdateStoriesStealthMode' _stealth_mode_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._stealth_mode}
instance Data.Binary.Binary UpdateStory'
    where {get = do {_peer_0 <- Data.Binary.get;
                     _story_1 <- Data.Binary.get;
                     GHC.Base.pure (UpdateStory' _peer_0 _story_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._peer;
                                     Data.Binary.put to_be_encoded_2._story}}
instance Data.Binary.Binary UpdateStoryID'
    where {get = do {_id_0 <- Data.Binary.get;
                     _random_id_1 <- Data.Binary.get;
                     GHC.Base.pure (UpdateStoryID' _id_0 _random_id_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._id;
                                     Data.Binary.put to_be_encoded_2._random_id}}
instance Data.Binary.Binary UpdateTheme'
    where {get = do {_theme_0 <- Data.Binary.get;
                     GHC.Base.pure (UpdateTheme' _theme_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._theme}
instance Data.Binary.Binary UpdateTranscribedAudio'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _pending_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _peer_2 <- Data.Binary.get;
                     _msg_id_3 <- Data.Binary.get;
                     _transcription_id_4 <- Data.Binary.get;
                     _text_5 <- Data.Binary.get;
                     GHC.Base.pure (UpdateTranscribedAudio' _pending_1 _peer_2 _msg_id_3 _transcription_id_4 _text_5)};
           put to_be_encoded_6 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_6._pending,
                                                              0)];
                                     Data.Binary.put to_be_encoded_6._pending;
                                     Data.Binary.put to_be_encoded_6._peer;
                                     Data.Binary.put to_be_encoded_6._msg_id;
                                     Data.Binary.put to_be_encoded_6._transcription_id;
                                     Data.Binary.put to_be_encoded_6._text}}
instance Data.Binary.Binary UpdateUser'
    where {get = do {_user_id_0 <- Data.Binary.get;
                     GHC.Base.pure (UpdateUser' _user_id_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._user_id}
instance Data.Binary.Binary UpdateUserEmojiStatus'
    where {get = do {_user_id_0 <- Data.Binary.get;
                     _emoji_status_1 <- Data.Binary.get;
                     GHC.Base.pure (UpdateUserEmojiStatus' _user_id_0 _emoji_status_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._user_id;
                                     Data.Binary.put to_be_encoded_2._emoji_status}}
instance Data.Binary.Binary UpdateUserName'
    where {get = do {_user_id_0 <- Data.Binary.get;
                     _first_name_1 <- Data.Binary.get;
                     _last_name_2 <- Data.Binary.get;
                     _usernames_3 <- Data.Binary.get;
                     GHC.Base.pure (UpdateUserName' _user_id_0 _first_name_1 _last_name_2 _usernames_3)};
           put to_be_encoded_4 = do {Data.Binary.put to_be_encoded_4._user_id;
                                     Data.Binary.put to_be_encoded_4._first_name;
                                     Data.Binary.put to_be_encoded_4._last_name;
                                     Data.Binary.put to_be_encoded_4._usernames}}
instance Data.Binary.Binary UpdateUserPhone'
    where {get = do {_user_id_0 <- Data.Binary.get;
                     _phone_1 <- Data.Binary.get;
                     GHC.Base.pure (UpdateUserPhone' _user_id_0 _phone_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._user_id;
                                     Data.Binary.put to_be_encoded_2._phone}}
instance Data.Binary.Binary UpdateUserStatus'
    where {get = do {_user_id_0 <- Data.Binary.get;
                     _status_1 <- Data.Binary.get;
                     GHC.Base.pure (UpdateUserStatus' _user_id_0 _status_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._user_id;
                                     Data.Binary.put to_be_encoded_2._status}}
instance Data.Binary.Binary UpdateUserTyping'
    where {get = do {_user_id_0 <- Data.Binary.get;
                     _action_1 <- Data.Binary.get;
                     GHC.Base.pure (UpdateUserTyping' _user_id_0 _action_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._user_id;
                                     Data.Binary.put to_be_encoded_2._action}}
instance Data.Binary.Binary UpdateWebPage'
    where {get = do {_webpage_0 <- Data.Binary.get;
                     _pts_1 <- Data.Binary.get;
                     _pts_count_2 <- Data.Binary.get;
                     GHC.Base.pure (UpdateWebPage' _webpage_0 _pts_1 _pts_count_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._webpage;
                                     Data.Binary.put to_be_encoded_3._pts;
                                     Data.Binary.put to_be_encoded_3._pts_count}}
instance Data.Binary.Binary UpdateWebViewResultSent'
    where {get = do {_query_id_0 <- Data.Binary.get;
                     GHC.Base.pure (UpdateWebViewResultSent' _query_id_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._query_id}
data Update
    = UpdateAttachMenuBots !UpdateAttachMenuBots'
    | UpdateAutoSaveSettings !UpdateAutoSaveSettings'
    | UpdateBotCallbackQuery !UpdateBotCallbackQuery'
    | UpdateBotChatBoost !UpdateBotChatBoost'
    | UpdateBotChatInviteRequester !UpdateBotChatInviteRequester'
    | UpdateBotCommands !UpdateBotCommands'
    | UpdateBotInlineQuery !UpdateBotInlineQuery'
    | UpdateBotInlineSend !UpdateBotInlineSend'
    | UpdateBotMenuButton !UpdateBotMenuButton'
    | UpdateBotMessageReaction !UpdateBotMessageReaction'
    | UpdateBotMessageReactions !UpdateBotMessageReactions'
    | UpdateBotPrecheckoutQuery !UpdateBotPrecheckoutQuery'
    | UpdateBotShippingQuery !UpdateBotShippingQuery'
    | UpdateBotStopped !UpdateBotStopped'
    | UpdateBotWebhookJSON !UpdateBotWebhookJSON'
    | UpdateBotWebhookJSONQuery !UpdateBotWebhookJSONQuery'
    | UpdateChannel !UpdateChannel'
    | UpdateChannelAvailableMessages !UpdateChannelAvailableMessages'
    | UpdateChannelMessageForwards !UpdateChannelMessageForwards'
    | UpdateChannelMessageViews !UpdateChannelMessageViews'
    | UpdateChannelParticipant !UpdateChannelParticipant'
    | UpdateChannelPinnedTopic !UpdateChannelPinnedTopic'
    | UpdateChannelPinnedTopics !UpdateChannelPinnedTopics'
    | UpdateChannelReadMessagesContents !UpdateChannelReadMessagesContents'
    | UpdateChannelTooLong !UpdateChannelTooLong'
    | UpdateChannelUserTyping !UpdateChannelUserTyping'
    | UpdateChannelViewForumAsMessages !UpdateChannelViewForumAsMessages'
    | UpdateChannelWebPage !UpdateChannelWebPage'
    | UpdateChat !UpdateChat'
    | UpdateChatDefaultBannedRights !UpdateChatDefaultBannedRights'
    | UpdateChatParticipant !UpdateChatParticipant'
    | UpdateChatParticipantAdd !UpdateChatParticipantAdd'
    | UpdateChatParticipantAdmin !UpdateChatParticipantAdmin'
    | UpdateChatParticipantDelete !UpdateChatParticipantDelete'
    | UpdateChatParticipants !UpdateChatParticipants'
    | UpdateChatUserTyping !UpdateChatUserTyping'
    | UpdateConfig !UpdateConfig'
    | UpdateContactsReset !UpdateContactsReset'
    | UpdateDcOptions !UpdateDcOptions'
    | UpdateDeleteChannelMessages !UpdateDeleteChannelMessages'
    | UpdateDeleteMessages !UpdateDeleteMessages'
    | UpdateDeleteScheduledMessages !UpdateDeleteScheduledMessages'
    | UpdateDialogFilter !UpdateDialogFilter'
    | UpdateDialogFilterOrder !UpdateDialogFilterOrder'
    | UpdateDialogFilters !UpdateDialogFilters'
    | UpdateDialogPinned !UpdateDialogPinned'
    | UpdateDialogUnreadMark !UpdateDialogUnreadMark'
    | UpdateDraftMessage !UpdateDraftMessage'
    | UpdateEditChannelMessage !UpdateEditChannelMessage'
    | UpdateEditMessage !UpdateEditMessage'
    | UpdateEncryptedChatTyping !UpdateEncryptedChatTyping'
    | UpdateEncryptedMessagesRead !UpdateEncryptedMessagesRead'
    | UpdateEncryption !UpdateEncryption'
    | UpdateFavedStickers !UpdateFavedStickers'
    | UpdateFolderPeers !UpdateFolderPeers'
    | UpdateGeoLiveViewed !UpdateGeoLiveViewed'
    | UpdateGroupCall !UpdateGroupCall'
    | UpdateGroupCallConnection !UpdateGroupCallConnection'
    | UpdateGroupCallParticipants !UpdateGroupCallParticipants'
    | UpdateGroupInvitePrivacyForbidden !UpdateGroupInvitePrivacyForbidden'
    | UpdateInlineBotCallbackQuery !UpdateInlineBotCallbackQuery'
    | UpdateLangPack !UpdateLangPack'
    | UpdateLangPackTooLong !UpdateLangPackTooLong'
    | UpdateLoginToken !UpdateLoginToken'
    | UpdateMessageExtendedMedia !UpdateMessageExtendedMedia'
    | UpdateMessageID !UpdateMessageID'
    | UpdateMessagePoll !UpdateMessagePoll'
    | UpdateMessagePollVote !UpdateMessagePollVote'
    | UpdateMessageReactions !UpdateMessageReactions'
    | UpdateMoveStickerSetToTop !UpdateMoveStickerSetToTop'
    | UpdateNewAuthorization !UpdateNewAuthorization'
    | UpdateNewChannelMessage !UpdateNewChannelMessage'
    | UpdateNewEncryptedMessage !UpdateNewEncryptedMessage'
    | UpdateNewMessage !UpdateNewMessage'
    | UpdateNewScheduledMessage !UpdateNewScheduledMessage'
    | UpdateNewStickerSet !UpdateNewStickerSet'
    | UpdateNotifySettings !UpdateNotifySettings'
    | UpdatePeerBlocked !UpdatePeerBlocked'
    | UpdatePeerHistoryTTL !UpdatePeerHistoryTTL'
    | UpdatePeerLocated !UpdatePeerLocated'
    | UpdatePeerSettings !UpdatePeerSettings'
    | UpdatePeerWallpaper !UpdatePeerWallpaper'
    | UpdatePendingJoinRequests !UpdatePendingJoinRequests'
    | UpdatePhoneCall !UpdatePhoneCall'
    | UpdatePhoneCallSignalingData !UpdatePhoneCallSignalingData'
    | UpdatePinnedChannelMessages !UpdatePinnedChannelMessages'
    | UpdatePinnedDialogs !UpdatePinnedDialogs'
    | UpdatePinnedMessages !UpdatePinnedMessages'
    | UpdatePinnedSavedDialogs !UpdatePinnedSavedDialogs'
    | UpdatePrivacy !UpdatePrivacy'
    | UpdatePtsChanged !UpdatePtsChanged'
    | UpdateReadChannelDiscussionInbox !UpdateReadChannelDiscussionInbox'
    | UpdateReadChannelDiscussionOutbox !UpdateReadChannelDiscussionOutbox'
    | UpdateReadChannelInbox !UpdateReadChannelInbox'
    | UpdateReadChannelOutbox !UpdateReadChannelOutbox'
    | UpdateReadFeaturedEmojiStickers !UpdateReadFeaturedEmojiStickers'
    | UpdateReadFeaturedStickers !UpdateReadFeaturedStickers'
    | UpdateReadHistoryInbox !UpdateReadHistoryInbox'
    | UpdateReadHistoryOutbox !UpdateReadHistoryOutbox'
    | UpdateReadMessagesContents !UpdateReadMessagesContents'
    | UpdateReadStories !UpdateReadStories'
    | UpdateRecentEmojiStatuses !UpdateRecentEmojiStatuses'
    | UpdateRecentReactions !UpdateRecentReactions'
    | UpdateRecentStickers !UpdateRecentStickers'
    | UpdateSavedDialogPinned !UpdateSavedDialogPinned'
    | UpdateSavedGifs !UpdateSavedGifs'
    | UpdateSavedRingtones !UpdateSavedRingtones'
    | UpdateSentStoryReaction !UpdateSentStoryReaction'
    | UpdateServiceNotification !UpdateServiceNotification'
    | UpdateStickerSets !UpdateStickerSets'
    | UpdateStickerSetsOrder !UpdateStickerSetsOrder'
    | UpdateStoriesStealthMode !UpdateStoriesStealthMode'
    | UpdateStory !UpdateStory'
    | UpdateStoryID !UpdateStoryID'
    | UpdateTheme !UpdateTheme'
    | UpdateTranscribedAudio !UpdateTranscribedAudio'
    | UpdateUser !UpdateUser'
    | UpdateUserEmojiStatus !UpdateUserEmojiStatus'
    | UpdateUserName !UpdateUserName'
    | UpdateUserPhone !UpdateUserPhone'
    | UpdateUserStatus !UpdateUserStatus'
    | UpdateUserTyping !UpdateUserTyping'
    | UpdateWebPage !UpdateWebPage'
    | UpdateWebViewResultSent !UpdateWebViewResultSent'
data UpdateAttachMenuBots' = UpdateAttachMenuBots' {}
data UpdateAutoSaveSettings' = UpdateAutoSaveSettings' {}
data UpdateBotCallbackQuery'
    = UpdateBotCallbackQuery' {_query_id :: !Long',
                               _user_id :: !Long',
                               _peer :: !Peer,
                               _msg_id :: !Int',
                               _chat_instance :: !Long',
                               _data :: !(Maybe Bytes'),
                               _game_short_name :: !(Maybe String')}
data UpdateBotChatBoost'
    = UpdateBotChatBoost' {_peer :: !Peer,
                           _boost :: !Boost,
                           _qts :: !Int'}
data UpdateBotChatInviteRequester'
    = UpdateBotChatInviteRequester' {_peer :: !Peer,
                                     _date :: !Int',
                                     _user_id :: !Long',
                                     _about :: !String',
                                     _invite :: !ExportedChatInvite,
                                     _qts :: !Int'}
data UpdateBotCommands'
    = UpdateBotCommands' {_peer :: !Peer,
                          _bot_id :: !Long',
                          _commands :: !(Vector BotCommand)}
data UpdateBotInlineQuery'
    = UpdateBotInlineQuery' {_query_id :: !Long',
                             _user_id :: !Long',
                             _query :: !String',
                             _geo :: !(Maybe GeoPoint),
                             _peer_type :: !(Maybe InlineQueryPeerType),
                             _offset :: !String'}
data UpdateBotInlineSend'
    = UpdateBotInlineSend' {_user_id :: !Long',
                            _query :: !String',
                            _geo :: !(Maybe GeoPoint),
                            _id :: !String',
                            _msg_id :: !(Maybe InputBotInlineMessageID)}
data UpdateBotMenuButton'
    = UpdateBotMenuButton' {_bot_id :: !Long',
                            _button :: !BotMenuButton}
data UpdateBotMessageReaction'
    = UpdateBotMessageReaction' {_peer :: !Peer,
                                 _msg_id :: !Int',
                                 _date :: !Int',
                                 _actor :: !Peer,
                                 _old_reactions :: !(Vector Reaction),
                                 _new_reactions :: !(Vector Reaction),
                                 _qts :: !Int'}
data UpdateBotMessageReactions'
    = UpdateBotMessageReactions' {_peer :: !Peer,
                                  _msg_id :: !Int',
                                  _date :: !Int',
                                  _reactions :: !(Vector ReactionCount),
                                  _qts :: !Int'}
data UpdateBotPrecheckoutQuery'
    = UpdateBotPrecheckoutQuery' {_query_id :: !Long',
                                  _user_id :: !Long',
                                  _payload :: !Bytes',
                                  _info :: !(Maybe PaymentRequestedInfo),
                                  _shipping_option_id :: !(Maybe String'),
                                  _currency :: !String',
                                  _total_amount :: !Long'}
data UpdateBotShippingQuery'
    = UpdateBotShippingQuery' {_query_id :: !Long',
                               _user_id :: !Long',
                               _payload :: !Bytes',
                               _shipping_address :: !PostAddress}
data UpdateBotStopped'
    = UpdateBotStopped' {_user_id :: !Long',
                         _date :: !Int',
                         _stopped :: !Bool,
                         _qts :: !Int'}
data UpdateBotWebhookJSON'
    = UpdateBotWebhookJSON' {_data :: !DataJSON}
data UpdateBotWebhookJSONQuery'
    = UpdateBotWebhookJSONQuery' {_query_id :: !Long',
                                  _data :: !DataJSON,
                                  _timeout :: !Int'}
data UpdateChannel' = UpdateChannel' {_channel_id :: !Long'}
data UpdateChannelAvailableMessages'
    = UpdateChannelAvailableMessages' {_channel_id :: !Long',
                                       _available_min_id :: !Int'}
data UpdateChannelMessageForwards'
    = UpdateChannelMessageForwards' {_channel_id :: !Long',
                                     _id :: !Int',
                                     _forwards :: !Int'}
data UpdateChannelMessageViews'
    = UpdateChannelMessageViews' {_channel_id :: !Long',
                                  _id :: !Int',
                                  _views :: !Int'}
data UpdateChannelParticipant'
    = UpdateChannelParticipant' {_via_chatlist :: !(Maybe True'),
                                 _channel_id :: !Long',
                                 _date :: !Int',
                                 _actor_id :: !Long',
                                 _user_id :: !Long',
                                 _prev_participant :: !(Maybe ChannelParticipant),
                                 _new_participant :: !(Maybe ChannelParticipant),
                                 _invite :: !(Maybe ExportedChatInvite),
                                 _qts :: !Int'}
data UpdateChannelPinnedTopic'
    = UpdateChannelPinnedTopic' {_pinned :: !(Maybe True'),
                                 _channel_id :: !Long',
                                 _topic_id :: !Int'}
data UpdateChannelPinnedTopics'
    = UpdateChannelPinnedTopics' {_channel_id :: !Long',
                                  _order :: !(Maybe (Vector Int'))}
data UpdateChannelReadMessagesContents'
    = UpdateChannelReadMessagesContents' {_channel_id :: !Long',
                                          _top_msg_id :: !(Maybe Int'),
                                          _messages :: !(Vector Int')}
data UpdateChannelTooLong'
    = UpdateChannelTooLong' {_channel_id :: !Long',
                             _pts :: !(Maybe Int')}
data UpdateChannelUserTyping'
    = UpdateChannelUserTyping' {_channel_id :: !Long',
                                _top_msg_id :: !(Maybe Int'),
                                _from_id :: !Peer,
                                _action :: !SendMessageAction}
data UpdateChannelViewForumAsMessages'
    = UpdateChannelViewForumAsMessages' {_channel_id :: !Long',
                                         _enabled :: !Bool}
data UpdateChannelWebPage'
    = UpdateChannelWebPage' {_channel_id :: !Long',
                             _webpage :: !WebPage,
                             _pts :: !Int',
                             _pts_count :: !Int'}
data UpdateChat' = UpdateChat' {_chat_id :: !Long'}
data UpdateChatDefaultBannedRights'
    = UpdateChatDefaultBannedRights' {_peer :: !Peer,
                                      _default_banned_rights :: !ChatBannedRights,
                                      _version :: !Int'}
data UpdateChatParticipant'
    = UpdateChatParticipant' {_chat_id :: !Long',
                              _date :: !Int',
                              _actor_id :: !Long',
                              _user_id :: !Long',
                              _prev_participant :: !(Maybe ChatParticipant),
                              _new_participant :: !(Maybe ChatParticipant),
                              _invite :: !(Maybe ExportedChatInvite),
                              _qts :: !Int'}
data UpdateChatParticipantAdd'
    = UpdateChatParticipantAdd' {_chat_id :: !Long',
                                 _user_id :: !Long',
                                 _inviter_id :: !Long',
                                 _date :: !Int',
                                 _version :: !Int'}
data UpdateChatParticipantAdmin'
    = UpdateChatParticipantAdmin' {_chat_id :: !Long',
                                   _user_id :: !Long',
                                   _is_admin :: !Bool,
                                   _version :: !Int'}
data UpdateChatParticipantDelete'
    = UpdateChatParticipantDelete' {_chat_id :: !Long',
                                    _user_id :: !Long',
                                    _version :: !Int'}
data UpdateChatParticipants'
    = UpdateChatParticipants' {_participants :: !ChatParticipants}
data UpdateChatUserTyping'
    = UpdateChatUserTyping' {_chat_id :: !Long',
                             _from_id :: !Peer,
                             _action :: !SendMessageAction}
data UpdateConfig' = UpdateConfig' {}
data UpdateContactsReset' = UpdateContactsReset' {}
data UpdateDcOptions'
    = UpdateDcOptions' {_dc_options :: !(Vector DcOption)}
data UpdateDeleteChannelMessages'
    = UpdateDeleteChannelMessages' {_channel_id :: !Long',
                                    _messages :: !(Vector Int'),
                                    _pts :: !Int',
                                    _pts_count :: !Int'}
data UpdateDeleteMessages'
    = UpdateDeleteMessages' {_messages :: !(Vector Int'),
                             _pts :: !Int',
                             _pts_count :: !Int'}
data UpdateDeleteScheduledMessages'
    = UpdateDeleteScheduledMessages' {_peer :: !Peer,
                                      _messages :: !(Vector Int')}
data UpdateDialogFilter'
    = UpdateDialogFilter' {_id :: !Int',
                           _filter :: !(Maybe DialogFilter)}
data UpdateDialogFilterOrder'
    = UpdateDialogFilterOrder' {_order :: !(Vector Int')}
data UpdateDialogFilters' = UpdateDialogFilters' {}
data UpdateDialogPinned'
    = UpdateDialogPinned' {_pinned :: !(Maybe True'),
                           _folder_id :: !(Maybe Int'),
                           _peer :: !DialogPeer}
data UpdateDialogUnreadMark'
    = UpdateDialogUnreadMark' {_unread :: !(Maybe True'),
                               _peer :: !DialogPeer}
data UpdateDraftMessage'
    = UpdateDraftMessage' {_peer :: !Peer,
                           _top_msg_id :: !(Maybe Int'),
                           _draft :: !DraftMessage}
data UpdateEditChannelMessage'
    = UpdateEditChannelMessage' {_message :: !Message,
                                 _pts :: !Int',
                                 _pts_count :: !Int'}
data UpdateEditMessage'
    = UpdateEditMessage' {_message :: !Message,
                          _pts :: !Int',
                          _pts_count :: !Int'}
data UpdateEncryptedChatTyping'
    = UpdateEncryptedChatTyping' {_chat_id :: !Int'}
data UpdateEncryptedMessagesRead'
    = UpdateEncryptedMessagesRead' {_chat_id :: !Int',
                                    _max_date :: !Int',
                                    _date :: !Int'}
data UpdateEncryption'
    = UpdateEncryption' {_chat :: !EncryptedChat, _date :: !Int'}
data UpdateFavedStickers' = UpdateFavedStickers' {}
data UpdateFolderPeers'
    = UpdateFolderPeers' {_folder_peers :: !(Vector FolderPeer),
                          _pts :: !Int',
                          _pts_count :: !Int'}
data UpdateGeoLiveViewed'
    = UpdateGeoLiveViewed' {_peer :: !Peer, _msg_id :: !Int'}
data UpdateGroupCall'
    = UpdateGroupCall' {_chat_id :: !Long', _call :: !GroupCall}
data UpdateGroupCallConnection'
    = UpdateGroupCallConnection' {_presentation :: !(Maybe True'),
                                  _params :: !DataJSON}
data UpdateGroupCallParticipants'
    = UpdateGroupCallParticipants' {_call :: !InputGroupCall,
                                    _participants :: !(Vector GroupCallParticipant),
                                    _version :: !Int'}
data UpdateGroupInvitePrivacyForbidden'
    = UpdateGroupInvitePrivacyForbidden' {_user_id :: !Long'}
data UpdateInlineBotCallbackQuery'
    = UpdateInlineBotCallbackQuery' {_query_id :: !Long',
                                     _user_id :: !Long',
                                     _msg_id :: !InputBotInlineMessageID,
                                     _chat_instance :: !Long',
                                     _data :: !(Maybe Bytes'),
                                     _game_short_name :: !(Maybe String')}
data UpdateLangPack'
    = UpdateLangPack' {_difference :: !LangPackDifference}
data UpdateLangPackTooLong'
    = UpdateLangPackTooLong' {_lang_code :: !String'}
data UpdateLoginToken' = UpdateLoginToken' {}
data UpdateMessageExtendedMedia'
    = UpdateMessageExtendedMedia' {_peer :: !Peer,
                                   _msg_id :: !Int',
                                   _extended_media :: !MessageExtendedMedia}
data UpdateMessageID'
    = UpdateMessageID' {_id :: !Int', _random_id :: !Long'}
data UpdateMessagePoll'
    = UpdateMessagePoll' {_poll_id :: !Long',
                          _poll :: !(Maybe Poll),
                          _results :: !PollResults}
data UpdateMessagePollVote'
    = UpdateMessagePollVote' {_poll_id :: !Long',
                              _peer :: !Peer,
                              _options :: !(Vector Bytes'),
                              _qts :: !Int'}
data UpdateMessageReactions'
    = UpdateMessageReactions' {_peer :: !Peer,
                               _msg_id :: !Int',
                               _top_msg_id :: !(Maybe Int'),
                               _reactions :: !MessageReactions}
data UpdateMoveStickerSetToTop'
    = UpdateMoveStickerSetToTop' {_masks :: !(Maybe True'),
                                  _emojis :: !(Maybe True'),
                                  _stickerset :: !Long'}
data UpdateNewAuthorization'
    = UpdateNewAuthorization' {_unconfirmed :: !(Maybe True'),
                               _hash :: !Long',
                               _date :: !(Maybe Int'),
                               _device :: !(Maybe String'),
                               _location :: !(Maybe String')}
data UpdateNewChannelMessage'
    = UpdateNewChannelMessage' {_message :: !Message,
                                _pts :: !Int',
                                _pts_count :: !Int'}
data UpdateNewEncryptedMessage'
    = UpdateNewEncryptedMessage' {_message :: !EncryptedMessage,
                                  _qts :: !Int'}
data UpdateNewMessage'
    = UpdateNewMessage' {_message :: !Message,
                         _pts :: !Int',
                         _pts_count :: !Int'}
data UpdateNewScheduledMessage'
    = UpdateNewScheduledMessage' {_message :: !Message}
data UpdateNewStickerSet'
    = UpdateNewStickerSet' {_stickerset :: !Messages'StickerSet}
data UpdateNotifySettings'
    = UpdateNotifySettings' {_peer :: !NotifyPeer,
                             _notify_settings :: !PeerNotifySettings}
data UpdatePeerBlocked'
    = UpdatePeerBlocked' {_blocked :: !(Maybe True'),
                          _blocked_my_stories_from :: !(Maybe True'),
                          _peer_id :: !Peer}
data UpdatePeerHistoryTTL'
    = UpdatePeerHistoryTTL' {_peer :: !Peer,
                             _ttl_period :: !(Maybe Int')}
data UpdatePeerLocated'
    = UpdatePeerLocated' {_peers :: !(Vector PeerLocated)}
data UpdatePeerSettings'
    = UpdatePeerSettings' {_peer :: !Peer, _settings :: !PeerSettings}
data UpdatePeerWallpaper'
    = UpdatePeerWallpaper' {_wallpaper_overridden :: !(Maybe True'),
                            _peer :: !Peer,
                            _wallpaper :: !(Maybe WallPaper)}
data UpdatePendingJoinRequests'
    = UpdatePendingJoinRequests' {_peer :: !Peer,
                                  _requests_pending :: !Int',
                                  _recent_requesters :: !(Vector Long')}
data UpdatePhoneCall'
    = UpdatePhoneCall' {_phone_call :: !PhoneCall}
data UpdatePhoneCallSignalingData'
    = UpdatePhoneCallSignalingData' {_phone_call_id :: !Long',
                                     _data :: !Bytes'}
data UpdatePinnedChannelMessages'
    = UpdatePinnedChannelMessages' {_pinned :: !(Maybe True'),
                                    _channel_id :: !Long',
                                    _messages :: !(Vector Int'),
                                    _pts :: !Int',
                                    _pts_count :: !Int'}
data UpdatePinnedDialogs'
    = UpdatePinnedDialogs' {_folder_id :: !(Maybe Int'),
                            _order :: !(Maybe (Vector DialogPeer))}
data UpdatePinnedMessages'
    = UpdatePinnedMessages' {_pinned :: !(Maybe True'),
                             _peer :: !Peer,
                             _messages :: !(Vector Int'),
                             _pts :: !Int',
                             _pts_count :: !Int'}
data UpdatePinnedSavedDialogs'
    = UpdatePinnedSavedDialogs' {_order :: !(Maybe (Vector DialogPeer))}
data UpdatePrivacy'
    = UpdatePrivacy' {_key :: !PrivacyKey,
                      _rules :: !(Vector PrivacyRule)}
data UpdatePtsChanged' = UpdatePtsChanged' {}
data UpdateReadChannelDiscussionInbox'
    = UpdateReadChannelDiscussionInbox' {_channel_id :: !Long',
                                         _top_msg_id :: !Int',
                                         _read_max_id :: !Int',
                                         _broadcast_id :: !(Maybe Long'),
                                         _broadcast_post :: !(Maybe Int')}
data UpdateReadChannelDiscussionOutbox'
    = UpdateReadChannelDiscussionOutbox' {_channel_id :: !Long',
                                          _top_msg_id :: !Int',
                                          _read_max_id :: !Int'}
data UpdateReadChannelInbox'
    = UpdateReadChannelInbox' {_folder_id :: !(Maybe Int'),
                               _channel_id :: !Long',
                               _max_id :: !Int',
                               _still_unread_count :: !Int',
                               _pts :: !Int'}
data UpdateReadChannelOutbox'
    = UpdateReadChannelOutbox' {_channel_id :: !Long',
                                _max_id :: !Int'}
data UpdateReadFeaturedEmojiStickers'
    = UpdateReadFeaturedEmojiStickers' {}
data UpdateReadFeaturedStickers' = UpdateReadFeaturedStickers' {}
data UpdateReadHistoryInbox'
    = UpdateReadHistoryInbox' {_folder_id :: !(Maybe Int'),
                               _peer :: !Peer,
                               _max_id :: !Int',
                               _still_unread_count :: !Int',
                               _pts :: !Int',
                               _pts_count :: !Int'}
data UpdateReadHistoryOutbox'
    = UpdateReadHistoryOutbox' {_peer :: !Peer,
                                _max_id :: !Int',
                                _pts :: !Int',
                                _pts_count :: !Int'}
data UpdateReadMessagesContents'
    = UpdateReadMessagesContents' {_messages :: !(Vector Int'),
                                   _pts :: !Int',
                                   _pts_count :: !Int',
                                   _date :: !(Maybe Int')}
data UpdateReadStories'
    = UpdateReadStories' {_peer :: !Peer, _max_id :: !Int'}
data UpdateRecentEmojiStatuses' = UpdateRecentEmojiStatuses' {}
data UpdateRecentReactions' = UpdateRecentReactions' {}
data UpdateRecentStickers' = UpdateRecentStickers' {}
data UpdateSavedDialogPinned'
    = UpdateSavedDialogPinned' {_pinned :: !(Maybe True'),
                                _peer :: !DialogPeer}
data UpdateSavedGifs' = UpdateSavedGifs' {}
data UpdateSavedRingtones' = UpdateSavedRingtones' {}
data UpdateSentStoryReaction'
    = UpdateSentStoryReaction' {_peer :: !Peer,
                                _story_id :: !Int',
                                _reaction :: !Reaction}
data UpdateServiceNotification'
    = UpdateServiceNotification' {_popup :: !(Maybe True'),
                                  _invert_media :: !(Maybe True'),
                                  _inbox_date :: !(Maybe Int'),
                                  _type :: !String',
                                  _message :: !String',
                                  _media :: !MessageMedia,
                                  _entities :: !(Vector MessageEntity)}
data UpdateStickerSets'
    = UpdateStickerSets' {_masks :: !(Maybe True'),
                          _emojis :: !(Maybe True')}
data UpdateStickerSetsOrder'
    = UpdateStickerSetsOrder' {_masks :: !(Maybe True'),
                               _emojis :: !(Maybe True'),
                               _order :: !(Vector Long')}
data UpdateStoriesStealthMode'
    = UpdateStoriesStealthMode' {_stealth_mode :: !StoriesStealthMode}
data UpdateStory'
    = UpdateStory' {_peer :: !Peer, _story :: !StoryItem}
data UpdateStoryID'
    = UpdateStoryID' {_id :: !Int', _random_id :: !Long'}
data UpdateTheme' = UpdateTheme' {_theme :: !Theme}
data UpdateTranscribedAudio'
    = UpdateTranscribedAudio' {_pending :: !(Maybe True'),
                               _peer :: !Peer,
                               _msg_id :: !Int',
                               _transcription_id :: !Long',
                               _text :: !String'}
data UpdateUser' = UpdateUser' {_user_id :: !Long'}
data UpdateUserEmojiStatus'
    = UpdateUserEmojiStatus' {_user_id :: !Long',
                              _emoji_status :: !EmojiStatus}
data UpdateUserName'
    = UpdateUserName' {_user_id :: !Long',
                       _first_name :: !String',
                       _last_name :: !String',
                       _usernames :: !(Vector Username)}
data UpdateUserPhone'
    = UpdateUserPhone' {_user_id :: !Long', _phone :: !String'}
data UpdateUserStatus'
    = UpdateUserStatus' {_user_id :: !Long', _status :: !UserStatus}
data UpdateUserTyping'
    = UpdateUserTyping' {_user_id :: !Long',
                         _action :: !SendMessageAction}
data UpdateWebPage'
    = UpdateWebPage' {_webpage :: !WebPage,
                      _pts :: !Int',
                      _pts_count :: !Int'}
data UpdateWebViewResultSent'
    = UpdateWebViewResultSent' {_query_id :: !Long'}
instance Data.Binary.Binary Update
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {397910539 -> fmap UpdateAttachMenuBots Data.Binary.get;
                      3959795863 -> fmap UpdateAutoSaveSettings Data.Binary.get;
                      3117401229 -> fmap UpdateBotCallbackQuery Data.Binary.get;
                      2421019804 -> fmap UpdateBotChatBoost Data.Binary.get;
                      299870598 -> fmap UpdateBotChatInviteRequester Data.Binary.get;
                      1299263278 -> fmap UpdateBotCommands Data.Binary.get;
                      1232025500 -> fmap UpdateBotInlineQuery Data.Binary.get;
                      317794823 -> fmap UpdateBotInlineSend Data.Binary.get;
                      347625491 -> fmap UpdateBotMenuButton Data.Binary.get;
                      2887898062 -> fmap UpdateBotMessageReaction Data.Binary.get;
                      164329305 -> fmap UpdateBotMessageReactions Data.Binary.get;
                      2359990934 -> fmap UpdateBotPrecheckoutQuery Data.Binary.get;
                      3048144253 -> fmap UpdateBotShippingQuery Data.Binary.get;
                      3297184329 -> fmap UpdateBotStopped Data.Binary.get;
                      2199371971 -> fmap UpdateBotWebhookJSON Data.Binary.get;
                      2610053286 -> fmap UpdateBotWebhookJSONQuery Data.Binary.get;
                      1666927625 -> fmap UpdateChannel Data.Binary.get;
                      2990524056 -> fmap UpdateChannelAvailableMessages Data.Binary.get;
                      3533318132 -> fmap UpdateChannelMessageForwards Data.Binary.get;
                      4062620680 -> fmap UpdateChannelMessageViews Data.Binary.get;
                      2556246715 -> fmap UpdateChannelParticipant Data.Binary.get;
                      422509539 -> fmap UpdateChannelPinnedTopic Data.Binary.get;
                      4263085570 -> fmap UpdateChannelPinnedTopics Data.Binary.get;
                      3928556893 -> fmap UpdateChannelReadMessagesContents Data.Binary.get;
                      277713951 -> fmap UpdateChannelTooLong Data.Binary.get;
                      2357774627 -> fmap UpdateChannelUserTyping Data.Binary.get;
                      129403168 -> fmap UpdateChannelViewForumAsMessages Data.Binary.get;
                      791390623 -> fmap UpdateChannelWebPage Data.Binary.get;
                      4170869326 -> fmap UpdateChat Data.Binary.get;
                      1421875280 -> fmap UpdateChatDefaultBannedRights Data.Binary.get;
                      3498534458 -> fmap UpdateChatParticipant Data.Binary.get;
                      1037718609 -> fmap UpdateChatParticipantAdd Data.Binary.get;
                      3620364706 -> fmap UpdateChatParticipantAdmin Data.Binary.get;
                      3811523959 -> fmap UpdateChatParticipantDelete Data.Binary.get;
                      125178264 -> fmap UpdateChatParticipants Data.Binary.get;
                      2202565360 -> fmap UpdateChatUserTyping Data.Binary.get;
                      2720652550 -> fmap UpdateConfig Data.Binary.get;
                      1887741886 -> fmap UpdateContactsReset Data.Binary.get;
                      2388564083 -> fmap UpdateDcOptions Data.Binary.get;
                      3274529554 -> fmap UpdateDeleteChannelMessages Data.Binary.get;
                      2718806245 -> fmap UpdateDeleteMessages Data.Binary.get;
                      2424728814 -> fmap UpdateDeleteScheduledMessages Data.Binary.get;
                      654302845 -> fmap UpdateDialogFilter Data.Binary.get;
                      2782339333 -> fmap UpdateDialogFilterOrder Data.Binary.get;
                      889491791 -> fmap UpdateDialogFilters Data.Binary.get;
                      1852826908 -> fmap UpdateDialogPinned Data.Binary.get;
                      3781450179 -> fmap UpdateDialogUnreadMark Data.Binary.get;
                      457829485 -> fmap UpdateDraftMessage Data.Binary.get;
                      457133559 -> fmap UpdateEditChannelMessage Data.Binary.get;
                      3825430691 -> fmap UpdateEditMessage Data.Binary.get;
                      386986326 -> fmap UpdateEncryptedChatTyping Data.Binary.get;
                      956179895 -> fmap UpdateEncryptedMessagesRead Data.Binary.get;
                      3030575245 -> fmap UpdateEncryption Data.Binary.get;
                      3843135853 -> fmap UpdateFavedStickers Data.Binary.get;
                      422972864 -> fmap UpdateFolderPeers Data.Binary.get;
                      2267003193 -> fmap UpdateGeoLiveViewed Data.Binary.get;
                      347227392 -> fmap UpdateGroupCall Data.Binary.get;
                      192428418 -> fmap UpdateGroupCallConnection Data.Binary.get;
                      4075543374 -> fmap UpdateGroupCallParticipants Data.Binary.get;
                      3438316246 -> fmap UpdateGroupInvitePrivacyForbidden Data.Binary.get;
                      1763610706 -> fmap UpdateInlineBotCallbackQuery Data.Binary.get;
                      1442983757 -> fmap UpdateLangPack Data.Binary.get;
                      1180041828 -> fmap UpdateLangPackTooLong Data.Binary.get;
                      1448076945 -> fmap UpdateLoginToken Data.Binary.get;
                      1517529484 -> fmap UpdateMessageExtendedMedia Data.Binary.get;
                      1318109142 -> fmap UpdateMessageID Data.Binary.get;
                      2896258427 -> fmap UpdateMessagePoll Data.Binary.get;
                      619974263 -> fmap UpdateMessagePollVote Data.Binary.get;
                      1578843320 -> fmap UpdateMessageReactions Data.Binary.get;
                      2264715141 -> fmap UpdateMoveStickerSetToTop Data.Binary.get;
                      2303831023 -> fmap UpdateNewAuthorization Data.Binary.get;
                      1656358105 -> fmap UpdateNewChannelMessage Data.Binary.get;
                      314359194 -> fmap UpdateNewEncryptedMessage Data.Binary.get;
                      522914557 -> fmap UpdateNewMessage Data.Binary.get;
                      967122427 -> fmap UpdateNewScheduledMessage Data.Binary.get;
                      1753886890 -> fmap UpdateNewStickerSet Data.Binary.get;
                      3200411887 -> fmap UpdateNotifySettings Data.Binary.get;
                      3957356370 -> fmap UpdatePeerBlocked Data.Binary.get;
                      3147544997 -> fmap UpdatePeerHistoryTTL Data.Binary.get;
                      3031420848 -> fmap UpdatePeerLocated Data.Binary.get;
                      1786671974 -> fmap UpdatePeerSettings Data.Binary.get;
                      2923368477 -> fmap UpdatePeerWallpaper Data.Binary.get;
                      1885586395 -> fmap UpdatePendingJoinRequests Data.Binary.get;
                      2869914398 -> fmap UpdatePhoneCall Data.Binary.get;
                      643940105 -> fmap UpdatePhoneCallSignalingData Data.Binary.get;
                      1538885128 -> fmap UpdatePinnedChannelMessages Data.Binary.get;
                      4195302562 -> fmap UpdatePinnedDialogs Data.Binary.get;
                      3984976565 -> fmap UpdatePinnedMessages Data.Binary.get;
                      1751942566 -> fmap UpdatePinnedSavedDialogs Data.Binary.get;
                      3996854058 -> fmap UpdatePrivacy Data.Binary.get;
                      861169551 -> fmap UpdatePtsChanged Data.Binary.get;
                      3601962310 -> fmap UpdateReadChannelDiscussionInbox Data.Binary.get;
                      1767677564 -> fmap UpdateReadChannelDiscussionOutbox Data.Binary.get;
                      2452516368 -> fmap UpdateReadChannelInbox Data.Binary.get;
                      3076495785 -> fmap UpdateReadChannelOutbox Data.Binary.get;
                      4216080748 -> fmap UpdateReadFeaturedEmojiStickers Data.Binary.get;
                      1461528386 -> fmap UpdateReadFeaturedStickers Data.Binary.get;
                      2627162079 -> fmap UpdateReadHistoryInbox Data.Binary.get;
                      791617983 -> fmap UpdateReadHistoryOutbox Data.Binary.get;
                      4163006849 -> fmap UpdateReadMessagesContents Data.Binary.get;
                      4149121835 -> fmap UpdateReadStories Data.Binary.get;
                      821314523 -> fmap UpdateRecentEmojiStatuses Data.Binary.get;
                      1870160884 -> fmap UpdateRecentReactions Data.Binary.get;
                      2588027936 -> fmap UpdateRecentStickers Data.Binary.get;
                      2930744948 -> fmap UpdateSavedDialogPinned Data.Binary.get;
                      2473931806 -> fmap UpdateSavedGifs Data.Binary.get;
                      1960361625 -> fmap UpdateSavedRingtones Data.Binary.get;
                      2103604867 -> fmap UpdateSentStoryReaction Data.Binary.get;
                      3957614617 -> fmap UpdateServiceNotification Data.Binary.get;
                      834816008 -> fmap UpdateStickerSets Data.Binary.get;
                      196268545 -> fmap UpdateStickerSetsOrder Data.Binary.get;
                      738741697 -> fmap UpdateStoriesStealthMode Data.Binary.get;
                      1974712216 -> fmap UpdateStory Data.Binary.get;
                      468923833 -> fmap UpdateStoryID Data.Binary.get;
                      2182544291 -> fmap UpdateTheme Data.Binary.get;
                      8703322 -> fmap UpdateTranscribedAudio Data.Binary.get;
                      542282808 -> fmap UpdateUser Data.Binary.get;
                      674706841 -> fmap UpdateUserEmojiStatus Data.Binary.get;
                      2810480932 -> fmap UpdateUserName Data.Binary.get;
                      88680979 -> fmap UpdateUserPhone Data.Binary.get;
                      3854432478 -> fmap UpdateUserStatus Data.Binary.get;
                      3223225727 -> fmap UpdateUserTyping Data.Binary.get;
                      2139689491 -> fmap UpdateWebPage Data.Binary.get;
                      361936797 -> fmap UpdateWebViewResultSent Data.Binary.get}};
           put (UpdateAttachMenuBots tmp_1) = do {Data.Binary.Put.putWord32le 397910539;
                                                  Data.Binary.put tmp_1};
           put (UpdateAutoSaveSettings tmp_2) = do {Data.Binary.Put.putWord32le 3959795863;
                                                    Data.Binary.put tmp_2};
           put (UpdateBotCallbackQuery tmp_3) = do {Data.Binary.Put.putWord32le 3117401229;
                                                    Data.Binary.put tmp_3};
           put (UpdateBotChatBoost tmp_4) = do {Data.Binary.Put.putWord32le 2421019804;
                                                Data.Binary.put tmp_4};
           put (UpdateBotChatInviteRequester tmp_5) = do {Data.Binary.Put.putWord32le 299870598;
                                                          Data.Binary.put tmp_5};
           put (UpdateBotCommands tmp_6) = do {Data.Binary.Put.putWord32le 1299263278;
                                               Data.Binary.put tmp_6};
           put (UpdateBotInlineQuery tmp_7) = do {Data.Binary.Put.putWord32le 1232025500;
                                                  Data.Binary.put tmp_7};
           put (UpdateBotInlineSend tmp_8) = do {Data.Binary.Put.putWord32le 317794823;
                                                 Data.Binary.put tmp_8};
           put (UpdateBotMenuButton tmp_9) = do {Data.Binary.Put.putWord32le 347625491;
                                                 Data.Binary.put tmp_9};
           put (UpdateBotMessageReaction tmp_10) = do {Data.Binary.Put.putWord32le 2887898062;
                                                       Data.Binary.put tmp_10};
           put (UpdateBotMessageReactions tmp_11) = do {Data.Binary.Put.putWord32le 164329305;
                                                        Data.Binary.put tmp_11};
           put (UpdateBotPrecheckoutQuery tmp_12) = do {Data.Binary.Put.putWord32le 2359990934;
                                                        Data.Binary.put tmp_12};
           put (UpdateBotShippingQuery tmp_13) = do {Data.Binary.Put.putWord32le 3048144253;
                                                     Data.Binary.put tmp_13};
           put (UpdateBotStopped tmp_14) = do {Data.Binary.Put.putWord32le 3297184329;
                                               Data.Binary.put tmp_14};
           put (UpdateBotWebhookJSON tmp_15) = do {Data.Binary.Put.putWord32le 2199371971;
                                                   Data.Binary.put tmp_15};
           put (UpdateBotWebhookJSONQuery tmp_16) = do {Data.Binary.Put.putWord32le 2610053286;
                                                        Data.Binary.put tmp_16};
           put (UpdateChannel tmp_17) = do {Data.Binary.Put.putWord32le 1666927625;
                                            Data.Binary.put tmp_17};
           put (UpdateChannelAvailableMessages tmp_18) = do {Data.Binary.Put.putWord32le 2990524056;
                                                             Data.Binary.put tmp_18};
           put (UpdateChannelMessageForwards tmp_19) = do {Data.Binary.Put.putWord32le 3533318132;
                                                           Data.Binary.put tmp_19};
           put (UpdateChannelMessageViews tmp_20) = do {Data.Binary.Put.putWord32le 4062620680;
                                                        Data.Binary.put tmp_20};
           put (UpdateChannelParticipant tmp_21) = do {Data.Binary.Put.putWord32le 2556246715;
                                                       Data.Binary.put tmp_21};
           put (UpdateChannelPinnedTopic tmp_22) = do {Data.Binary.Put.putWord32le 422509539;
                                                       Data.Binary.put tmp_22};
           put (UpdateChannelPinnedTopics tmp_23) = do {Data.Binary.Put.putWord32le 4263085570;
                                                        Data.Binary.put tmp_23};
           put (UpdateChannelReadMessagesContents tmp_24) = do {Data.Binary.Put.putWord32le 3928556893;
                                                                Data.Binary.put tmp_24};
           put (UpdateChannelTooLong tmp_25) = do {Data.Binary.Put.putWord32le 277713951;
                                                   Data.Binary.put tmp_25};
           put (UpdateChannelUserTyping tmp_26) = do {Data.Binary.Put.putWord32le 2357774627;
                                                      Data.Binary.put tmp_26};
           put (UpdateChannelViewForumAsMessages tmp_27) = do {Data.Binary.Put.putWord32le 129403168;
                                                               Data.Binary.put tmp_27};
           put (UpdateChannelWebPage tmp_28) = do {Data.Binary.Put.putWord32le 791390623;
                                                   Data.Binary.put tmp_28};
           put (UpdateChat tmp_29) = do {Data.Binary.Put.putWord32le 4170869326;
                                         Data.Binary.put tmp_29};
           put (UpdateChatDefaultBannedRights tmp_30) = do {Data.Binary.Put.putWord32le 1421875280;
                                                            Data.Binary.put tmp_30};
           put (UpdateChatParticipant tmp_31) = do {Data.Binary.Put.putWord32le 3498534458;
                                                    Data.Binary.put tmp_31};
           put (UpdateChatParticipantAdd tmp_32) = do {Data.Binary.Put.putWord32le 1037718609;
                                                       Data.Binary.put tmp_32};
           put (UpdateChatParticipantAdmin tmp_33) = do {Data.Binary.Put.putWord32le 3620364706;
                                                         Data.Binary.put tmp_33};
           put (UpdateChatParticipantDelete tmp_34) = do {Data.Binary.Put.putWord32le 3811523959;
                                                          Data.Binary.put tmp_34};
           put (UpdateChatParticipants tmp_35) = do {Data.Binary.Put.putWord32le 125178264;
                                                     Data.Binary.put tmp_35};
           put (UpdateChatUserTyping tmp_36) = do {Data.Binary.Put.putWord32le 2202565360;
                                                   Data.Binary.put tmp_36};
           put (UpdateConfig tmp_37) = do {Data.Binary.Put.putWord32le 2720652550;
                                           Data.Binary.put tmp_37};
           put (UpdateContactsReset tmp_38) = do {Data.Binary.Put.putWord32le 1887741886;
                                                  Data.Binary.put tmp_38};
           put (UpdateDcOptions tmp_39) = do {Data.Binary.Put.putWord32le 2388564083;
                                              Data.Binary.put tmp_39};
           put (UpdateDeleteChannelMessages tmp_40) = do {Data.Binary.Put.putWord32le 3274529554;
                                                          Data.Binary.put tmp_40};
           put (UpdateDeleteMessages tmp_41) = do {Data.Binary.Put.putWord32le 2718806245;
                                                   Data.Binary.put tmp_41};
           put (UpdateDeleteScheduledMessages tmp_42) = do {Data.Binary.Put.putWord32le 2424728814;
                                                            Data.Binary.put tmp_42};
           put (UpdateDialogFilter tmp_43) = do {Data.Binary.Put.putWord32le 654302845;
                                                 Data.Binary.put tmp_43};
           put (UpdateDialogFilterOrder tmp_44) = do {Data.Binary.Put.putWord32le 2782339333;
                                                      Data.Binary.put tmp_44};
           put (UpdateDialogFilters tmp_45) = do {Data.Binary.Put.putWord32le 889491791;
                                                  Data.Binary.put tmp_45};
           put (UpdateDialogPinned tmp_46) = do {Data.Binary.Put.putWord32le 1852826908;
                                                 Data.Binary.put tmp_46};
           put (UpdateDialogUnreadMark tmp_47) = do {Data.Binary.Put.putWord32le 3781450179;
                                                     Data.Binary.put tmp_47};
           put (UpdateDraftMessage tmp_48) = do {Data.Binary.Put.putWord32le 457829485;
                                                 Data.Binary.put tmp_48};
           put (UpdateEditChannelMessage tmp_49) = do {Data.Binary.Put.putWord32le 457133559;
                                                       Data.Binary.put tmp_49};
           put (UpdateEditMessage tmp_50) = do {Data.Binary.Put.putWord32le 3825430691;
                                                Data.Binary.put tmp_50};
           put (UpdateEncryptedChatTyping tmp_51) = do {Data.Binary.Put.putWord32le 386986326;
                                                        Data.Binary.put tmp_51};
           put (UpdateEncryptedMessagesRead tmp_52) = do {Data.Binary.Put.putWord32le 956179895;
                                                          Data.Binary.put tmp_52};
           put (UpdateEncryption tmp_53) = do {Data.Binary.Put.putWord32le 3030575245;
                                               Data.Binary.put tmp_53};
           put (UpdateFavedStickers tmp_54) = do {Data.Binary.Put.putWord32le 3843135853;
                                                  Data.Binary.put tmp_54};
           put (UpdateFolderPeers tmp_55) = do {Data.Binary.Put.putWord32le 422972864;
                                                Data.Binary.put tmp_55};
           put (UpdateGeoLiveViewed tmp_56) = do {Data.Binary.Put.putWord32le 2267003193;
                                                  Data.Binary.put tmp_56};
           put (UpdateGroupCall tmp_57) = do {Data.Binary.Put.putWord32le 347227392;
                                              Data.Binary.put tmp_57};
           put (UpdateGroupCallConnection tmp_58) = do {Data.Binary.Put.putWord32le 192428418;
                                                        Data.Binary.put tmp_58};
           put (UpdateGroupCallParticipants tmp_59) = do {Data.Binary.Put.putWord32le 4075543374;
                                                          Data.Binary.put tmp_59};
           put (UpdateGroupInvitePrivacyForbidden tmp_60) = do {Data.Binary.Put.putWord32le 3438316246;
                                                                Data.Binary.put tmp_60};
           put (UpdateInlineBotCallbackQuery tmp_61) = do {Data.Binary.Put.putWord32le 1763610706;
                                                           Data.Binary.put tmp_61};
           put (UpdateLangPack tmp_62) = do {Data.Binary.Put.putWord32le 1442983757;
                                             Data.Binary.put tmp_62};
           put (UpdateLangPackTooLong tmp_63) = do {Data.Binary.Put.putWord32le 1180041828;
                                                    Data.Binary.put tmp_63};
           put (UpdateLoginToken tmp_64) = do {Data.Binary.Put.putWord32le 1448076945;
                                               Data.Binary.put tmp_64};
           put (UpdateMessageExtendedMedia tmp_65) = do {Data.Binary.Put.putWord32le 1517529484;
                                                         Data.Binary.put tmp_65};
           put (UpdateMessageID tmp_66) = do {Data.Binary.Put.putWord32le 1318109142;
                                              Data.Binary.put tmp_66};
           put (UpdateMessagePoll tmp_67) = do {Data.Binary.Put.putWord32le 2896258427;
                                                Data.Binary.put tmp_67};
           put (UpdateMessagePollVote tmp_68) = do {Data.Binary.Put.putWord32le 619974263;
                                                    Data.Binary.put tmp_68};
           put (UpdateMessageReactions tmp_69) = do {Data.Binary.Put.putWord32le 1578843320;
                                                     Data.Binary.put tmp_69};
           put (UpdateMoveStickerSetToTop tmp_70) = do {Data.Binary.Put.putWord32le 2264715141;
                                                        Data.Binary.put tmp_70};
           put (UpdateNewAuthorization tmp_71) = do {Data.Binary.Put.putWord32le 2303831023;
                                                     Data.Binary.put tmp_71};
           put (UpdateNewChannelMessage tmp_72) = do {Data.Binary.Put.putWord32le 1656358105;
                                                      Data.Binary.put tmp_72};
           put (UpdateNewEncryptedMessage tmp_73) = do {Data.Binary.Put.putWord32le 314359194;
                                                        Data.Binary.put tmp_73};
           put (UpdateNewMessage tmp_74) = do {Data.Binary.Put.putWord32le 522914557;
                                               Data.Binary.put tmp_74};
           put (UpdateNewScheduledMessage tmp_75) = do {Data.Binary.Put.putWord32le 967122427;
                                                        Data.Binary.put tmp_75};
           put (UpdateNewStickerSet tmp_76) = do {Data.Binary.Put.putWord32le 1753886890;
                                                  Data.Binary.put tmp_76};
           put (UpdateNotifySettings tmp_77) = do {Data.Binary.Put.putWord32le 3200411887;
                                                   Data.Binary.put tmp_77};
           put (UpdatePeerBlocked tmp_78) = do {Data.Binary.Put.putWord32le 3957356370;
                                                Data.Binary.put tmp_78};
           put (UpdatePeerHistoryTTL tmp_79) = do {Data.Binary.Put.putWord32le 3147544997;
                                                   Data.Binary.put tmp_79};
           put (UpdatePeerLocated tmp_80) = do {Data.Binary.Put.putWord32le 3031420848;
                                                Data.Binary.put tmp_80};
           put (UpdatePeerSettings tmp_81) = do {Data.Binary.Put.putWord32le 1786671974;
                                                 Data.Binary.put tmp_81};
           put (UpdatePeerWallpaper tmp_82) = do {Data.Binary.Put.putWord32le 2923368477;
                                                  Data.Binary.put tmp_82};
           put (UpdatePendingJoinRequests tmp_83) = do {Data.Binary.Put.putWord32le 1885586395;
                                                        Data.Binary.put tmp_83};
           put (UpdatePhoneCall tmp_84) = do {Data.Binary.Put.putWord32le 2869914398;
                                              Data.Binary.put tmp_84};
           put (UpdatePhoneCallSignalingData tmp_85) = do {Data.Binary.Put.putWord32le 643940105;
                                                           Data.Binary.put tmp_85};
           put (UpdatePinnedChannelMessages tmp_86) = do {Data.Binary.Put.putWord32le 1538885128;
                                                          Data.Binary.put tmp_86};
           put (UpdatePinnedDialogs tmp_87) = do {Data.Binary.Put.putWord32le 4195302562;
                                                  Data.Binary.put tmp_87};
           put (UpdatePinnedMessages tmp_88) = do {Data.Binary.Put.putWord32le 3984976565;
                                                   Data.Binary.put tmp_88};
           put (UpdatePinnedSavedDialogs tmp_89) = do {Data.Binary.Put.putWord32le 1751942566;
                                                       Data.Binary.put tmp_89};
           put (UpdatePrivacy tmp_90) = do {Data.Binary.Put.putWord32le 3996854058;
                                            Data.Binary.put tmp_90};
           put (UpdatePtsChanged tmp_91) = do {Data.Binary.Put.putWord32le 861169551;
                                               Data.Binary.put tmp_91};
           put (UpdateReadChannelDiscussionInbox tmp_92) = do {Data.Binary.Put.putWord32le 3601962310;
                                                               Data.Binary.put tmp_92};
           put (UpdateReadChannelDiscussionOutbox tmp_93) = do {Data.Binary.Put.putWord32le 1767677564;
                                                                Data.Binary.put tmp_93};
           put (UpdateReadChannelInbox tmp_94) = do {Data.Binary.Put.putWord32le 2452516368;
                                                     Data.Binary.put tmp_94};
           put (UpdateReadChannelOutbox tmp_95) = do {Data.Binary.Put.putWord32le 3076495785;
                                                      Data.Binary.put tmp_95};
           put (UpdateReadFeaturedEmojiStickers tmp_96) = do {Data.Binary.Put.putWord32le 4216080748;
                                                              Data.Binary.put tmp_96};
           put (UpdateReadFeaturedStickers tmp_97) = do {Data.Binary.Put.putWord32le 1461528386;
                                                         Data.Binary.put tmp_97};
           put (UpdateReadHistoryInbox tmp_98) = do {Data.Binary.Put.putWord32le 2627162079;
                                                     Data.Binary.put tmp_98};
           put (UpdateReadHistoryOutbox tmp_99) = do {Data.Binary.Put.putWord32le 791617983;
                                                      Data.Binary.put tmp_99};
           put (UpdateReadMessagesContents tmp_100) = do {Data.Binary.Put.putWord32le 4163006849;
                                                          Data.Binary.put tmp_100};
           put (UpdateReadStories tmp_101) = do {Data.Binary.Put.putWord32le 4149121835;
                                                 Data.Binary.put tmp_101};
           put (UpdateRecentEmojiStatuses tmp_102) = do {Data.Binary.Put.putWord32le 821314523;
                                                         Data.Binary.put tmp_102};
           put (UpdateRecentReactions tmp_103) = do {Data.Binary.Put.putWord32le 1870160884;
                                                     Data.Binary.put tmp_103};
           put (UpdateRecentStickers tmp_104) = do {Data.Binary.Put.putWord32le 2588027936;
                                                    Data.Binary.put tmp_104};
           put (UpdateSavedDialogPinned tmp_105) = do {Data.Binary.Put.putWord32le 2930744948;
                                                       Data.Binary.put tmp_105};
           put (UpdateSavedGifs tmp_106) = do {Data.Binary.Put.putWord32le 2473931806;
                                               Data.Binary.put tmp_106};
           put (UpdateSavedRingtones tmp_107) = do {Data.Binary.Put.putWord32le 1960361625;
                                                    Data.Binary.put tmp_107};
           put (UpdateSentStoryReaction tmp_108) = do {Data.Binary.Put.putWord32le 2103604867;
                                                       Data.Binary.put tmp_108};
           put (UpdateServiceNotification tmp_109) = do {Data.Binary.Put.putWord32le 3957614617;
                                                         Data.Binary.put tmp_109};
           put (UpdateStickerSets tmp_110) = do {Data.Binary.Put.putWord32le 834816008;
                                                 Data.Binary.put tmp_110};
           put (UpdateStickerSetsOrder tmp_111) = do {Data.Binary.Put.putWord32le 196268545;
                                                      Data.Binary.put tmp_111};
           put (UpdateStoriesStealthMode tmp_112) = do {Data.Binary.Put.putWord32le 738741697;
                                                        Data.Binary.put tmp_112};
           put (UpdateStory tmp_113) = do {Data.Binary.Put.putWord32le 1974712216;
                                           Data.Binary.put tmp_113};
           put (UpdateStoryID tmp_114) = do {Data.Binary.Put.putWord32le 468923833;
                                             Data.Binary.put tmp_114};
           put (UpdateTheme tmp_115) = do {Data.Binary.Put.putWord32le 2182544291;
                                           Data.Binary.put tmp_115};
           put (UpdateTranscribedAudio tmp_116) = do {Data.Binary.Put.putWord32le 8703322;
                                                      Data.Binary.put tmp_116};
           put (UpdateUser tmp_117) = do {Data.Binary.Put.putWord32le 542282808;
                                          Data.Binary.put tmp_117};
           put (UpdateUserEmojiStatus tmp_118) = do {Data.Binary.Put.putWord32le 674706841;
                                                     Data.Binary.put tmp_118};
           put (UpdateUserName tmp_119) = do {Data.Binary.Put.putWord32le 2810480932;
                                              Data.Binary.put tmp_119};
           put (UpdateUserPhone tmp_120) = do {Data.Binary.Put.putWord32le 88680979;
                                               Data.Binary.put tmp_120};
           put (UpdateUserStatus tmp_121) = do {Data.Binary.Put.putWord32le 3854432478;
                                                Data.Binary.put tmp_121};
           put (UpdateUserTyping tmp_122) = do {Data.Binary.Put.putWord32le 3223225727;
                                                Data.Binary.put tmp_122};
           put (UpdateWebPage tmp_123) = do {Data.Binary.Put.putWord32le 2139689491;
                                             Data.Binary.put tmp_123};
           put (UpdateWebViewResultSent tmp_124) = do {Data.Binary.Put.putWord32le 361936797;
                                                       Data.Binary.put tmp_124}}
instance Data.Binary.Binary UpdateShort'
    where {get = do {_update_0 <- Data.Binary.get;
                     _date_1 <- Data.Binary.get;
                     GHC.Base.pure (UpdateShort' _update_0 _date_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._update;
                                     Data.Binary.put to_be_encoded_2._date}}
instance Data.Binary.Binary UpdateShortChatMessage'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _out_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _mentioned_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 4);
                     _media_unread_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 5);
                     _silent_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 13);
                     _id_5 <- Data.Binary.get;
                     _from_id_6 <- Data.Binary.get;
                     _chat_id_7 <- Data.Binary.get;
                     _message_8 <- Data.Binary.get;
                     _pts_9 <- Data.Binary.get;
                     _pts_count_10 <- Data.Binary.get;
                     _date_11 <- Data.Binary.get;
                     _fwd_from_12 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _via_bot_id_13 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 11);
                     _reply_to_14 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     _entities_15 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 7);
                     _ttl_period_16 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 25);
                     GHC.Base.pure (UpdateShortChatMessage' _out_1 _mentioned_2 _media_unread_3 _silent_4 _id_5 _from_id_6 _chat_id_7 _message_8 _pts_9 _pts_count_10 _date_11 _fwd_from_12 _via_bot_id_13 _reply_to_14 _entities_15 _ttl_period_16)};
           put to_be_encoded_17 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_17._ttl_period,
                                                               25),
                                                              (Data.Maybe.isJust to_be_encoded_17._entities,
                                                               7),
                                                              (Data.Maybe.isJust to_be_encoded_17._reply_to,
                                                               3),
                                                              (Data.Maybe.isJust to_be_encoded_17._via_bot_id,
                                                               11),
                                                              (Data.Maybe.isJust to_be_encoded_17._fwd_from,
                                                               2),
                                                              (Data.Maybe.isJust to_be_encoded_17._silent,
                                                               13),
                                                              (Data.Maybe.isJust to_be_encoded_17._media_unread,
                                                               5),
                                                              (Data.Maybe.isJust to_be_encoded_17._mentioned,
                                                               4),
                                                              (Data.Maybe.isJust to_be_encoded_17._out,
                                                               1)];
                                      Data.Binary.put to_be_encoded_17._out;
                                      Data.Binary.put to_be_encoded_17._mentioned;
                                      Data.Binary.put to_be_encoded_17._media_unread;
                                      Data.Binary.put to_be_encoded_17._silent;
                                      Data.Binary.put to_be_encoded_17._id;
                                      Data.Binary.put to_be_encoded_17._from_id;
                                      Data.Binary.put to_be_encoded_17._chat_id;
                                      Data.Binary.put to_be_encoded_17._message;
                                      Data.Binary.put to_be_encoded_17._pts;
                                      Data.Binary.put to_be_encoded_17._pts_count;
                                      Data.Binary.put to_be_encoded_17._date;
                                      Data.Binary.put to_be_encoded_17._fwd_from;
                                      Data.Binary.put to_be_encoded_17._via_bot_id;
                                      Data.Binary.put to_be_encoded_17._reply_to;
                                      Data.Binary.put to_be_encoded_17._entities;
                                      Data.Binary.put to_be_encoded_17._ttl_period}}
instance Data.Binary.Binary UpdateShortMessage'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _out_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _mentioned_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 4);
                     _media_unread_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 5);
                     _silent_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 13);
                     _id_5 <- Data.Binary.get;
                     _user_id_6 <- Data.Binary.get;
                     _message_7 <- Data.Binary.get;
                     _pts_8 <- Data.Binary.get;
                     _pts_count_9 <- Data.Binary.get;
                     _date_10 <- Data.Binary.get;
                     _fwd_from_11 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _via_bot_id_12 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 11);
                     _reply_to_13 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     _entities_14 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 7);
                     _ttl_period_15 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 25);
                     GHC.Base.pure (UpdateShortMessage' _out_1 _mentioned_2 _media_unread_3 _silent_4 _id_5 _user_id_6 _message_7 _pts_8 _pts_count_9 _date_10 _fwd_from_11 _via_bot_id_12 _reply_to_13 _entities_14 _ttl_period_15)};
           put to_be_encoded_16 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_16._ttl_period,
                                                               25),
                                                              (Data.Maybe.isJust to_be_encoded_16._entities,
                                                               7),
                                                              (Data.Maybe.isJust to_be_encoded_16._reply_to,
                                                               3),
                                                              (Data.Maybe.isJust to_be_encoded_16._via_bot_id,
                                                               11),
                                                              (Data.Maybe.isJust to_be_encoded_16._fwd_from,
                                                               2),
                                                              (Data.Maybe.isJust to_be_encoded_16._silent,
                                                               13),
                                                              (Data.Maybe.isJust to_be_encoded_16._media_unread,
                                                               5),
                                                              (Data.Maybe.isJust to_be_encoded_16._mentioned,
                                                               4),
                                                              (Data.Maybe.isJust to_be_encoded_16._out,
                                                               1)];
                                      Data.Binary.put to_be_encoded_16._out;
                                      Data.Binary.put to_be_encoded_16._mentioned;
                                      Data.Binary.put to_be_encoded_16._media_unread;
                                      Data.Binary.put to_be_encoded_16._silent;
                                      Data.Binary.put to_be_encoded_16._id;
                                      Data.Binary.put to_be_encoded_16._user_id;
                                      Data.Binary.put to_be_encoded_16._message;
                                      Data.Binary.put to_be_encoded_16._pts;
                                      Data.Binary.put to_be_encoded_16._pts_count;
                                      Data.Binary.put to_be_encoded_16._date;
                                      Data.Binary.put to_be_encoded_16._fwd_from;
                                      Data.Binary.put to_be_encoded_16._via_bot_id;
                                      Data.Binary.put to_be_encoded_16._reply_to;
                                      Data.Binary.put to_be_encoded_16._entities;
                                      Data.Binary.put to_be_encoded_16._ttl_period}}
instance Data.Binary.Binary UpdateShortSentMessage'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _out_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _id_2 <- Data.Binary.get;
                     _pts_3 <- Data.Binary.get;
                     _pts_count_4 <- Data.Binary.get;
                     _date_5 <- Data.Binary.get;
                     _media_6 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 9);
                     _entities_7 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 7);
                     _ttl_period_8 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 25);
                     GHC.Base.pure (UpdateShortSentMessage' _out_1 _id_2 _pts_3 _pts_count_4 _date_5 _media_6 _entities_7 _ttl_period_8)};
           put to_be_encoded_9 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_9._ttl_period,
                                                              25),
                                                             (Data.Maybe.isJust to_be_encoded_9._entities,
                                                              7),
                                                             (Data.Maybe.isJust to_be_encoded_9._media,
                                                              9),
                                                             (Data.Maybe.isJust to_be_encoded_9._out,
                                                              1)];
                                     Data.Binary.put to_be_encoded_9._out;
                                     Data.Binary.put to_be_encoded_9._id;
                                     Data.Binary.put to_be_encoded_9._pts;
                                     Data.Binary.put to_be_encoded_9._pts_count;
                                     Data.Binary.put to_be_encoded_9._date;
                                     Data.Binary.put to_be_encoded_9._media;
                                     Data.Binary.put to_be_encoded_9._entities;
                                     Data.Binary.put to_be_encoded_9._ttl_period}}
instance Data.Binary.Binary Updates'
    where {get = do {_updates_0 <- Data.Binary.get;
                     _users_1 <- Data.Binary.get;
                     _chats_2 <- Data.Binary.get;
                     _date_3 <- Data.Binary.get;
                     _seq_4 <- Data.Binary.get;
                     GHC.Base.pure (Updates' _updates_0 _users_1 _chats_2 _date_3 _seq_4)};
           put to_be_encoded_5 = do {Data.Binary.put to_be_encoded_5._updates;
                                     Data.Binary.put to_be_encoded_5._users;
                                     Data.Binary.put to_be_encoded_5._chats;
                                     Data.Binary.put to_be_encoded_5._date;
                                     Data.Binary.put to_be_encoded_5._seq}}
instance Data.Binary.Binary UpdatesCombined'
    where {get = do {_updates_0 <- Data.Binary.get;
                     _users_1 <- Data.Binary.get;
                     _chats_2 <- Data.Binary.get;
                     _date_3 <- Data.Binary.get;
                     _seq_start_4 <- Data.Binary.get;
                     _seq_5 <- Data.Binary.get;
                     GHC.Base.pure (UpdatesCombined' _updates_0 _users_1 _chats_2 _date_3 _seq_start_4 _seq_5)};
           put to_be_encoded_6 = do {Data.Binary.put to_be_encoded_6._updates;
                                     Data.Binary.put to_be_encoded_6._users;
                                     Data.Binary.put to_be_encoded_6._chats;
                                     Data.Binary.put to_be_encoded_6._date;
                                     Data.Binary.put to_be_encoded_6._seq_start;
                                     Data.Binary.put to_be_encoded_6._seq}}
instance Data.Binary.Binary UpdatesTooLong'
    where {get = GHC.Base.pure UpdatesTooLong';
           put to_be_encoded_0 = do GHC.Base.pure ()}
data Updates
    = UpdateShort !UpdateShort'
    | UpdateShortChatMessage !UpdateShortChatMessage'
    | UpdateShortMessage !UpdateShortMessage'
    | UpdateShortSentMessage !UpdateShortSentMessage'
    | Updates !Updates'
    | UpdatesCombined !UpdatesCombined'
    | UpdatesTooLong !UpdatesTooLong'
data UpdateShort'
    = UpdateShort' {_update :: !Update, _date :: !Int'}
data UpdateShortChatMessage'
    = UpdateShortChatMessage' {_out :: !(Maybe True'),
                               _mentioned :: !(Maybe True'),
                               _media_unread :: !(Maybe True'),
                               _silent :: !(Maybe True'),
                               _id :: !Int',
                               _from_id :: !Long',
                               _chat_id :: !Long',
                               _message :: !String',
                               _pts :: !Int',
                               _pts_count :: !Int',
                               _date :: !Int',
                               _fwd_from :: !(Maybe MessageFwdHeader),
                               _via_bot_id :: !(Maybe Long'),
                               _reply_to :: !(Maybe MessageReplyHeader),
                               _entities :: !(Maybe (Vector MessageEntity)),
                               _ttl_period :: !(Maybe Int')}
data UpdateShortMessage'
    = UpdateShortMessage' {_out :: !(Maybe True'),
                           _mentioned :: !(Maybe True'),
                           _media_unread :: !(Maybe True'),
                           _silent :: !(Maybe True'),
                           _id :: !Int',
                           _user_id :: !Long',
                           _message :: !String',
                           _pts :: !Int',
                           _pts_count :: !Int',
                           _date :: !Int',
                           _fwd_from :: !(Maybe MessageFwdHeader),
                           _via_bot_id :: !(Maybe Long'),
                           _reply_to :: !(Maybe MessageReplyHeader),
                           _entities :: !(Maybe (Vector MessageEntity)),
                           _ttl_period :: !(Maybe Int')}
data UpdateShortSentMessage'
    = UpdateShortSentMessage' {_out :: !(Maybe True'),
                               _id :: !Int',
                               _pts :: !Int',
                               _pts_count :: !Int',
                               _date :: !Int',
                               _media :: !(Maybe MessageMedia),
                               _entities :: !(Maybe (Vector MessageEntity)),
                               _ttl_period :: !(Maybe Int')}
data Updates'
    = Updates' {_updates :: !(Vector Update),
                _users :: !(Vector User),
                _chats :: !(Vector Chat),
                _date :: !Int',
                _seq :: !Int'}
data UpdatesCombined'
    = UpdatesCombined' {_updates :: !(Vector Update),
                        _users :: !(Vector User),
                        _chats :: !(Vector Chat),
                        _date :: !Int',
                        _seq_start :: !Int',
                        _seq :: !Int'}
data UpdatesTooLong' = UpdatesTooLong' {}
instance Data.Binary.Binary Updates
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2027216577 -> fmap UpdateShort Data.Binary.get;
                      1299050149 -> fmap UpdateShortChatMessage Data.Binary.get;
                      826001400 -> fmap UpdateShortMessage Data.Binary.get;
                      2417352961 -> fmap UpdateShortSentMessage Data.Binary.get;
                      1957577280 -> fmap Updates Data.Binary.get;
                      1918567619 -> fmap UpdatesCombined Data.Binary.get;
                      3809980286 -> fmap UpdatesTooLong Data.Binary.get}};
           put (UpdateShort tmp_1) = do {Data.Binary.Put.putWord32le 2027216577;
                                         Data.Binary.put tmp_1};
           put (UpdateShortChatMessage tmp_2) = do {Data.Binary.Put.putWord32le 1299050149;
                                                    Data.Binary.put tmp_2};
           put (UpdateShortMessage tmp_3) = do {Data.Binary.Put.putWord32le 826001400;
                                                Data.Binary.put tmp_3};
           put (UpdateShortSentMessage tmp_4) = do {Data.Binary.Put.putWord32le 2417352961;
                                                    Data.Binary.put tmp_4};
           put (Updates tmp_5) = do {Data.Binary.Put.putWord32le 1957577280;
                                     Data.Binary.put tmp_5};
           put (UpdatesCombined tmp_6) = do {Data.Binary.Put.putWord32le 1918567619;
                                             Data.Binary.put tmp_6};
           put (UpdatesTooLong tmp_7) = do {Data.Binary.Put.putWord32le 3809980286;
                                            Data.Binary.put tmp_7}}
instance Data.Binary.Binary UrlAuthResultAccepted'
    where {get = do {_url_0 <- Data.Binary.get;
                     GHC.Base.pure (UrlAuthResultAccepted' _url_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._url}
instance Data.Binary.Binary UrlAuthResultDefault'
    where {get = GHC.Base.pure UrlAuthResultDefault';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary UrlAuthResultRequest'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _request_write_access_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _bot_2 <- Data.Binary.get;
                     _domain_3 <- Data.Binary.get;
                     GHC.Base.pure (UrlAuthResultRequest' _request_write_access_1 _bot_2 _domain_3)};
           put to_be_encoded_4 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_4._request_write_access,
                                                              0)];
                                     Data.Binary.put to_be_encoded_4._request_write_access;
                                     Data.Binary.put to_be_encoded_4._bot;
                                     Data.Binary.put to_be_encoded_4._domain}}
data UrlAuthResult
    = UrlAuthResultAccepted !UrlAuthResultAccepted'
    | UrlAuthResultDefault !UrlAuthResultDefault'
    | UrlAuthResultRequest !UrlAuthResultRequest'
data UrlAuthResultAccepted'
    = UrlAuthResultAccepted' {_url :: !String'}
data UrlAuthResultDefault' = UrlAuthResultDefault' {}
data UrlAuthResultRequest'
    = UrlAuthResultRequest' {_request_write_access :: !(Maybe True'),
                             _bot :: !User,
                             _domain :: !String'}
instance Data.Binary.Binary UrlAuthResult
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2408320590 -> fmap UrlAuthResultAccepted Data.Binary.get;
                      2849430303 -> fmap UrlAuthResultDefault Data.Binary.get;
                      2463316494 -> fmap UrlAuthResultRequest Data.Binary.get}};
           put (UrlAuthResultAccepted tmp_1) = do {Data.Binary.Put.putWord32le 2408320590;
                                                   Data.Binary.put tmp_1};
           put (UrlAuthResultDefault tmp_2) = do {Data.Binary.Put.putWord32le 2849430303;
                                                  Data.Binary.put tmp_2};
           put (UrlAuthResultRequest tmp_3) = do {Data.Binary.Put.putWord32le 2463316494;
                                                  Data.Binary.put tmp_3}}
instance Data.Binary.Binary User'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _self_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 10);
                     _contact_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 11);
                     _mutual_contact_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 12);
                     _deleted_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 13);
                     _bot_5 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 14);
                     _bot_chat_history_6 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 15);
                     _bot_nochats_7 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 16);
                     _verified_8 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 17);
                     _restricted_9 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 18);
                     _min_10 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 20);
                     _bot_inline_geo_11 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 21);
                     _support_12 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 23);
                     _scam_13 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 24);
                     _apply_min_photo_14 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 25);
                     _fake_15 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 26);
                     _bot_attach_menu_16 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 27);
                     _premium_17 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 28);
                     _attach_menu_enabled_18 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 29);
                     _flags2_19 <- Data.Binary.Get.getWord32le;
                     _bot_can_edit_20 <- Data.Binary.tlHandleOpt _flags2_19 (GHC.Maybe.Just 1);
                     _close_friend_21 <- Data.Binary.tlHandleOpt _flags2_19 (GHC.Maybe.Just 2);
                     _stories_hidden_22 <- Data.Binary.tlHandleOpt _flags2_19 (GHC.Maybe.Just 3);
                     _stories_unavailable_23 <- Data.Binary.tlHandleOpt _flags2_19 (GHC.Maybe.Just 4);
                     _id_24 <- Data.Binary.get;
                     _access_hash_25 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _first_name_26 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _last_name_27 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _username_28 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     _phone_29 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 4);
                     _photo_30 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 5);
                     _status_31 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 6);
                     _bot_info_version_32 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 14);
                     _restriction_reason_33 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 18);
                     _bot_inline_placeholder_34 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 19);
                     _lang_code_35 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 22);
                     _emoji_status_36 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 30);
                     _usernames_37 <- Data.Binary.tlHandleOpt _flags2_19 (GHC.Maybe.Just 0);
                     _stories_max_id_38 <- Data.Binary.tlHandleOpt _flags2_19 (GHC.Maybe.Just 5);
                     _color_39 <- Data.Binary.tlHandleOpt _flags2_19 (GHC.Maybe.Just 8);
                     _profile_color_40 <- Data.Binary.tlHandleOpt _flags2_19 (GHC.Maybe.Just 9);
                     GHC.Base.pure (User' _self_1 _contact_2 _mutual_contact_3 _deleted_4 _bot_5 _bot_chat_history_6 _bot_nochats_7 _verified_8 _restricted_9 _min_10 _bot_inline_geo_11 _support_12 _scam_13 _apply_min_photo_14 _fake_15 _bot_attach_menu_16 _premium_17 _attach_menu_enabled_18 _bot_can_edit_20 _close_friend_21 _stories_hidden_22 _stories_unavailable_23 _id_24 _access_hash_25 _first_name_26 _last_name_27 _username_28 _phone_29 _photo_30 _status_31 _bot_info_version_32 _restriction_reason_33 _bot_inline_placeholder_34 _lang_code_35 _emoji_status_36 _usernames_37 _stories_max_id_38 _color_39 _profile_color_40)};
           put to_be_encoded_41 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_41._emoji_status,
                                                               30),
                                                              (Data.Maybe.isJust to_be_encoded_41._lang_code,
                                                               22),
                                                              (Data.Maybe.isJust to_be_encoded_41._bot_inline_placeholder,
                                                               19),
                                                              (Data.Maybe.isJust to_be_encoded_41._restriction_reason,
                                                               18),
                                                              (Data.Maybe.isJust to_be_encoded_41._bot_info_version,
                                                               14),
                                                              (Data.Maybe.isJust to_be_encoded_41._status,
                                                               6),
                                                              (Data.Maybe.isJust to_be_encoded_41._photo,
                                                               5),
                                                              (Data.Maybe.isJust to_be_encoded_41._phone,
                                                               4),
                                                              (Data.Maybe.isJust to_be_encoded_41._username,
                                                               3),
                                                              (Data.Maybe.isJust to_be_encoded_41._last_name,
                                                               2),
                                                              (Data.Maybe.isJust to_be_encoded_41._first_name,
                                                               1),
                                                              (Data.Maybe.isJust to_be_encoded_41._access_hash,
                                                               0),
                                                              (Data.Maybe.isJust to_be_encoded_41._attach_menu_enabled,
                                                               29),
                                                              (Data.Maybe.isJust to_be_encoded_41._premium,
                                                               28),
                                                              (Data.Maybe.isJust to_be_encoded_41._bot_attach_menu,
                                                               27),
                                                              (Data.Maybe.isJust to_be_encoded_41._fake,
                                                               26),
                                                              (Data.Maybe.isJust to_be_encoded_41._apply_min_photo,
                                                               25),
                                                              (Data.Maybe.isJust to_be_encoded_41._scam,
                                                               24),
                                                              (Data.Maybe.isJust to_be_encoded_41._support,
                                                               23),
                                                              (Data.Maybe.isJust to_be_encoded_41._bot_inline_geo,
                                                               21),
                                                              (Data.Maybe.isJust to_be_encoded_41._min,
                                                               20),
                                                              (Data.Maybe.isJust to_be_encoded_41._restricted,
                                                               18),
                                                              (Data.Maybe.isJust to_be_encoded_41._verified,
                                                               17),
                                                              (Data.Maybe.isJust to_be_encoded_41._bot_nochats,
                                                               16),
                                                              (Data.Maybe.isJust to_be_encoded_41._bot_chat_history,
                                                               15),
                                                              (Data.Maybe.isJust to_be_encoded_41._bot,
                                                               14),
                                                              (Data.Maybe.isJust to_be_encoded_41._deleted,
                                                               13),
                                                              (Data.Maybe.isJust to_be_encoded_41._mutual_contact,
                                                               12),
                                                              (Data.Maybe.isJust to_be_encoded_41._contact,
                                                               11),
                                                              (Data.Maybe.isJust to_be_encoded_41._self,
                                                               10)];
                                      Data.Binary.put to_be_encoded_41._self;
                                      Data.Binary.put to_be_encoded_41._contact;
                                      Data.Binary.put to_be_encoded_41._mutual_contact;
                                      Data.Binary.put to_be_encoded_41._deleted;
                                      Data.Binary.put to_be_encoded_41._bot;
                                      Data.Binary.put to_be_encoded_41._bot_chat_history;
                                      Data.Binary.put to_be_encoded_41._bot_nochats;
                                      Data.Binary.put to_be_encoded_41._verified;
                                      Data.Binary.put to_be_encoded_41._restricted;
                                      Data.Binary.put to_be_encoded_41._min;
                                      Data.Binary.put to_be_encoded_41._bot_inline_geo;
                                      Data.Binary.put to_be_encoded_41._support;
                                      Data.Binary.put to_be_encoded_41._scam;
                                      Data.Binary.put to_be_encoded_41._apply_min_photo;
                                      Data.Binary.put to_be_encoded_41._fake;
                                      Data.Binary.put to_be_encoded_41._bot_attach_menu;
                                      Data.Binary.put to_be_encoded_41._premium;
                                      Data.Binary.put to_be_encoded_41._attach_menu_enabled;
                                      Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_41._profile_color,
                                                               9),
                                                              (Data.Maybe.isJust to_be_encoded_41._color,
                                                               8),
                                                              (Data.Maybe.isJust to_be_encoded_41._stories_max_id,
                                                               5),
                                                              (Data.Maybe.isJust to_be_encoded_41._usernames,
                                                               0),
                                                              (Data.Maybe.isJust to_be_encoded_41._stories_unavailable,
                                                               4),
                                                              (Data.Maybe.isJust to_be_encoded_41._stories_hidden,
                                                               3),
                                                              (Data.Maybe.isJust to_be_encoded_41._close_friend,
                                                               2),
                                                              (Data.Maybe.isJust to_be_encoded_41._bot_can_edit,
                                                               1)];
                                      Data.Binary.put to_be_encoded_41._bot_can_edit;
                                      Data.Binary.put to_be_encoded_41._close_friend;
                                      Data.Binary.put to_be_encoded_41._stories_hidden;
                                      Data.Binary.put to_be_encoded_41._stories_unavailable;
                                      Data.Binary.put to_be_encoded_41._id;
                                      Data.Binary.put to_be_encoded_41._access_hash;
                                      Data.Binary.put to_be_encoded_41._first_name;
                                      Data.Binary.put to_be_encoded_41._last_name;
                                      Data.Binary.put to_be_encoded_41._username;
                                      Data.Binary.put to_be_encoded_41._phone;
                                      Data.Binary.put to_be_encoded_41._photo;
                                      Data.Binary.put to_be_encoded_41._status;
                                      Data.Binary.put to_be_encoded_41._bot_info_version;
                                      Data.Binary.put to_be_encoded_41._restriction_reason;
                                      Data.Binary.put to_be_encoded_41._bot_inline_placeholder;
                                      Data.Binary.put to_be_encoded_41._lang_code;
                                      Data.Binary.put to_be_encoded_41._emoji_status;
                                      Data.Binary.put to_be_encoded_41._usernames;
                                      Data.Binary.put to_be_encoded_41._stories_max_id;
                                      Data.Binary.put to_be_encoded_41._color;
                                      Data.Binary.put to_be_encoded_41._profile_color}}
instance Data.Binary.Binary UserEmpty'
    where {get = do {_id_0 <- Data.Binary.get;
                     GHC.Base.pure (UserEmpty' _id_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._id}
data User
    = User !User'
    | UserEmpty !UserEmpty'
data User'
    = User' {_self :: !(Maybe True'),
             _contact :: !(Maybe True'),
             _mutual_contact :: !(Maybe True'),
             _deleted :: !(Maybe True'),
             _bot :: !(Maybe True'),
             _bot_chat_history :: !(Maybe True'),
             _bot_nochats :: !(Maybe True'),
             _verified :: !(Maybe True'),
             _restricted :: !(Maybe True'),
             _min :: !(Maybe True'),
             _bot_inline_geo :: !(Maybe True'),
             _support :: !(Maybe True'),
             _scam :: !(Maybe True'),
             _apply_min_photo :: !(Maybe True'),
             _fake :: !(Maybe True'),
             _bot_attach_menu :: !(Maybe True'),
             _premium :: !(Maybe True'),
             _attach_menu_enabled :: !(Maybe True'),
             _bot_can_edit :: !(Maybe True'),
             _close_friend :: !(Maybe True'),
             _stories_hidden :: !(Maybe True'),
             _stories_unavailable :: !(Maybe True'),
             _id :: !Long',
             _access_hash :: !(Maybe Long'),
             _first_name :: !(Maybe String'),
             _last_name :: !(Maybe String'),
             _username :: !(Maybe String'),
             _phone :: !(Maybe String'),
             _photo :: !(Maybe UserProfilePhoto),
             _status :: !(Maybe UserStatus),
             _bot_info_version :: !(Maybe Int'),
             _restriction_reason :: !(Maybe (Vector RestrictionReason)),
             _bot_inline_placeholder :: !(Maybe String'),
             _lang_code :: !(Maybe String'),
             _emoji_status :: !(Maybe EmojiStatus),
             _usernames :: !(Maybe (Vector Username)),
             _stories_max_id :: !(Maybe Int'),
             _color :: !(Maybe PeerColor),
             _profile_color :: !(Maybe PeerColor)}
data UserEmpty' = UserEmpty' {_id :: !Long'}
instance Data.Binary.Binary User
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {559694904 -> fmap User Data.Binary.get;
                      3552332666 -> fmap UserEmpty Data.Binary.get}};
           put (User tmp_1) = do {Data.Binary.Put.putWord32le 559694904;
                                  Data.Binary.put tmp_1};
           put (UserEmpty tmp_2) = do {Data.Binary.Put.putWord32le 3552332666;
                                       Data.Binary.put tmp_2}}
instance Data.Binary.Binary UserFull'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _blocked_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _phone_calls_available_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 4);
                     _phone_calls_private_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 5);
                     _can_pin_message_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 7);
                     _has_scheduled_5 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 12);
                     _video_calls_available_6 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 13);
                     _voice_messages_forbidden_7 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 20);
                     _translations_disabled_8 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 23);
                     _stories_pinned_available_9 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 26);
                     _blocked_my_stories_from_10 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 27);
                     _wallpaper_overridden_11 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 28);
                     _id_12 <- Data.Binary.get;
                     _about_13 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _settings_14 <- Data.Binary.get;
                     _personal_photo_15 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 21);
                     _profile_photo_16 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _fallback_photo_17 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 22);
                     _notify_settings_18 <- Data.Binary.get;
                     _bot_info_19 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     _pinned_msg_id_20 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 6);
                     _common_chats_count_21 <- Data.Binary.get;
                     _folder_id_22 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 11);
                     _ttl_period_23 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 14);
                     _theme_emoticon_24 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 15);
                     _private_forward_name_25 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 16);
                     _bot_group_admin_rights_26 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 17);
                     _bot_broadcast_admin_rights_27 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 18);
                     _premium_gifts_28 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 19);
                     _wallpaper_29 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 24);
                     _stories_30 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 25);
                     GHC.Base.pure (UserFull' _blocked_1 _phone_calls_available_2 _phone_calls_private_3 _can_pin_message_4 _has_scheduled_5 _video_calls_available_6 _voice_messages_forbidden_7 _translations_disabled_8 _stories_pinned_available_9 _blocked_my_stories_from_10 _wallpaper_overridden_11 _id_12 _about_13 _settings_14 _personal_photo_15 _profile_photo_16 _fallback_photo_17 _notify_settings_18 _bot_info_19 _pinned_msg_id_20 _common_chats_count_21 _folder_id_22 _ttl_period_23 _theme_emoticon_24 _private_forward_name_25 _bot_group_admin_rights_26 _bot_broadcast_admin_rights_27 _premium_gifts_28 _wallpaper_29 _stories_30)};
           put to_be_encoded_31 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_31._stories,
                                                               25),
                                                              (Data.Maybe.isJust to_be_encoded_31._wallpaper,
                                                               24),
                                                              (Data.Maybe.isJust to_be_encoded_31._premium_gifts,
                                                               19),
                                                              (Data.Maybe.isJust to_be_encoded_31._bot_broadcast_admin_rights,
                                                               18),
                                                              (Data.Maybe.isJust to_be_encoded_31._bot_group_admin_rights,
                                                               17),
                                                              (Data.Maybe.isJust to_be_encoded_31._private_forward_name,
                                                               16),
                                                              (Data.Maybe.isJust to_be_encoded_31._theme_emoticon,
                                                               15),
                                                              (Data.Maybe.isJust to_be_encoded_31._ttl_period,
                                                               14),
                                                              (Data.Maybe.isJust to_be_encoded_31._folder_id,
                                                               11),
                                                              (Data.Maybe.isJust to_be_encoded_31._pinned_msg_id,
                                                               6),
                                                              (Data.Maybe.isJust to_be_encoded_31._bot_info,
                                                               3),
                                                              (Data.Maybe.isJust to_be_encoded_31._fallback_photo,
                                                               22),
                                                              (Data.Maybe.isJust to_be_encoded_31._profile_photo,
                                                               2),
                                                              (Data.Maybe.isJust to_be_encoded_31._personal_photo,
                                                               21),
                                                              (Data.Maybe.isJust to_be_encoded_31._about,
                                                               1),
                                                              (Data.Maybe.isJust to_be_encoded_31._wallpaper_overridden,
                                                               28),
                                                              (Data.Maybe.isJust to_be_encoded_31._blocked_my_stories_from,
                                                               27),
                                                              (Data.Maybe.isJust to_be_encoded_31._stories_pinned_available,
                                                               26),
                                                              (Data.Maybe.isJust to_be_encoded_31._translations_disabled,
                                                               23),
                                                              (Data.Maybe.isJust to_be_encoded_31._voice_messages_forbidden,
                                                               20),
                                                              (Data.Maybe.isJust to_be_encoded_31._video_calls_available,
                                                               13),
                                                              (Data.Maybe.isJust to_be_encoded_31._has_scheduled,
                                                               12),
                                                              (Data.Maybe.isJust to_be_encoded_31._can_pin_message,
                                                               7),
                                                              (Data.Maybe.isJust to_be_encoded_31._phone_calls_private,
                                                               5),
                                                              (Data.Maybe.isJust to_be_encoded_31._phone_calls_available,
                                                               4),
                                                              (Data.Maybe.isJust to_be_encoded_31._blocked,
                                                               0)];
                                      Data.Binary.put to_be_encoded_31._blocked;
                                      Data.Binary.put to_be_encoded_31._phone_calls_available;
                                      Data.Binary.put to_be_encoded_31._phone_calls_private;
                                      Data.Binary.put to_be_encoded_31._can_pin_message;
                                      Data.Binary.put to_be_encoded_31._has_scheduled;
                                      Data.Binary.put to_be_encoded_31._video_calls_available;
                                      Data.Binary.put to_be_encoded_31._voice_messages_forbidden;
                                      Data.Binary.put to_be_encoded_31._translations_disabled;
                                      Data.Binary.put to_be_encoded_31._stories_pinned_available;
                                      Data.Binary.put to_be_encoded_31._blocked_my_stories_from;
                                      Data.Binary.put to_be_encoded_31._wallpaper_overridden;
                                      Data.Binary.put to_be_encoded_31._id;
                                      Data.Binary.put to_be_encoded_31._about;
                                      Data.Binary.put to_be_encoded_31._settings;
                                      Data.Binary.put to_be_encoded_31._personal_photo;
                                      Data.Binary.put to_be_encoded_31._profile_photo;
                                      Data.Binary.put to_be_encoded_31._fallback_photo;
                                      Data.Binary.put to_be_encoded_31._notify_settings;
                                      Data.Binary.put to_be_encoded_31._bot_info;
                                      Data.Binary.put to_be_encoded_31._pinned_msg_id;
                                      Data.Binary.put to_be_encoded_31._common_chats_count;
                                      Data.Binary.put to_be_encoded_31._folder_id;
                                      Data.Binary.put to_be_encoded_31._ttl_period;
                                      Data.Binary.put to_be_encoded_31._theme_emoticon;
                                      Data.Binary.put to_be_encoded_31._private_forward_name;
                                      Data.Binary.put to_be_encoded_31._bot_group_admin_rights;
                                      Data.Binary.put to_be_encoded_31._bot_broadcast_admin_rights;
                                      Data.Binary.put to_be_encoded_31._premium_gifts;
                                      Data.Binary.put to_be_encoded_31._wallpaper;
                                      Data.Binary.put to_be_encoded_31._stories}}
data UserFull = UserFull !UserFull'
data UserFull'
    = UserFull' {_blocked :: !(Maybe True'),
                 _phone_calls_available :: !(Maybe True'),
                 _phone_calls_private :: !(Maybe True'),
                 _can_pin_message :: !(Maybe True'),
                 _has_scheduled :: !(Maybe True'),
                 _video_calls_available :: !(Maybe True'),
                 _voice_messages_forbidden :: !(Maybe True'),
                 _translations_disabled :: !(Maybe True'),
                 _stories_pinned_available :: !(Maybe True'),
                 _blocked_my_stories_from :: !(Maybe True'),
                 _wallpaper_overridden :: !(Maybe True'),
                 _id :: !Long',
                 _about :: !(Maybe String'),
                 _settings :: !PeerSettings,
                 _personal_photo :: !(Maybe Photo),
                 _profile_photo :: !(Maybe Photo),
                 _fallback_photo :: !(Maybe Photo),
                 _notify_settings :: !PeerNotifySettings,
                 _bot_info :: !(Maybe BotInfo),
                 _pinned_msg_id :: !(Maybe Int'),
                 _common_chats_count :: !Int',
                 _folder_id :: !(Maybe Int'),
                 _ttl_period :: !(Maybe Int'),
                 _theme_emoticon :: !(Maybe String'),
                 _private_forward_name :: !(Maybe String'),
                 _bot_group_admin_rights :: !(Maybe ChatAdminRights),
                 _bot_broadcast_admin_rights :: !(Maybe ChatAdminRights),
                 _premium_gifts :: !(Maybe (Vector PremiumGiftOption)),
                 _wallpaper :: !(Maybe WallPaper),
                 _stories :: !(Maybe PeerStories)}
instance Data.Binary.Binary UserFull
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3115396204 -> fmap UserFull Data.Binary.get}};
           put (UserFull tmp_1) = do {Data.Binary.Put.putWord32le 3115396204;
                                      Data.Binary.put tmp_1}}
instance Data.Binary.Binary UserProfilePhoto'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _has_video_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _personal_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _photo_id_3 <- Data.Binary.get;
                     _stripped_thumb_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _dc_id_5 <- Data.Binary.get;
                     GHC.Base.pure (UserProfilePhoto' _has_video_1 _personal_2 _photo_id_3 _stripped_thumb_4 _dc_id_5)};
           put to_be_encoded_6 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_6._stripped_thumb,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_6._personal,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_6._has_video,
                                                              0)];
                                     Data.Binary.put to_be_encoded_6._has_video;
                                     Data.Binary.put to_be_encoded_6._personal;
                                     Data.Binary.put to_be_encoded_6._photo_id;
                                     Data.Binary.put to_be_encoded_6._stripped_thumb;
                                     Data.Binary.put to_be_encoded_6._dc_id}}
instance Data.Binary.Binary UserProfilePhotoEmpty'
    where {get = GHC.Base.pure UserProfilePhotoEmpty';
           put to_be_encoded_0 = do GHC.Base.pure ()}
data UserProfilePhoto
    = UserProfilePhoto !UserProfilePhoto'
    | UserProfilePhotoEmpty !UserProfilePhotoEmpty'
data UserProfilePhoto'
    = UserProfilePhoto' {_has_video :: !(Maybe True'),
                         _personal :: !(Maybe True'),
                         _photo_id :: !Long',
                         _stripped_thumb :: !(Maybe Bytes'),
                         _dc_id :: !Int'}
data UserProfilePhotoEmpty' = UserProfilePhotoEmpty' {}
instance Data.Binary.Binary UserProfilePhoto
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2194798342 -> fmap UserProfilePhoto Data.Binary.get;
                      1326562017 -> fmap UserProfilePhotoEmpty Data.Binary.get}};
           put (UserProfilePhoto tmp_1) = do {Data.Binary.Put.putWord32le 2194798342;
                                              Data.Binary.put tmp_1};
           put (UserProfilePhotoEmpty tmp_2) = do {Data.Binary.Put.putWord32le 1326562017;
                                                   Data.Binary.put tmp_2}}
instance Data.Binary.Binary UserStatusEmpty'
    where {get = GHC.Base.pure UserStatusEmpty';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary UserStatusLastMonth'
    where {get = GHC.Base.pure UserStatusLastMonth';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary UserStatusLastWeek'
    where {get = GHC.Base.pure UserStatusLastWeek';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary UserStatusOffline'
    where {get = do {_was_online_0 <- Data.Binary.get;
                     GHC.Base.pure (UserStatusOffline' _was_online_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._was_online}
instance Data.Binary.Binary UserStatusOnline'
    where {get = do {_expires_0 <- Data.Binary.get;
                     GHC.Base.pure (UserStatusOnline' _expires_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._expires}
instance Data.Binary.Binary UserStatusRecently'
    where {get = GHC.Base.pure UserStatusRecently';
           put to_be_encoded_0 = do GHC.Base.pure ()}
data UserStatus
    = UserStatusEmpty !UserStatusEmpty'
    | UserStatusLastMonth !UserStatusLastMonth'
    | UserStatusLastWeek !UserStatusLastWeek'
    | UserStatusOffline !UserStatusOffline'
    | UserStatusOnline !UserStatusOnline'
    | UserStatusRecently !UserStatusRecently'
data UserStatusEmpty' = UserStatusEmpty' {}
data UserStatusLastMonth' = UserStatusLastMonth' {}
data UserStatusLastWeek' = UserStatusLastWeek' {}
data UserStatusOffline' = UserStatusOffline' {_was_online :: !Int'}
data UserStatusOnline' = UserStatusOnline' {_expires :: !Int'}
data UserStatusRecently' = UserStatusRecently' {}
instance Data.Binary.Binary UserStatus
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {164646985 -> fmap UserStatusEmpty Data.Binary.get;
                      2011940674 -> fmap UserStatusLastMonth Data.Binary.get;
                      129960444 -> fmap UserStatusLastWeek Data.Binary.get;
                      9203775 -> fmap UserStatusOffline Data.Binary.get;
                      3988339017 -> fmap UserStatusOnline Data.Binary.get;
                      3798942449 -> fmap UserStatusRecently Data.Binary.get}};
           put (UserStatusEmpty tmp_1) = do {Data.Binary.Put.putWord32le 164646985;
                                             Data.Binary.put tmp_1};
           put (UserStatusLastMonth tmp_2) = do {Data.Binary.Put.putWord32le 2011940674;
                                                 Data.Binary.put tmp_2};
           put (UserStatusLastWeek tmp_3) = do {Data.Binary.Put.putWord32le 129960444;
                                                Data.Binary.put tmp_3};
           put (UserStatusOffline tmp_4) = do {Data.Binary.Put.putWord32le 9203775;
                                               Data.Binary.put tmp_4};
           put (UserStatusOnline tmp_5) = do {Data.Binary.Put.putWord32le 3988339017;
                                              Data.Binary.put tmp_5};
           put (UserStatusRecently tmp_6) = do {Data.Binary.Put.putWord32le 3798942449;
                                                Data.Binary.put tmp_6}}
instance Data.Binary.Binary Username'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _editable_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _active_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _username_3 <- Data.Binary.get;
                     GHC.Base.pure (Username' _editable_1 _active_2 _username_3)};
           put to_be_encoded_4 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_4._active,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_4._editable,
                                                              0)];
                                     Data.Binary.put to_be_encoded_4._editable;
                                     Data.Binary.put to_be_encoded_4._active;
                                     Data.Binary.put to_be_encoded_4._username}}
data Username = Username !Username'
data Username'
    = Username' {_editable :: !(Maybe True'),
                 _active :: !(Maybe True'),
                 _username :: !String'}
instance Data.Binary.Binary Username
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3020371527 -> fmap Username Data.Binary.get}};
           put (Username tmp_1) = do {Data.Binary.Put.putWord32le 3020371527;
                                      Data.Binary.put tmp_1}}
instance Data.Binary.Binary VideoSize'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _type_1 <- Data.Binary.get;
                     _w_2 <- Data.Binary.get;
                     _h_3 <- Data.Binary.get;
                     _size_4 <- Data.Binary.get;
                     _video_start_ts_5 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     GHC.Base.pure (VideoSize' _type_1 _w_2 _h_3 _size_4 _video_start_ts_5)};
           put to_be_encoded_6 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_6._video_start_ts,
                                                              0)];
                                     Data.Binary.put to_be_encoded_6._type;
                                     Data.Binary.put to_be_encoded_6._w;
                                     Data.Binary.put to_be_encoded_6._h;
                                     Data.Binary.put to_be_encoded_6._size;
                                     Data.Binary.put to_be_encoded_6._video_start_ts}}
instance Data.Binary.Binary VideoSizeEmojiMarkup'
    where {get = do {_emoji_id_0 <- Data.Binary.get;
                     _background_colors_1 <- Data.Binary.get;
                     GHC.Base.pure (VideoSizeEmojiMarkup' _emoji_id_0 _background_colors_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._emoji_id;
                                     Data.Binary.put to_be_encoded_2._background_colors}}
instance Data.Binary.Binary VideoSizeStickerMarkup'
    where {get = do {_stickerset_0 <- Data.Binary.get;
                     _sticker_id_1 <- Data.Binary.get;
                     _background_colors_2 <- Data.Binary.get;
                     GHC.Base.pure (VideoSizeStickerMarkup' _stickerset_0 _sticker_id_1 _background_colors_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._stickerset;
                                     Data.Binary.put to_be_encoded_3._sticker_id;
                                     Data.Binary.put to_be_encoded_3._background_colors}}
data VideoSize
    = VideoSize !VideoSize'
    | VideoSizeEmojiMarkup !VideoSizeEmojiMarkup'
    | VideoSizeStickerMarkup !VideoSizeStickerMarkup'
data VideoSize'
    = VideoSize' {_type :: !String',
                  _w :: !Int',
                  _h :: !Int',
                  _size :: !Int',
                  _video_start_ts :: !(Maybe Double')}
data VideoSizeEmojiMarkup'
    = VideoSizeEmojiMarkup' {_emoji_id :: !Long',
                             _background_colors :: !(Vector Int')}
data VideoSizeStickerMarkup'
    = VideoSizeStickerMarkup' {_stickerset :: !InputStickerSet,
                               _sticker_id :: !Long',
                               _background_colors :: !(Vector Int')}
instance Data.Binary.Binary VideoSize
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3727929492 -> fmap VideoSize Data.Binary.get;
                      4166795580 -> fmap VideoSizeEmojiMarkup Data.Binary.get;
                      228623102 -> fmap VideoSizeStickerMarkup Data.Binary.get}};
           put (VideoSize tmp_1) = do {Data.Binary.Put.putWord32le 3727929492;
                                       Data.Binary.put tmp_1};
           put (VideoSizeEmojiMarkup tmp_2) = do {Data.Binary.Put.putWord32le 4166795580;
                                                  Data.Binary.put tmp_2};
           put (VideoSizeStickerMarkup tmp_3) = do {Data.Binary.Put.putWord32le 228623102;
                                                    Data.Binary.put tmp_3}}
instance Data.Binary.Binary WallPaper'
    where {get = do {_id_0 <- Data.Binary.get;
                     _flags_1 <- Data.Binary.Get.getWord32le;
                     _creator_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                     _default_3 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 1);
                     _pattern_4 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 3);
                     _dark_5 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 4);
                     _access_hash_6 <- Data.Binary.get;
                     _slug_7 <- Data.Binary.get;
                     _document_8 <- Data.Binary.get;
                     _settings_9 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 2);
                     GHC.Base.pure (WallPaper' _id_0 _creator_2 _default_3 _pattern_4 _dark_5 _access_hash_6 _slug_7 _document_8 _settings_9)};
           put to_be_encoded_10 = do {Data.Binary.put to_be_encoded_10._id;
                                      Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_10._settings,
                                                               2),
                                                              (Data.Maybe.isJust to_be_encoded_10._dark,
                                                               4),
                                                              (Data.Maybe.isJust to_be_encoded_10._pattern,
                                                               3),
                                                              (Data.Maybe.isJust to_be_encoded_10._default,
                                                               1),
                                                              (Data.Maybe.isJust to_be_encoded_10._creator,
                                                               0)];
                                      Data.Binary.put to_be_encoded_10._creator;
                                      Data.Binary.put to_be_encoded_10._default;
                                      Data.Binary.put to_be_encoded_10._pattern;
                                      Data.Binary.put to_be_encoded_10._dark;
                                      Data.Binary.put to_be_encoded_10._access_hash;
                                      Data.Binary.put to_be_encoded_10._slug;
                                      Data.Binary.put to_be_encoded_10._document;
                                      Data.Binary.put to_be_encoded_10._settings}}
instance Data.Binary.Binary WallPaperNoFile'
    where {get = do {_id_0 <- Data.Binary.get;
                     _flags_1 <- Data.Binary.Get.getWord32le;
                     _default_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 1);
                     _dark_3 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 4);
                     _settings_4 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 2);
                     GHC.Base.pure (WallPaperNoFile' _id_0 _default_2 _dark_3 _settings_4)};
           put to_be_encoded_5 = do {Data.Binary.put to_be_encoded_5._id;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_5._settings,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_5._dark,
                                                              4),
                                                             (Data.Maybe.isJust to_be_encoded_5._default,
                                                              1)];
                                     Data.Binary.put to_be_encoded_5._default;
                                     Data.Binary.put to_be_encoded_5._dark;
                                     Data.Binary.put to_be_encoded_5._settings}}
data WallPaper
    = WallPaper !WallPaper'
    | WallPaperNoFile !WallPaperNoFile'
data WallPaper'
    = WallPaper' {_id :: !Long',
                  _creator :: !(Maybe True'),
                  _default :: !(Maybe True'),
                  _pattern :: !(Maybe True'),
                  _dark :: !(Maybe True'),
                  _access_hash :: !Long',
                  _slug :: !String',
                  _document :: !Document,
                  _settings :: !(Maybe WallPaperSettings)}
data WallPaperNoFile'
    = WallPaperNoFile' {_id :: !Long',
                        _default :: !(Maybe True'),
                        _dark :: !(Maybe True'),
                        _settings :: !(Maybe WallPaperSettings)}
instance Data.Binary.Binary WallPaper
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2755118061 -> fmap WallPaper Data.Binary.get;
                      3766501654 -> fmap WallPaperNoFile Data.Binary.get}};
           put (WallPaper tmp_1) = do {Data.Binary.Put.putWord32le 2755118061;
                                       Data.Binary.put tmp_1};
           put (WallPaperNoFile tmp_2) = do {Data.Binary.Put.putWord32le 3766501654;
                                             Data.Binary.put tmp_2}}
instance Data.Binary.Binary WallPaperSettings'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _blur_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _motion_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _background_color_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _second_background_color_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 4);
                     _third_background_color_5 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 5);
                     _fourth_background_color_6 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 6);
                     _intensity_7 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     _rotation_8 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 4);
                     _emoticon_9 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 7);
                     GHC.Base.pure (WallPaperSettings' _blur_1 _motion_2 _background_color_3 _second_background_color_4 _third_background_color_5 _fourth_background_color_6 _intensity_7 _rotation_8 _emoticon_9)};
           put to_be_encoded_10 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_10._emoticon,
                                                               7),
                                                              (Data.Maybe.isJust to_be_encoded_10._rotation,
                                                               4),
                                                              (Data.Maybe.isJust to_be_encoded_10._intensity,
                                                               3),
                                                              (Data.Maybe.isJust to_be_encoded_10._fourth_background_color,
                                                               6),
                                                              (Data.Maybe.isJust to_be_encoded_10._third_background_color,
                                                               5),
                                                              (Data.Maybe.isJust to_be_encoded_10._second_background_color,
                                                               4),
                                                              (Data.Maybe.isJust to_be_encoded_10._background_color,
                                                               0),
                                                              (Data.Maybe.isJust to_be_encoded_10._motion,
                                                               2),
                                                              (Data.Maybe.isJust to_be_encoded_10._blur,
                                                               1)];
                                      Data.Binary.put to_be_encoded_10._blur;
                                      Data.Binary.put to_be_encoded_10._motion;
                                      Data.Binary.put to_be_encoded_10._background_color;
                                      Data.Binary.put to_be_encoded_10._second_background_color;
                                      Data.Binary.put to_be_encoded_10._third_background_color;
                                      Data.Binary.put to_be_encoded_10._fourth_background_color;
                                      Data.Binary.put to_be_encoded_10._intensity;
                                      Data.Binary.put to_be_encoded_10._rotation;
                                      Data.Binary.put to_be_encoded_10._emoticon}}
data WallPaperSettings = WallPaperSettings !WallPaperSettings'
data WallPaperSettings'
    = WallPaperSettings' {_blur :: !(Maybe True'),
                          _motion :: !(Maybe True'),
                          _background_color :: !(Maybe Int'),
                          _second_background_color :: !(Maybe Int'),
                          _third_background_color :: !(Maybe Int'),
                          _fourth_background_color :: !(Maybe Int'),
                          _intensity :: !(Maybe Int'),
                          _rotation :: !(Maybe Int'),
                          _emoticon :: !(Maybe String')}
instance Data.Binary.Binary WallPaperSettings
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {925826256 -> fmap WallPaperSettings Data.Binary.get}};
           put (WallPaperSettings tmp_1) = do {Data.Binary.Put.putWord32le 925826256;
                                               Data.Binary.put tmp_1}}
instance Data.Binary.Binary WebAuthorization'
    where {get = do {_hash_0 <- Data.Binary.get;
                     _bot_id_1 <- Data.Binary.get;
                     _domain_2 <- Data.Binary.get;
                     _browser_3 <- Data.Binary.get;
                     _platform_4 <- Data.Binary.get;
                     _date_created_5 <- Data.Binary.get;
                     _date_active_6 <- Data.Binary.get;
                     _ip_7 <- Data.Binary.get;
                     _region_8 <- Data.Binary.get;
                     GHC.Base.pure (WebAuthorization' _hash_0 _bot_id_1 _domain_2 _browser_3 _platform_4 _date_created_5 _date_active_6 _ip_7 _region_8)};
           put to_be_encoded_9 = do {Data.Binary.put to_be_encoded_9._hash;
                                     Data.Binary.put to_be_encoded_9._bot_id;
                                     Data.Binary.put to_be_encoded_9._domain;
                                     Data.Binary.put to_be_encoded_9._browser;
                                     Data.Binary.put to_be_encoded_9._platform;
                                     Data.Binary.put to_be_encoded_9._date_created;
                                     Data.Binary.put to_be_encoded_9._date_active;
                                     Data.Binary.put to_be_encoded_9._ip;
                                     Data.Binary.put to_be_encoded_9._region}}
data WebAuthorization = WebAuthorization !WebAuthorization'
data WebAuthorization'
    = WebAuthorization' {_hash :: !Long',
                         _bot_id :: !Long',
                         _domain :: !String',
                         _browser :: !String',
                         _platform :: !String',
                         _date_created :: !Int',
                         _date_active :: !Int',
                         _ip :: !String',
                         _region :: !String'}
instance Data.Binary.Binary WebAuthorization
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2801333330 -> fmap WebAuthorization Data.Binary.get}};
           put (WebAuthorization tmp_1) = do {Data.Binary.Put.putWord32le 2801333330;
                                              Data.Binary.put tmp_1}}
instance Data.Binary.Binary WebDocument'
    where {get = do {_url_0 <- Data.Binary.get;
                     _access_hash_1 <- Data.Binary.get;
                     _size_2 <- Data.Binary.get;
                     _mime_type_3 <- Data.Binary.get;
                     _attributes_4 <- Data.Binary.get;
                     GHC.Base.pure (WebDocument' _url_0 _access_hash_1 _size_2 _mime_type_3 _attributes_4)};
           put to_be_encoded_5 = do {Data.Binary.put to_be_encoded_5._url;
                                     Data.Binary.put to_be_encoded_5._access_hash;
                                     Data.Binary.put to_be_encoded_5._size;
                                     Data.Binary.put to_be_encoded_5._mime_type;
                                     Data.Binary.put to_be_encoded_5._attributes}}
instance Data.Binary.Binary WebDocumentNoProxy'
    where {get = do {_url_0 <- Data.Binary.get;
                     _size_1 <- Data.Binary.get;
                     _mime_type_2 <- Data.Binary.get;
                     _attributes_3 <- Data.Binary.get;
                     GHC.Base.pure (WebDocumentNoProxy' _url_0 _size_1 _mime_type_2 _attributes_3)};
           put to_be_encoded_4 = do {Data.Binary.put to_be_encoded_4._url;
                                     Data.Binary.put to_be_encoded_4._size;
                                     Data.Binary.put to_be_encoded_4._mime_type;
                                     Data.Binary.put to_be_encoded_4._attributes}}
data WebDocument
    = WebDocument !WebDocument'
    | WebDocumentNoProxy !WebDocumentNoProxy'
data WebDocument'
    = WebDocument' {_url :: !String',
                    _access_hash :: !Long',
                    _size :: !Int',
                    _mime_type :: !String',
                    _attributes :: !(Vector DocumentAttribute)}
data WebDocumentNoProxy'
    = WebDocumentNoProxy' {_url :: !String',
                           _size :: !Int',
                           _mime_type :: !String',
                           _attributes :: !(Vector DocumentAttribute)}
instance Data.Binary.Binary WebDocument
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {475467473 -> fmap WebDocument Data.Binary.get;
                      4190682310 -> fmap WebDocumentNoProxy Data.Binary.get}};
           put (WebDocument tmp_1) = do {Data.Binary.Put.putWord32le 475467473;
                                         Data.Binary.put tmp_1};
           put (WebDocumentNoProxy tmp_2) = do {Data.Binary.Put.putWord32le 4190682310;
                                                Data.Binary.put tmp_2}}
instance Data.Binary.Binary WebPage'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _has_large_media_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 13);
                     _id_2 <- Data.Binary.get;
                     _url_3 <- Data.Binary.get;
                     _display_url_4 <- Data.Binary.get;
                     _hash_5 <- Data.Binary.get;
                     _type_6 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _site_name_7 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _title_8 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _description_9 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     _photo_10 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 4);
                     _embed_url_11 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 5);
                     _embed_type_12 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 5);
                     _embed_width_13 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 6);
                     _embed_height_14 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 6);
                     _duration_15 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 7);
                     _author_16 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 8);
                     _document_17 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 9);
                     _cached_page_18 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 10);
                     _attributes_19 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 12);
                     GHC.Base.pure (WebPage' _has_large_media_1 _id_2 _url_3 _display_url_4 _hash_5 _type_6 _site_name_7 _title_8 _description_9 _photo_10 _embed_url_11 _embed_type_12 _embed_width_13 _embed_height_14 _duration_15 _author_16 _document_17 _cached_page_18 _attributes_19)};
           put to_be_encoded_20 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_20._attributes,
                                                               12),
                                                              (Data.Maybe.isJust to_be_encoded_20._cached_page,
                                                               10),
                                                              (Data.Maybe.isJust to_be_encoded_20._document,
                                                               9),
                                                              (Data.Maybe.isJust to_be_encoded_20._author,
                                                               8),
                                                              (Data.Maybe.isJust to_be_encoded_20._duration,
                                                               7),
                                                              (Data.Maybe.isJust to_be_encoded_20._embed_height,
                                                               6),
                                                              (Data.Maybe.isJust to_be_encoded_20._embed_width,
                                                               6),
                                                              (Data.Maybe.isJust to_be_encoded_20._embed_type,
                                                               5),
                                                              (Data.Maybe.isJust to_be_encoded_20._embed_url,
                                                               5),
                                                              (Data.Maybe.isJust to_be_encoded_20._photo,
                                                               4),
                                                              (Data.Maybe.isJust to_be_encoded_20._description,
                                                               3),
                                                              (Data.Maybe.isJust to_be_encoded_20._title,
                                                               2),
                                                              (Data.Maybe.isJust to_be_encoded_20._site_name,
                                                               1),
                                                              (Data.Maybe.isJust to_be_encoded_20._type,
                                                               0),
                                                              (Data.Maybe.isJust to_be_encoded_20._has_large_media,
                                                               13)];
                                      Data.Binary.put to_be_encoded_20._has_large_media;
                                      Data.Binary.put to_be_encoded_20._id;
                                      Data.Binary.put to_be_encoded_20._url;
                                      Data.Binary.put to_be_encoded_20._display_url;
                                      Data.Binary.put to_be_encoded_20._hash;
                                      Data.Binary.put to_be_encoded_20._type;
                                      Data.Binary.put to_be_encoded_20._site_name;
                                      Data.Binary.put to_be_encoded_20._title;
                                      Data.Binary.put to_be_encoded_20._description;
                                      Data.Binary.put to_be_encoded_20._photo;
                                      Data.Binary.put to_be_encoded_20._embed_url;
                                      Data.Binary.put to_be_encoded_20._embed_type;
                                      Data.Binary.put to_be_encoded_20._embed_width;
                                      Data.Binary.put to_be_encoded_20._embed_height;
                                      Data.Binary.put to_be_encoded_20._duration;
                                      Data.Binary.put to_be_encoded_20._author;
                                      Data.Binary.put to_be_encoded_20._document;
                                      Data.Binary.put to_be_encoded_20._cached_page;
                                      Data.Binary.put to_be_encoded_20._attributes}}
instance Data.Binary.Binary WebPageEmpty'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _id_1 <- Data.Binary.get;
                     _url_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     GHC.Base.pure (WebPageEmpty' _id_1 _url_2)};
           put to_be_encoded_3 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_3._url,
                                                              0)];
                                     Data.Binary.put to_be_encoded_3._id;
                                     Data.Binary.put to_be_encoded_3._url}}
instance Data.Binary.Binary WebPageNotModified'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _cached_page_views_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     GHC.Base.pure (WebPageNotModified' _cached_page_views_1)};
           put to_be_encoded_2 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_2._cached_page_views,
                                                              0)];
                                     Data.Binary.put to_be_encoded_2._cached_page_views}}
instance Data.Binary.Binary WebPagePending'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _id_1 <- Data.Binary.get;
                     _url_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _date_3 <- Data.Binary.get;
                     GHC.Base.pure (WebPagePending' _id_1 _url_2 _date_3)};
           put to_be_encoded_4 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_4._url,
                                                              0)];
                                     Data.Binary.put to_be_encoded_4._id;
                                     Data.Binary.put to_be_encoded_4._url;
                                     Data.Binary.put to_be_encoded_4._date}}
data WebPage
    = WebPage !WebPage'
    | WebPageEmpty !WebPageEmpty'
    | WebPageNotModified !WebPageNotModified'
    | WebPagePending !WebPagePending'
data WebPage'
    = WebPage' {_has_large_media :: !(Maybe True'),
                _id :: !Long',
                _url :: !String',
                _display_url :: !String',
                _hash :: !Int',
                _type :: !(Maybe String'),
                _site_name :: !(Maybe String'),
                _title :: !(Maybe String'),
                _description :: !(Maybe String'),
                _photo :: !(Maybe Photo),
                _embed_url :: !(Maybe String'),
                _embed_type :: !(Maybe String'),
                _embed_width :: !(Maybe Int'),
                _embed_height :: !(Maybe Int'),
                _duration :: !(Maybe Int'),
                _author :: !(Maybe String'),
                _document :: !(Maybe Document),
                _cached_page :: !(Maybe Page),
                _attributes :: !(Maybe (Vector WebPageAttribute))}
data WebPageEmpty'
    = WebPageEmpty' {_id :: !Long', _url :: !(Maybe String')}
data WebPageNotModified'
    = WebPageNotModified' {_cached_page_views :: !(Maybe Int')}
data WebPagePending'
    = WebPagePending' {_id :: !Long',
                       _url :: !(Maybe String'),
                       _date :: !Int'}
instance Data.Binary.Binary WebPage
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3902555570 -> fmap WebPage Data.Binary.get;
                      555358088 -> fmap WebPageEmpty Data.Binary.get;
                      1930545681 -> fmap WebPageNotModified Data.Binary.get;
                      2966502983 -> fmap WebPagePending Data.Binary.get}};
           put (WebPage tmp_1) = do {Data.Binary.Put.putWord32le 3902555570;
                                     Data.Binary.put tmp_1};
           put (WebPageEmpty tmp_2) = do {Data.Binary.Put.putWord32le 555358088;
                                          Data.Binary.put tmp_2};
           put (WebPageNotModified tmp_3) = do {Data.Binary.Put.putWord32le 1930545681;
                                                Data.Binary.put tmp_3};
           put (WebPagePending tmp_4) = do {Data.Binary.Put.putWord32le 2966502983;
                                            Data.Binary.put tmp_4}}
instance Data.Binary.Binary WebPageAttributeStory'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _peer_1 <- Data.Binary.get;
                     _id_2 <- Data.Binary.get;
                     _story_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     GHC.Base.pure (WebPageAttributeStory' _peer_1 _id_2 _story_3)};
           put to_be_encoded_4 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_4._story,
                                                              0)];
                                     Data.Binary.put to_be_encoded_4._peer;
                                     Data.Binary.put to_be_encoded_4._id;
                                     Data.Binary.put to_be_encoded_4._story}}
instance Data.Binary.Binary WebPageAttributeTheme'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _documents_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _settings_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     GHC.Base.pure (WebPageAttributeTheme' _documents_1 _settings_2)};
           put to_be_encoded_3 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_3._settings,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_3._documents,
                                                              0)];
                                     Data.Binary.put to_be_encoded_3._documents;
                                     Data.Binary.put to_be_encoded_3._settings}}
data WebPageAttribute
    = WebPageAttributeStory !WebPageAttributeStory'
    | WebPageAttributeTheme !WebPageAttributeTheme'
data WebPageAttributeStory'
    = WebPageAttributeStory' {_peer :: !Peer,
                              _id :: !Int',
                              _story :: !(Maybe StoryItem)}
data WebPageAttributeTheme'
    = WebPageAttributeTheme' {_documents :: !(Maybe (Vector Document)),
                              _settings :: !(Maybe ThemeSettings)}
instance Data.Binary.Binary WebPageAttribute
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {781501415 -> fmap WebPageAttributeStory Data.Binary.get;
                      1421174295 -> fmap WebPageAttributeTheme Data.Binary.get}};
           put (WebPageAttributeStory tmp_1) = do {Data.Binary.Put.putWord32le 781501415;
                                                   Data.Binary.put tmp_1};
           put (WebPageAttributeTheme tmp_2) = do {Data.Binary.Put.putWord32le 1421174295;
                                                   Data.Binary.put tmp_2}}
instance Data.Binary.Binary WebViewMessageSent'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _msg_id_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     GHC.Base.pure (WebViewMessageSent' _msg_id_1)};
           put to_be_encoded_2 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_2._msg_id,
                                                              0)];
                                     Data.Binary.put to_be_encoded_2._msg_id}}
data WebViewMessageSent = WebViewMessageSent !WebViewMessageSent'
data WebViewMessageSent'
    = WebViewMessageSent' {_msg_id :: !(Maybe InputBotInlineMessageID)}
instance Data.Binary.Binary WebViewMessageSent
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {211046684 -> fmap WebViewMessageSent Data.Binary.get}};
           put (WebViewMessageSent tmp_1) = do {Data.Binary.Put.putWord32le 211046684;
                                                Data.Binary.put tmp_1}}
instance Data.Binary.Binary WebViewResultUrl'
    where {get = do {_query_id_0 <- Data.Binary.get;
                     _url_1 <- Data.Binary.get;
                     GHC.Base.pure (WebViewResultUrl' _query_id_0 _url_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._query_id;
                                     Data.Binary.put to_be_encoded_2._url}}
data WebViewResult = WebViewResultUrl !WebViewResultUrl'
data WebViewResultUrl'
    = WebViewResultUrl' {_query_id :: !Long', _url :: !String'}
instance Data.Binary.Binary WebViewResult
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {202659196 -> fmap WebViewResultUrl Data.Binary.get}};
           put (WebViewResultUrl tmp_1) = do {Data.Binary.Put.putWord32le 202659196;
                                              Data.Binary.put tmp_1}}
instance Data.Binary.Binary Account'authorizationForm'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _required_types_1 <- Data.Binary.get;
                     _values_2 <- Data.Binary.get;
                     _errors_3 <- Data.Binary.get;
                     _users_4 <- Data.Binary.get;
                     _privacy_policy_url_5 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     GHC.Base.pure (Account'authorizationForm' _required_types_1 _values_2 _errors_3 _users_4 _privacy_policy_url_5)};
           put to_be_encoded_6 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_6._privacy_policy_url,
                                                              0)];
                                     Data.Binary.put to_be_encoded_6._required_types;
                                     Data.Binary.put to_be_encoded_6._values;
                                     Data.Binary.put to_be_encoded_6._errors;
                                     Data.Binary.put to_be_encoded_6._users;
                                     Data.Binary.put to_be_encoded_6._privacy_policy_url}}
data Account'AuthorizationForm
    = Account'authorizationForm !Account'authorizationForm'
data Account'authorizationForm'
    = Account'authorizationForm' {_required_types :: !(Vector SecureRequiredType),
                                  _values :: !(Vector SecureValue),
                                  _errors :: !(Vector SecureValueError),
                                  _users :: !(Vector User),
                                  _privacy_policy_url :: !(Maybe String')}
instance Data.Binary.Binary Account'AuthorizationForm
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2905480408 -> fmap Account'authorizationForm Data.Binary.get}};
           put (Account'authorizationForm tmp_1) = do {Data.Binary.Put.putWord32le 2905480408;
                                                       Data.Binary.put tmp_1}}
instance Data.Binary.Binary Account'authorizations'
    where {get = do {_authorization_ttl_days_0 <- Data.Binary.get;
                     _authorizations_1 <- Data.Binary.get;
                     GHC.Base.pure (Account'authorizations' _authorization_ttl_days_0 _authorizations_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._authorization_ttl_days;
                                     Data.Binary.put to_be_encoded_2._authorizations}}
data Account'Authorizations
    = Account'authorizations !Account'authorizations'
data Account'authorizations'
    = Account'authorizations' {_authorization_ttl_days :: !Int',
                               _authorizations :: !(Vector Authorization)}
instance Data.Binary.Binary Account'Authorizations
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1275039392 -> fmap Account'authorizations Data.Binary.get}};
           put (Account'authorizations tmp_1) = do {Data.Binary.Put.putWord32le 1275039392;
                                                    Data.Binary.put tmp_1}}
instance Data.Binary.Binary Account'autoDownloadSettings'
    where {get = do {_low_0 <- Data.Binary.get;
                     _medium_1 <- Data.Binary.get;
                     _high_2 <- Data.Binary.get;
                     GHC.Base.pure (Account'autoDownloadSettings' _low_0 _medium_1 _high_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._low;
                                     Data.Binary.put to_be_encoded_3._medium;
                                     Data.Binary.put to_be_encoded_3._high}}
data Account'AutoDownloadSettings
    = Account'autoDownloadSettings !Account'autoDownloadSettings'
data Account'autoDownloadSettings'
    = Account'autoDownloadSettings' {_low :: !AutoDownloadSettings,
                                     _medium :: !AutoDownloadSettings,
                                     _high :: !AutoDownloadSettings}
instance Data.Binary.Binary Account'AutoDownloadSettings
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1674235686 -> fmap Account'autoDownloadSettings Data.Binary.get}};
           put (Account'autoDownloadSettings tmp_1) = do {Data.Binary.Put.putWord32le 1674235686;
                                                          Data.Binary.put tmp_1}}
instance Data.Binary.Binary Account'autoSaveSettings'
    where {get = do {_users_settings_0 <- Data.Binary.get;
                     _chats_settings_1 <- Data.Binary.get;
                     _broadcasts_settings_2 <- Data.Binary.get;
                     _exceptions_3 <- Data.Binary.get;
                     _chats_4 <- Data.Binary.get;
                     _users_5 <- Data.Binary.get;
                     GHC.Base.pure (Account'autoSaveSettings' _users_settings_0 _chats_settings_1 _broadcasts_settings_2 _exceptions_3 _chats_4 _users_5)};
           put to_be_encoded_6 = do {Data.Binary.put to_be_encoded_6._users_settings;
                                     Data.Binary.put to_be_encoded_6._chats_settings;
                                     Data.Binary.put to_be_encoded_6._broadcasts_settings;
                                     Data.Binary.put to_be_encoded_6._exceptions;
                                     Data.Binary.put to_be_encoded_6._chats;
                                     Data.Binary.put to_be_encoded_6._users}}
data Account'AutoSaveSettings
    = Account'autoSaveSettings !Account'autoSaveSettings'
data Account'autoSaveSettings'
    = Account'autoSaveSettings' {_users_settings :: !AutoSaveSettings,
                                 _chats_settings :: !AutoSaveSettings,
                                 _broadcasts_settings :: !AutoSaveSettings,
                                 _exceptions :: !(Vector AutoSaveException),
                                 _chats :: !(Vector Chat),
                                 _users :: !(Vector User)}
instance Data.Binary.Binary Account'AutoSaveSettings
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1279133341 -> fmap Account'autoSaveSettings Data.Binary.get}};
           put (Account'autoSaveSettings tmp_1) = do {Data.Binary.Put.putWord32le 1279133341;
                                                      Data.Binary.put tmp_1}}
instance Data.Binary.Binary Account'contentSettings'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _sensitive_enabled_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _sensitive_can_change_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     GHC.Base.pure (Account'contentSettings' _sensitive_enabled_1 _sensitive_can_change_2)};
           put to_be_encoded_3 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_3._sensitive_can_change,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_3._sensitive_enabled,
                                                              0)];
                                     Data.Binary.put to_be_encoded_3._sensitive_enabled;
                                     Data.Binary.put to_be_encoded_3._sensitive_can_change}}
data Account'ContentSettings
    = Account'contentSettings !Account'contentSettings'
data Account'contentSettings'
    = Account'contentSettings' {_sensitive_enabled :: !(Maybe True'),
                                _sensitive_can_change :: !(Maybe True')}
instance Data.Binary.Binary Account'ContentSettings
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1474462241 -> fmap Account'contentSettings Data.Binary.get}};
           put (Account'contentSettings tmp_1) = do {Data.Binary.Put.putWord32le 1474462241;
                                                     Data.Binary.put tmp_1}}
instance Data.Binary.Binary Account'emailVerified'
    where {get = do {_email_0 <- Data.Binary.get;
                     GHC.Base.pure (Account'emailVerified' _email_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._email}
instance Data.Binary.Binary Account'emailVerifiedLogin'
    where {get = do {_email_0 <- Data.Binary.get;
                     _sent_code_1 <- Data.Binary.get;
                     GHC.Base.pure (Account'emailVerifiedLogin' _email_0 _sent_code_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._email;
                                     Data.Binary.put to_be_encoded_2._sent_code}}
data Account'EmailVerified
    = Account'emailVerified !Account'emailVerified'
    | Account'emailVerifiedLogin !Account'emailVerifiedLogin'
data Account'emailVerified'
    = Account'emailVerified' {_email :: !String'}
data Account'emailVerifiedLogin'
    = Account'emailVerifiedLogin' {_email :: !String',
                                   _sent_code :: !Auth'SentCode}
instance Data.Binary.Binary Account'EmailVerified
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {731303195 -> fmap Account'emailVerified Data.Binary.get;
                      3787132257 -> fmap Account'emailVerifiedLogin Data.Binary.get}};
           put (Account'emailVerified tmp_1) = do {Data.Binary.Put.putWord32le 731303195;
                                                   Data.Binary.put tmp_1};
           put (Account'emailVerifiedLogin tmp_2) = do {Data.Binary.Put.putWord32le 3787132257;
                                                        Data.Binary.put tmp_2}}
instance Data.Binary.Binary Account'emojiStatuses'
    where {get = do {_hash_0 <- Data.Binary.get;
                     _statuses_1 <- Data.Binary.get;
                     GHC.Base.pure (Account'emojiStatuses' _hash_0 _statuses_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._hash;
                                     Data.Binary.put to_be_encoded_2._statuses}}
instance Data.Binary.Binary Account'emojiStatusesNotModified'
    where {get = GHC.Base.pure Account'emojiStatusesNotModified';
           put to_be_encoded_0 = do GHC.Base.pure ()}
data Account'EmojiStatuses
    = Account'emojiStatuses !Account'emojiStatuses'
    | Account'emojiStatusesNotModified !Account'emojiStatusesNotModified'
data Account'emojiStatuses'
    = Account'emojiStatuses' {_hash :: !Long',
                              _statuses :: !(Vector EmojiStatus)}
data Account'emojiStatusesNotModified'
    = Account'emojiStatusesNotModified' {}
instance Data.Binary.Binary Account'EmojiStatuses
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2428790737 -> fmap Account'emojiStatuses Data.Binary.get;
                      3498894917 -> fmap Account'emojiStatusesNotModified Data.Binary.get}};
           put (Account'emojiStatuses tmp_1) = do {Data.Binary.Put.putWord32le 2428790737;
                                                   Data.Binary.put tmp_1};
           put (Account'emojiStatusesNotModified tmp_2) = do {Data.Binary.Put.putWord32le 3498894917;
                                                              Data.Binary.put tmp_2}}
instance Data.Binary.Binary Account'password'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _has_recovery_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _has_secure_values_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _has_password_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _current_algo_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _srp_B_5 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _srp_id_6 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _hint_7 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     _email_unconfirmed_pattern_8 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 4);
                     _new_algo_9 <- Data.Binary.get;
                     _new_secure_algo_10 <- Data.Binary.get;
                     _secure_random_11 <- Data.Binary.get;
                     _pending_reset_date_12 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 5);
                     _login_email_pattern_13 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 6);
                     GHC.Base.pure (Account'password' _has_recovery_1 _has_secure_values_2 _has_password_3 _current_algo_4 _srp_B_5 _srp_id_6 _hint_7 _email_unconfirmed_pattern_8 _new_algo_9 _new_secure_algo_10 _secure_random_11 _pending_reset_date_12 _login_email_pattern_13)};
           put to_be_encoded_14 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_14._login_email_pattern,
                                                               6),
                                                              (Data.Maybe.isJust to_be_encoded_14._pending_reset_date,
                                                               5),
                                                              (Data.Maybe.isJust to_be_encoded_14._email_unconfirmed_pattern,
                                                               4),
                                                              (Data.Maybe.isJust to_be_encoded_14._hint,
                                                               3),
                                                              (Data.Maybe.isJust to_be_encoded_14._srp_id,
                                                               2),
                                                              (Data.Maybe.isJust to_be_encoded_14._srp_B,
                                                               2),
                                                              (Data.Maybe.isJust to_be_encoded_14._current_algo,
                                                               2),
                                                              (Data.Maybe.isJust to_be_encoded_14._has_password,
                                                               2),
                                                              (Data.Maybe.isJust to_be_encoded_14._has_secure_values,
                                                               1),
                                                              (Data.Maybe.isJust to_be_encoded_14._has_recovery,
                                                               0)];
                                      Data.Binary.put to_be_encoded_14._has_recovery;
                                      Data.Binary.put to_be_encoded_14._has_secure_values;
                                      Data.Binary.put to_be_encoded_14._has_password;
                                      Data.Binary.put to_be_encoded_14._current_algo;
                                      Data.Binary.put to_be_encoded_14._srp_B;
                                      Data.Binary.put to_be_encoded_14._srp_id;
                                      Data.Binary.put to_be_encoded_14._hint;
                                      Data.Binary.put to_be_encoded_14._email_unconfirmed_pattern;
                                      Data.Binary.put to_be_encoded_14._new_algo;
                                      Data.Binary.put to_be_encoded_14._new_secure_algo;
                                      Data.Binary.put to_be_encoded_14._secure_random;
                                      Data.Binary.put to_be_encoded_14._pending_reset_date;
                                      Data.Binary.put to_be_encoded_14._login_email_pattern}}
data Account'Password = Account'password !Account'password'
data Account'password'
    = Account'password' {_has_recovery :: !(Maybe True'),
                         _has_secure_values :: !(Maybe True'),
                         _has_password :: !(Maybe True'),
                         _current_algo :: !(Maybe PasswordKdfAlgo),
                         _srp_B :: !(Maybe Bytes'),
                         _srp_id :: !(Maybe Long'),
                         _hint :: !(Maybe String'),
                         _email_unconfirmed_pattern :: !(Maybe String'),
                         _new_algo :: !PasswordKdfAlgo,
                         _new_secure_algo :: !SecurePasswordKdfAlgo,
                         _secure_random :: !Bytes',
                         _pending_reset_date :: !(Maybe Int'),
                         _login_email_pattern :: !(Maybe String')}
instance Data.Binary.Binary Account'Password
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2507886843 -> fmap Account'password Data.Binary.get}};
           put (Account'password tmp_1) = do {Data.Binary.Put.putWord32le 2507886843;
                                              Data.Binary.put tmp_1}}
instance Data.Binary.Binary Account'passwordInputSettings'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _new_algo_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _new_password_hash_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _hint_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _email_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _new_secure_settings_5 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     GHC.Base.pure (Account'passwordInputSettings' _new_algo_1 _new_password_hash_2 _hint_3 _email_4 _new_secure_settings_5)};
           put to_be_encoded_6 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_6._new_secure_settings,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_6._email,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_6._hint,
                                                              0),
                                                             (Data.Maybe.isJust to_be_encoded_6._new_password_hash,
                                                              0),
                                                             (Data.Maybe.isJust to_be_encoded_6._new_algo,
                                                              0)];
                                     Data.Binary.put to_be_encoded_6._new_algo;
                                     Data.Binary.put to_be_encoded_6._new_password_hash;
                                     Data.Binary.put to_be_encoded_6._hint;
                                     Data.Binary.put to_be_encoded_6._email;
                                     Data.Binary.put to_be_encoded_6._new_secure_settings}}
data Account'PasswordInputSettings
    = Account'passwordInputSettings !Account'passwordInputSettings'
data Account'passwordInputSettings'
    = Account'passwordInputSettings' {_new_algo :: !(Maybe PasswordKdfAlgo),
                                      _new_password_hash :: !(Maybe Bytes'),
                                      _hint :: !(Maybe String'),
                                      _email :: !(Maybe String'),
                                      _new_secure_settings :: !(Maybe SecureSecretSettings)}
instance Data.Binary.Binary Account'PasswordInputSettings
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3258394569 -> fmap Account'passwordInputSettings Data.Binary.get}};
           put (Account'passwordInputSettings tmp_1) = do {Data.Binary.Put.putWord32le 3258394569;
                                                           Data.Binary.put tmp_1}}
instance Data.Binary.Binary Account'passwordSettings'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _email_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _secure_settings_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     GHC.Base.pure (Account'passwordSettings' _email_1 _secure_settings_2)};
           put to_be_encoded_3 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_3._secure_settings,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_3._email,
                                                              0)];
                                     Data.Binary.put to_be_encoded_3._email;
                                     Data.Binary.put to_be_encoded_3._secure_settings}}
data Account'PasswordSettings
    = Account'passwordSettings !Account'passwordSettings'
data Account'passwordSettings'
    = Account'passwordSettings' {_email :: !(Maybe String'),
                                 _secure_settings :: !(Maybe SecureSecretSettings)}
instance Data.Binary.Binary Account'PasswordSettings
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2589733861 -> fmap Account'passwordSettings Data.Binary.get}};
           put (Account'passwordSettings tmp_1) = do {Data.Binary.Put.putWord32le 2589733861;
                                                      Data.Binary.put tmp_1}}
instance Data.Binary.Binary Account'privacyRules'
    where {get = do {_rules_0 <- Data.Binary.get;
                     _chats_1 <- Data.Binary.get;
                     _users_2 <- Data.Binary.get;
                     GHC.Base.pure (Account'privacyRules' _rules_0 _chats_1 _users_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._rules;
                                     Data.Binary.put to_be_encoded_3._chats;
                                     Data.Binary.put to_be_encoded_3._users}}
data Account'PrivacyRules
    = Account'privacyRules !Account'privacyRules'
data Account'privacyRules'
    = Account'privacyRules' {_rules :: !(Vector PrivacyRule),
                             _chats :: !(Vector Chat),
                             _users :: !(Vector User)}
instance Data.Binary.Binary Account'PrivacyRules
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1352683077 -> fmap Account'privacyRules Data.Binary.get}};
           put (Account'privacyRules tmp_1) = do {Data.Binary.Put.putWord32le 1352683077;
                                                  Data.Binary.put tmp_1}}
instance Data.Binary.Binary Account'resetPasswordFailedWait'
    where {get = do {_retry_date_0 <- Data.Binary.get;
                     GHC.Base.pure (Account'resetPasswordFailedWait' _retry_date_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._retry_date}
instance Data.Binary.Binary Account'resetPasswordOk'
    where {get = GHC.Base.pure Account'resetPasswordOk';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary Account'resetPasswordRequestedWait'
    where {get = do {_until_date_0 <- Data.Binary.get;
                     GHC.Base.pure (Account'resetPasswordRequestedWait' _until_date_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._until_date}
data Account'ResetPasswordResult
    = Account'resetPasswordFailedWait !Account'resetPasswordFailedWait'
    | Account'resetPasswordOk !Account'resetPasswordOk'
    | Account'resetPasswordRequestedWait !Account'resetPasswordRequestedWait'
data Account'resetPasswordFailedWait'
    = Account'resetPasswordFailedWait' {_retry_date :: !Int'}
data Account'resetPasswordOk' = Account'resetPasswordOk' {}
data Account'resetPasswordRequestedWait'
    = Account'resetPasswordRequestedWait' {_until_date :: !Int'}
instance Data.Binary.Binary Account'ResetPasswordResult
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3816265825 -> fmap Account'resetPasswordFailedWait Data.Binary.get;
                      3911636542 -> fmap Account'resetPasswordOk Data.Binary.get;
                      3924819069 -> fmap Account'resetPasswordRequestedWait Data.Binary.get}};
           put (Account'resetPasswordFailedWait tmp_1) = do {Data.Binary.Put.putWord32le 3816265825;
                                                             Data.Binary.put tmp_1};
           put (Account'resetPasswordOk tmp_2) = do {Data.Binary.Put.putWord32le 3911636542;
                                                     Data.Binary.put tmp_2};
           put (Account'resetPasswordRequestedWait tmp_3) = do {Data.Binary.Put.putWord32le 3924819069;
                                                                Data.Binary.put tmp_3}}
instance Data.Binary.Binary Account'savedRingtone'
    where {get = GHC.Base.pure Account'savedRingtone';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary Account'savedRingtoneConverted'
    where {get = do {_document_0 <- Data.Binary.get;
                     GHC.Base.pure (Account'savedRingtoneConverted' _document_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._document}
data Account'SavedRingtone
    = Account'savedRingtone !Account'savedRingtone'
    | Account'savedRingtoneConverted !Account'savedRingtoneConverted'
data Account'savedRingtone' = Account'savedRingtone' {}
data Account'savedRingtoneConverted'
    = Account'savedRingtoneConverted' {_document :: !Document}
instance Data.Binary.Binary Account'SavedRingtone
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3072737133 -> fmap Account'savedRingtone Data.Binary.get;
                      523271863 -> fmap Account'savedRingtoneConverted Data.Binary.get}};
           put (Account'savedRingtone tmp_1) = do {Data.Binary.Put.putWord32le 3072737133;
                                                   Data.Binary.put tmp_1};
           put (Account'savedRingtoneConverted tmp_2) = do {Data.Binary.Put.putWord32le 523271863;
                                                            Data.Binary.put tmp_2}}
instance Data.Binary.Binary Account'savedRingtones'
    where {get = do {_hash_0 <- Data.Binary.get;
                     _ringtones_1 <- Data.Binary.get;
                     GHC.Base.pure (Account'savedRingtones' _hash_0 _ringtones_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._hash;
                                     Data.Binary.put to_be_encoded_2._ringtones}}
instance Data.Binary.Binary Account'savedRingtonesNotModified'
    where {get = GHC.Base.pure Account'savedRingtonesNotModified';
           put to_be_encoded_0 = do GHC.Base.pure ()}
data Account'SavedRingtones
    = Account'savedRingtones !Account'savedRingtones'
    | Account'savedRingtonesNotModified !Account'savedRingtonesNotModified'
data Account'savedRingtones'
    = Account'savedRingtones' {_hash :: !Long',
                               _ringtones :: !(Vector Document)}
data Account'savedRingtonesNotModified'
    = Account'savedRingtonesNotModified' {}
instance Data.Binary.Binary Account'SavedRingtones
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3253284037 -> fmap Account'savedRingtones Data.Binary.get;
                      4227262641 -> fmap Account'savedRingtonesNotModified Data.Binary.get}};
           put (Account'savedRingtones tmp_1) = do {Data.Binary.Put.putWord32le 3253284037;
                                                    Data.Binary.put tmp_1};
           put (Account'savedRingtonesNotModified tmp_2) = do {Data.Binary.Put.putWord32le 4227262641;
                                                               Data.Binary.put tmp_2}}
instance Data.Binary.Binary Account'sentEmailCode'
    where {get = do {_email_pattern_0 <- Data.Binary.get;
                     _length_1 <- Data.Binary.get;
                     GHC.Base.pure (Account'sentEmailCode' _email_pattern_0 _length_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._email_pattern;
                                     Data.Binary.put to_be_encoded_2._length}}
data Account'SentEmailCode
    = Account'sentEmailCode !Account'sentEmailCode'
data Account'sentEmailCode'
    = Account'sentEmailCode' {_email_pattern :: !String',
                              _length :: !Int'}
instance Data.Binary.Binary Account'SentEmailCode
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2166326607 -> fmap Account'sentEmailCode Data.Binary.get}};
           put (Account'sentEmailCode tmp_1) = do {Data.Binary.Put.putWord32le 2166326607;
                                                   Data.Binary.put tmp_1}}
instance Data.Binary.Binary Account'takeout'
    where {get = do {_id_0 <- Data.Binary.get;
                     GHC.Base.pure (Account'takeout' _id_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._id}
data Account'Takeout = Account'takeout !Account'takeout'
data Account'takeout' = Account'takeout' {_id :: !Long'}
instance Data.Binary.Binary Account'Takeout
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1304052993 -> fmap Account'takeout Data.Binary.get}};
           put (Account'takeout tmp_1) = do {Data.Binary.Put.putWord32le 1304052993;
                                             Data.Binary.put tmp_1}}
instance Data.Binary.Binary Account'themes'
    where {get = do {_hash_0 <- Data.Binary.get;
                     _themes_1 <- Data.Binary.get;
                     GHC.Base.pure (Account'themes' _hash_0 _themes_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._hash;
                                     Data.Binary.put to_be_encoded_2._themes}}
instance Data.Binary.Binary Account'themesNotModified'
    where {get = GHC.Base.pure Account'themesNotModified';
           put to_be_encoded_0 = do GHC.Base.pure ()}
data Account'Themes
    = Account'themes !Account'themes'
    | Account'themesNotModified !Account'themesNotModified'
data Account'themes'
    = Account'themes' {_hash :: !Long', _themes :: !(Vector Theme)}
data Account'themesNotModified' = Account'themesNotModified' {}
instance Data.Binary.Binary Account'Themes
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2587724909 -> fmap Account'themes Data.Binary.get;
                      4095653410 -> fmap Account'themesNotModified Data.Binary.get}};
           put (Account'themes tmp_1) = do {Data.Binary.Put.putWord32le 2587724909;
                                            Data.Binary.put tmp_1};
           put (Account'themesNotModified tmp_2) = do {Data.Binary.Put.putWord32le 4095653410;
                                                       Data.Binary.put tmp_2}}
instance Data.Binary.Binary Account'tmpPassword'
    where {get = do {_tmp_password_0 <- Data.Binary.get;
                     _valid_until_1 <- Data.Binary.get;
                     GHC.Base.pure (Account'tmpPassword' _tmp_password_0 _valid_until_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._tmp_password;
                                     Data.Binary.put to_be_encoded_2._valid_until}}
data Account'TmpPassword
    = Account'tmpPassword !Account'tmpPassword'
data Account'tmpPassword'
    = Account'tmpPassword' {_tmp_password :: !Bytes',
                            _valid_until :: !Int'}
instance Data.Binary.Binary Account'TmpPassword
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3680828724 -> fmap Account'tmpPassword Data.Binary.get}};
           put (Account'tmpPassword tmp_1) = do {Data.Binary.Put.putWord32le 3680828724;
                                                 Data.Binary.put tmp_1}}
instance Data.Binary.Binary Account'wallPapers'
    where {get = do {_hash_0 <- Data.Binary.get;
                     _wallpapers_1 <- Data.Binary.get;
                     GHC.Base.pure (Account'wallPapers' _hash_0 _wallpapers_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._hash;
                                     Data.Binary.put to_be_encoded_2._wallpapers}}
instance Data.Binary.Binary Account'wallPapersNotModified'
    where {get = GHC.Base.pure Account'wallPapersNotModified';
           put to_be_encoded_0 = do GHC.Base.pure ()}
data Account'WallPapers
    = Account'wallPapers !Account'wallPapers'
    | Account'wallPapersNotModified !Account'wallPapersNotModified'
data Account'wallPapers'
    = Account'wallPapers' {_hash :: !Long',
                           _wallpapers :: !(Vector WallPaper)}
data Account'wallPapersNotModified'
    = Account'wallPapersNotModified' {}
instance Data.Binary.Binary Account'WallPapers
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3452142988 -> fmap Account'wallPapers Data.Binary.get;
                      471437699 -> fmap Account'wallPapersNotModified Data.Binary.get}};
           put (Account'wallPapers tmp_1) = do {Data.Binary.Put.putWord32le 3452142988;
                                                Data.Binary.put tmp_1};
           put (Account'wallPapersNotModified tmp_2) = do {Data.Binary.Put.putWord32le 471437699;
                                                           Data.Binary.put tmp_2}}
instance Data.Binary.Binary Account'webAuthorizations'
    where {get = do {_authorizations_0 <- Data.Binary.get;
                     _users_1 <- Data.Binary.get;
                     GHC.Base.pure (Account'webAuthorizations' _authorizations_0 _users_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._authorizations;
                                     Data.Binary.put to_be_encoded_2._users}}
data Account'WebAuthorizations
    = Account'webAuthorizations !Account'webAuthorizations'
data Account'webAuthorizations'
    = Account'webAuthorizations' {_authorizations :: !(Vector WebAuthorization),
                                  _users :: !(Vector User)}
instance Data.Binary.Binary Account'WebAuthorizations
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3981887996 -> fmap Account'webAuthorizations Data.Binary.get}};
           put (Account'webAuthorizations tmp_1) = do {Data.Binary.Put.putWord32le 3981887996;
                                                       Data.Binary.put tmp_1}}
instance Data.Binary.Binary Auth'authorization'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _setup_password_required_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _otherwise_relogin_days_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _tmp_sessions_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _future_auth_token_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _user_5 <- Data.Binary.get;
                     GHC.Base.pure (Auth'authorization' _setup_password_required_1 _otherwise_relogin_days_2 _tmp_sessions_3 _future_auth_token_4 _user_5)};
           put to_be_encoded_6 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_6._future_auth_token,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_6._tmp_sessions,
                                                              0),
                                                             (Data.Maybe.isJust to_be_encoded_6._otherwise_relogin_days,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_6._setup_password_required,
                                                              1)];
                                     Data.Binary.put to_be_encoded_6._setup_password_required;
                                     Data.Binary.put to_be_encoded_6._otherwise_relogin_days;
                                     Data.Binary.put to_be_encoded_6._tmp_sessions;
                                     Data.Binary.put to_be_encoded_6._future_auth_token;
                                     Data.Binary.put to_be_encoded_6._user}}
instance Data.Binary.Binary Auth'authorizationSignUpRequired'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _terms_of_service_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     GHC.Base.pure (Auth'authorizationSignUpRequired' _terms_of_service_1)};
           put to_be_encoded_2 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_2._terms_of_service,
                                                              0)];
                                     Data.Binary.put to_be_encoded_2._terms_of_service}}
data Auth'Authorization
    = Auth'authorization !Auth'authorization'
    | Auth'authorizationSignUpRequired !Auth'authorizationSignUpRequired'
data Auth'authorization'
    = Auth'authorization' {_setup_password_required :: !(Maybe True'),
                           _otherwise_relogin_days :: !(Maybe Int'),
                           _tmp_sessions :: !(Maybe Int'),
                           _future_auth_token :: !(Maybe Bytes'),
                           _user :: !User}
data Auth'authorizationSignUpRequired'
    = Auth'authorizationSignUpRequired' {_terms_of_service :: !(Maybe Help'TermsOfService)}
instance Data.Binary.Binary Auth'Authorization
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {782418132 -> fmap Auth'authorization Data.Binary.get;
                      1148485274 -> fmap Auth'authorizationSignUpRequired Data.Binary.get}};
           put (Auth'authorization tmp_1) = do {Data.Binary.Put.putWord32le 782418132;
                                                Data.Binary.put tmp_1};
           put (Auth'authorizationSignUpRequired tmp_2) = do {Data.Binary.Put.putWord32le 1148485274;
                                                              Data.Binary.put tmp_2}}
instance Data.Binary.Binary Auth'codeTypeCall'
    where {get = GHC.Base.pure Auth'codeTypeCall';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary Auth'codeTypeFlashCall'
    where {get = GHC.Base.pure Auth'codeTypeFlashCall';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary Auth'codeTypeFragmentSms'
    where {get = GHC.Base.pure Auth'codeTypeFragmentSms';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary Auth'codeTypeMissedCall'
    where {get = GHC.Base.pure Auth'codeTypeMissedCall';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary Auth'codeTypeSms'
    where {get = GHC.Base.pure Auth'codeTypeSms';
           put to_be_encoded_0 = do GHC.Base.pure ()}
data Auth'CodeType
    = Auth'codeTypeCall !Auth'codeTypeCall'
    | Auth'codeTypeFlashCall !Auth'codeTypeFlashCall'
    | Auth'codeTypeFragmentSms !Auth'codeTypeFragmentSms'
    | Auth'codeTypeMissedCall !Auth'codeTypeMissedCall'
    | Auth'codeTypeSms !Auth'codeTypeSms'
data Auth'codeTypeCall' = Auth'codeTypeCall' {}
data Auth'codeTypeFlashCall' = Auth'codeTypeFlashCall' {}
data Auth'codeTypeFragmentSms' = Auth'codeTypeFragmentSms' {}
data Auth'codeTypeMissedCall' = Auth'codeTypeMissedCall' {}
data Auth'codeTypeSms' = Auth'codeTypeSms' {}
instance Data.Binary.Binary Auth'CodeType
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1948046307 -> fmap Auth'codeTypeCall Data.Binary.get;
                      577556219 -> fmap Auth'codeTypeFlashCall Data.Binary.get;
                      116234636 -> fmap Auth'codeTypeFragmentSms Data.Binary.get;
                      3592083182 -> fmap Auth'codeTypeMissedCall Data.Binary.get;
                      1923290508 -> fmap Auth'codeTypeSms Data.Binary.get}};
           put (Auth'codeTypeCall tmp_1) = do {Data.Binary.Put.putWord32le 1948046307;
                                               Data.Binary.put tmp_1};
           put (Auth'codeTypeFlashCall tmp_2) = do {Data.Binary.Put.putWord32le 577556219;
                                                    Data.Binary.put tmp_2};
           put (Auth'codeTypeFragmentSms tmp_3) = do {Data.Binary.Put.putWord32le 116234636;
                                                      Data.Binary.put tmp_3};
           put (Auth'codeTypeMissedCall tmp_4) = do {Data.Binary.Put.putWord32le 3592083182;
                                                     Data.Binary.put tmp_4};
           put (Auth'codeTypeSms tmp_5) = do {Data.Binary.Put.putWord32le 1923290508;
                                              Data.Binary.put tmp_5}}
instance Data.Binary.Binary Auth'exportedAuthorization'
    where {get = do {_id_0 <- Data.Binary.get;
                     _bytes_1 <- Data.Binary.get;
                     GHC.Base.pure (Auth'exportedAuthorization' _id_0 _bytes_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._id;
                                     Data.Binary.put to_be_encoded_2._bytes}}
data Auth'ExportedAuthorization
    = Auth'exportedAuthorization !Auth'exportedAuthorization'
data Auth'exportedAuthorization'
    = Auth'exportedAuthorization' {_id :: !Long', _bytes :: !Bytes'}
instance Data.Binary.Binary Auth'ExportedAuthorization
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3023364792 -> fmap Auth'exportedAuthorization Data.Binary.get}};
           put (Auth'exportedAuthorization tmp_1) = do {Data.Binary.Put.putWord32le 3023364792;
                                                        Data.Binary.put tmp_1}}
instance Data.Binary.Binary Auth'loggedOut'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _future_auth_token_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     GHC.Base.pure (Auth'loggedOut' _future_auth_token_1)};
           put to_be_encoded_2 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_2._future_auth_token,
                                                              0)];
                                     Data.Binary.put to_be_encoded_2._future_auth_token}}
data Auth'LoggedOut = Auth'loggedOut !Auth'loggedOut'
data Auth'loggedOut'
    = Auth'loggedOut' {_future_auth_token :: !(Maybe Bytes')}
instance Data.Binary.Binary Auth'LoggedOut
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3282207583 -> fmap Auth'loggedOut Data.Binary.get}};
           put (Auth'loggedOut tmp_1) = do {Data.Binary.Put.putWord32le 3282207583;
                                            Data.Binary.put tmp_1}}
instance Data.Binary.Binary Auth'loginToken'
    where {get = do {_expires_0 <- Data.Binary.get;
                     _token_1 <- Data.Binary.get;
                     GHC.Base.pure (Auth'loginToken' _expires_0 _token_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._expires;
                                     Data.Binary.put to_be_encoded_2._token}}
instance Data.Binary.Binary Auth'loginTokenMigrateTo'
    where {get = do {_dc_id_0 <- Data.Binary.get;
                     _token_1 <- Data.Binary.get;
                     GHC.Base.pure (Auth'loginTokenMigrateTo' _dc_id_0 _token_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._dc_id;
                                     Data.Binary.put to_be_encoded_2._token}}
instance Data.Binary.Binary Auth'loginTokenSuccess'
    where {get = do {_authorization_0 <- Data.Binary.get;
                     GHC.Base.pure (Auth'loginTokenSuccess' _authorization_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._authorization}
data Auth'LoginToken
    = Auth'loginToken !Auth'loginToken'
    | Auth'loginTokenMigrateTo !Auth'loginTokenMigrateTo'
    | Auth'loginTokenSuccess !Auth'loginTokenSuccess'
data Auth'loginToken'
    = Auth'loginToken' {_expires :: !Int', _token :: !Bytes'}
data Auth'loginTokenMigrateTo'
    = Auth'loginTokenMigrateTo' {_dc_id :: !Int', _token :: !Bytes'}
data Auth'loginTokenSuccess'
    = Auth'loginTokenSuccess' {_authorization :: !Auth'Authorization}
instance Data.Binary.Binary Auth'LoginToken
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1654593920 -> fmap Auth'loginToken Data.Binary.get;
                      110008598 -> fmap Auth'loginTokenMigrateTo Data.Binary.get;
                      957176926 -> fmap Auth'loginTokenSuccess Data.Binary.get}};
           put (Auth'loginToken tmp_1) = do {Data.Binary.Put.putWord32le 1654593920;
                                             Data.Binary.put tmp_1};
           put (Auth'loginTokenMigrateTo tmp_2) = do {Data.Binary.Put.putWord32le 110008598;
                                                      Data.Binary.put tmp_2};
           put (Auth'loginTokenSuccess tmp_3) = do {Data.Binary.Put.putWord32le 957176926;
                                                    Data.Binary.put tmp_3}}
instance Data.Binary.Binary Auth'passwordRecovery'
    where {get = do {_email_pattern_0 <- Data.Binary.get;
                     GHC.Base.pure (Auth'passwordRecovery' _email_pattern_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._email_pattern}
data Auth'PasswordRecovery
    = Auth'passwordRecovery !Auth'passwordRecovery'
data Auth'passwordRecovery'
    = Auth'passwordRecovery' {_email_pattern :: !String'}
instance Data.Binary.Binary Auth'PasswordRecovery
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {326715557 -> fmap Auth'passwordRecovery Data.Binary.get}};
           put (Auth'passwordRecovery tmp_1) = do {Data.Binary.Put.putWord32le 326715557;
                                                   Data.Binary.put tmp_1}}
instance Data.Binary.Binary Auth'sentCode'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _type_1 <- Data.Binary.get;
                     _phone_code_hash_2 <- Data.Binary.get;
                     _next_type_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _timeout_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     GHC.Base.pure (Auth'sentCode' _type_1 _phone_code_hash_2 _next_type_3 _timeout_4)};
           put to_be_encoded_5 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_5._timeout,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_5._next_type,
                                                              1)];
                                     Data.Binary.put to_be_encoded_5._type;
                                     Data.Binary.put to_be_encoded_5._phone_code_hash;
                                     Data.Binary.put to_be_encoded_5._next_type;
                                     Data.Binary.put to_be_encoded_5._timeout}}
instance Data.Binary.Binary Auth'sentCodeSuccess'
    where {get = do {_authorization_0 <- Data.Binary.get;
                     GHC.Base.pure (Auth'sentCodeSuccess' _authorization_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._authorization}
data Auth'SentCode
    = Auth'sentCode !Auth'sentCode'
    | Auth'sentCodeSuccess !Auth'sentCodeSuccess'
data Auth'sentCode'
    = Auth'sentCode' {_type :: !Auth'SentCodeType,
                      _phone_code_hash :: !String',
                      _next_type :: !(Maybe Auth'CodeType),
                      _timeout :: !(Maybe Int')}
data Auth'sentCodeSuccess'
    = Auth'sentCodeSuccess' {_authorization :: !Auth'Authorization}
instance Data.Binary.Binary Auth'SentCode
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1577067778 -> fmap Auth'sentCode Data.Binary.get;
                      596704836 -> fmap Auth'sentCodeSuccess Data.Binary.get}};
           put (Auth'sentCode tmp_1) = do {Data.Binary.Put.putWord32le 1577067778;
                                           Data.Binary.put tmp_1};
           put (Auth'sentCodeSuccess tmp_2) = do {Data.Binary.Put.putWord32le 596704836;
                                                  Data.Binary.put tmp_2}}
instance Data.Binary.Binary Auth'sentCodeTypeApp'
    where {get = do {_length_0 <- Data.Binary.get;
                     GHC.Base.pure (Auth'sentCodeTypeApp' _length_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._length}
instance Data.Binary.Binary Auth'sentCodeTypeCall'
    where {get = do {_length_0 <- Data.Binary.get;
                     GHC.Base.pure (Auth'sentCodeTypeCall' _length_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._length}
instance Data.Binary.Binary Auth'sentCodeTypeEmailCode'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _apple_signin_allowed_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _google_signin_allowed_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _email_pattern_3 <- Data.Binary.get;
                     _length_4 <- Data.Binary.get;
                     _reset_available_period_5 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     _reset_pending_date_6 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 4);
                     GHC.Base.pure (Auth'sentCodeTypeEmailCode' _apple_signin_allowed_1 _google_signin_allowed_2 _email_pattern_3 _length_4 _reset_available_period_5 _reset_pending_date_6)};
           put to_be_encoded_7 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_7._reset_pending_date,
                                                              4),
                                                             (Data.Maybe.isJust to_be_encoded_7._reset_available_period,
                                                              3),
                                                             (Data.Maybe.isJust to_be_encoded_7._google_signin_allowed,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_7._apple_signin_allowed,
                                                              0)];
                                     Data.Binary.put to_be_encoded_7._apple_signin_allowed;
                                     Data.Binary.put to_be_encoded_7._google_signin_allowed;
                                     Data.Binary.put to_be_encoded_7._email_pattern;
                                     Data.Binary.put to_be_encoded_7._length;
                                     Data.Binary.put to_be_encoded_7._reset_available_period;
                                     Data.Binary.put to_be_encoded_7._reset_pending_date}}
instance Data.Binary.Binary Auth'sentCodeTypeFirebaseSms'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _nonce_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _receipt_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _push_timeout_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _length_4 <- Data.Binary.get;
                     GHC.Base.pure (Auth'sentCodeTypeFirebaseSms' _nonce_1 _receipt_2 _push_timeout_3 _length_4)};
           put to_be_encoded_5 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_5._push_timeout,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_5._receipt,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_5._nonce,
                                                              0)];
                                     Data.Binary.put to_be_encoded_5._nonce;
                                     Data.Binary.put to_be_encoded_5._receipt;
                                     Data.Binary.put to_be_encoded_5._push_timeout;
                                     Data.Binary.put to_be_encoded_5._length}}
instance Data.Binary.Binary Auth'sentCodeTypeFlashCall'
    where {get = do {_pattern_0 <- Data.Binary.get;
                     GHC.Base.pure (Auth'sentCodeTypeFlashCall' _pattern_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._pattern}
instance Data.Binary.Binary Auth'sentCodeTypeFragmentSms'
    where {get = do {_url_0 <- Data.Binary.get;
                     _length_1 <- Data.Binary.get;
                     GHC.Base.pure (Auth'sentCodeTypeFragmentSms' _url_0 _length_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._url;
                                     Data.Binary.put to_be_encoded_2._length}}
instance Data.Binary.Binary Auth'sentCodeTypeMissedCall'
    where {get = do {_prefix_0 <- Data.Binary.get;
                     _length_1 <- Data.Binary.get;
                     GHC.Base.pure (Auth'sentCodeTypeMissedCall' _prefix_0 _length_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._prefix;
                                     Data.Binary.put to_be_encoded_2._length}}
instance Data.Binary.Binary Auth'sentCodeTypeSetUpEmailRequired'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _apple_signin_allowed_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _google_signin_allowed_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     GHC.Base.pure (Auth'sentCodeTypeSetUpEmailRequired' _apple_signin_allowed_1 _google_signin_allowed_2)};
           put to_be_encoded_3 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_3._google_signin_allowed,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_3._apple_signin_allowed,
                                                              0)];
                                     Data.Binary.put to_be_encoded_3._apple_signin_allowed;
                                     Data.Binary.put to_be_encoded_3._google_signin_allowed}}
instance Data.Binary.Binary Auth'sentCodeTypeSms'
    where {get = do {_length_0 <- Data.Binary.get;
                     GHC.Base.pure (Auth'sentCodeTypeSms' _length_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._length}
data Auth'SentCodeType
    = Auth'sentCodeTypeApp !Auth'sentCodeTypeApp'
    | Auth'sentCodeTypeCall !Auth'sentCodeTypeCall'
    | Auth'sentCodeTypeEmailCode !Auth'sentCodeTypeEmailCode'
    | Auth'sentCodeTypeFirebaseSms !Auth'sentCodeTypeFirebaseSms'
    | Auth'sentCodeTypeFlashCall !Auth'sentCodeTypeFlashCall'
    | Auth'sentCodeTypeFragmentSms !Auth'sentCodeTypeFragmentSms'
    | Auth'sentCodeTypeMissedCall !Auth'sentCodeTypeMissedCall'
    | Auth'sentCodeTypeSetUpEmailRequired !Auth'sentCodeTypeSetUpEmailRequired'
    | Auth'sentCodeTypeSms !Auth'sentCodeTypeSms'
data Auth'sentCodeTypeApp'
    = Auth'sentCodeTypeApp' {_length :: !Int'}
data Auth'sentCodeTypeCall'
    = Auth'sentCodeTypeCall' {_length :: !Int'}
data Auth'sentCodeTypeEmailCode'
    = Auth'sentCodeTypeEmailCode' {_apple_signin_allowed :: !(Maybe True'),
                                   _google_signin_allowed :: !(Maybe True'),
                                   _email_pattern :: !String',
                                   _length :: !Int',
                                   _reset_available_period :: !(Maybe Int'),
                                   _reset_pending_date :: !(Maybe Int')}
data Auth'sentCodeTypeFirebaseSms'
    = Auth'sentCodeTypeFirebaseSms' {_nonce :: !(Maybe Bytes'),
                                     _receipt :: !(Maybe String'),
                                     _push_timeout :: !(Maybe Int'),
                                     _length :: !Int'}
data Auth'sentCodeTypeFlashCall'
    = Auth'sentCodeTypeFlashCall' {_pattern :: !String'}
data Auth'sentCodeTypeFragmentSms'
    = Auth'sentCodeTypeFragmentSms' {_url :: !String',
                                     _length :: !Int'}
data Auth'sentCodeTypeMissedCall'
    = Auth'sentCodeTypeMissedCall' {_prefix :: !String',
                                    _length :: !Int'}
data Auth'sentCodeTypeSetUpEmailRequired'
    = Auth'sentCodeTypeSetUpEmailRequired' {_apple_signin_allowed :: !(Maybe True'),
                                            _google_signin_allowed :: !(Maybe True')}
data Auth'sentCodeTypeSms'
    = Auth'sentCodeTypeSms' {_length :: !Int'}
instance Data.Binary.Binary Auth'SentCodeType
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1035688326 -> fmap Auth'sentCodeTypeApp Data.Binary.get;
                      1398007207 -> fmap Auth'sentCodeTypeCall Data.Binary.get;
                      4098946459 -> fmap Auth'sentCodeTypeEmailCode Data.Binary.get;
                      3850048562 -> fmap Auth'sentCodeTypeFirebaseSms Data.Binary.get;
                      2869151449 -> fmap Auth'sentCodeTypeFlashCall Data.Binary.get;
                      3646315577 -> fmap Auth'sentCodeTypeFragmentSms Data.Binary.get;
                      2181063812 -> fmap Auth'sentCodeTypeMissedCall Data.Binary.get;
                      2773032426 -> fmap Auth'sentCodeTypeSetUpEmailRequired Data.Binary.get;
                      3221273506 -> fmap Auth'sentCodeTypeSms Data.Binary.get}};
           put (Auth'sentCodeTypeApp tmp_1) = do {Data.Binary.Put.putWord32le 1035688326;
                                                  Data.Binary.put tmp_1};
           put (Auth'sentCodeTypeCall tmp_2) = do {Data.Binary.Put.putWord32le 1398007207;
                                                   Data.Binary.put tmp_2};
           put (Auth'sentCodeTypeEmailCode tmp_3) = do {Data.Binary.Put.putWord32le 4098946459;
                                                        Data.Binary.put tmp_3};
           put (Auth'sentCodeTypeFirebaseSms tmp_4) = do {Data.Binary.Put.putWord32le 3850048562;
                                                          Data.Binary.put tmp_4};
           put (Auth'sentCodeTypeFlashCall tmp_5) = do {Data.Binary.Put.putWord32le 2869151449;
                                                        Data.Binary.put tmp_5};
           put (Auth'sentCodeTypeFragmentSms tmp_6) = do {Data.Binary.Put.putWord32le 3646315577;
                                                          Data.Binary.put tmp_6};
           put (Auth'sentCodeTypeMissedCall tmp_7) = do {Data.Binary.Put.putWord32le 2181063812;
                                                         Data.Binary.put tmp_7};
           put (Auth'sentCodeTypeSetUpEmailRequired tmp_8) = do {Data.Binary.Put.putWord32le 2773032426;
                                                                 Data.Binary.put tmp_8};
           put (Auth'sentCodeTypeSms tmp_9) = do {Data.Binary.Put.putWord32le 3221273506;
                                                  Data.Binary.put tmp_9}}
instance Data.Binary.Binary Bots'botInfo'
    where {get = do {_name_0 <- Data.Binary.get;
                     _about_1 <- Data.Binary.get;
                     _description_2 <- Data.Binary.get;
                     GHC.Base.pure (Bots'botInfo' _name_0 _about_1 _description_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._name;
                                     Data.Binary.put to_be_encoded_3._about;
                                     Data.Binary.put to_be_encoded_3._description}}
data Bots'BotInfo = Bots'botInfo !Bots'botInfo'
data Bots'botInfo'
    = Bots'botInfo' {_name :: !String',
                     _about :: !String',
                     _description :: !String'}
instance Data.Binary.Binary Bots'BotInfo
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3903288752 -> fmap Bots'botInfo Data.Binary.get}};
           put (Bots'botInfo tmp_1) = do {Data.Binary.Put.putWord32le 3903288752;
                                          Data.Binary.put tmp_1}}
instance Data.Binary.Binary Channels'adminLogResults'
    where {get = do {_events_0 <- Data.Binary.get;
                     _chats_1 <- Data.Binary.get;
                     _users_2 <- Data.Binary.get;
                     GHC.Base.pure (Channels'adminLogResults' _events_0 _chats_1 _users_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._events;
                                     Data.Binary.put to_be_encoded_3._chats;
                                     Data.Binary.put to_be_encoded_3._users}}
data Channels'AdminLogResults
    = Channels'adminLogResults !Channels'adminLogResults'
data Channels'adminLogResults'
    = Channels'adminLogResults' {_events :: !(Vector ChannelAdminLogEvent),
                                 _chats :: !(Vector Chat),
                                 _users :: !(Vector User)}
instance Data.Binary.Binary Channels'AdminLogResults
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3985307469 -> fmap Channels'adminLogResults Data.Binary.get}};
           put (Channels'adminLogResults tmp_1) = do {Data.Binary.Put.putWord32le 3985307469;
                                                      Data.Binary.put tmp_1}}
instance Data.Binary.Binary Channels'channelParticipant'
    where {get = do {_participant_0 <- Data.Binary.get;
                     _chats_1 <- Data.Binary.get;
                     _users_2 <- Data.Binary.get;
                     GHC.Base.pure (Channels'channelParticipant' _participant_0 _chats_1 _users_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._participant;
                                     Data.Binary.put to_be_encoded_3._chats;
                                     Data.Binary.put to_be_encoded_3._users}}
data Channels'ChannelParticipant
    = Channels'channelParticipant !Channels'channelParticipant'
data Channels'channelParticipant'
    = Channels'channelParticipant' {_participant :: !ChannelParticipant,
                                    _chats :: !(Vector Chat),
                                    _users :: !(Vector User)}
instance Data.Binary.Binary Channels'ChannelParticipant
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3753378583 -> fmap Channels'channelParticipant Data.Binary.get}};
           put (Channels'channelParticipant tmp_1) = do {Data.Binary.Put.putWord32le 3753378583;
                                                         Data.Binary.put tmp_1}}
instance Data.Binary.Binary Channels'channelParticipants'
    where {get = do {_count_0 <- Data.Binary.get;
                     _participants_1 <- Data.Binary.get;
                     _chats_2 <- Data.Binary.get;
                     _users_3 <- Data.Binary.get;
                     GHC.Base.pure (Channels'channelParticipants' _count_0 _participants_1 _chats_2 _users_3)};
           put to_be_encoded_4 = do {Data.Binary.put to_be_encoded_4._count;
                                     Data.Binary.put to_be_encoded_4._participants;
                                     Data.Binary.put to_be_encoded_4._chats;
                                     Data.Binary.put to_be_encoded_4._users}}
instance Data.Binary.Binary Channels'channelParticipantsNotModified'
    where {get = GHC.Base.pure Channels'channelParticipantsNotModified';
           put to_be_encoded_0 = do GHC.Base.pure ()}
data Channels'ChannelParticipants
    = Channels'channelParticipants !Channels'channelParticipants'
    | Channels'channelParticipantsNotModified !Channels'channelParticipantsNotModified'
data Channels'channelParticipants'
    = Channels'channelParticipants' {_count :: !Int',
                                     _participants :: !(Vector ChannelParticipant),
                                     _chats :: !(Vector Chat),
                                     _users :: !(Vector User)}
data Channels'channelParticipantsNotModified'
    = Channels'channelParticipantsNotModified' {}
instance Data.Binary.Binary Channels'ChannelParticipants
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2595290799 -> fmap Channels'channelParticipants Data.Binary.get;
                      4028055529 -> fmap Channels'channelParticipantsNotModified Data.Binary.get}};
           put (Channels'channelParticipants tmp_1) = do {Data.Binary.Put.putWord32le 2595290799;
                                                          Data.Binary.put tmp_1};
           put (Channels'channelParticipantsNotModified tmp_2) = do {Data.Binary.Put.putWord32le 4028055529;
                                                                     Data.Binary.put tmp_2}}
instance Data.Binary.Binary Channels'sendAsPeers'
    where {get = do {_peers_0 <- Data.Binary.get;
                     _chats_1 <- Data.Binary.get;
                     _users_2 <- Data.Binary.get;
                     GHC.Base.pure (Channels'sendAsPeers' _peers_0 _chats_1 _users_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._peers;
                                     Data.Binary.put to_be_encoded_3._chats;
                                     Data.Binary.put to_be_encoded_3._users}}
data Channels'SendAsPeers
    = Channels'sendAsPeers !Channels'sendAsPeers'
data Channels'sendAsPeers'
    = Channels'sendAsPeers' {_peers :: !(Vector SendAsPeer),
                             _chats :: !(Vector Chat),
                             _users :: !(Vector User)}
instance Data.Binary.Binary Channels'SendAsPeers
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {4103516358 -> fmap Channels'sendAsPeers Data.Binary.get}};
           put (Channels'sendAsPeers tmp_1) = do {Data.Binary.Put.putWord32le 4103516358;
                                                  Data.Binary.put tmp_1}}
instance Data.Binary.Binary Chatlists'chatlistInvite'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _title_1 <- Data.Binary.get;
                     _emoticon_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _peers_3 <- Data.Binary.get;
                     _chats_4 <- Data.Binary.get;
                     _users_5 <- Data.Binary.get;
                     GHC.Base.pure (Chatlists'chatlistInvite' _title_1 _emoticon_2 _peers_3 _chats_4 _users_5)};
           put to_be_encoded_6 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_6._emoticon,
                                                              0)];
                                     Data.Binary.put to_be_encoded_6._title;
                                     Data.Binary.put to_be_encoded_6._emoticon;
                                     Data.Binary.put to_be_encoded_6._peers;
                                     Data.Binary.put to_be_encoded_6._chats;
                                     Data.Binary.put to_be_encoded_6._users}}
instance Data.Binary.Binary Chatlists'chatlistInviteAlready'
    where {get = do {_filter_id_0 <- Data.Binary.get;
                     _missing_peers_1 <- Data.Binary.get;
                     _already_peers_2 <- Data.Binary.get;
                     _chats_3 <- Data.Binary.get;
                     _users_4 <- Data.Binary.get;
                     GHC.Base.pure (Chatlists'chatlistInviteAlready' _filter_id_0 _missing_peers_1 _already_peers_2 _chats_3 _users_4)};
           put to_be_encoded_5 = do {Data.Binary.put to_be_encoded_5._filter_id;
                                     Data.Binary.put to_be_encoded_5._missing_peers;
                                     Data.Binary.put to_be_encoded_5._already_peers;
                                     Data.Binary.put to_be_encoded_5._chats;
                                     Data.Binary.put to_be_encoded_5._users}}
data Chatlists'ChatlistInvite
    = Chatlists'chatlistInvite !Chatlists'chatlistInvite'
    | Chatlists'chatlistInviteAlready !Chatlists'chatlistInviteAlready'
data Chatlists'chatlistInvite'
    = Chatlists'chatlistInvite' {_title :: !String',
                                 _emoticon :: !(Maybe String'),
                                 _peers :: !(Vector Peer),
                                 _chats :: !(Vector Chat),
                                 _users :: !(Vector User)}
data Chatlists'chatlistInviteAlready'
    = Chatlists'chatlistInviteAlready' {_filter_id :: !Int',
                                        _missing_peers :: !(Vector Peer),
                                        _already_peers :: !(Vector Peer),
                                        _chats :: !(Vector Chat),
                                        _users :: !(Vector User)}
instance Data.Binary.Binary Chatlists'ChatlistInvite
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {500007837 -> fmap Chatlists'chatlistInvite Data.Binary.get;
                      4203214425 -> fmap Chatlists'chatlistInviteAlready Data.Binary.get}};
           put (Chatlists'chatlistInvite tmp_1) = do {Data.Binary.Put.putWord32le 500007837;
                                                      Data.Binary.put tmp_1};
           put (Chatlists'chatlistInviteAlready tmp_2) = do {Data.Binary.Put.putWord32le 4203214425;
                                                             Data.Binary.put tmp_2}}
instance Data.Binary.Binary Chatlists'chatlistUpdates'
    where {get = do {_missing_peers_0 <- Data.Binary.get;
                     _chats_1 <- Data.Binary.get;
                     _users_2 <- Data.Binary.get;
                     GHC.Base.pure (Chatlists'chatlistUpdates' _missing_peers_0 _chats_1 _users_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._missing_peers;
                                     Data.Binary.put to_be_encoded_3._chats;
                                     Data.Binary.put to_be_encoded_3._users}}
data Chatlists'ChatlistUpdates
    = Chatlists'chatlistUpdates !Chatlists'chatlistUpdates'
data Chatlists'chatlistUpdates'
    = Chatlists'chatlistUpdates' {_missing_peers :: !(Vector Peer),
                                  _chats :: !(Vector Chat),
                                  _users :: !(Vector User)}
instance Data.Binary.Binary Chatlists'ChatlistUpdates
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2478671757 -> fmap Chatlists'chatlistUpdates Data.Binary.get}};
           put (Chatlists'chatlistUpdates tmp_1) = do {Data.Binary.Put.putWord32le 2478671757;
                                                       Data.Binary.put tmp_1}}
instance Data.Binary.Binary Chatlists'exportedChatlistInvite'
    where {get = do {_filter_0 <- Data.Binary.get;
                     _invite_1 <- Data.Binary.get;
                     GHC.Base.pure (Chatlists'exportedChatlistInvite' _filter_0 _invite_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._filter;
                                     Data.Binary.put to_be_encoded_2._invite}}
data Chatlists'ExportedChatlistInvite
    = Chatlists'exportedChatlistInvite !Chatlists'exportedChatlistInvite'
data Chatlists'exportedChatlistInvite'
    = Chatlists'exportedChatlistInvite' {_filter :: !DialogFilter,
                                         _invite :: !ExportedChatlistInvite}
instance Data.Binary.Binary Chatlists'ExportedChatlistInvite
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {283567014 -> fmap Chatlists'exportedChatlistInvite Data.Binary.get}};
           put (Chatlists'exportedChatlistInvite tmp_1) = do {Data.Binary.Put.putWord32le 283567014;
                                                              Data.Binary.put tmp_1}}
instance Data.Binary.Binary Chatlists'exportedInvites'
    where {get = do {_invites_0 <- Data.Binary.get;
                     _chats_1 <- Data.Binary.get;
                     _users_2 <- Data.Binary.get;
                     GHC.Base.pure (Chatlists'exportedInvites' _invites_0 _chats_1 _users_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._invites;
                                     Data.Binary.put to_be_encoded_3._chats;
                                     Data.Binary.put to_be_encoded_3._users}}
data Chatlists'ExportedInvites
    = Chatlists'exportedInvites !Chatlists'exportedInvites'
data Chatlists'exportedInvites'
    = Chatlists'exportedInvites' {_invites :: !(Vector ExportedChatlistInvite),
                                  _chats :: !(Vector Chat),
                                  _users :: !(Vector User)}
instance Data.Binary.Binary Chatlists'ExportedInvites
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {279670215 -> fmap Chatlists'exportedInvites Data.Binary.get}};
           put (Chatlists'exportedInvites tmp_1) = do {Data.Binary.Put.putWord32le 279670215;
                                                       Data.Binary.put tmp_1}}
instance Data.Binary.Binary Contacts'blocked'
    where {get = do {_blocked_0 <- Data.Binary.get;
                     _chats_1 <- Data.Binary.get;
                     _users_2 <- Data.Binary.get;
                     GHC.Base.pure (Contacts'blocked' _blocked_0 _chats_1 _users_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._blocked;
                                     Data.Binary.put to_be_encoded_3._chats;
                                     Data.Binary.put to_be_encoded_3._users}}
instance Data.Binary.Binary Contacts'blockedSlice'
    where {get = do {_count_0 <- Data.Binary.get;
                     _blocked_1 <- Data.Binary.get;
                     _chats_2 <- Data.Binary.get;
                     _users_3 <- Data.Binary.get;
                     GHC.Base.pure (Contacts'blockedSlice' _count_0 _blocked_1 _chats_2 _users_3)};
           put to_be_encoded_4 = do {Data.Binary.put to_be_encoded_4._count;
                                     Data.Binary.put to_be_encoded_4._blocked;
                                     Data.Binary.put to_be_encoded_4._chats;
                                     Data.Binary.put to_be_encoded_4._users}}
data Contacts'Blocked
    = Contacts'blocked !Contacts'blocked'
    | Contacts'blockedSlice !Contacts'blockedSlice'
data Contacts'blocked'
    = Contacts'blocked' {_blocked :: !(Vector PeerBlocked),
                         _chats :: !(Vector Chat),
                         _users :: !(Vector User)}
data Contacts'blockedSlice'
    = Contacts'blockedSlice' {_count :: !Int',
                              _blocked :: !(Vector PeerBlocked),
                              _chats :: !(Vector Chat),
                              _users :: !(Vector User)}
instance Data.Binary.Binary Contacts'Blocked
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {182326673 -> fmap Contacts'blocked Data.Binary.get;
                      3781575060 -> fmap Contacts'blockedSlice Data.Binary.get}};
           put (Contacts'blocked tmp_1) = do {Data.Binary.Put.putWord32le 182326673;
                                              Data.Binary.put tmp_1};
           put (Contacts'blockedSlice tmp_2) = do {Data.Binary.Put.putWord32le 3781575060;
                                                   Data.Binary.put tmp_2}}
instance Data.Binary.Binary Contacts'contacts'
    where {get = do {_contacts_0 <- Data.Binary.get;
                     _saved_count_1 <- Data.Binary.get;
                     _users_2 <- Data.Binary.get;
                     GHC.Base.pure (Contacts'contacts' _contacts_0 _saved_count_1 _users_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._contacts;
                                     Data.Binary.put to_be_encoded_3._saved_count;
                                     Data.Binary.put to_be_encoded_3._users}}
instance Data.Binary.Binary Contacts'contactsNotModified'
    where {get = GHC.Base.pure Contacts'contactsNotModified';
           put to_be_encoded_0 = do GHC.Base.pure ()}
data Contacts'Contacts
    = Contacts'contacts !Contacts'contacts'
    | Contacts'contactsNotModified !Contacts'contactsNotModified'
data Contacts'contacts'
    = Contacts'contacts' {_contacts :: !(Vector Contact),
                          _saved_count :: !Int',
                          _users :: !(Vector User)}
data Contacts'contactsNotModified'
    = Contacts'contactsNotModified' {}
instance Data.Binary.Binary Contacts'Contacts
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3941105218 -> fmap Contacts'contacts Data.Binary.get;
                      3075189202 -> fmap Contacts'contactsNotModified Data.Binary.get}};
           put (Contacts'contacts tmp_1) = do {Data.Binary.Put.putWord32le 3941105218;
                                               Data.Binary.put tmp_1};
           put (Contacts'contactsNotModified tmp_2) = do {Data.Binary.Put.putWord32le 3075189202;
                                                          Data.Binary.put tmp_2}}
instance Data.Binary.Binary Contacts'found'
    where {get = do {_my_results_0 <- Data.Binary.get;
                     _results_1 <- Data.Binary.get;
                     _chats_2 <- Data.Binary.get;
                     _users_3 <- Data.Binary.get;
                     GHC.Base.pure (Contacts'found' _my_results_0 _results_1 _chats_2 _users_3)};
           put to_be_encoded_4 = do {Data.Binary.put to_be_encoded_4._my_results;
                                     Data.Binary.put to_be_encoded_4._results;
                                     Data.Binary.put to_be_encoded_4._chats;
                                     Data.Binary.put to_be_encoded_4._users}}
data Contacts'Found = Contacts'found !Contacts'found'
data Contacts'found'
    = Contacts'found' {_my_results :: !(Vector Peer),
                       _results :: !(Vector Peer),
                       _chats :: !(Vector Chat),
                       _users :: !(Vector User)}
instance Data.Binary.Binary Contacts'Found
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3004386717 -> fmap Contacts'found Data.Binary.get}};
           put (Contacts'found tmp_1) = do {Data.Binary.Put.putWord32le 3004386717;
                                            Data.Binary.put tmp_1}}
instance Data.Binary.Binary Contacts'importedContacts'
    where {get = do {_imported_0 <- Data.Binary.get;
                     _popular_invites_1 <- Data.Binary.get;
                     _retry_contacts_2 <- Data.Binary.get;
                     _users_3 <- Data.Binary.get;
                     GHC.Base.pure (Contacts'importedContacts' _imported_0 _popular_invites_1 _retry_contacts_2 _users_3)};
           put to_be_encoded_4 = do {Data.Binary.put to_be_encoded_4._imported;
                                     Data.Binary.put to_be_encoded_4._popular_invites;
                                     Data.Binary.put to_be_encoded_4._retry_contacts;
                                     Data.Binary.put to_be_encoded_4._users}}
data Contacts'ImportedContacts
    = Contacts'importedContacts !Contacts'importedContacts'
data Contacts'importedContacts'
    = Contacts'importedContacts' {_imported :: !(Vector ImportedContact),
                                  _popular_invites :: !(Vector PopularContact),
                                  _retry_contacts :: !(Vector Long'),
                                  _users :: !(Vector User)}
instance Data.Binary.Binary Contacts'ImportedContacts
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2010127419 -> fmap Contacts'importedContacts Data.Binary.get}};
           put (Contacts'importedContacts tmp_1) = do {Data.Binary.Put.putWord32le 2010127419;
                                                       Data.Binary.put tmp_1}}
instance Data.Binary.Binary Contacts'resolvedPeer'
    where {get = do {_peer_0 <- Data.Binary.get;
                     _chats_1 <- Data.Binary.get;
                     _users_2 <- Data.Binary.get;
                     GHC.Base.pure (Contacts'resolvedPeer' _peer_0 _chats_1 _users_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._peer;
                                     Data.Binary.put to_be_encoded_3._chats;
                                     Data.Binary.put to_be_encoded_3._users}}
data Contacts'ResolvedPeer
    = Contacts'resolvedPeer !Contacts'resolvedPeer'
data Contacts'resolvedPeer'
    = Contacts'resolvedPeer' {_peer :: !Peer,
                              _chats :: !(Vector Chat),
                              _users :: !(Vector User)}
instance Data.Binary.Binary Contacts'ResolvedPeer
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2131196633 -> fmap Contacts'resolvedPeer Data.Binary.get}};
           put (Contacts'resolvedPeer tmp_1) = do {Data.Binary.Put.putWord32le 2131196633;
                                                   Data.Binary.put tmp_1}}
instance Data.Binary.Binary Contacts'topPeers'
    where {get = do {_categories_0 <- Data.Binary.get;
                     _chats_1 <- Data.Binary.get;
                     _users_2 <- Data.Binary.get;
                     GHC.Base.pure (Contacts'topPeers' _categories_0 _chats_1 _users_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._categories;
                                     Data.Binary.put to_be_encoded_3._chats;
                                     Data.Binary.put to_be_encoded_3._users}}
instance Data.Binary.Binary Contacts'topPeersDisabled'
    where {get = GHC.Base.pure Contacts'topPeersDisabled';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary Contacts'topPeersNotModified'
    where {get = GHC.Base.pure Contacts'topPeersNotModified';
           put to_be_encoded_0 = do GHC.Base.pure ()}
data Contacts'TopPeers
    = Contacts'topPeers !Contacts'topPeers'
    | Contacts'topPeersDisabled !Contacts'topPeersDisabled'
    | Contacts'topPeersNotModified !Contacts'topPeersNotModified'
data Contacts'topPeers'
    = Contacts'topPeers' {_categories :: !(Vector TopPeerCategoryPeers),
                          _chats :: !(Vector Chat),
                          _users :: !(Vector User)}
data Contacts'topPeersDisabled' = Contacts'topPeersDisabled' {}
data Contacts'topPeersNotModified'
    = Contacts'topPeersNotModified' {}
instance Data.Binary.Binary Contacts'TopPeers
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1891070632 -> fmap Contacts'topPeers Data.Binary.get;
                      3039597469 -> fmap Contacts'topPeersDisabled Data.Binary.get;
                      3727060725 -> fmap Contacts'topPeersNotModified Data.Binary.get}};
           put (Contacts'topPeers tmp_1) = do {Data.Binary.Put.putWord32le 1891070632;
                                               Data.Binary.put tmp_1};
           put (Contacts'topPeersDisabled tmp_2) = do {Data.Binary.Put.putWord32le 3039597469;
                                                       Data.Binary.put tmp_2};
           put (Contacts'topPeersNotModified tmp_3) = do {Data.Binary.Put.putWord32le 3727060725;
                                                          Data.Binary.put tmp_3}}
instance Data.Binary.Binary Help'appConfig'
    where {get = do {_hash_0 <- Data.Binary.get;
                     _config_1 <- Data.Binary.get;
                     GHC.Base.pure (Help'appConfig' _hash_0 _config_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._hash;
                                     Data.Binary.put to_be_encoded_2._config}}
instance Data.Binary.Binary Help'appConfigNotModified'
    where {get = GHC.Base.pure Help'appConfigNotModified';
           put to_be_encoded_0 = do GHC.Base.pure ()}
data Help'AppConfig
    = Help'appConfig !Help'appConfig'
    | Help'appConfigNotModified !Help'appConfigNotModified'
data Help'appConfig'
    = Help'appConfig' {_hash :: !Int', _config :: !JSONValue}
data Help'appConfigNotModified' = Help'appConfigNotModified' {}
instance Data.Binary.Binary Help'AppConfig
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3709368366 -> fmap Help'appConfig Data.Binary.get;
                      2094949405 -> fmap Help'appConfigNotModified Data.Binary.get}};
           put (Help'appConfig tmp_1) = do {Data.Binary.Put.putWord32le 3709368366;
                                            Data.Binary.put tmp_1};
           put (Help'appConfigNotModified tmp_2) = do {Data.Binary.Put.putWord32le 2094949405;
                                                       Data.Binary.put tmp_2}}
instance Data.Binary.Binary Help'appUpdate'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _can_not_skip_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _id_2 <- Data.Binary.get;
                     _version_3 <- Data.Binary.get;
                     _text_4 <- Data.Binary.get;
                     _entities_5 <- Data.Binary.get;
                     _document_6 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _url_7 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _sticker_8 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     GHC.Base.pure (Help'appUpdate' _can_not_skip_1 _id_2 _version_3 _text_4 _entities_5 _document_6 _url_7 _sticker_8)};
           put to_be_encoded_9 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_9._sticker,
                                                              3),
                                                             (Data.Maybe.isJust to_be_encoded_9._url,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_9._document,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_9._can_not_skip,
                                                              0)];
                                     Data.Binary.put to_be_encoded_9._can_not_skip;
                                     Data.Binary.put to_be_encoded_9._id;
                                     Data.Binary.put to_be_encoded_9._version;
                                     Data.Binary.put to_be_encoded_9._text;
                                     Data.Binary.put to_be_encoded_9._entities;
                                     Data.Binary.put to_be_encoded_9._document;
                                     Data.Binary.put to_be_encoded_9._url;
                                     Data.Binary.put to_be_encoded_9._sticker}}
instance Data.Binary.Binary Help'noAppUpdate'
    where {get = GHC.Base.pure Help'noAppUpdate';
           put to_be_encoded_0 = do GHC.Base.pure ()}
data Help'AppUpdate
    = Help'appUpdate !Help'appUpdate'
    | Help'noAppUpdate !Help'noAppUpdate'
data Help'appUpdate'
    = Help'appUpdate' {_can_not_skip :: !(Maybe True'),
                       _id :: !Int',
                       _version :: !String',
                       _text :: !String',
                       _entities :: !(Vector MessageEntity),
                       _document :: !(Maybe Document),
                       _url :: !(Maybe String'),
                       _sticker :: !(Maybe Document)}
data Help'noAppUpdate' = Help'noAppUpdate' {}
instance Data.Binary.Binary Help'AppUpdate
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3434860080 -> fmap Help'appUpdate Data.Binary.get;
                      3294258486 -> fmap Help'noAppUpdate Data.Binary.get}};
           put (Help'appUpdate tmp_1) = do {Data.Binary.Put.putWord32le 3434860080;
                                            Data.Binary.put tmp_1};
           put (Help'noAppUpdate tmp_2) = do {Data.Binary.Put.putWord32le 3294258486;
                                              Data.Binary.put tmp_2}}
instance Data.Binary.Binary Help'countriesList'
    where {get = do {_countries_0 <- Data.Binary.get;
                     _hash_1 <- Data.Binary.get;
                     GHC.Base.pure (Help'countriesList' _countries_0 _hash_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._countries;
                                     Data.Binary.put to_be_encoded_2._hash}}
instance Data.Binary.Binary Help'countriesListNotModified'
    where {get = GHC.Base.pure Help'countriesListNotModified';
           put to_be_encoded_0 = do GHC.Base.pure ()}
data Help'CountriesList
    = Help'countriesList !Help'countriesList'
    | Help'countriesListNotModified !Help'countriesListNotModified'
data Help'countriesList'
    = Help'countriesList' {_countries :: !(Vector Help'Country),
                           _hash :: !Int'}
data Help'countriesListNotModified'
    = Help'countriesListNotModified' {}
instance Data.Binary.Binary Help'CountriesList
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2278585758 -> fmap Help'countriesList Data.Binary.get;
                      2479628082 -> fmap Help'countriesListNotModified Data.Binary.get}};
           put (Help'countriesList tmp_1) = do {Data.Binary.Put.putWord32le 2278585758;
                                                Data.Binary.put tmp_1};
           put (Help'countriesListNotModified tmp_2) = do {Data.Binary.Put.putWord32le 2479628082;
                                                           Data.Binary.put tmp_2}}
instance Data.Binary.Binary Help'country'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _hidden_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _iso2_2 <- Data.Binary.get;
                     _default_name_3 <- Data.Binary.get;
                     _name_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _country_codes_5 <- Data.Binary.get;
                     GHC.Base.pure (Help'country' _hidden_1 _iso2_2 _default_name_3 _name_4 _country_codes_5)};
           put to_be_encoded_6 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_6._name,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_6._hidden,
                                                              0)];
                                     Data.Binary.put to_be_encoded_6._hidden;
                                     Data.Binary.put to_be_encoded_6._iso2;
                                     Data.Binary.put to_be_encoded_6._default_name;
                                     Data.Binary.put to_be_encoded_6._name;
                                     Data.Binary.put to_be_encoded_6._country_codes}}
data Help'Country = Help'country !Help'country'
data Help'country'
    = Help'country' {_hidden :: !(Maybe True'),
                     _iso2 :: !String',
                     _default_name :: !String',
                     _name :: !(Maybe String'),
                     _country_codes :: !(Vector Help'CountryCode)}
instance Data.Binary.Binary Help'Country
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3280440867 -> fmap Help'country Data.Binary.get}};
           put (Help'country tmp_1) = do {Data.Binary.Put.putWord32le 3280440867;
                                          Data.Binary.put tmp_1}}
instance Data.Binary.Binary Help'countryCode'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _country_code_1 <- Data.Binary.get;
                     _prefixes_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _patterns_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     GHC.Base.pure (Help'countryCode' _country_code_1 _prefixes_2 _patterns_3)};
           put to_be_encoded_4 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_4._patterns,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_4._prefixes,
                                                              0)];
                                     Data.Binary.put to_be_encoded_4._country_code;
                                     Data.Binary.put to_be_encoded_4._prefixes;
                                     Data.Binary.put to_be_encoded_4._patterns}}
data Help'CountryCode = Help'countryCode !Help'countryCode'
data Help'countryCode'
    = Help'countryCode' {_country_code :: !String',
                         _prefixes :: !(Maybe (Vector String')),
                         _patterns :: !(Maybe (Vector String'))}
instance Data.Binary.Binary Help'CountryCode
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1107543535 -> fmap Help'countryCode Data.Binary.get}};
           put (Help'countryCode tmp_1) = do {Data.Binary.Put.putWord32le 1107543535;
                                              Data.Binary.put tmp_1}}
instance Data.Binary.Binary Help'deepLinkInfo'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _update_app_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _message_2 <- Data.Binary.get;
                     _entities_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     GHC.Base.pure (Help'deepLinkInfo' _update_app_1 _message_2 _entities_3)};
           put to_be_encoded_4 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_4._entities,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_4._update_app,
                                                              0)];
                                     Data.Binary.put to_be_encoded_4._update_app;
                                     Data.Binary.put to_be_encoded_4._message;
                                     Data.Binary.put to_be_encoded_4._entities}}
instance Data.Binary.Binary Help'deepLinkInfoEmpty'
    where {get = GHC.Base.pure Help'deepLinkInfoEmpty';
           put to_be_encoded_0 = do GHC.Base.pure ()}
data Help'DeepLinkInfo
    = Help'deepLinkInfo !Help'deepLinkInfo'
    | Help'deepLinkInfoEmpty !Help'deepLinkInfoEmpty'
data Help'deepLinkInfo'
    = Help'deepLinkInfo' {_update_app :: !(Maybe True'),
                          _message :: !String',
                          _entities :: !(Maybe (Vector MessageEntity))}
data Help'deepLinkInfoEmpty' = Help'deepLinkInfoEmpty' {}
instance Data.Binary.Binary Help'DeepLinkInfo
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1783556146 -> fmap Help'deepLinkInfo Data.Binary.get;
                      1722786150 -> fmap Help'deepLinkInfoEmpty Data.Binary.get}};
           put (Help'deepLinkInfo tmp_1) = do {Data.Binary.Put.putWord32le 1783556146;
                                               Data.Binary.put tmp_1};
           put (Help'deepLinkInfoEmpty tmp_2) = do {Data.Binary.Put.putWord32le 1722786150;
                                                    Data.Binary.put tmp_2}}
instance Data.Binary.Binary Help'inviteText'
    where {get = do {_message_0 <- Data.Binary.get;
                     GHC.Base.pure (Help'inviteText' _message_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._message}
data Help'InviteText = Help'inviteText !Help'inviteText'
data Help'inviteText' = Help'inviteText' {_message :: !String'}
instance Data.Binary.Binary Help'InviteText
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {415997816 -> fmap Help'inviteText Data.Binary.get}};
           put (Help'inviteText tmp_1) = do {Data.Binary.Put.putWord32le 415997816;
                                             Data.Binary.put tmp_1}}
instance Data.Binary.Binary Help'passportConfig'
    where {get = do {_hash_0 <- Data.Binary.get;
                     _countries_langs_1 <- Data.Binary.get;
                     GHC.Base.pure (Help'passportConfig' _hash_0 _countries_langs_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._hash;
                                     Data.Binary.put to_be_encoded_2._countries_langs}}
instance Data.Binary.Binary Help'passportConfigNotModified'
    where {get = GHC.Base.pure Help'passportConfigNotModified';
           put to_be_encoded_0 = do GHC.Base.pure ()}
data Help'PassportConfig
    = Help'passportConfig !Help'passportConfig'
    | Help'passportConfigNotModified !Help'passportConfigNotModified'
data Help'passportConfig'
    = Help'passportConfig' {_hash :: !Int',
                            _countries_langs :: !DataJSON}
data Help'passportConfigNotModified'
    = Help'passportConfigNotModified' {}
instance Data.Binary.Binary Help'PassportConfig
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2694370991 -> fmap Help'passportConfig Data.Binary.get;
                      3216634967 -> fmap Help'passportConfigNotModified Data.Binary.get}};
           put (Help'passportConfig tmp_1) = do {Data.Binary.Put.putWord32le 2694370991;
                                                 Data.Binary.put tmp_1};
           put (Help'passportConfigNotModified tmp_2) = do {Data.Binary.Put.putWord32le 3216634967;
                                                            Data.Binary.put tmp_2}}
instance Data.Binary.Binary Help'peerColorOption'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _hidden_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _color_id_2 <- Data.Binary.get;
                     _colors_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _dark_colors_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _channel_min_level_5 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     GHC.Base.pure (Help'peerColorOption' _hidden_1 _color_id_2 _colors_3 _dark_colors_4 _channel_min_level_5)};
           put to_be_encoded_6 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_6._channel_min_level,
                                                              3),
                                                             (Data.Maybe.isJust to_be_encoded_6._dark_colors,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_6._colors,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_6._hidden,
                                                              0)];
                                     Data.Binary.put to_be_encoded_6._hidden;
                                     Data.Binary.put to_be_encoded_6._color_id;
                                     Data.Binary.put to_be_encoded_6._colors;
                                     Data.Binary.put to_be_encoded_6._dark_colors;
                                     Data.Binary.put to_be_encoded_6._channel_min_level}}
data Help'PeerColorOption
    = Help'peerColorOption !Help'peerColorOption'
data Help'peerColorOption'
    = Help'peerColorOption' {_hidden :: !(Maybe True'),
                             _color_id :: !Int',
                             _colors :: !(Maybe Help'PeerColorSet),
                             _dark_colors :: !(Maybe Help'PeerColorSet),
                             _channel_min_level :: !(Maybe Int')}
instance Data.Binary.Binary Help'PeerColorOption
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {4018417835 -> fmap Help'peerColorOption Data.Binary.get}};
           put (Help'peerColorOption tmp_1) = do {Data.Binary.Put.putWord32le 4018417835;
                                                  Data.Binary.put tmp_1}}
instance Data.Binary.Binary Help'peerColorProfileSet'
    where {get = do {_palette_colors_0 <- Data.Binary.get;
                     _bg_colors_1 <- Data.Binary.get;
                     _story_colors_2 <- Data.Binary.get;
                     GHC.Base.pure (Help'peerColorProfileSet' _palette_colors_0 _bg_colors_1 _story_colors_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._palette_colors;
                                     Data.Binary.put to_be_encoded_3._bg_colors;
                                     Data.Binary.put to_be_encoded_3._story_colors}}
instance Data.Binary.Binary Help'peerColorSet'
    where {get = do {_colors_0 <- Data.Binary.get;
                     GHC.Base.pure (Help'peerColorSet' _colors_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._colors}
data Help'PeerColorSet
    = Help'peerColorProfileSet !Help'peerColorProfileSet'
    | Help'peerColorSet !Help'peerColorSet'
data Help'peerColorProfileSet'
    = Help'peerColorProfileSet' {_palette_colors :: !(Vector Int'),
                                 _bg_colors :: !(Vector Int'),
                                 _story_colors :: !(Vector Int')}
data Help'peerColorSet'
    = Help'peerColorSet' {_colors :: !(Vector Int')}
instance Data.Binary.Binary Help'PeerColorSet
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1987928555 -> fmap Help'peerColorProfileSet Data.Binary.get;
                      639736408 -> fmap Help'peerColorSet Data.Binary.get}};
           put (Help'peerColorProfileSet tmp_1) = do {Data.Binary.Put.putWord32le 1987928555;
                                                      Data.Binary.put tmp_1};
           put (Help'peerColorSet tmp_2) = do {Data.Binary.Put.putWord32le 639736408;
                                               Data.Binary.put tmp_2}}
instance Data.Binary.Binary Help'peerColors'
    where {get = do {_hash_0 <- Data.Binary.get;
                     _colors_1 <- Data.Binary.get;
                     GHC.Base.pure (Help'peerColors' _hash_0 _colors_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._hash;
                                     Data.Binary.put to_be_encoded_2._colors}}
instance Data.Binary.Binary Help'peerColorsNotModified'
    where {get = GHC.Base.pure Help'peerColorsNotModified';
           put to_be_encoded_0 = do GHC.Base.pure ()}
data Help'PeerColors
    = Help'peerColors !Help'peerColors'
    | Help'peerColorsNotModified !Help'peerColorsNotModified'
data Help'peerColors'
    = Help'peerColors' {_hash :: !Int',
                        _colors :: !(Vector Help'PeerColorOption)}
data Help'peerColorsNotModified' = Help'peerColorsNotModified' {}
instance Data.Binary.Binary Help'PeerColors
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {16313608 -> fmap Help'peerColors Data.Binary.get;
                      732034510 -> fmap Help'peerColorsNotModified Data.Binary.get}};
           put (Help'peerColors tmp_1) = do {Data.Binary.Put.putWord32le 16313608;
                                             Data.Binary.put tmp_1};
           put (Help'peerColorsNotModified tmp_2) = do {Data.Binary.Put.putWord32le 732034510;
                                                        Data.Binary.put tmp_2}}
instance Data.Binary.Binary Help'premiumPromo'
    where {get = do {_status_text_0 <- Data.Binary.get;
                     _status_entities_1 <- Data.Binary.get;
                     _video_sections_2 <- Data.Binary.get;
                     _videos_3 <- Data.Binary.get;
                     _period_options_4 <- Data.Binary.get;
                     _users_5 <- Data.Binary.get;
                     GHC.Base.pure (Help'premiumPromo' _status_text_0 _status_entities_1 _video_sections_2 _videos_3 _period_options_4 _users_5)};
           put to_be_encoded_6 = do {Data.Binary.put to_be_encoded_6._status_text;
                                     Data.Binary.put to_be_encoded_6._status_entities;
                                     Data.Binary.put to_be_encoded_6._video_sections;
                                     Data.Binary.put to_be_encoded_6._videos;
                                     Data.Binary.put to_be_encoded_6._period_options;
                                     Data.Binary.put to_be_encoded_6._users}}
data Help'PremiumPromo = Help'premiumPromo !Help'premiumPromo'
data Help'premiumPromo'
    = Help'premiumPromo' {_status_text :: !String',
                          _status_entities :: !(Vector MessageEntity),
                          _video_sections :: !(Vector String'),
                          _videos :: !(Vector Document),
                          _period_options :: !(Vector PremiumSubscriptionOption),
                          _users :: !(Vector User)}
instance Data.Binary.Binary Help'PremiumPromo
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1395946908 -> fmap Help'premiumPromo Data.Binary.get}};
           put (Help'premiumPromo tmp_1) = do {Data.Binary.Put.putWord32le 1395946908;
                                               Data.Binary.put tmp_1}}
instance Data.Binary.Binary Help'promoData'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _proxy_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _expires_2 <- Data.Binary.get;
                     _peer_3 <- Data.Binary.get;
                     _chats_4 <- Data.Binary.get;
                     _users_5 <- Data.Binary.get;
                     _psa_type_6 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _psa_message_7 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     GHC.Base.pure (Help'promoData' _proxy_1 _expires_2 _peer_3 _chats_4 _users_5 _psa_type_6 _psa_message_7)};
           put to_be_encoded_8 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_8._psa_message,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_8._psa_type,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_8._proxy,
                                                              0)];
                                     Data.Binary.put to_be_encoded_8._proxy;
                                     Data.Binary.put to_be_encoded_8._expires;
                                     Data.Binary.put to_be_encoded_8._peer;
                                     Data.Binary.put to_be_encoded_8._chats;
                                     Data.Binary.put to_be_encoded_8._users;
                                     Data.Binary.put to_be_encoded_8._psa_type;
                                     Data.Binary.put to_be_encoded_8._psa_message}}
instance Data.Binary.Binary Help'promoDataEmpty'
    where {get = do {_expires_0 <- Data.Binary.get;
                     GHC.Base.pure (Help'promoDataEmpty' _expires_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._expires}
data Help'PromoData
    = Help'promoData !Help'promoData'
    | Help'promoDataEmpty !Help'promoDataEmpty'
data Help'promoData'
    = Help'promoData' {_proxy :: !(Maybe True'),
                       _expires :: !Int',
                       _peer :: !Peer,
                       _chats :: !(Vector Chat),
                       _users :: !(Vector User),
                       _psa_type :: !(Maybe String'),
                       _psa_message :: !(Maybe String')}
data Help'promoDataEmpty'
    = Help'promoDataEmpty' {_expires :: !Int'}
instance Data.Binary.Binary Help'PromoData
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2352576831 -> fmap Help'promoData Data.Binary.get;
                      2566302837 -> fmap Help'promoDataEmpty Data.Binary.get}};
           put (Help'promoData tmp_1) = do {Data.Binary.Put.putWord32le 2352576831;
                                            Data.Binary.put tmp_1};
           put (Help'promoDataEmpty tmp_2) = do {Data.Binary.Put.putWord32le 2566302837;
                                                 Data.Binary.put tmp_2}}
instance Data.Binary.Binary Help'recentMeUrls'
    where {get = do {_urls_0 <- Data.Binary.get;
                     _chats_1 <- Data.Binary.get;
                     _users_2 <- Data.Binary.get;
                     GHC.Base.pure (Help'recentMeUrls' _urls_0 _chats_1 _users_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._urls;
                                     Data.Binary.put to_be_encoded_3._chats;
                                     Data.Binary.put to_be_encoded_3._users}}
data Help'RecentMeUrls = Help'recentMeUrls !Help'recentMeUrls'
data Help'recentMeUrls'
    = Help'recentMeUrls' {_urls :: !(Vector RecentMeUrl),
                          _chats :: !(Vector Chat),
                          _users :: !(Vector User)}
instance Data.Binary.Binary Help'RecentMeUrls
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {235081943 -> fmap Help'recentMeUrls Data.Binary.get}};
           put (Help'recentMeUrls tmp_1) = do {Data.Binary.Put.putWord32le 235081943;
                                               Data.Binary.put tmp_1}}
instance Data.Binary.Binary Help'support'
    where {get = do {_phone_number_0 <- Data.Binary.get;
                     _user_1 <- Data.Binary.get;
                     GHC.Base.pure (Help'support' _phone_number_0 _user_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._phone_number;
                                     Data.Binary.put to_be_encoded_2._user}}
data Help'Support = Help'support !Help'support'
data Help'support'
    = Help'support' {_phone_number :: !String', _user :: !User}
instance Data.Binary.Binary Help'Support
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {398898678 -> fmap Help'support Data.Binary.get}};
           put (Help'support tmp_1) = do {Data.Binary.Put.putWord32le 398898678;
                                          Data.Binary.put tmp_1}}
instance Data.Binary.Binary Help'supportName'
    where {get = do {_name_0 <- Data.Binary.get;
                     GHC.Base.pure (Help'supportName' _name_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._name}
data Help'SupportName = Help'supportName !Help'supportName'
data Help'supportName' = Help'supportName' {_name :: !String'}
instance Data.Binary.Binary Help'SupportName
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2349199817 -> fmap Help'supportName Data.Binary.get}};
           put (Help'supportName tmp_1) = do {Data.Binary.Put.putWord32le 2349199817;
                                              Data.Binary.put tmp_1}}
instance Data.Binary.Binary Help'termsOfService'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _popup_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _id_2 <- Data.Binary.get;
                     _text_3 <- Data.Binary.get;
                     _entities_4 <- Data.Binary.get;
                     _min_age_confirm_5 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     GHC.Base.pure (Help'termsOfService' _popup_1 _id_2 _text_3 _entities_4 _min_age_confirm_5)};
           put to_be_encoded_6 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_6._min_age_confirm,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_6._popup,
                                                              0)];
                                     Data.Binary.put to_be_encoded_6._popup;
                                     Data.Binary.put to_be_encoded_6._id;
                                     Data.Binary.put to_be_encoded_6._text;
                                     Data.Binary.put to_be_encoded_6._entities;
                                     Data.Binary.put to_be_encoded_6._min_age_confirm}}
data Help'TermsOfService
    = Help'termsOfService !Help'termsOfService'
data Help'termsOfService'
    = Help'termsOfService' {_popup :: !(Maybe True'),
                            _id :: !DataJSON,
                            _text :: !String',
                            _entities :: !(Vector MessageEntity),
                            _min_age_confirm :: !(Maybe Int')}
instance Data.Binary.Binary Help'TermsOfService
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2013922064 -> fmap Help'termsOfService Data.Binary.get}};
           put (Help'termsOfService tmp_1) = do {Data.Binary.Put.putWord32le 2013922064;
                                                 Data.Binary.put tmp_1}}
instance Data.Binary.Binary Help'termsOfServiceUpdate'
    where {get = do {_expires_0 <- Data.Binary.get;
                     _terms_of_service_1 <- Data.Binary.get;
                     GHC.Base.pure (Help'termsOfServiceUpdate' _expires_0 _terms_of_service_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._expires;
                                     Data.Binary.put to_be_encoded_2._terms_of_service}}
instance Data.Binary.Binary Help'termsOfServiceUpdateEmpty'
    where {get = do {_expires_0 <- Data.Binary.get;
                     GHC.Base.pure (Help'termsOfServiceUpdateEmpty' _expires_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._expires}
data Help'TermsOfServiceUpdate
    = Help'termsOfServiceUpdate !Help'termsOfServiceUpdate'
    | Help'termsOfServiceUpdateEmpty !Help'termsOfServiceUpdateEmpty'
data Help'termsOfServiceUpdate'
    = Help'termsOfServiceUpdate' {_expires :: !Int',
                                  _terms_of_service :: !Help'TermsOfService}
data Help'termsOfServiceUpdateEmpty'
    = Help'termsOfServiceUpdateEmpty' {_expires :: !Int'}
instance Data.Binary.Binary Help'TermsOfServiceUpdate
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {686618977 -> fmap Help'termsOfServiceUpdate Data.Binary.get;
                      3811614591 -> fmap Help'termsOfServiceUpdateEmpty Data.Binary.get}};
           put (Help'termsOfServiceUpdate tmp_1) = do {Data.Binary.Put.putWord32le 686618977;
                                                       Data.Binary.put tmp_1};
           put (Help'termsOfServiceUpdateEmpty tmp_2) = do {Data.Binary.Put.putWord32le 3811614591;
                                                            Data.Binary.put tmp_2}}
instance Data.Binary.Binary Help'userInfo'
    where {get = do {_message_0 <- Data.Binary.get;
                     _entities_1 <- Data.Binary.get;
                     _author_2 <- Data.Binary.get;
                     _date_3 <- Data.Binary.get;
                     GHC.Base.pure (Help'userInfo' _message_0 _entities_1 _author_2 _date_3)};
           put to_be_encoded_4 = do {Data.Binary.put to_be_encoded_4._message;
                                     Data.Binary.put to_be_encoded_4._entities;
                                     Data.Binary.put to_be_encoded_4._author;
                                     Data.Binary.put to_be_encoded_4._date}}
instance Data.Binary.Binary Help'userInfoEmpty'
    where {get = GHC.Base.pure Help'userInfoEmpty';
           put to_be_encoded_0 = do GHC.Base.pure ()}
data Help'UserInfo
    = Help'userInfo !Help'userInfo'
    | Help'userInfoEmpty !Help'userInfoEmpty'
data Help'userInfo'
    = Help'userInfo' {_message :: !String',
                      _entities :: !(Vector MessageEntity),
                      _author :: !String',
                      _date :: !Int'}
data Help'userInfoEmpty' = Help'userInfoEmpty' {}
instance Data.Binary.Binary Help'UserInfo
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {32192344 -> fmap Help'userInfo Data.Binary.get;
                      4088278765 -> fmap Help'userInfoEmpty Data.Binary.get}};
           put (Help'userInfo tmp_1) = do {Data.Binary.Put.putWord32le 32192344;
                                           Data.Binary.put tmp_1};
           put (Help'userInfoEmpty tmp_2) = do {Data.Binary.Put.putWord32le 4088278765;
                                                Data.Binary.put tmp_2}}
instance Data.Binary.Binary Messages'affectedFoundMessages'
    where {get = do {_pts_0 <- Data.Binary.get;
                     _pts_count_1 <- Data.Binary.get;
                     _offset_2 <- Data.Binary.get;
                     _messages_3 <- Data.Binary.get;
                     GHC.Base.pure (Messages'affectedFoundMessages' _pts_0 _pts_count_1 _offset_2 _messages_3)};
           put to_be_encoded_4 = do {Data.Binary.put to_be_encoded_4._pts;
                                     Data.Binary.put to_be_encoded_4._pts_count;
                                     Data.Binary.put to_be_encoded_4._offset;
                                     Data.Binary.put to_be_encoded_4._messages}}
data Messages'AffectedFoundMessages
    = Messages'affectedFoundMessages !Messages'affectedFoundMessages'
data Messages'affectedFoundMessages'
    = Messages'affectedFoundMessages' {_pts :: !Int',
                                       _pts_count :: !Int',
                                       _offset :: !Int',
                                       _messages :: !(Vector Int')}
instance Data.Binary.Binary Messages'AffectedFoundMessages
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {4019011180 -> fmap Messages'affectedFoundMessages Data.Binary.get}};
           put (Messages'affectedFoundMessages tmp_1) = do {Data.Binary.Put.putWord32le 4019011180;
                                                            Data.Binary.put tmp_1}}
instance Data.Binary.Binary Messages'affectedHistory'
    where {get = do {_pts_0 <- Data.Binary.get;
                     _pts_count_1 <- Data.Binary.get;
                     _offset_2 <- Data.Binary.get;
                     GHC.Base.pure (Messages'affectedHistory' _pts_0 _pts_count_1 _offset_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._pts;
                                     Data.Binary.put to_be_encoded_3._pts_count;
                                     Data.Binary.put to_be_encoded_3._offset}}
data Messages'AffectedHistory
    = Messages'affectedHistory !Messages'affectedHistory'
data Messages'affectedHistory'
    = Messages'affectedHistory' {_pts :: !Int',
                                 _pts_count :: !Int',
                                 _offset :: !Int'}
instance Data.Binary.Binary Messages'AffectedHistory
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3025955281 -> fmap Messages'affectedHistory Data.Binary.get}};
           put (Messages'affectedHistory tmp_1) = do {Data.Binary.Put.putWord32le 3025955281;
                                                      Data.Binary.put tmp_1}}
instance Data.Binary.Binary Messages'affectedMessages'
    where {get = do {_pts_0 <- Data.Binary.get;
                     _pts_count_1 <- Data.Binary.get;
                     GHC.Base.pure (Messages'affectedMessages' _pts_0 _pts_count_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._pts;
                                     Data.Binary.put to_be_encoded_2._pts_count}}
data Messages'AffectedMessages
    = Messages'affectedMessages !Messages'affectedMessages'
data Messages'affectedMessages'
    = Messages'affectedMessages' {_pts :: !Int', _pts_count :: !Int'}
instance Data.Binary.Binary Messages'AffectedMessages
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2228326789 -> fmap Messages'affectedMessages Data.Binary.get}};
           put (Messages'affectedMessages tmp_1) = do {Data.Binary.Put.putWord32le 2228326789;
                                                       Data.Binary.put tmp_1}}
instance Data.Binary.Binary Messages'allStickers'
    where {get = do {_hash_0 <- Data.Binary.get;
                     _sets_1 <- Data.Binary.get;
                     GHC.Base.pure (Messages'allStickers' _hash_0 _sets_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._hash;
                                     Data.Binary.put to_be_encoded_2._sets}}
instance Data.Binary.Binary Messages'allStickersNotModified'
    where {get = GHC.Base.pure Messages'allStickersNotModified';
           put to_be_encoded_0 = do GHC.Base.pure ()}
data Messages'AllStickers
    = Messages'allStickers !Messages'allStickers'
    | Messages'allStickersNotModified !Messages'allStickersNotModified'
data Messages'allStickers'
    = Messages'allStickers' {_hash :: !Long',
                             _sets :: !(Vector StickerSet)}
data Messages'allStickersNotModified'
    = Messages'allStickersNotModified' {}
instance Data.Binary.Binary Messages'AllStickers
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3451637435 -> fmap Messages'allStickers Data.Binary.get;
                      3898999491 -> fmap Messages'allStickersNotModified Data.Binary.get}};
           put (Messages'allStickers tmp_1) = do {Data.Binary.Put.putWord32le 3451637435;
                                                  Data.Binary.put tmp_1};
           put (Messages'allStickersNotModified tmp_2) = do {Data.Binary.Put.putWord32le 3898999491;
                                                             Data.Binary.put tmp_2}}
instance Data.Binary.Binary Messages'archivedStickers'
    where {get = do {_count_0 <- Data.Binary.get;
                     _sets_1 <- Data.Binary.get;
                     GHC.Base.pure (Messages'archivedStickers' _count_0 _sets_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._count;
                                     Data.Binary.put to_be_encoded_2._sets}}
data Messages'ArchivedStickers
    = Messages'archivedStickers !Messages'archivedStickers'
data Messages'archivedStickers'
    = Messages'archivedStickers' {_count :: !Int',
                                  _sets :: !(Vector StickerSetCovered)}
instance Data.Binary.Binary Messages'ArchivedStickers
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1338747336 -> fmap Messages'archivedStickers Data.Binary.get}};
           put (Messages'archivedStickers tmp_1) = do {Data.Binary.Put.putWord32le 1338747336;
                                                       Data.Binary.put tmp_1}}
instance Data.Binary.Binary Messages'availableReactions'
    where {get = do {_hash_0 <- Data.Binary.get;
                     _reactions_1 <- Data.Binary.get;
                     GHC.Base.pure (Messages'availableReactions' _hash_0 _reactions_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._hash;
                                     Data.Binary.put to_be_encoded_2._reactions}}
instance Data.Binary.Binary Messages'availableReactionsNotModified'
    where {get = GHC.Base.pure Messages'availableReactionsNotModified';
           put to_be_encoded_0 = do GHC.Base.pure ()}
data Messages'AvailableReactions
    = Messages'availableReactions !Messages'availableReactions'
    | Messages'availableReactionsNotModified !Messages'availableReactionsNotModified'
data Messages'availableReactions'
    = Messages'availableReactions' {_hash :: !Int',
                                    _reactions :: !(Vector AvailableReaction)}
data Messages'availableReactionsNotModified'
    = Messages'availableReactionsNotModified' {}
instance Data.Binary.Binary Messages'AvailableReactions
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1989032621 -> fmap Messages'availableReactions Data.Binary.get;
                      2668042583 -> fmap Messages'availableReactionsNotModified Data.Binary.get}};
           put (Messages'availableReactions tmp_1) = do {Data.Binary.Put.putWord32le 1989032621;
                                                         Data.Binary.put tmp_1};
           put (Messages'availableReactionsNotModified tmp_2) = do {Data.Binary.Put.putWord32le 2668042583;
                                                                    Data.Binary.put tmp_2}}
instance Data.Binary.Binary Messages'botApp'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _inactive_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _request_write_access_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _has_settings_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _app_4 <- Data.Binary.get;
                     GHC.Base.pure (Messages'botApp' _inactive_1 _request_write_access_2 _has_settings_3 _app_4)};
           put to_be_encoded_5 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_5._has_settings,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_5._request_write_access,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_5._inactive,
                                                              0)];
                                     Data.Binary.put to_be_encoded_5._inactive;
                                     Data.Binary.put to_be_encoded_5._request_write_access;
                                     Data.Binary.put to_be_encoded_5._has_settings;
                                     Data.Binary.put to_be_encoded_5._app}}
data Messages'BotApp = Messages'botApp !Messages'botApp'
data Messages'botApp'
    = Messages'botApp' {_inactive :: !(Maybe True'),
                        _request_write_access :: !(Maybe True'),
                        _has_settings :: !(Maybe True'),
                        _app :: !BotApp}
instance Data.Binary.Binary Messages'BotApp
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3947933173 -> fmap Messages'botApp Data.Binary.get}};
           put (Messages'botApp tmp_1) = do {Data.Binary.Put.putWord32le 3947933173;
                                             Data.Binary.put tmp_1}}
instance Data.Binary.Binary Messages'botCallbackAnswer'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _alert_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _has_url_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     _native_ui_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 4);
                     _message_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _url_5 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _cache_time_6 <- Data.Binary.get;
                     GHC.Base.pure (Messages'botCallbackAnswer' _alert_1 _has_url_2 _native_ui_3 _message_4 _url_5 _cache_time_6)};
           put to_be_encoded_7 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_7._url,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_7._message,
                                                              0),
                                                             (Data.Maybe.isJust to_be_encoded_7._native_ui,
                                                              4),
                                                             (Data.Maybe.isJust to_be_encoded_7._has_url,
                                                              3),
                                                             (Data.Maybe.isJust to_be_encoded_7._alert,
                                                              1)];
                                     Data.Binary.put to_be_encoded_7._alert;
                                     Data.Binary.put to_be_encoded_7._has_url;
                                     Data.Binary.put to_be_encoded_7._native_ui;
                                     Data.Binary.put to_be_encoded_7._message;
                                     Data.Binary.put to_be_encoded_7._url;
                                     Data.Binary.put to_be_encoded_7._cache_time}}
data Messages'BotCallbackAnswer
    = Messages'botCallbackAnswer !Messages'botCallbackAnswer'
data Messages'botCallbackAnswer'
    = Messages'botCallbackAnswer' {_alert :: !(Maybe True'),
                                   _has_url :: !(Maybe True'),
                                   _native_ui :: !(Maybe True'),
                                   _message :: !(Maybe String'),
                                   _url :: !(Maybe String'),
                                   _cache_time :: !Int'}
instance Data.Binary.Binary Messages'BotCallbackAnswer
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {911761060 -> fmap Messages'botCallbackAnswer Data.Binary.get}};
           put (Messages'botCallbackAnswer tmp_1) = do {Data.Binary.Put.putWord32le 911761060;
                                                        Data.Binary.put tmp_1}}
instance Data.Binary.Binary Messages'botResults'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _gallery_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _query_id_2 <- Data.Binary.get;
                     _next_offset_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _switch_pm_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _switch_webview_5 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     _results_6 <- Data.Binary.get;
                     _cache_time_7 <- Data.Binary.get;
                     _users_8 <- Data.Binary.get;
                     GHC.Base.pure (Messages'botResults' _gallery_1 _query_id_2 _next_offset_3 _switch_pm_4 _switch_webview_5 _results_6 _cache_time_7 _users_8)};
           put to_be_encoded_9 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_9._switch_webview,
                                                              3),
                                                             (Data.Maybe.isJust to_be_encoded_9._switch_pm,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_9._next_offset,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_9._gallery,
                                                              0)];
                                     Data.Binary.put to_be_encoded_9._gallery;
                                     Data.Binary.put to_be_encoded_9._query_id;
                                     Data.Binary.put to_be_encoded_9._next_offset;
                                     Data.Binary.put to_be_encoded_9._switch_pm;
                                     Data.Binary.put to_be_encoded_9._switch_webview;
                                     Data.Binary.put to_be_encoded_9._results;
                                     Data.Binary.put to_be_encoded_9._cache_time;
                                     Data.Binary.put to_be_encoded_9._users}}
data Messages'BotResults
    = Messages'botResults !Messages'botResults'
data Messages'botResults'
    = Messages'botResults' {_gallery :: !(Maybe True'),
                            _query_id :: !Long',
                            _next_offset :: !(Maybe String'),
                            _switch_pm :: !(Maybe InlineBotSwitchPM),
                            _switch_webview :: !(Maybe InlineBotWebView),
                            _results :: !(Vector BotInlineResult),
                            _cache_time :: !Int',
                            _users :: !(Vector User)}
instance Data.Binary.Binary Messages'BotResults
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3760321270 -> fmap Messages'botResults Data.Binary.get}};
           put (Messages'botResults tmp_1) = do {Data.Binary.Put.putWord32le 3760321270;
                                                 Data.Binary.put tmp_1}}
instance Data.Binary.Binary Messages'chatAdminsWithInvites'
    where {get = do {_admins_0 <- Data.Binary.get;
                     _users_1 <- Data.Binary.get;
                     GHC.Base.pure (Messages'chatAdminsWithInvites' _admins_0 _users_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._admins;
                                     Data.Binary.put to_be_encoded_2._users}}
data Messages'ChatAdminsWithInvites
    = Messages'chatAdminsWithInvites !Messages'chatAdminsWithInvites'
data Messages'chatAdminsWithInvites'
    = Messages'chatAdminsWithInvites' {_admins :: !(Vector ChatAdminWithInvites),
                                       _users :: !(Vector User)}
instance Data.Binary.Binary Messages'ChatAdminsWithInvites
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3063640791 -> fmap Messages'chatAdminsWithInvites Data.Binary.get}};
           put (Messages'chatAdminsWithInvites tmp_1) = do {Data.Binary.Put.putWord32le 3063640791;
                                                            Data.Binary.put tmp_1}}
instance Data.Binary.Binary Messages'chatFull'
    where {get = do {_full_chat_0 <- Data.Binary.get;
                     _chats_1 <- Data.Binary.get;
                     _users_2 <- Data.Binary.get;
                     GHC.Base.pure (Messages'chatFull' _full_chat_0 _chats_1 _users_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._full_chat;
                                     Data.Binary.put to_be_encoded_3._chats;
                                     Data.Binary.put to_be_encoded_3._users}}
data Messages'ChatFull = Messages'chatFull !Messages'chatFull'
data Messages'chatFull'
    = Messages'chatFull' {_full_chat :: !ChatFull,
                          _chats :: !(Vector Chat),
                          _users :: !(Vector User)}
instance Data.Binary.Binary Messages'ChatFull
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3856126364 -> fmap Messages'chatFull Data.Binary.get}};
           put (Messages'chatFull tmp_1) = do {Data.Binary.Put.putWord32le 3856126364;
                                               Data.Binary.put tmp_1}}
instance Data.Binary.Binary Messages'chatInviteImporters'
    where {get = do {_count_0 <- Data.Binary.get;
                     _importers_1 <- Data.Binary.get;
                     _users_2 <- Data.Binary.get;
                     GHC.Base.pure (Messages'chatInviteImporters' _count_0 _importers_1 _users_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._count;
                                     Data.Binary.put to_be_encoded_3._importers;
                                     Data.Binary.put to_be_encoded_3._users}}
data Messages'ChatInviteImporters
    = Messages'chatInviteImporters !Messages'chatInviteImporters'
data Messages'chatInviteImporters'
    = Messages'chatInviteImporters' {_count :: !Int',
                                     _importers :: !(Vector ChatInviteImporter),
                                     _users :: !(Vector User)}
instance Data.Binary.Binary Messages'ChatInviteImporters
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2176233482 -> fmap Messages'chatInviteImporters Data.Binary.get}};
           put (Messages'chatInviteImporters tmp_1) = do {Data.Binary.Put.putWord32le 2176233482;
                                                          Data.Binary.put tmp_1}}
instance Data.Binary.Binary Messages'chats'
    where {get = do {_chats_0 <- Data.Binary.get;
                     GHC.Base.pure (Messages'chats' _chats_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._chats}
instance Data.Binary.Binary Messages'chatsSlice'
    where {get = do {_count_0 <- Data.Binary.get;
                     _chats_1 <- Data.Binary.get;
                     GHC.Base.pure (Messages'chatsSlice' _count_0 _chats_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._count;
                                     Data.Binary.put to_be_encoded_2._chats}}
data Messages'Chats
    = Messages'chats !Messages'chats'
    | Messages'chatsSlice !Messages'chatsSlice'
data Messages'chats' = Messages'chats' {_chats :: !(Vector Chat)}
data Messages'chatsSlice'
    = Messages'chatsSlice' {_count :: !Int', _chats :: !(Vector Chat)}
instance Data.Binary.Binary Messages'Chats
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1694474197 -> fmap Messages'chats Data.Binary.get;
                      2631405892 -> fmap Messages'chatsSlice Data.Binary.get}};
           put (Messages'chats tmp_1) = do {Data.Binary.Put.putWord32le 1694474197;
                                            Data.Binary.put tmp_1};
           put (Messages'chatsSlice tmp_2) = do {Data.Binary.Put.putWord32le 2631405892;
                                                 Data.Binary.put tmp_2}}
instance Data.Binary.Binary Messages'checkedHistoryImportPeer'
    where {get = do {_confirm_text_0 <- Data.Binary.get;
                     GHC.Base.pure (Messages'checkedHistoryImportPeer' _confirm_text_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._confirm_text}
data Messages'CheckedHistoryImportPeer
    = Messages'checkedHistoryImportPeer !Messages'checkedHistoryImportPeer'
data Messages'checkedHistoryImportPeer'
    = Messages'checkedHistoryImportPeer' {_confirm_text :: !String'}
instance Data.Binary.Binary Messages'CheckedHistoryImportPeer
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2723014423 -> fmap Messages'checkedHistoryImportPeer Data.Binary.get}};
           put (Messages'checkedHistoryImportPeer tmp_1) = do {Data.Binary.Put.putWord32le 2723014423;
                                                               Data.Binary.put tmp_1}}
instance Data.Binary.Binary Messages'dhConfig'
    where {get = do {_g_0 <- Data.Binary.get;
                     _p_1 <- Data.Binary.get;
                     _version_2 <- Data.Binary.get;
                     _random_3 <- Data.Binary.get;
                     GHC.Base.pure (Messages'dhConfig' _g_0 _p_1 _version_2 _random_3)};
           put to_be_encoded_4 = do {Data.Binary.put to_be_encoded_4._g;
                                     Data.Binary.put to_be_encoded_4._p;
                                     Data.Binary.put to_be_encoded_4._version;
                                     Data.Binary.put to_be_encoded_4._random}}
instance Data.Binary.Binary Messages'dhConfigNotModified'
    where {get = do {_random_0 <- Data.Binary.get;
                     GHC.Base.pure (Messages'dhConfigNotModified' _random_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._random}
data Messages'DhConfig
    = Messages'dhConfig !Messages'dhConfig'
    | Messages'dhConfigNotModified !Messages'dhConfigNotModified'
data Messages'dhConfig'
    = Messages'dhConfig' {_g :: !Int',
                          _p :: !Bytes',
                          _version :: !Int',
                          _random :: !Bytes'}
data Messages'dhConfigNotModified'
    = Messages'dhConfigNotModified' {_random :: !Bytes'}
instance Data.Binary.Binary Messages'DhConfig
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {740433629 -> fmap Messages'dhConfig Data.Binary.get;
                      3236054581 -> fmap Messages'dhConfigNotModified Data.Binary.get}};
           put (Messages'dhConfig tmp_1) = do {Data.Binary.Put.putWord32le 740433629;
                                               Data.Binary.put tmp_1};
           put (Messages'dhConfigNotModified tmp_2) = do {Data.Binary.Put.putWord32le 3236054581;
                                                          Data.Binary.put tmp_2}}
instance Data.Binary.Binary Messages'dialogs'
    where {get = do {_dialogs_0 <- Data.Binary.get;
                     _messages_1 <- Data.Binary.get;
                     _chats_2 <- Data.Binary.get;
                     _users_3 <- Data.Binary.get;
                     GHC.Base.pure (Messages'dialogs' _dialogs_0 _messages_1 _chats_2 _users_3)};
           put to_be_encoded_4 = do {Data.Binary.put to_be_encoded_4._dialogs;
                                     Data.Binary.put to_be_encoded_4._messages;
                                     Data.Binary.put to_be_encoded_4._chats;
                                     Data.Binary.put to_be_encoded_4._users}}
instance Data.Binary.Binary Messages'dialogsNotModified'
    where {get = do {_count_0 <- Data.Binary.get;
                     GHC.Base.pure (Messages'dialogsNotModified' _count_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._count}
instance Data.Binary.Binary Messages'dialogsSlice'
    where {get = do {_count_0 <- Data.Binary.get;
                     _dialogs_1 <- Data.Binary.get;
                     _messages_2 <- Data.Binary.get;
                     _chats_3 <- Data.Binary.get;
                     _users_4 <- Data.Binary.get;
                     GHC.Base.pure (Messages'dialogsSlice' _count_0 _dialogs_1 _messages_2 _chats_3 _users_4)};
           put to_be_encoded_5 = do {Data.Binary.put to_be_encoded_5._count;
                                     Data.Binary.put to_be_encoded_5._dialogs;
                                     Data.Binary.put to_be_encoded_5._messages;
                                     Data.Binary.put to_be_encoded_5._chats;
                                     Data.Binary.put to_be_encoded_5._users}}
data Messages'Dialogs
    = Messages'dialogs !Messages'dialogs'
    | Messages'dialogsNotModified !Messages'dialogsNotModified'
    | Messages'dialogsSlice !Messages'dialogsSlice'
data Messages'dialogs'
    = Messages'dialogs' {_dialogs :: !(Vector Dialog),
                         _messages :: !(Vector Message),
                         _chats :: !(Vector Chat),
                         _users :: !(Vector User)}
data Messages'dialogsNotModified'
    = Messages'dialogsNotModified' {_count :: !Int'}
data Messages'dialogsSlice'
    = Messages'dialogsSlice' {_count :: !Int',
                              _dialogs :: !(Vector Dialog),
                              _messages :: !(Vector Message),
                              _chats :: !(Vector Chat),
                              _users :: !(Vector User)}
instance Data.Binary.Binary Messages'Dialogs
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {364538944 -> fmap Messages'dialogs Data.Binary.get;
                      4041467286 -> fmap Messages'dialogsNotModified Data.Binary.get;
                      1910543603 -> fmap Messages'dialogsSlice Data.Binary.get}};
           put (Messages'dialogs tmp_1) = do {Data.Binary.Put.putWord32le 364538944;
                                              Data.Binary.put tmp_1};
           put (Messages'dialogsNotModified tmp_2) = do {Data.Binary.Put.putWord32le 4041467286;
                                                         Data.Binary.put tmp_2};
           put (Messages'dialogsSlice tmp_3) = do {Data.Binary.Put.putWord32le 1910543603;
                                                   Data.Binary.put tmp_3}}
instance Data.Binary.Binary Messages'discussionMessage'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _messages_1 <- Data.Binary.get;
                     _max_id_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _read_inbox_max_id_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _read_outbox_max_id_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _unread_count_5 <- Data.Binary.get;
                     _chats_6 <- Data.Binary.get;
                     _users_7 <- Data.Binary.get;
                     GHC.Base.pure (Messages'discussionMessage' _messages_1 _max_id_2 _read_inbox_max_id_3 _read_outbox_max_id_4 _unread_count_5 _chats_6 _users_7)};
           put to_be_encoded_8 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_8._read_outbox_max_id,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_8._read_inbox_max_id,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_8._max_id,
                                                              0)];
                                     Data.Binary.put to_be_encoded_8._messages;
                                     Data.Binary.put to_be_encoded_8._max_id;
                                     Data.Binary.put to_be_encoded_8._read_inbox_max_id;
                                     Data.Binary.put to_be_encoded_8._read_outbox_max_id;
                                     Data.Binary.put to_be_encoded_8._unread_count;
                                     Data.Binary.put to_be_encoded_8._chats;
                                     Data.Binary.put to_be_encoded_8._users}}
data Messages'DiscussionMessage
    = Messages'discussionMessage !Messages'discussionMessage'
data Messages'discussionMessage'
    = Messages'discussionMessage' {_messages :: !(Vector Message),
                                   _max_id :: !(Maybe Int'),
                                   _read_inbox_max_id :: !(Maybe Int'),
                                   _read_outbox_max_id :: !(Maybe Int'),
                                   _unread_count :: !Int',
                                   _chats :: !(Vector Chat),
                                   _users :: !(Vector User)}
instance Data.Binary.Binary Messages'DiscussionMessage
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2788431746 -> fmap Messages'discussionMessage Data.Binary.get}};
           put (Messages'discussionMessage tmp_1) = do {Data.Binary.Put.putWord32le 2788431746;
                                                        Data.Binary.put tmp_1}}
instance Data.Binary.Binary Messages'emojiGroups'
    where {get = do {_hash_0 <- Data.Binary.get;
                     _groups_1 <- Data.Binary.get;
                     GHC.Base.pure (Messages'emojiGroups' _hash_0 _groups_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._hash;
                                     Data.Binary.put to_be_encoded_2._groups}}
instance Data.Binary.Binary Messages'emojiGroupsNotModified'
    where {get = GHC.Base.pure Messages'emojiGroupsNotModified';
           put to_be_encoded_0 = do GHC.Base.pure ()}
data Messages'EmojiGroups
    = Messages'emojiGroups !Messages'emojiGroups'
    | Messages'emojiGroupsNotModified !Messages'emojiGroupsNotModified'
data Messages'emojiGroups'
    = Messages'emojiGroups' {_hash :: !Int',
                             _groups :: !(Vector EmojiGroup)}
data Messages'emojiGroupsNotModified'
    = Messages'emojiGroupsNotModified' {}
instance Data.Binary.Binary Messages'EmojiGroups
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2283780427 -> fmap Messages'emojiGroups Data.Binary.get;
                      1874111879 -> fmap Messages'emojiGroupsNotModified Data.Binary.get}};
           put (Messages'emojiGroups tmp_1) = do {Data.Binary.Put.putWord32le 2283780427;
                                                  Data.Binary.put tmp_1};
           put (Messages'emojiGroupsNotModified tmp_2) = do {Data.Binary.Put.putWord32le 1874111879;
                                                             Data.Binary.put tmp_2}}
instance Data.Binary.Binary Messages'exportedChatInvite'
    where {get = do {_invite_0 <- Data.Binary.get;
                     _users_1 <- Data.Binary.get;
                     GHC.Base.pure (Messages'exportedChatInvite' _invite_0 _users_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._invite;
                                     Data.Binary.put to_be_encoded_2._users}}
instance Data.Binary.Binary Messages'exportedChatInviteReplaced'
    where {get = do {_invite_0 <- Data.Binary.get;
                     _new_invite_1 <- Data.Binary.get;
                     _users_2 <- Data.Binary.get;
                     GHC.Base.pure (Messages'exportedChatInviteReplaced' _invite_0 _new_invite_1 _users_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._invite;
                                     Data.Binary.put to_be_encoded_3._new_invite;
                                     Data.Binary.put to_be_encoded_3._users}}
data Messages'ExportedChatInvite
    = Messages'exportedChatInvite !Messages'exportedChatInvite'
    | Messages'exportedChatInviteReplaced !Messages'exportedChatInviteReplaced'
data Messages'exportedChatInvite'
    = Messages'exportedChatInvite' {_invite :: !ExportedChatInvite,
                                    _users :: !(Vector User)}
data Messages'exportedChatInviteReplaced'
    = Messages'exportedChatInviteReplaced' {_invite :: !ExportedChatInvite,
                                            _new_invite :: !ExportedChatInvite,
                                            _users :: !(Vector User)}
instance Data.Binary.Binary Messages'ExportedChatInvite
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {410107472 -> fmap Messages'exportedChatInvite Data.Binary.get;
                      572915951 -> fmap Messages'exportedChatInviteReplaced Data.Binary.get}};
           put (Messages'exportedChatInvite tmp_1) = do {Data.Binary.Put.putWord32le 410107472;
                                                         Data.Binary.put tmp_1};
           put (Messages'exportedChatInviteReplaced tmp_2) = do {Data.Binary.Put.putWord32le 572915951;
                                                                 Data.Binary.put tmp_2}}
instance Data.Binary.Binary Messages'exportedChatInvites'
    where {get = do {_count_0 <- Data.Binary.get;
                     _invites_1 <- Data.Binary.get;
                     _users_2 <- Data.Binary.get;
                     GHC.Base.pure (Messages'exportedChatInvites' _count_0 _invites_1 _users_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._count;
                                     Data.Binary.put to_be_encoded_3._invites;
                                     Data.Binary.put to_be_encoded_3._users}}
data Messages'ExportedChatInvites
    = Messages'exportedChatInvites !Messages'exportedChatInvites'
data Messages'exportedChatInvites'
    = Messages'exportedChatInvites' {_count :: !Int',
                                     _invites :: !(Vector ExportedChatInvite),
                                     _users :: !(Vector User)}
instance Data.Binary.Binary Messages'ExportedChatInvites
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3183881676 -> fmap Messages'exportedChatInvites Data.Binary.get}};
           put (Messages'exportedChatInvites tmp_1) = do {Data.Binary.Put.putWord32le 3183881676;
                                                          Data.Binary.put tmp_1}}
instance Data.Binary.Binary Messages'favedStickers'
    where {get = do {_hash_0 <- Data.Binary.get;
                     _packs_1 <- Data.Binary.get;
                     _stickers_2 <- Data.Binary.get;
                     GHC.Base.pure (Messages'favedStickers' _hash_0 _packs_1 _stickers_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._hash;
                                     Data.Binary.put to_be_encoded_3._packs;
                                     Data.Binary.put to_be_encoded_3._stickers}}
instance Data.Binary.Binary Messages'favedStickersNotModified'
    where {get = GHC.Base.pure Messages'favedStickersNotModified';
           put to_be_encoded_0 = do GHC.Base.pure ()}
data Messages'FavedStickers
    = Messages'favedStickers !Messages'favedStickers'
    | Messages'favedStickersNotModified !Messages'favedStickersNotModified'
data Messages'favedStickers'
    = Messages'favedStickers' {_hash :: !Long',
                               _packs :: !(Vector StickerPack),
                               _stickers :: !(Vector Document)}
data Messages'favedStickersNotModified'
    = Messages'favedStickersNotModified' {}
instance Data.Binary.Binary Messages'FavedStickers
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {750063767 -> fmap Messages'favedStickers Data.Binary.get;
                      2660214483 -> fmap Messages'favedStickersNotModified Data.Binary.get}};
           put (Messages'favedStickers tmp_1) = do {Data.Binary.Put.putWord32le 750063767;
                                                    Data.Binary.put tmp_1};
           put (Messages'favedStickersNotModified tmp_2) = do {Data.Binary.Put.putWord32le 2660214483;
                                                               Data.Binary.put tmp_2}}
instance Data.Binary.Binary Messages'featuredStickers'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _premium_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _hash_2 <- Data.Binary.get;
                     _count_3 <- Data.Binary.get;
                     _sets_4 <- Data.Binary.get;
                     _unread_5 <- Data.Binary.get;
                     GHC.Base.pure (Messages'featuredStickers' _premium_1 _hash_2 _count_3 _sets_4 _unread_5)};
           put to_be_encoded_6 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_6._premium,
                                                              0)];
                                     Data.Binary.put to_be_encoded_6._premium;
                                     Data.Binary.put to_be_encoded_6._hash;
                                     Data.Binary.put to_be_encoded_6._count;
                                     Data.Binary.put to_be_encoded_6._sets;
                                     Data.Binary.put to_be_encoded_6._unread}}
instance Data.Binary.Binary Messages'featuredStickersNotModified'
    where {get = do {_count_0 <- Data.Binary.get;
                     GHC.Base.pure (Messages'featuredStickersNotModified' _count_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._count}
data Messages'FeaturedStickers
    = Messages'featuredStickers !Messages'featuredStickers'
    | Messages'featuredStickersNotModified !Messages'featuredStickersNotModified'
data Messages'featuredStickers'
    = Messages'featuredStickers' {_premium :: !(Maybe True'),
                                  _hash :: !Long',
                                  _count :: !Int',
                                  _sets :: !(Vector StickerSetCovered),
                                  _unread :: !(Vector Long')}
data Messages'featuredStickersNotModified'
    = Messages'featuredStickersNotModified' {_count :: !Int'}
instance Data.Binary.Binary Messages'FeaturedStickers
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3191351558 -> fmap Messages'featuredStickers Data.Binary.get;
                      3336309862 -> fmap Messages'featuredStickersNotModified Data.Binary.get}};
           put (Messages'featuredStickers tmp_1) = do {Data.Binary.Put.putWord32le 3191351558;
                                                       Data.Binary.put tmp_1};
           put (Messages'featuredStickersNotModified tmp_2) = do {Data.Binary.Put.putWord32le 3336309862;
                                                                  Data.Binary.put tmp_2}}
instance Data.Binary.Binary Messages'forumTopics'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _order_by_create_date_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _count_2 <- Data.Binary.get;
                     _topics_3 <- Data.Binary.get;
                     _messages_4 <- Data.Binary.get;
                     _chats_5 <- Data.Binary.get;
                     _users_6 <- Data.Binary.get;
                     _pts_7 <- Data.Binary.get;
                     GHC.Base.pure (Messages'forumTopics' _order_by_create_date_1 _count_2 _topics_3 _messages_4 _chats_5 _users_6 _pts_7)};
           put to_be_encoded_8 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_8._order_by_create_date,
                                                              0)];
                                     Data.Binary.put to_be_encoded_8._order_by_create_date;
                                     Data.Binary.put to_be_encoded_8._count;
                                     Data.Binary.put to_be_encoded_8._topics;
                                     Data.Binary.put to_be_encoded_8._messages;
                                     Data.Binary.put to_be_encoded_8._chats;
                                     Data.Binary.put to_be_encoded_8._users;
                                     Data.Binary.put to_be_encoded_8._pts}}
data Messages'ForumTopics
    = Messages'forumTopics !Messages'forumTopics'
data Messages'forumTopics'
    = Messages'forumTopics' {_order_by_create_date :: !(Maybe True'),
                             _count :: !Int',
                             _topics :: !(Vector ForumTopic),
                             _messages :: !(Vector Message),
                             _chats :: !(Vector Chat),
                             _users :: !(Vector User),
                             _pts :: !Int'}
instance Data.Binary.Binary Messages'ForumTopics
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {913709011 -> fmap Messages'forumTopics Data.Binary.get}};
           put (Messages'forumTopics tmp_1) = do {Data.Binary.Put.putWord32le 913709011;
                                                  Data.Binary.put tmp_1}}
instance Data.Binary.Binary Messages'foundStickerSets'
    where {get = do {_hash_0 <- Data.Binary.get;
                     _sets_1 <- Data.Binary.get;
                     GHC.Base.pure (Messages'foundStickerSets' _hash_0 _sets_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._hash;
                                     Data.Binary.put to_be_encoded_2._sets}}
instance Data.Binary.Binary Messages'foundStickerSetsNotModified'
    where {get = GHC.Base.pure Messages'foundStickerSetsNotModified';
           put to_be_encoded_0 = do GHC.Base.pure ()}
data Messages'FoundStickerSets
    = Messages'foundStickerSets !Messages'foundStickerSets'
    | Messages'foundStickerSetsNotModified !Messages'foundStickerSetsNotModified'
data Messages'foundStickerSets'
    = Messages'foundStickerSets' {_hash :: !Long',
                                  _sets :: !(Vector StickerSetCovered)}
data Messages'foundStickerSetsNotModified'
    = Messages'foundStickerSetsNotModified' {}
instance Data.Binary.Binary Messages'FoundStickerSets
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2331024850 -> fmap Messages'foundStickerSets Data.Binary.get;
                      223655517 -> fmap Messages'foundStickerSetsNotModified Data.Binary.get}};
           put (Messages'foundStickerSets tmp_1) = do {Data.Binary.Put.putWord32le 2331024850;
                                                       Data.Binary.put tmp_1};
           put (Messages'foundStickerSetsNotModified tmp_2) = do {Data.Binary.Put.putWord32le 223655517;
                                                                  Data.Binary.put tmp_2}}
instance Data.Binary.Binary Messages'highScores'
    where {get = do {_scores_0 <- Data.Binary.get;
                     _users_1 <- Data.Binary.get;
                     GHC.Base.pure (Messages'highScores' _scores_0 _users_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._scores;
                                     Data.Binary.put to_be_encoded_2._users}}
data Messages'HighScores
    = Messages'highScores !Messages'highScores'
data Messages'highScores'
    = Messages'highScores' {_scores :: !(Vector HighScore),
                            _users :: !(Vector User)}
instance Data.Binary.Binary Messages'HighScores
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2587622809 -> fmap Messages'highScores Data.Binary.get}};
           put (Messages'highScores tmp_1) = do {Data.Binary.Put.putWord32le 2587622809;
                                                 Data.Binary.put tmp_1}}
instance Data.Binary.Binary Messages'historyImport'
    where {get = do {_id_0 <- Data.Binary.get;
                     GHC.Base.pure (Messages'historyImport' _id_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._id}
data Messages'HistoryImport
    = Messages'historyImport !Messages'historyImport'
data Messages'historyImport'
    = Messages'historyImport' {_id :: !Long'}
instance Data.Binary.Binary Messages'HistoryImport
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {375566091 -> fmap Messages'historyImport Data.Binary.get}};
           put (Messages'historyImport tmp_1) = do {Data.Binary.Put.putWord32le 375566091;
                                                    Data.Binary.put tmp_1}}
instance Data.Binary.Binary Messages'historyImportParsed'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _pm_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _group_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _title_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     GHC.Base.pure (Messages'historyImportParsed' _pm_1 _group_2 _title_3)};
           put to_be_encoded_4 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_4._title,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_4._group,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_4._pm,
                                                              0)];
                                     Data.Binary.put to_be_encoded_4._pm;
                                     Data.Binary.put to_be_encoded_4._group;
                                     Data.Binary.put to_be_encoded_4._title}}
data Messages'HistoryImportParsed
    = Messages'historyImportParsed !Messages'historyImportParsed'
data Messages'historyImportParsed'
    = Messages'historyImportParsed' {_pm :: !(Maybe True'),
                                     _group :: !(Maybe True'),
                                     _title :: !(Maybe String')}
instance Data.Binary.Binary Messages'HistoryImportParsed
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1578088377 -> fmap Messages'historyImportParsed Data.Binary.get}};
           put (Messages'historyImportParsed tmp_1) = do {Data.Binary.Put.putWord32le 1578088377;
                                                          Data.Binary.put tmp_1}}
instance Data.Binary.Binary Messages'inactiveChats'
    where {get = do {_dates_0 <- Data.Binary.get;
                     _chats_1 <- Data.Binary.get;
                     _users_2 <- Data.Binary.get;
                     GHC.Base.pure (Messages'inactiveChats' _dates_0 _chats_1 _users_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._dates;
                                     Data.Binary.put to_be_encoded_3._chats;
                                     Data.Binary.put to_be_encoded_3._users}}
data Messages'InactiveChats
    = Messages'inactiveChats !Messages'inactiveChats'
data Messages'inactiveChats'
    = Messages'inactiveChats' {_dates :: !(Vector Int'),
                               _chats :: !(Vector Chat),
                               _users :: !(Vector User)}
instance Data.Binary.Binary Messages'InactiveChats
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2837970629 -> fmap Messages'inactiveChats Data.Binary.get}};
           put (Messages'inactiveChats tmp_1) = do {Data.Binary.Put.putWord32le 2837970629;
                                                    Data.Binary.put tmp_1}}
instance Data.Binary.Binary Messages'messageEditData'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _caption_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     GHC.Base.pure (Messages'messageEditData' _caption_1)};
           put to_be_encoded_2 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_2._caption,
                                                              0)];
                                     Data.Binary.put to_be_encoded_2._caption}}
data Messages'MessageEditData
    = Messages'messageEditData !Messages'messageEditData'
data Messages'messageEditData'
    = Messages'messageEditData' {_caption :: !(Maybe True')}
instance Data.Binary.Binary Messages'MessageEditData
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {649453030 -> fmap Messages'messageEditData Data.Binary.get}};
           put (Messages'messageEditData tmp_1) = do {Data.Binary.Put.putWord32le 649453030;
                                                      Data.Binary.put tmp_1}}
instance Data.Binary.Binary Messages'messageReactionsList'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _count_1 <- Data.Binary.get;
                     _reactions_2 <- Data.Binary.get;
                     _chats_3 <- Data.Binary.get;
                     _users_4 <- Data.Binary.get;
                     _next_offset_5 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     GHC.Base.pure (Messages'messageReactionsList' _count_1 _reactions_2 _chats_3 _users_4 _next_offset_5)};
           put to_be_encoded_6 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_6._next_offset,
                                                              0)];
                                     Data.Binary.put to_be_encoded_6._count;
                                     Data.Binary.put to_be_encoded_6._reactions;
                                     Data.Binary.put to_be_encoded_6._chats;
                                     Data.Binary.put to_be_encoded_6._users;
                                     Data.Binary.put to_be_encoded_6._next_offset}}
data Messages'MessageReactionsList
    = Messages'messageReactionsList !Messages'messageReactionsList'
data Messages'messageReactionsList'
    = Messages'messageReactionsList' {_count :: !Int',
                                      _reactions :: !(Vector MessagePeerReaction),
                                      _chats :: !(Vector Chat),
                                      _users :: !(Vector User),
                                      _next_offset :: !(Maybe String')}
instance Data.Binary.Binary Messages'MessageReactionsList
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {834488621 -> fmap Messages'messageReactionsList Data.Binary.get}};
           put (Messages'messageReactionsList tmp_1) = do {Data.Binary.Put.putWord32le 834488621;
                                                           Data.Binary.put tmp_1}}
instance Data.Binary.Binary Messages'messageViews'
    where {get = do {_views_0 <- Data.Binary.get;
                     _chats_1 <- Data.Binary.get;
                     _users_2 <- Data.Binary.get;
                     GHC.Base.pure (Messages'messageViews' _views_0 _chats_1 _users_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._views;
                                     Data.Binary.put to_be_encoded_3._chats;
                                     Data.Binary.put to_be_encoded_3._users}}
data Messages'MessageViews
    = Messages'messageViews !Messages'messageViews'
data Messages'messageViews'
    = Messages'messageViews' {_views :: !(Vector MessageViews),
                              _chats :: !(Vector Chat),
                              _users :: !(Vector User)}
instance Data.Binary.Binary Messages'MessageViews
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3066361155 -> fmap Messages'messageViews Data.Binary.get}};
           put (Messages'messageViews tmp_1) = do {Data.Binary.Put.putWord32le 3066361155;
                                                   Data.Binary.put tmp_1}}
instance Data.Binary.Binary Messages'channelMessages'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _inexact_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _pts_2 <- Data.Binary.get;
                     _count_3 <- Data.Binary.get;
                     _offset_id_offset_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _messages_5 <- Data.Binary.get;
                     _topics_6 <- Data.Binary.get;
                     _chats_7 <- Data.Binary.get;
                     _users_8 <- Data.Binary.get;
                     GHC.Base.pure (Messages'channelMessages' _inexact_1 _pts_2 _count_3 _offset_id_offset_4 _messages_5 _topics_6 _chats_7 _users_8)};
           put to_be_encoded_9 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_9._offset_id_offset,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_9._inexact,
                                                              1)];
                                     Data.Binary.put to_be_encoded_9._inexact;
                                     Data.Binary.put to_be_encoded_9._pts;
                                     Data.Binary.put to_be_encoded_9._count;
                                     Data.Binary.put to_be_encoded_9._offset_id_offset;
                                     Data.Binary.put to_be_encoded_9._messages;
                                     Data.Binary.put to_be_encoded_9._topics;
                                     Data.Binary.put to_be_encoded_9._chats;
                                     Data.Binary.put to_be_encoded_9._users}}
instance Data.Binary.Binary Messages'messages'
    where {get = do {_messages_0 <- Data.Binary.get;
                     _chats_1 <- Data.Binary.get;
                     _users_2 <- Data.Binary.get;
                     GHC.Base.pure (Messages'messages' _messages_0 _chats_1 _users_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._messages;
                                     Data.Binary.put to_be_encoded_3._chats;
                                     Data.Binary.put to_be_encoded_3._users}}
instance Data.Binary.Binary Messages'messagesNotModified'
    where {get = do {_count_0 <- Data.Binary.get;
                     GHC.Base.pure (Messages'messagesNotModified' _count_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._count}
instance Data.Binary.Binary Messages'messagesSlice'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _inexact_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _count_2 <- Data.Binary.get;
                     _next_rate_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _offset_id_offset_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _messages_5 <- Data.Binary.get;
                     _chats_6 <- Data.Binary.get;
                     _users_7 <- Data.Binary.get;
                     GHC.Base.pure (Messages'messagesSlice' _inexact_1 _count_2 _next_rate_3 _offset_id_offset_4 _messages_5 _chats_6 _users_7)};
           put to_be_encoded_8 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_8._offset_id_offset,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_8._next_rate,
                                                              0),
                                                             (Data.Maybe.isJust to_be_encoded_8._inexact,
                                                              1)];
                                     Data.Binary.put to_be_encoded_8._inexact;
                                     Data.Binary.put to_be_encoded_8._count;
                                     Data.Binary.put to_be_encoded_8._next_rate;
                                     Data.Binary.put to_be_encoded_8._offset_id_offset;
                                     Data.Binary.put to_be_encoded_8._messages;
                                     Data.Binary.put to_be_encoded_8._chats;
                                     Data.Binary.put to_be_encoded_8._users}}
data Messages'Messages
    = Messages'channelMessages !Messages'channelMessages'
    | Messages'messages !Messages'messages'
    | Messages'messagesNotModified !Messages'messagesNotModified'
    | Messages'messagesSlice !Messages'messagesSlice'
data Messages'channelMessages'
    = Messages'channelMessages' {_inexact :: !(Maybe True'),
                                 _pts :: !Int',
                                 _count :: !Int',
                                 _offset_id_offset :: !(Maybe Int'),
                                 _messages :: !(Vector Message),
                                 _topics :: !(Vector ForumTopic),
                                 _chats :: !(Vector Chat),
                                 _users :: !(Vector User)}
data Messages'messages'
    = Messages'messages' {_messages :: !(Vector Message),
                          _chats :: !(Vector Chat),
                          _users :: !(Vector User)}
data Messages'messagesNotModified'
    = Messages'messagesNotModified' {_count :: !Int'}
data Messages'messagesSlice'
    = Messages'messagesSlice' {_inexact :: !(Maybe True'),
                               _count :: !Int',
                               _next_rate :: !(Maybe Int'),
                               _offset_id_offset :: !(Maybe Int'),
                               _messages :: !(Vector Message),
                               _chats :: !(Vector Chat),
                               _users :: !(Vector User)}
instance Data.Binary.Binary Messages'Messages
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3346446926 -> fmap Messages'channelMessages Data.Binary.get;
                      2356252295 -> fmap Messages'messages Data.Binary.get;
                      1951620897 -> fmap Messages'messagesNotModified Data.Binary.get;
                      978610270 -> fmap Messages'messagesSlice Data.Binary.get}};
           put (Messages'channelMessages tmp_1) = do {Data.Binary.Put.putWord32le 3346446926;
                                                      Data.Binary.put tmp_1};
           put (Messages'messages tmp_2) = do {Data.Binary.Put.putWord32le 2356252295;
                                               Data.Binary.put tmp_2};
           put (Messages'messagesNotModified tmp_3) = do {Data.Binary.Put.putWord32le 1951620897;
                                                          Data.Binary.put tmp_3};
           put (Messages'messagesSlice tmp_4) = do {Data.Binary.Put.putWord32le 978610270;
                                                    Data.Binary.put tmp_4}}
instance Data.Binary.Binary Messages'peerDialogs'
    where {get = do {_dialogs_0 <- Data.Binary.get;
                     _messages_1 <- Data.Binary.get;
                     _chats_2 <- Data.Binary.get;
                     _users_3 <- Data.Binary.get;
                     _state_4 <- Data.Binary.get;
                     GHC.Base.pure (Messages'peerDialogs' _dialogs_0 _messages_1 _chats_2 _users_3 _state_4)};
           put to_be_encoded_5 = do {Data.Binary.put to_be_encoded_5._dialogs;
                                     Data.Binary.put to_be_encoded_5._messages;
                                     Data.Binary.put to_be_encoded_5._chats;
                                     Data.Binary.put to_be_encoded_5._users;
                                     Data.Binary.put to_be_encoded_5._state}}
data Messages'PeerDialogs
    = Messages'peerDialogs !Messages'peerDialogs'
data Messages'peerDialogs'
    = Messages'peerDialogs' {_dialogs :: !(Vector Dialog),
                             _messages :: !(Vector Message),
                             _chats :: !(Vector Chat),
                             _users :: !(Vector User),
                             _state :: !Updates'State}
instance Data.Binary.Binary Messages'PeerDialogs
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {863093588 -> fmap Messages'peerDialogs Data.Binary.get}};
           put (Messages'peerDialogs tmp_1) = do {Data.Binary.Put.putWord32le 863093588;
                                                  Data.Binary.put tmp_1}}
instance Data.Binary.Binary Messages'peerSettings'
    where {get = do {_settings_0 <- Data.Binary.get;
                     _chats_1 <- Data.Binary.get;
                     _users_2 <- Data.Binary.get;
                     GHC.Base.pure (Messages'peerSettings' _settings_0 _chats_1 _users_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._settings;
                                     Data.Binary.put to_be_encoded_3._chats;
                                     Data.Binary.put to_be_encoded_3._users}}
data Messages'PeerSettings
    = Messages'peerSettings !Messages'peerSettings'
data Messages'peerSettings'
    = Messages'peerSettings' {_settings :: !PeerSettings,
                              _chats :: !(Vector Chat),
                              _users :: !(Vector User)}
instance Data.Binary.Binary Messages'PeerSettings
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1753266509 -> fmap Messages'peerSettings Data.Binary.get}};
           put (Messages'peerSettings tmp_1) = do {Data.Binary.Put.putWord32le 1753266509;
                                                   Data.Binary.put tmp_1}}
instance Data.Binary.Binary Messages'reactions'
    where {get = do {_hash_0 <- Data.Binary.get;
                     _reactions_1 <- Data.Binary.get;
                     GHC.Base.pure (Messages'reactions' _hash_0 _reactions_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._hash;
                                     Data.Binary.put to_be_encoded_2._reactions}}
instance Data.Binary.Binary Messages'reactionsNotModified'
    where {get = GHC.Base.pure Messages'reactionsNotModified';
           put to_be_encoded_0 = do GHC.Base.pure ()}
data Messages'Reactions
    = Messages'reactions !Messages'reactions'
    | Messages'reactionsNotModified !Messages'reactionsNotModified'
data Messages'reactions'
    = Messages'reactions' {_hash :: !Long',
                           _reactions :: !(Vector Reaction)}
data Messages'reactionsNotModified'
    = Messages'reactionsNotModified' {}
instance Data.Binary.Binary Messages'Reactions
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3942512406 -> fmap Messages'reactions Data.Binary.get;
                      2960120799 -> fmap Messages'reactionsNotModified Data.Binary.get}};
           put (Messages'reactions tmp_1) = do {Data.Binary.Put.putWord32le 3942512406;
                                                Data.Binary.put tmp_1};
           put (Messages'reactionsNotModified tmp_2) = do {Data.Binary.Put.putWord32le 2960120799;
                                                           Data.Binary.put tmp_2}}
instance Data.Binary.Binary Messages'recentStickers'
    where {get = do {_hash_0 <- Data.Binary.get;
                     _packs_1 <- Data.Binary.get;
                     _stickers_2 <- Data.Binary.get;
                     _dates_3 <- Data.Binary.get;
                     GHC.Base.pure (Messages'recentStickers' _hash_0 _packs_1 _stickers_2 _dates_3)};
           put to_be_encoded_4 = do {Data.Binary.put to_be_encoded_4._hash;
                                     Data.Binary.put to_be_encoded_4._packs;
                                     Data.Binary.put to_be_encoded_4._stickers;
                                     Data.Binary.put to_be_encoded_4._dates}}
instance Data.Binary.Binary Messages'recentStickersNotModified'
    where {get = GHC.Base.pure Messages'recentStickersNotModified';
           put to_be_encoded_0 = do GHC.Base.pure ()}
data Messages'RecentStickers
    = Messages'recentStickers !Messages'recentStickers'
    | Messages'recentStickersNotModified !Messages'recentStickersNotModified'
data Messages'recentStickers'
    = Messages'recentStickers' {_hash :: !Long',
                                _packs :: !(Vector StickerPack),
                                _stickers :: !(Vector Document),
                                _dates :: !(Vector Int')}
data Messages'recentStickersNotModified'
    = Messages'recentStickersNotModified' {}
instance Data.Binary.Binary Messages'RecentStickers
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2295561302 -> fmap Messages'recentStickers Data.Binary.get;
                      186120336 -> fmap Messages'recentStickersNotModified Data.Binary.get}};
           put (Messages'recentStickers tmp_1) = do {Data.Binary.Put.putWord32le 2295561302;
                                                     Data.Binary.put tmp_1};
           put (Messages'recentStickersNotModified tmp_2) = do {Data.Binary.Put.putWord32le 186120336;
                                                                Data.Binary.put tmp_2}}
instance Data.Binary.Binary Messages'savedDialogs'
    where {get = do {_dialogs_0 <- Data.Binary.get;
                     _messages_1 <- Data.Binary.get;
                     _chats_2 <- Data.Binary.get;
                     _users_3 <- Data.Binary.get;
                     GHC.Base.pure (Messages'savedDialogs' _dialogs_0 _messages_1 _chats_2 _users_3)};
           put to_be_encoded_4 = do {Data.Binary.put to_be_encoded_4._dialogs;
                                     Data.Binary.put to_be_encoded_4._messages;
                                     Data.Binary.put to_be_encoded_4._chats;
                                     Data.Binary.put to_be_encoded_4._users}}
instance Data.Binary.Binary Messages'savedDialogsNotModified'
    where {get = do {_count_0 <- Data.Binary.get;
                     GHC.Base.pure (Messages'savedDialogsNotModified' _count_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._count}
instance Data.Binary.Binary Messages'savedDialogsSlice'
    where {get = do {_count_0 <- Data.Binary.get;
                     _dialogs_1 <- Data.Binary.get;
                     _messages_2 <- Data.Binary.get;
                     _chats_3 <- Data.Binary.get;
                     _users_4 <- Data.Binary.get;
                     GHC.Base.pure (Messages'savedDialogsSlice' _count_0 _dialogs_1 _messages_2 _chats_3 _users_4)};
           put to_be_encoded_5 = do {Data.Binary.put to_be_encoded_5._count;
                                     Data.Binary.put to_be_encoded_5._dialogs;
                                     Data.Binary.put to_be_encoded_5._messages;
                                     Data.Binary.put to_be_encoded_5._chats;
                                     Data.Binary.put to_be_encoded_5._users}}
data Messages'SavedDialogs
    = Messages'savedDialogs !Messages'savedDialogs'
    | Messages'savedDialogsNotModified !Messages'savedDialogsNotModified'
    | Messages'savedDialogsSlice !Messages'savedDialogsSlice'
data Messages'savedDialogs'
    = Messages'savedDialogs' {_dialogs :: !(Vector SavedDialog),
                              _messages :: !(Vector Message),
                              _chats :: !(Vector Chat),
                              _users :: !(Vector User)}
data Messages'savedDialogsNotModified'
    = Messages'savedDialogsNotModified' {_count :: !Int'}
data Messages'savedDialogsSlice'
    = Messages'savedDialogsSlice' {_count :: !Int',
                                   _dialogs :: !(Vector SavedDialog),
                                   _messages :: !(Vector Message),
                                   _chats :: !(Vector Chat),
                                   _users :: !(Vector User)}
instance Data.Binary.Binary Messages'SavedDialogs
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {4164608545 -> fmap Messages'savedDialogs Data.Binary.get;
                      3223285736 -> fmap Messages'savedDialogsNotModified Data.Binary.get;
                      1153080793 -> fmap Messages'savedDialogsSlice Data.Binary.get}};
           put (Messages'savedDialogs tmp_1) = do {Data.Binary.Put.putWord32le 4164608545;
                                                   Data.Binary.put tmp_1};
           put (Messages'savedDialogsNotModified tmp_2) = do {Data.Binary.Put.putWord32le 3223285736;
                                                              Data.Binary.put tmp_2};
           put (Messages'savedDialogsSlice tmp_3) = do {Data.Binary.Put.putWord32le 1153080793;
                                                        Data.Binary.put tmp_3}}
instance Data.Binary.Binary Messages'savedGifs'
    where {get = do {_hash_0 <- Data.Binary.get;
                     _gifs_1 <- Data.Binary.get;
                     GHC.Base.pure (Messages'savedGifs' _hash_0 _gifs_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._hash;
                                     Data.Binary.put to_be_encoded_2._gifs}}
instance Data.Binary.Binary Messages'savedGifsNotModified'
    where {get = GHC.Base.pure Messages'savedGifsNotModified';
           put to_be_encoded_0 = do GHC.Base.pure ()}
data Messages'SavedGifs
    = Messages'savedGifs !Messages'savedGifs'
    | Messages'savedGifsNotModified !Messages'savedGifsNotModified'
data Messages'savedGifs'
    = Messages'savedGifs' {_hash :: !Long',
                           _gifs :: !(Vector Document)}
data Messages'savedGifsNotModified'
    = Messages'savedGifsNotModified' {}
instance Data.Binary.Binary Messages'SavedGifs
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2225089037 -> fmap Messages'savedGifs Data.Binary.get;
                      3892468898 -> fmap Messages'savedGifsNotModified Data.Binary.get}};
           put (Messages'savedGifs tmp_1) = do {Data.Binary.Put.putWord32le 2225089037;
                                                Data.Binary.put tmp_1};
           put (Messages'savedGifsNotModified tmp_2) = do {Data.Binary.Put.putWord32le 3892468898;
                                                           Data.Binary.put tmp_2}}
instance Data.Binary.Binary Messages'searchCounter'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _inexact_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _filter_2 <- Data.Binary.get;
                     _count_3 <- Data.Binary.get;
                     GHC.Base.pure (Messages'searchCounter' _inexact_1 _filter_2 _count_3)};
           put to_be_encoded_4 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_4._inexact,
                                                              1)];
                                     Data.Binary.put to_be_encoded_4._inexact;
                                     Data.Binary.put to_be_encoded_4._filter;
                                     Data.Binary.put to_be_encoded_4._count}}
data Messages'SearchCounter
    = Messages'searchCounter !Messages'searchCounter'
data Messages'searchCounter'
    = Messages'searchCounter' {_inexact :: !(Maybe True'),
                               _filter :: !MessagesFilter,
                               _count :: !Int'}
instance Data.Binary.Binary Messages'SearchCounter
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3896830975 -> fmap Messages'searchCounter Data.Binary.get}};
           put (Messages'searchCounter tmp_1) = do {Data.Binary.Put.putWord32le 3896830975;
                                                    Data.Binary.put tmp_1}}
instance Data.Binary.Binary Messages'searchResultsCalendar'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _inexact_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _count_2 <- Data.Binary.get;
                     _min_date_3 <- Data.Binary.get;
                     _min_msg_id_4 <- Data.Binary.get;
                     _offset_id_offset_5 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _periods_6 <- Data.Binary.get;
                     _messages_7 <- Data.Binary.get;
                     _chats_8 <- Data.Binary.get;
                     _users_9 <- Data.Binary.get;
                     GHC.Base.pure (Messages'searchResultsCalendar' _inexact_1 _count_2 _min_date_3 _min_msg_id_4 _offset_id_offset_5 _periods_6 _messages_7 _chats_8 _users_9)};
           put to_be_encoded_10 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_10._offset_id_offset,
                                                               1),
                                                              (Data.Maybe.isJust to_be_encoded_10._inexact,
                                                               0)];
                                      Data.Binary.put to_be_encoded_10._inexact;
                                      Data.Binary.put to_be_encoded_10._count;
                                      Data.Binary.put to_be_encoded_10._min_date;
                                      Data.Binary.put to_be_encoded_10._min_msg_id;
                                      Data.Binary.put to_be_encoded_10._offset_id_offset;
                                      Data.Binary.put to_be_encoded_10._periods;
                                      Data.Binary.put to_be_encoded_10._messages;
                                      Data.Binary.put to_be_encoded_10._chats;
                                      Data.Binary.put to_be_encoded_10._users}}
data Messages'SearchResultsCalendar
    = Messages'searchResultsCalendar !Messages'searchResultsCalendar'
data Messages'searchResultsCalendar'
    = Messages'searchResultsCalendar' {_inexact :: !(Maybe True'),
                                       _count :: !Int',
                                       _min_date :: !Int',
                                       _min_msg_id :: !Int',
                                       _offset_id_offset :: !(Maybe Int'),
                                       _periods :: !(Vector SearchResultsCalendarPeriod),
                                       _messages :: !(Vector Message),
                                       _chats :: !(Vector Chat),
                                       _users :: !(Vector User)}
instance Data.Binary.Binary Messages'SearchResultsCalendar
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {343859772 -> fmap Messages'searchResultsCalendar Data.Binary.get}};
           put (Messages'searchResultsCalendar tmp_1) = do {Data.Binary.Put.putWord32le 343859772;
                                                            Data.Binary.put tmp_1}}
instance Data.Binary.Binary Messages'searchResultsPositions'
    where {get = do {_count_0 <- Data.Binary.get;
                     _positions_1 <- Data.Binary.get;
                     GHC.Base.pure (Messages'searchResultsPositions' _count_0 _positions_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._count;
                                     Data.Binary.put to_be_encoded_2._positions}}
data Messages'SearchResultsPositions
    = Messages'searchResultsPositions !Messages'searchResultsPositions'
data Messages'searchResultsPositions'
    = Messages'searchResultsPositions' {_count :: !Int',
                                        _positions :: !(Vector SearchResultsPosition)}
instance Data.Binary.Binary Messages'SearchResultsPositions
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1404185519 -> fmap Messages'searchResultsPositions Data.Binary.get}};
           put (Messages'searchResultsPositions tmp_1) = do {Data.Binary.Put.putWord32le 1404185519;
                                                             Data.Binary.put tmp_1}}
instance Data.Binary.Binary Messages'sentEncryptedFile'
    where {get = do {_date_0 <- Data.Binary.get;
                     _file_1 <- Data.Binary.get;
                     GHC.Base.pure (Messages'sentEncryptedFile' _date_0 _file_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._date;
                                     Data.Binary.put to_be_encoded_2._file}}
instance Data.Binary.Binary Messages'sentEncryptedMessage'
    where {get = do {_date_0 <- Data.Binary.get;
                     GHC.Base.pure (Messages'sentEncryptedMessage' _date_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._date}
data Messages'SentEncryptedMessage
    = Messages'sentEncryptedFile !Messages'sentEncryptedFile'
    | Messages'sentEncryptedMessage !Messages'sentEncryptedMessage'
data Messages'sentEncryptedFile'
    = Messages'sentEncryptedFile' {_date :: !Int',
                                   _file :: !EncryptedFile}
data Messages'sentEncryptedMessage'
    = Messages'sentEncryptedMessage' {_date :: !Int'}
instance Data.Binary.Binary Messages'SentEncryptedMessage
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2492727090 -> fmap Messages'sentEncryptedFile Data.Binary.get;
                      1443858741 -> fmap Messages'sentEncryptedMessage Data.Binary.get}};
           put (Messages'sentEncryptedFile tmp_1) = do {Data.Binary.Put.putWord32le 2492727090;
                                                        Data.Binary.put tmp_1};
           put (Messages'sentEncryptedMessage tmp_2) = do {Data.Binary.Put.putWord32le 1443858741;
                                                           Data.Binary.put tmp_2}}
instance Data.Binary.Binary Messages'sponsoredMessages'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _posts_between_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _messages_2 <- Data.Binary.get;
                     _chats_3 <- Data.Binary.get;
                     _users_4 <- Data.Binary.get;
                     GHC.Base.pure (Messages'sponsoredMessages' _posts_between_1 _messages_2 _chats_3 _users_4)};
           put to_be_encoded_5 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_5._posts_between,
                                                              0)];
                                     Data.Binary.put to_be_encoded_5._posts_between;
                                     Data.Binary.put to_be_encoded_5._messages;
                                     Data.Binary.put to_be_encoded_5._chats;
                                     Data.Binary.put to_be_encoded_5._users}}
instance Data.Binary.Binary Messages'sponsoredMessagesEmpty'
    where {get = GHC.Base.pure Messages'sponsoredMessagesEmpty';
           put to_be_encoded_0 = do GHC.Base.pure ()}
data Messages'SponsoredMessages
    = Messages'sponsoredMessages !Messages'sponsoredMessages'
    | Messages'sponsoredMessagesEmpty !Messages'sponsoredMessagesEmpty'
data Messages'sponsoredMessages'
    = Messages'sponsoredMessages' {_posts_between :: !(Maybe Int'),
                                   _messages :: !(Vector SponsoredMessage),
                                   _chats :: !(Vector Chat),
                                   _users :: !(Vector User)}
data Messages'sponsoredMessagesEmpty'
    = Messages'sponsoredMessagesEmpty' {}
instance Data.Binary.Binary Messages'SponsoredMessages
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3387825543 -> fmap Messages'sponsoredMessages Data.Binary.get;
                      406407439 -> fmap Messages'sponsoredMessagesEmpty Data.Binary.get}};
           put (Messages'sponsoredMessages tmp_1) = do {Data.Binary.Put.putWord32le 3387825543;
                                                        Data.Binary.put tmp_1};
           put (Messages'sponsoredMessagesEmpty tmp_2) = do {Data.Binary.Put.putWord32le 406407439;
                                                             Data.Binary.put tmp_2}}
instance Data.Binary.Binary Messages'stickerSet'
    where {get = do {_set_0 <- Data.Binary.get;
                     _packs_1 <- Data.Binary.get;
                     _keywords_2 <- Data.Binary.get;
                     _documents_3 <- Data.Binary.get;
                     GHC.Base.pure (Messages'stickerSet' _set_0 _packs_1 _keywords_2 _documents_3)};
           put to_be_encoded_4 = do {Data.Binary.put to_be_encoded_4._set;
                                     Data.Binary.put to_be_encoded_4._packs;
                                     Data.Binary.put to_be_encoded_4._keywords;
                                     Data.Binary.put to_be_encoded_4._documents}}
instance Data.Binary.Binary Messages'stickerSetNotModified'
    where {get = GHC.Base.pure Messages'stickerSetNotModified';
           put to_be_encoded_0 = do GHC.Base.pure ()}
data Messages'StickerSet
    = Messages'stickerSet !Messages'stickerSet'
    | Messages'stickerSetNotModified !Messages'stickerSetNotModified'
data Messages'stickerSet'
    = Messages'stickerSet' {_set :: !StickerSet,
                            _packs :: !(Vector StickerPack),
                            _keywords :: !(Vector StickerKeyword),
                            _documents :: !(Vector Document)}
data Messages'stickerSetNotModified'
    = Messages'stickerSetNotModified' {}
instance Data.Binary.Binary Messages'StickerSet
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1846886166 -> fmap Messages'stickerSet Data.Binary.get;
                      3556320491 -> fmap Messages'stickerSetNotModified Data.Binary.get}};
           put (Messages'stickerSet tmp_1) = do {Data.Binary.Put.putWord32le 1846886166;
                                                 Data.Binary.put tmp_1};
           put (Messages'stickerSetNotModified tmp_2) = do {Data.Binary.Put.putWord32le 3556320491;
                                                            Data.Binary.put tmp_2}}
instance Data.Binary.Binary Messages'stickerSetInstallResultArchive'
    where {get = do {_sets_0 <- Data.Binary.get;
                     GHC.Base.pure (Messages'stickerSetInstallResultArchive' _sets_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._sets}
instance Data.Binary.Binary Messages'stickerSetInstallResultSuccess'
    where {get = GHC.Base.pure Messages'stickerSetInstallResultSuccess';
           put to_be_encoded_0 = do GHC.Base.pure ()}
data Messages'StickerSetInstallResult
    = Messages'stickerSetInstallResultArchive !Messages'stickerSetInstallResultArchive'
    | Messages'stickerSetInstallResultSuccess !Messages'stickerSetInstallResultSuccess'
data Messages'stickerSetInstallResultArchive'
    = Messages'stickerSetInstallResultArchive' {_sets :: !(Vector StickerSetCovered)}
data Messages'stickerSetInstallResultSuccess'
    = Messages'stickerSetInstallResultSuccess' {}
instance Data.Binary.Binary Messages'StickerSetInstallResult
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {904138920 -> fmap Messages'stickerSetInstallResultArchive Data.Binary.get;
                      946083368 -> fmap Messages'stickerSetInstallResultSuccess Data.Binary.get}};
           put (Messages'stickerSetInstallResultArchive tmp_1) = do {Data.Binary.Put.putWord32le 904138920;
                                                                     Data.Binary.put tmp_1};
           put (Messages'stickerSetInstallResultSuccess tmp_2) = do {Data.Binary.Put.putWord32le 946083368;
                                                                     Data.Binary.put tmp_2}}
instance Data.Binary.Binary Messages'stickers'
    where {get = do {_hash_0 <- Data.Binary.get;
                     _stickers_1 <- Data.Binary.get;
                     GHC.Base.pure (Messages'stickers' _hash_0 _stickers_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._hash;
                                     Data.Binary.put to_be_encoded_2._stickers}}
instance Data.Binary.Binary Messages'stickersNotModified'
    where {get = GHC.Base.pure Messages'stickersNotModified';
           put to_be_encoded_0 = do GHC.Base.pure ()}
data Messages'Stickers
    = Messages'stickers !Messages'stickers'
    | Messages'stickersNotModified !Messages'stickersNotModified'
data Messages'stickers'
    = Messages'stickers' {_hash :: !Long',
                          _stickers :: !(Vector Document)}
data Messages'stickersNotModified'
    = Messages'stickersNotModified' {}
instance Data.Binary.Binary Messages'Stickers
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {816245886 -> fmap Messages'stickers Data.Binary.get;
                      4050950690 -> fmap Messages'stickersNotModified Data.Binary.get}};
           put (Messages'stickers tmp_1) = do {Data.Binary.Put.putWord32le 816245886;
                                               Data.Binary.put tmp_1};
           put (Messages'stickersNotModified tmp_2) = do {Data.Binary.Put.putWord32le 4050950690;
                                                          Data.Binary.put tmp_2}}
instance Data.Binary.Binary Messages'transcribedAudio'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _pending_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _transcription_id_2 <- Data.Binary.get;
                     _text_3 <- Data.Binary.get;
                     _trial_remains_num_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _trial_remains_until_date_5 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     GHC.Base.pure (Messages'transcribedAudio' _pending_1 _transcription_id_2 _text_3 _trial_remains_num_4 _trial_remains_until_date_5)};
           put to_be_encoded_6 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_6._trial_remains_until_date,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_6._trial_remains_num,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_6._pending,
                                                              0)];
                                     Data.Binary.put to_be_encoded_6._pending;
                                     Data.Binary.put to_be_encoded_6._transcription_id;
                                     Data.Binary.put to_be_encoded_6._text;
                                     Data.Binary.put to_be_encoded_6._trial_remains_num;
                                     Data.Binary.put to_be_encoded_6._trial_remains_until_date}}
data Messages'TranscribedAudio
    = Messages'transcribedAudio !Messages'transcribedAudio'
data Messages'transcribedAudio'
    = Messages'transcribedAudio' {_pending :: !(Maybe True'),
                                  _transcription_id :: !Long',
                                  _text :: !String',
                                  _trial_remains_num :: !(Maybe Int'),
                                  _trial_remains_until_date :: !(Maybe Int')}
instance Data.Binary.Binary Messages'TranscribedAudio
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3485063511 -> fmap Messages'transcribedAudio Data.Binary.get}};
           put (Messages'transcribedAudio tmp_1) = do {Data.Binary.Put.putWord32le 3485063511;
                                                       Data.Binary.put tmp_1}}
instance Data.Binary.Binary Messages'translateResult'
    where {get = do {_result_0 <- Data.Binary.get;
                     GHC.Base.pure (Messages'translateResult' _result_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._result}
data Messages'TranslatedText
    = Messages'translateResult !Messages'translateResult'
data Messages'translateResult'
    = Messages'translateResult' {_result :: !(Vector TextWithEntities)}
instance Data.Binary.Binary Messages'TranslatedText
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {870003448 -> fmap Messages'translateResult Data.Binary.get}};
           put (Messages'translateResult tmp_1) = do {Data.Binary.Put.putWord32le 870003448;
                                                      Data.Binary.put tmp_1}}
instance Data.Binary.Binary Messages'votesList'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _count_1 <- Data.Binary.get;
                     _votes_2 <- Data.Binary.get;
                     _chats_3 <- Data.Binary.get;
                     _users_4 <- Data.Binary.get;
                     _next_offset_5 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     GHC.Base.pure (Messages'votesList' _count_1 _votes_2 _chats_3 _users_4 _next_offset_5)};
           put to_be_encoded_6 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_6._next_offset,
                                                              0)];
                                     Data.Binary.put to_be_encoded_6._count;
                                     Data.Binary.put to_be_encoded_6._votes;
                                     Data.Binary.put to_be_encoded_6._chats;
                                     Data.Binary.put to_be_encoded_6._users;
                                     Data.Binary.put to_be_encoded_6._next_offset}}
data Messages'VotesList = Messages'votesList !Messages'votesList'
data Messages'votesList'
    = Messages'votesList' {_count :: !Int',
                           _votes :: !(Vector MessagePeerVote),
                           _chats :: !(Vector Chat),
                           _users :: !(Vector User),
                           _next_offset :: !(Maybe String')}
instance Data.Binary.Binary Messages'VotesList
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1218005070 -> fmap Messages'votesList Data.Binary.get}};
           put (Messages'votesList tmp_1) = do {Data.Binary.Put.putWord32le 1218005070;
                                                Data.Binary.put tmp_1}}
instance Data.Binary.Binary Messages'webPage'
    where {get = do {_webpage_0 <- Data.Binary.get;
                     _chats_1 <- Data.Binary.get;
                     _users_2 <- Data.Binary.get;
                     GHC.Base.pure (Messages'webPage' _webpage_0 _chats_1 _users_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._webpage;
                                     Data.Binary.put to_be_encoded_3._chats;
                                     Data.Binary.put to_be_encoded_3._users}}
data Messages'WebPage = Messages'webPage !Messages'webPage'
data Messages'webPage'
    = Messages'webPage' {_webpage :: !WebPage,
                         _chats :: !(Vector Chat),
                         _users :: !(Vector User)}
instance Data.Binary.Binary Messages'WebPage
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {4250800829 -> fmap Messages'webPage Data.Binary.get}};
           put (Messages'webPage tmp_1) = do {Data.Binary.Put.putWord32le 4250800829;
                                              Data.Binary.put tmp_1}}
instance Data.Binary.Binary Payments'bankCardData'
    where {get = do {_title_0 <- Data.Binary.get;
                     _open_urls_1 <- Data.Binary.get;
                     GHC.Base.pure (Payments'bankCardData' _title_0 _open_urls_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._title;
                                     Data.Binary.put to_be_encoded_2._open_urls}}
data Payments'BankCardData
    = Payments'bankCardData !Payments'bankCardData'
data Payments'bankCardData'
    = Payments'bankCardData' {_title :: !String',
                              _open_urls :: !(Vector BankCardOpenUrl)}
instance Data.Binary.Binary Payments'BankCardData
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1042605427 -> fmap Payments'bankCardData Data.Binary.get}};
           put (Payments'bankCardData tmp_1) = do {Data.Binary.Put.putWord32le 1042605427;
                                                   Data.Binary.put tmp_1}}
instance Data.Binary.Binary Payments'checkedGiftCode'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _via_giveaway_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _from_id_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 4);
                     _giveaway_msg_id_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     _to_id_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _date_5 <- Data.Binary.get;
                     _months_6 <- Data.Binary.get;
                     _used_date_7 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _chats_8 <- Data.Binary.get;
                     _users_9 <- Data.Binary.get;
                     GHC.Base.pure (Payments'checkedGiftCode' _via_giveaway_1 _from_id_2 _giveaway_msg_id_3 _to_id_4 _date_5 _months_6 _used_date_7 _chats_8 _users_9)};
           put to_be_encoded_10 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_10._used_date,
                                                               1),
                                                              (Data.Maybe.isJust to_be_encoded_10._to_id,
                                                               0),
                                                              (Data.Maybe.isJust to_be_encoded_10._giveaway_msg_id,
                                                               3),
                                                              (Data.Maybe.isJust to_be_encoded_10._from_id,
                                                               4),
                                                              (Data.Maybe.isJust to_be_encoded_10._via_giveaway,
                                                               2)];
                                      Data.Binary.put to_be_encoded_10._via_giveaway;
                                      Data.Binary.put to_be_encoded_10._from_id;
                                      Data.Binary.put to_be_encoded_10._giveaway_msg_id;
                                      Data.Binary.put to_be_encoded_10._to_id;
                                      Data.Binary.put to_be_encoded_10._date;
                                      Data.Binary.put to_be_encoded_10._months;
                                      Data.Binary.put to_be_encoded_10._used_date;
                                      Data.Binary.put to_be_encoded_10._chats;
                                      Data.Binary.put to_be_encoded_10._users}}
data Payments'CheckedGiftCode
    = Payments'checkedGiftCode !Payments'checkedGiftCode'
data Payments'checkedGiftCode'
    = Payments'checkedGiftCode' {_via_giveaway :: !(Maybe True'),
                                 _from_id :: !(Maybe Peer),
                                 _giveaway_msg_id :: !(Maybe Int'),
                                 _to_id :: !(Maybe Long'),
                                 _date :: !Int',
                                 _months :: !Int',
                                 _used_date :: !(Maybe Int'),
                                 _chats :: !(Vector Chat),
                                 _users :: !(Vector User)}
instance Data.Binary.Binary Payments'CheckedGiftCode
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {675942550 -> fmap Payments'checkedGiftCode Data.Binary.get}};
           put (Payments'checkedGiftCode tmp_1) = do {Data.Binary.Put.putWord32le 675942550;
                                                      Data.Binary.put tmp_1}}
instance Data.Binary.Binary Payments'exportedInvoice'
    where {get = do {_url_0 <- Data.Binary.get;
                     GHC.Base.pure (Payments'exportedInvoice' _url_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._url}
data Payments'ExportedInvoice
    = Payments'exportedInvoice !Payments'exportedInvoice'
data Payments'exportedInvoice'
    = Payments'exportedInvoice' {_url :: !String'}
instance Data.Binary.Binary Payments'ExportedInvoice
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2932919257 -> fmap Payments'exportedInvoice Data.Binary.get}};
           put (Payments'exportedInvoice tmp_1) = do {Data.Binary.Put.putWord32le 2932919257;
                                                      Data.Binary.put tmp_1}}
instance Data.Binary.Binary Payments'giveawayInfo'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _participating_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _preparing_results_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     _start_date_3 <- Data.Binary.get;
                     _joined_too_early_date_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _admin_disallowed_chat_id_5 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _disallowed_country_6 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 4);
                     GHC.Base.pure (Payments'giveawayInfo' _participating_1 _preparing_results_2 _start_date_3 _joined_too_early_date_4 _admin_disallowed_chat_id_5 _disallowed_country_6)};
           put to_be_encoded_7 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_7._disallowed_country,
                                                              4),
                                                             (Data.Maybe.isJust to_be_encoded_7._admin_disallowed_chat_id,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_7._joined_too_early_date,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_7._preparing_results,
                                                              3),
                                                             (Data.Maybe.isJust to_be_encoded_7._participating,
                                                              0)];
                                     Data.Binary.put to_be_encoded_7._participating;
                                     Data.Binary.put to_be_encoded_7._preparing_results;
                                     Data.Binary.put to_be_encoded_7._start_date;
                                     Data.Binary.put to_be_encoded_7._joined_too_early_date;
                                     Data.Binary.put to_be_encoded_7._admin_disallowed_chat_id;
                                     Data.Binary.put to_be_encoded_7._disallowed_country}}
instance Data.Binary.Binary Payments'giveawayInfoResults'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _winner_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _refunded_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _start_date_3 <- Data.Binary.get;
                     _gift_code_slug_4 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _finish_date_5 <- Data.Binary.get;
                     _winners_count_6 <- Data.Binary.get;
                     _activated_count_7 <- Data.Binary.get;
                     GHC.Base.pure (Payments'giveawayInfoResults' _winner_1 _refunded_2 _start_date_3 _gift_code_slug_4 _finish_date_5 _winners_count_6 _activated_count_7)};
           put to_be_encoded_8 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_8._gift_code_slug,
                                                              0),
                                                             (Data.Maybe.isJust to_be_encoded_8._refunded,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_8._winner,
                                                              0)];
                                     Data.Binary.put to_be_encoded_8._winner;
                                     Data.Binary.put to_be_encoded_8._refunded;
                                     Data.Binary.put to_be_encoded_8._start_date;
                                     Data.Binary.put to_be_encoded_8._gift_code_slug;
                                     Data.Binary.put to_be_encoded_8._finish_date;
                                     Data.Binary.put to_be_encoded_8._winners_count;
                                     Data.Binary.put to_be_encoded_8._activated_count}}
data Payments'GiveawayInfo
    = Payments'giveawayInfo !Payments'giveawayInfo'
    | Payments'giveawayInfoResults !Payments'giveawayInfoResults'
data Payments'giveawayInfo'
    = Payments'giveawayInfo' {_participating :: !(Maybe True'),
                              _preparing_results :: !(Maybe True'),
                              _start_date :: !Int',
                              _joined_too_early_date :: !(Maybe Int'),
                              _admin_disallowed_chat_id :: !(Maybe Long'),
                              _disallowed_country :: !(Maybe String')}
data Payments'giveawayInfoResults'
    = Payments'giveawayInfoResults' {_winner :: !(Maybe True'),
                                     _refunded :: !(Maybe True'),
                                     _start_date :: !Int',
                                     _gift_code_slug :: !(Maybe String'),
                                     _finish_date :: !Int',
                                     _winners_count :: !Int',
                                     _activated_count :: !Int'}
instance Data.Binary.Binary Payments'GiveawayInfo
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1130879648 -> fmap Payments'giveawayInfo Data.Binary.get;
                      13456752 -> fmap Payments'giveawayInfoResults Data.Binary.get}};
           put (Payments'giveawayInfo tmp_1) = do {Data.Binary.Put.putWord32le 1130879648;
                                                   Data.Binary.put tmp_1};
           put (Payments'giveawayInfoResults tmp_2) = do {Data.Binary.Put.putWord32le 13456752;
                                                          Data.Binary.put tmp_2}}
instance Data.Binary.Binary Payments'paymentForm'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _can_save_credentials_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _password_missing_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     _form_id_3 <- Data.Binary.get;
                     _bot_id_4 <- Data.Binary.get;
                     _title_5 <- Data.Binary.get;
                     _description_6 <- Data.Binary.get;
                     _photo_7 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 5);
                     _invoice_8 <- Data.Binary.get;
                     _provider_id_9 <- Data.Binary.get;
                     _url_10 <- Data.Binary.get;
                     _native_provider_11 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 4);
                     _native_params_12 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 4);
                     _additional_methods_13 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 6);
                     _saved_info_14 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _saved_credentials_15 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _users_16 <- Data.Binary.get;
                     GHC.Base.pure (Payments'paymentForm' _can_save_credentials_1 _password_missing_2 _form_id_3 _bot_id_4 _title_5 _description_6 _photo_7 _invoice_8 _provider_id_9 _url_10 _native_provider_11 _native_params_12 _additional_methods_13 _saved_info_14 _saved_credentials_15 _users_16)};
           put to_be_encoded_17 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_17._saved_credentials,
                                                               1),
                                                              (Data.Maybe.isJust to_be_encoded_17._saved_info,
                                                               0),
                                                              (Data.Maybe.isJust to_be_encoded_17._additional_methods,
                                                               6),
                                                              (Data.Maybe.isJust to_be_encoded_17._native_params,
                                                               4),
                                                              (Data.Maybe.isJust to_be_encoded_17._native_provider,
                                                               4),
                                                              (Data.Maybe.isJust to_be_encoded_17._photo,
                                                               5),
                                                              (Data.Maybe.isJust to_be_encoded_17._password_missing,
                                                               3),
                                                              (Data.Maybe.isJust to_be_encoded_17._can_save_credentials,
                                                               2)];
                                      Data.Binary.put to_be_encoded_17._can_save_credentials;
                                      Data.Binary.put to_be_encoded_17._password_missing;
                                      Data.Binary.put to_be_encoded_17._form_id;
                                      Data.Binary.put to_be_encoded_17._bot_id;
                                      Data.Binary.put to_be_encoded_17._title;
                                      Data.Binary.put to_be_encoded_17._description;
                                      Data.Binary.put to_be_encoded_17._photo;
                                      Data.Binary.put to_be_encoded_17._invoice;
                                      Data.Binary.put to_be_encoded_17._provider_id;
                                      Data.Binary.put to_be_encoded_17._url;
                                      Data.Binary.put to_be_encoded_17._native_provider;
                                      Data.Binary.put to_be_encoded_17._native_params;
                                      Data.Binary.put to_be_encoded_17._additional_methods;
                                      Data.Binary.put to_be_encoded_17._saved_info;
                                      Data.Binary.put to_be_encoded_17._saved_credentials;
                                      Data.Binary.put to_be_encoded_17._users}}
data Payments'PaymentForm
    = Payments'paymentForm !Payments'paymentForm'
data Payments'paymentForm'
    = Payments'paymentForm' {_can_save_credentials :: !(Maybe True'),
                             _password_missing :: !(Maybe True'),
                             _form_id :: !Long',
                             _bot_id :: !Long',
                             _title :: !String',
                             _description :: !String',
                             _photo :: !(Maybe WebDocument),
                             _invoice :: !Invoice,
                             _provider_id :: !Long',
                             _url :: !String',
                             _native_provider :: !(Maybe String'),
                             _native_params :: !(Maybe DataJSON),
                             _additional_methods :: !(Maybe (Vector PaymentFormMethod)),
                             _saved_info :: !(Maybe PaymentRequestedInfo),
                             _saved_credentials :: !(Maybe (Vector PaymentSavedCredentials)),
                             _users :: !(Vector User)}
instance Data.Binary.Binary Payments'PaymentForm
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2684716881 -> fmap Payments'paymentForm Data.Binary.get}};
           put (Payments'paymentForm tmp_1) = do {Data.Binary.Put.putWord32le 2684716881;
                                                  Data.Binary.put tmp_1}}
instance Data.Binary.Binary Payments'paymentReceipt'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _date_1 <- Data.Binary.get;
                     _bot_id_2 <- Data.Binary.get;
                     _provider_id_3 <- Data.Binary.get;
                     _title_4 <- Data.Binary.get;
                     _description_5 <- Data.Binary.get;
                     _photo_6 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _invoice_7 <- Data.Binary.get;
                     _info_8 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _shipping_9 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _tip_amount_10 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     _currency_11 <- Data.Binary.get;
                     _total_amount_12 <- Data.Binary.get;
                     _credentials_title_13 <- Data.Binary.get;
                     _users_14 <- Data.Binary.get;
                     GHC.Base.pure (Payments'paymentReceipt' _date_1 _bot_id_2 _provider_id_3 _title_4 _description_5 _photo_6 _invoice_7 _info_8 _shipping_9 _tip_amount_10 _currency_11 _total_amount_12 _credentials_title_13 _users_14)};
           put to_be_encoded_15 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_15._tip_amount,
                                                               3),
                                                              (Data.Maybe.isJust to_be_encoded_15._shipping,
                                                               1),
                                                              (Data.Maybe.isJust to_be_encoded_15._info,
                                                               0),
                                                              (Data.Maybe.isJust to_be_encoded_15._photo,
                                                               2)];
                                      Data.Binary.put to_be_encoded_15._date;
                                      Data.Binary.put to_be_encoded_15._bot_id;
                                      Data.Binary.put to_be_encoded_15._provider_id;
                                      Data.Binary.put to_be_encoded_15._title;
                                      Data.Binary.put to_be_encoded_15._description;
                                      Data.Binary.put to_be_encoded_15._photo;
                                      Data.Binary.put to_be_encoded_15._invoice;
                                      Data.Binary.put to_be_encoded_15._info;
                                      Data.Binary.put to_be_encoded_15._shipping;
                                      Data.Binary.put to_be_encoded_15._tip_amount;
                                      Data.Binary.put to_be_encoded_15._currency;
                                      Data.Binary.put to_be_encoded_15._total_amount;
                                      Data.Binary.put to_be_encoded_15._credentials_title;
                                      Data.Binary.put to_be_encoded_15._users}}
data Payments'PaymentReceipt
    = Payments'paymentReceipt !Payments'paymentReceipt'
data Payments'paymentReceipt'
    = Payments'paymentReceipt' {_date :: !Int',
                                _bot_id :: !Long',
                                _provider_id :: !Long',
                                _title :: !String',
                                _description :: !String',
                                _photo :: !(Maybe WebDocument),
                                _invoice :: !Invoice,
                                _info :: !(Maybe PaymentRequestedInfo),
                                _shipping :: !(Maybe ShippingOption),
                                _tip_amount :: !(Maybe Long'),
                                _currency :: !String',
                                _total_amount :: !Long',
                                _credentials_title :: !String',
                                _users :: !(Vector User)}
instance Data.Binary.Binary Payments'PaymentReceipt
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1891958275 -> fmap Payments'paymentReceipt Data.Binary.get}};
           put (Payments'paymentReceipt tmp_1) = do {Data.Binary.Put.putWord32le 1891958275;
                                                     Data.Binary.put tmp_1}}
instance Data.Binary.Binary Payments'paymentResult'
    where {get = do {_updates_0 <- Data.Binary.get;
                     GHC.Base.pure (Payments'paymentResult' _updates_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._updates}
instance Data.Binary.Binary Payments'paymentVerificationNeeded'
    where {get = do {_url_0 <- Data.Binary.get;
                     GHC.Base.pure (Payments'paymentVerificationNeeded' _url_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._url}
data Payments'PaymentResult
    = Payments'paymentResult !Payments'paymentResult'
    | Payments'paymentVerificationNeeded !Payments'paymentVerificationNeeded'
data Payments'paymentResult'
    = Payments'paymentResult' {_updates :: !Updates}
data Payments'paymentVerificationNeeded'
    = Payments'paymentVerificationNeeded' {_url :: !String'}
instance Data.Binary.Binary Payments'PaymentResult
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1314881805 -> fmap Payments'paymentResult Data.Binary.get;
                      3628142905 -> fmap Payments'paymentVerificationNeeded Data.Binary.get}};
           put (Payments'paymentResult tmp_1) = do {Data.Binary.Put.putWord32le 1314881805;
                                                    Data.Binary.put tmp_1};
           put (Payments'paymentVerificationNeeded tmp_2) = do {Data.Binary.Put.putWord32le 3628142905;
                                                                Data.Binary.put tmp_2}}
instance Data.Binary.Binary Payments'savedInfo'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _has_saved_credentials_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _saved_info_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     GHC.Base.pure (Payments'savedInfo' _has_saved_credentials_1 _saved_info_2)};
           put to_be_encoded_3 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_3._saved_info,
                                                              0),
                                                             (Data.Maybe.isJust to_be_encoded_3._has_saved_credentials,
                                                              1)];
                                     Data.Binary.put to_be_encoded_3._has_saved_credentials;
                                     Data.Binary.put to_be_encoded_3._saved_info}}
data Payments'SavedInfo = Payments'savedInfo !Payments'savedInfo'
data Payments'savedInfo'
    = Payments'savedInfo' {_has_saved_credentials :: !(Maybe True'),
                           _saved_info :: !(Maybe PaymentRequestedInfo)}
instance Data.Binary.Binary Payments'SavedInfo
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {4220511292 -> fmap Payments'savedInfo Data.Binary.get}};
           put (Payments'savedInfo tmp_1) = do {Data.Binary.Put.putWord32le 4220511292;
                                                Data.Binary.put tmp_1}}
instance Data.Binary.Binary Payments'validatedRequestedInfo'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _id_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _shipping_options_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     GHC.Base.pure (Payments'validatedRequestedInfo' _id_1 _shipping_options_2)};
           put to_be_encoded_3 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_3._shipping_options,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_3._id,
                                                              0)];
                                     Data.Binary.put to_be_encoded_3._id;
                                     Data.Binary.put to_be_encoded_3._shipping_options}}
data Payments'ValidatedRequestedInfo
    = Payments'validatedRequestedInfo !Payments'validatedRequestedInfo'
data Payments'validatedRequestedInfo'
    = Payments'validatedRequestedInfo' {_id :: !(Maybe String'),
                                        _shipping_options :: !(Maybe (Vector ShippingOption))}
instance Data.Binary.Binary Payments'ValidatedRequestedInfo
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3510966403 -> fmap Payments'validatedRequestedInfo Data.Binary.get}};
           put (Payments'validatedRequestedInfo tmp_1) = do {Data.Binary.Put.putWord32le 3510966403;
                                                             Data.Binary.put tmp_1}}
instance Data.Binary.Binary Phone'exportedGroupCallInvite'
    where {get = do {_link_0 <- Data.Binary.get;
                     GHC.Base.pure (Phone'exportedGroupCallInvite' _link_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._link}
data Phone'ExportedGroupCallInvite
    = Phone'exportedGroupCallInvite !Phone'exportedGroupCallInvite'
data Phone'exportedGroupCallInvite'
    = Phone'exportedGroupCallInvite' {_link :: !String'}
instance Data.Binary.Binary Phone'ExportedGroupCallInvite
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {541839704 -> fmap Phone'exportedGroupCallInvite Data.Binary.get}};
           put (Phone'exportedGroupCallInvite tmp_1) = do {Data.Binary.Put.putWord32le 541839704;
                                                           Data.Binary.put tmp_1}}
instance Data.Binary.Binary Phone'groupCall'
    where {get = do {_call_0 <- Data.Binary.get;
                     _participants_1 <- Data.Binary.get;
                     _participants_next_offset_2 <- Data.Binary.get;
                     _chats_3 <- Data.Binary.get;
                     _users_4 <- Data.Binary.get;
                     GHC.Base.pure (Phone'groupCall' _call_0 _participants_1 _participants_next_offset_2 _chats_3 _users_4)};
           put to_be_encoded_5 = do {Data.Binary.put to_be_encoded_5._call;
                                     Data.Binary.put to_be_encoded_5._participants;
                                     Data.Binary.put to_be_encoded_5._participants_next_offset;
                                     Data.Binary.put to_be_encoded_5._chats;
                                     Data.Binary.put to_be_encoded_5._users}}
data Phone'GroupCall = Phone'groupCall !Phone'groupCall'
data Phone'groupCall'
    = Phone'groupCall' {_call :: !GroupCall,
                        _participants :: !(Vector GroupCallParticipant),
                        _participants_next_offset :: !String',
                        _chats :: !(Vector Chat),
                        _users :: !(Vector User)}
instance Data.Binary.Binary Phone'GroupCall
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2658302637 -> fmap Phone'groupCall Data.Binary.get}};
           put (Phone'groupCall tmp_1) = do {Data.Binary.Put.putWord32le 2658302637;
                                             Data.Binary.put tmp_1}}
instance Data.Binary.Binary Phone'groupCallStreamChannels'
    where {get = do {_channels_0 <- Data.Binary.get;
                     GHC.Base.pure (Phone'groupCallStreamChannels' _channels_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._channels}
data Phone'GroupCallStreamChannels
    = Phone'groupCallStreamChannels !Phone'groupCallStreamChannels'
data Phone'groupCallStreamChannels'
    = Phone'groupCallStreamChannels' {_channels :: !(Vector GroupCallStreamChannel)}
instance Data.Binary.Binary Phone'GroupCallStreamChannels
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3504636594 -> fmap Phone'groupCallStreamChannels Data.Binary.get}};
           put (Phone'groupCallStreamChannels tmp_1) = do {Data.Binary.Put.putWord32le 3504636594;
                                                           Data.Binary.put tmp_1}}
instance Data.Binary.Binary Phone'groupCallStreamRtmpUrl'
    where {get = do {_url_0 <- Data.Binary.get;
                     _key_1 <- Data.Binary.get;
                     GHC.Base.pure (Phone'groupCallStreamRtmpUrl' _url_0 _key_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._url;
                                     Data.Binary.put to_be_encoded_2._key}}
data Phone'GroupCallStreamRtmpUrl
    = Phone'groupCallStreamRtmpUrl !Phone'groupCallStreamRtmpUrl'
data Phone'groupCallStreamRtmpUrl'
    = Phone'groupCallStreamRtmpUrl' {_url :: !String',
                                     _key :: !String'}
instance Data.Binary.Binary Phone'GroupCallStreamRtmpUrl
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {767505458 -> fmap Phone'groupCallStreamRtmpUrl Data.Binary.get}};
           put (Phone'groupCallStreamRtmpUrl tmp_1) = do {Data.Binary.Put.putWord32le 767505458;
                                                          Data.Binary.put tmp_1}}
instance Data.Binary.Binary Phone'groupParticipants'
    where {get = do {_count_0 <- Data.Binary.get;
                     _participants_1 <- Data.Binary.get;
                     _next_offset_2 <- Data.Binary.get;
                     _chats_3 <- Data.Binary.get;
                     _users_4 <- Data.Binary.get;
                     _version_5 <- Data.Binary.get;
                     GHC.Base.pure (Phone'groupParticipants' _count_0 _participants_1 _next_offset_2 _chats_3 _users_4 _version_5)};
           put to_be_encoded_6 = do {Data.Binary.put to_be_encoded_6._count;
                                     Data.Binary.put to_be_encoded_6._participants;
                                     Data.Binary.put to_be_encoded_6._next_offset;
                                     Data.Binary.put to_be_encoded_6._chats;
                                     Data.Binary.put to_be_encoded_6._users;
                                     Data.Binary.put to_be_encoded_6._version}}
data Phone'GroupParticipants
    = Phone'groupParticipants !Phone'groupParticipants'
data Phone'groupParticipants'
    = Phone'groupParticipants' {_count :: !Int',
                                _participants :: !(Vector GroupCallParticipant),
                                _next_offset :: !String',
                                _chats :: !(Vector Chat),
                                _users :: !(Vector User),
                                _version :: !Int'}
instance Data.Binary.Binary Phone'GroupParticipants
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {4101460406 -> fmap Phone'groupParticipants Data.Binary.get}};
           put (Phone'groupParticipants tmp_1) = do {Data.Binary.Put.putWord32le 4101460406;
                                                     Data.Binary.put tmp_1}}
instance Data.Binary.Binary Phone'joinAsPeers'
    where {get = do {_peers_0 <- Data.Binary.get;
                     _chats_1 <- Data.Binary.get;
                     _users_2 <- Data.Binary.get;
                     GHC.Base.pure (Phone'joinAsPeers' _peers_0 _chats_1 _users_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._peers;
                                     Data.Binary.put to_be_encoded_3._chats;
                                     Data.Binary.put to_be_encoded_3._users}}
data Phone'JoinAsPeers = Phone'joinAsPeers !Phone'joinAsPeers'
data Phone'joinAsPeers'
    = Phone'joinAsPeers' {_peers :: !(Vector Peer),
                          _chats :: !(Vector Chat),
                          _users :: !(Vector User)}
instance Data.Binary.Binary Phone'JoinAsPeers
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2951045695 -> fmap Phone'joinAsPeers Data.Binary.get}};
           put (Phone'joinAsPeers tmp_1) = do {Data.Binary.Put.putWord32le 2951045695;
                                               Data.Binary.put tmp_1}}
instance Data.Binary.Binary Phone'phoneCall'
    where {get = do {_phone_call_0 <- Data.Binary.get;
                     _users_1 <- Data.Binary.get;
                     GHC.Base.pure (Phone'phoneCall' _phone_call_0 _users_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._phone_call;
                                     Data.Binary.put to_be_encoded_2._users}}
data Phone'PhoneCall = Phone'phoneCall !Phone'phoneCall'
data Phone'phoneCall'
    = Phone'phoneCall' {_phone_call :: !PhoneCall,
                        _users :: !(Vector User)}
instance Data.Binary.Binary Phone'PhoneCall
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3968000320 -> fmap Phone'phoneCall Data.Binary.get}};
           put (Phone'phoneCall tmp_1) = do {Data.Binary.Put.putWord32le 3968000320;
                                             Data.Binary.put tmp_1}}
instance Data.Binary.Binary Photos'photo'
    where {get = do {_photo_0 <- Data.Binary.get;
                     _users_1 <- Data.Binary.get;
                     GHC.Base.pure (Photos'photo' _photo_0 _users_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._photo;
                                     Data.Binary.put to_be_encoded_2._users}}
data Photos'Photo = Photos'photo !Photos'photo'
data Photos'photo'
    = Photos'photo' {_photo :: !Photo, _users :: !(Vector User)}
instance Data.Binary.Binary Photos'Photo
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {539045032 -> fmap Photos'photo Data.Binary.get}};
           put (Photos'photo tmp_1) = do {Data.Binary.Put.putWord32le 539045032;
                                          Data.Binary.put tmp_1}}
instance Data.Binary.Binary Photos'photos'
    where {get = do {_photos_0 <- Data.Binary.get;
                     _users_1 <- Data.Binary.get;
                     GHC.Base.pure (Photos'photos' _photos_0 _users_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._photos;
                                     Data.Binary.put to_be_encoded_2._users}}
instance Data.Binary.Binary Photos'photosSlice'
    where {get = do {_count_0 <- Data.Binary.get;
                     _photos_1 <- Data.Binary.get;
                     _users_2 <- Data.Binary.get;
                     GHC.Base.pure (Photos'photosSlice' _count_0 _photos_1 _users_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._count;
                                     Data.Binary.put to_be_encoded_3._photos;
                                     Data.Binary.put to_be_encoded_3._users}}
data Photos'Photos
    = Photos'photos !Photos'photos'
    | Photos'photosSlice !Photos'photosSlice'
data Photos'photos'
    = Photos'photos' {_photos :: !(Vector Photo),
                      _users :: !(Vector User)}
data Photos'photosSlice'
    = Photos'photosSlice' {_count :: !Int',
                           _photos :: !(Vector Photo),
                           _users :: !(Vector User)}
instance Data.Binary.Binary Photos'Photos
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2378853029 -> fmap Photos'photos Data.Binary.get;
                      352657236 -> fmap Photos'photosSlice Data.Binary.get}};
           put (Photos'photos tmp_1) = do {Data.Binary.Put.putWord32le 2378853029;
                                           Data.Binary.put tmp_1};
           put (Photos'photosSlice tmp_2) = do {Data.Binary.Put.putWord32le 352657236;
                                                Data.Binary.put tmp_2}}
instance Data.Binary.Binary Premium'boostsList'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _count_1 <- Data.Binary.get;
                     _boosts_2 <- Data.Binary.get;
                     _next_offset_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _users_4 <- Data.Binary.get;
                     GHC.Base.pure (Premium'boostsList' _count_1 _boosts_2 _next_offset_3 _users_4)};
           put to_be_encoded_5 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_5._next_offset,
                                                              0)];
                                     Data.Binary.put to_be_encoded_5._count;
                                     Data.Binary.put to_be_encoded_5._boosts;
                                     Data.Binary.put to_be_encoded_5._next_offset;
                                     Data.Binary.put to_be_encoded_5._users}}
data Premium'BoostsList = Premium'boostsList !Premium'boostsList'
data Premium'boostsList'
    = Premium'boostsList' {_count :: !Int',
                           _boosts :: !(Vector Boost),
                           _next_offset :: !(Maybe String'),
                           _users :: !(Vector User)}
instance Data.Binary.Binary Premium'BoostsList
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2264424764 -> fmap Premium'boostsList Data.Binary.get}};
           put (Premium'boostsList tmp_1) = do {Data.Binary.Put.putWord32le 2264424764;
                                                Data.Binary.put tmp_1}}
instance Data.Binary.Binary Premium'boostsStatus'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _my_boost_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     _level_2 <- Data.Binary.get;
                     _current_level_boosts_3 <- Data.Binary.get;
                     _boosts_4 <- Data.Binary.get;
                     _gift_boosts_5 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 4);
                     _next_level_boosts_6 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _premium_audience_7 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _boost_url_8 <- Data.Binary.get;
                     _prepaid_giveaways_9 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 3);
                     _my_boost_slots_10 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 2);
                     GHC.Base.pure (Premium'boostsStatus' _my_boost_1 _level_2 _current_level_boosts_3 _boosts_4 _gift_boosts_5 _next_level_boosts_6 _premium_audience_7 _boost_url_8 _prepaid_giveaways_9 _my_boost_slots_10)};
           put to_be_encoded_11 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_11._my_boost_slots,
                                                               2),
                                                              (Data.Maybe.isJust to_be_encoded_11._prepaid_giveaways,
                                                               3),
                                                              (Data.Maybe.isJust to_be_encoded_11._premium_audience,
                                                               1),
                                                              (Data.Maybe.isJust to_be_encoded_11._next_level_boosts,
                                                               0),
                                                              (Data.Maybe.isJust to_be_encoded_11._gift_boosts,
                                                               4),
                                                              (Data.Maybe.isJust to_be_encoded_11._my_boost,
                                                               2)];
                                      Data.Binary.put to_be_encoded_11._my_boost;
                                      Data.Binary.put to_be_encoded_11._level;
                                      Data.Binary.put to_be_encoded_11._current_level_boosts;
                                      Data.Binary.put to_be_encoded_11._boosts;
                                      Data.Binary.put to_be_encoded_11._gift_boosts;
                                      Data.Binary.put to_be_encoded_11._next_level_boosts;
                                      Data.Binary.put to_be_encoded_11._premium_audience;
                                      Data.Binary.put to_be_encoded_11._boost_url;
                                      Data.Binary.put to_be_encoded_11._prepaid_giveaways;
                                      Data.Binary.put to_be_encoded_11._my_boost_slots}}
data Premium'BoostsStatus
    = Premium'boostsStatus !Premium'boostsStatus'
data Premium'boostsStatus'
    = Premium'boostsStatus' {_my_boost :: !(Maybe True'),
                             _level :: !Int',
                             _current_level_boosts :: !Int',
                             _boosts :: !Int',
                             _gift_boosts :: !(Maybe Int'),
                             _next_level_boosts :: !(Maybe Int'),
                             _premium_audience :: !(Maybe StatsPercentValue),
                             _boost_url :: !String',
                             _prepaid_giveaways :: !(Maybe (Vector PrepaidGiveaway)),
                             _my_boost_slots :: !(Maybe (Vector Int'))}
instance Data.Binary.Binary Premium'BoostsStatus
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1230586490 -> fmap Premium'boostsStatus Data.Binary.get}};
           put (Premium'boostsStatus tmp_1) = do {Data.Binary.Put.putWord32le 1230586490;
                                                  Data.Binary.put tmp_1}}
instance Data.Binary.Binary Premium'myBoosts'
    where {get = do {_my_boosts_0 <- Data.Binary.get;
                     _chats_1 <- Data.Binary.get;
                     _users_2 <- Data.Binary.get;
                     GHC.Base.pure (Premium'myBoosts' _my_boosts_0 _chats_1 _users_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._my_boosts;
                                     Data.Binary.put to_be_encoded_3._chats;
                                     Data.Binary.put to_be_encoded_3._users}}
data Premium'MyBoosts = Premium'myBoosts !Premium'myBoosts'
data Premium'myBoosts'
    = Premium'myBoosts' {_my_boosts :: !(Vector MyBoost),
                         _chats :: !(Vector Chat),
                         _users :: !(Vector User)}
instance Data.Binary.Binary Premium'MyBoosts
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2598512866 -> fmap Premium'myBoosts Data.Binary.get}};
           put (Premium'myBoosts tmp_1) = do {Data.Binary.Put.putWord32le 2598512866;
                                              Data.Binary.put tmp_1}}
instance Data.Binary.Binary Stats'broadcastStats'
    where {get = do {_period_0 <- Data.Binary.get;
                     _followers_1 <- Data.Binary.get;
                     _views_per_post_2 <- Data.Binary.get;
                     _shares_per_post_3 <- Data.Binary.get;
                     _reactions_per_post_4 <- Data.Binary.get;
                     _views_per_story_5 <- Data.Binary.get;
                     _shares_per_story_6 <- Data.Binary.get;
                     _reactions_per_story_7 <- Data.Binary.get;
                     _enabled_notifications_8 <- Data.Binary.get;
                     _growth_graph_9 <- Data.Binary.get;
                     _followers_graph_10 <- Data.Binary.get;
                     _mute_graph_11 <- Data.Binary.get;
                     _top_hours_graph_12 <- Data.Binary.get;
                     _interactions_graph_13 <- Data.Binary.get;
                     _iv_interactions_graph_14 <- Data.Binary.get;
                     _views_by_source_graph_15 <- Data.Binary.get;
                     _new_followers_by_source_graph_16 <- Data.Binary.get;
                     _languages_graph_17 <- Data.Binary.get;
                     _reactions_by_emotion_graph_18 <- Data.Binary.get;
                     _story_interactions_graph_19 <- Data.Binary.get;
                     _story_reactions_by_emotion_graph_20 <- Data.Binary.get;
                     _recent_posts_interactions_21 <- Data.Binary.get;
                     GHC.Base.pure (Stats'broadcastStats' _period_0 _followers_1 _views_per_post_2 _shares_per_post_3 _reactions_per_post_4 _views_per_story_5 _shares_per_story_6 _reactions_per_story_7 _enabled_notifications_8 _growth_graph_9 _followers_graph_10 _mute_graph_11 _top_hours_graph_12 _interactions_graph_13 _iv_interactions_graph_14 _views_by_source_graph_15 _new_followers_by_source_graph_16 _languages_graph_17 _reactions_by_emotion_graph_18 _story_interactions_graph_19 _story_reactions_by_emotion_graph_20 _recent_posts_interactions_21)};
           put to_be_encoded_22 = do {Data.Binary.put to_be_encoded_22._period;
                                      Data.Binary.put to_be_encoded_22._followers;
                                      Data.Binary.put to_be_encoded_22._views_per_post;
                                      Data.Binary.put to_be_encoded_22._shares_per_post;
                                      Data.Binary.put to_be_encoded_22._reactions_per_post;
                                      Data.Binary.put to_be_encoded_22._views_per_story;
                                      Data.Binary.put to_be_encoded_22._shares_per_story;
                                      Data.Binary.put to_be_encoded_22._reactions_per_story;
                                      Data.Binary.put to_be_encoded_22._enabled_notifications;
                                      Data.Binary.put to_be_encoded_22._growth_graph;
                                      Data.Binary.put to_be_encoded_22._followers_graph;
                                      Data.Binary.put to_be_encoded_22._mute_graph;
                                      Data.Binary.put to_be_encoded_22._top_hours_graph;
                                      Data.Binary.put to_be_encoded_22._interactions_graph;
                                      Data.Binary.put to_be_encoded_22._iv_interactions_graph;
                                      Data.Binary.put to_be_encoded_22._views_by_source_graph;
                                      Data.Binary.put to_be_encoded_22._new_followers_by_source_graph;
                                      Data.Binary.put to_be_encoded_22._languages_graph;
                                      Data.Binary.put to_be_encoded_22._reactions_by_emotion_graph;
                                      Data.Binary.put to_be_encoded_22._story_interactions_graph;
                                      Data.Binary.put to_be_encoded_22._story_reactions_by_emotion_graph;
                                      Data.Binary.put to_be_encoded_22._recent_posts_interactions}}
data Stats'BroadcastStats
    = Stats'broadcastStats !Stats'broadcastStats'
data Stats'broadcastStats'
    = Stats'broadcastStats' {_period :: !StatsDateRangeDays,
                             _followers :: !StatsAbsValueAndPrev,
                             _views_per_post :: !StatsAbsValueAndPrev,
                             _shares_per_post :: !StatsAbsValueAndPrev,
                             _reactions_per_post :: !StatsAbsValueAndPrev,
                             _views_per_story :: !StatsAbsValueAndPrev,
                             _shares_per_story :: !StatsAbsValueAndPrev,
                             _reactions_per_story :: !StatsAbsValueAndPrev,
                             _enabled_notifications :: !StatsPercentValue,
                             _growth_graph :: !StatsGraph,
                             _followers_graph :: !StatsGraph,
                             _mute_graph :: !StatsGraph,
                             _top_hours_graph :: !StatsGraph,
                             _interactions_graph :: !StatsGraph,
                             _iv_interactions_graph :: !StatsGraph,
                             _views_by_source_graph :: !StatsGraph,
                             _new_followers_by_source_graph :: !StatsGraph,
                             _languages_graph :: !StatsGraph,
                             _reactions_by_emotion_graph :: !StatsGraph,
                             _story_interactions_graph :: !StatsGraph,
                             _story_reactions_by_emotion_graph :: !StatsGraph,
                             _recent_posts_interactions :: !(Vector PostInteractionCounters)}
instance Data.Binary.Binary Stats'BroadcastStats
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {963421692 -> fmap Stats'broadcastStats Data.Binary.get}};
           put (Stats'broadcastStats tmp_1) = do {Data.Binary.Put.putWord32le 963421692;
                                                  Data.Binary.put tmp_1}}
instance Data.Binary.Binary Stats'megagroupStats'
    where {get = do {_period_0 <- Data.Binary.get;
                     _members_1 <- Data.Binary.get;
                     _messages_2 <- Data.Binary.get;
                     _viewers_3 <- Data.Binary.get;
                     _posters_4 <- Data.Binary.get;
                     _growth_graph_5 <- Data.Binary.get;
                     _members_graph_6 <- Data.Binary.get;
                     _new_members_by_source_graph_7 <- Data.Binary.get;
                     _languages_graph_8 <- Data.Binary.get;
                     _messages_graph_9 <- Data.Binary.get;
                     _actions_graph_10 <- Data.Binary.get;
                     _top_hours_graph_11 <- Data.Binary.get;
                     _weekdays_graph_12 <- Data.Binary.get;
                     _top_posters_13 <- Data.Binary.get;
                     _top_admins_14 <- Data.Binary.get;
                     _top_inviters_15 <- Data.Binary.get;
                     _users_16 <- Data.Binary.get;
                     GHC.Base.pure (Stats'megagroupStats' _period_0 _members_1 _messages_2 _viewers_3 _posters_4 _growth_graph_5 _members_graph_6 _new_members_by_source_graph_7 _languages_graph_8 _messages_graph_9 _actions_graph_10 _top_hours_graph_11 _weekdays_graph_12 _top_posters_13 _top_admins_14 _top_inviters_15 _users_16)};
           put to_be_encoded_17 = do {Data.Binary.put to_be_encoded_17._period;
                                      Data.Binary.put to_be_encoded_17._members;
                                      Data.Binary.put to_be_encoded_17._messages;
                                      Data.Binary.put to_be_encoded_17._viewers;
                                      Data.Binary.put to_be_encoded_17._posters;
                                      Data.Binary.put to_be_encoded_17._growth_graph;
                                      Data.Binary.put to_be_encoded_17._members_graph;
                                      Data.Binary.put to_be_encoded_17._new_members_by_source_graph;
                                      Data.Binary.put to_be_encoded_17._languages_graph;
                                      Data.Binary.put to_be_encoded_17._messages_graph;
                                      Data.Binary.put to_be_encoded_17._actions_graph;
                                      Data.Binary.put to_be_encoded_17._top_hours_graph;
                                      Data.Binary.put to_be_encoded_17._weekdays_graph;
                                      Data.Binary.put to_be_encoded_17._top_posters;
                                      Data.Binary.put to_be_encoded_17._top_admins;
                                      Data.Binary.put to_be_encoded_17._top_inviters;
                                      Data.Binary.put to_be_encoded_17._users}}
data Stats'MegagroupStats
    = Stats'megagroupStats !Stats'megagroupStats'
data Stats'megagroupStats'
    = Stats'megagroupStats' {_period :: !StatsDateRangeDays,
                             _members :: !StatsAbsValueAndPrev,
                             _messages :: !StatsAbsValueAndPrev,
                             _viewers :: !StatsAbsValueAndPrev,
                             _posters :: !StatsAbsValueAndPrev,
                             _growth_graph :: !StatsGraph,
                             _members_graph :: !StatsGraph,
                             _new_members_by_source_graph :: !StatsGraph,
                             _languages_graph :: !StatsGraph,
                             _messages_graph :: !StatsGraph,
                             _actions_graph :: !StatsGraph,
                             _top_hours_graph :: !StatsGraph,
                             _weekdays_graph :: !StatsGraph,
                             _top_posters :: !(Vector StatsGroupTopPoster),
                             _top_admins :: !(Vector StatsGroupTopAdmin),
                             _top_inviters :: !(Vector StatsGroupTopInviter),
                             _users :: !(Vector User)}
instance Data.Binary.Binary Stats'MegagroupStats
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {4018141462 -> fmap Stats'megagroupStats Data.Binary.get}};
           put (Stats'megagroupStats tmp_1) = do {Data.Binary.Put.putWord32le 4018141462;
                                                  Data.Binary.put tmp_1}}
instance Data.Binary.Binary Stats'messageStats'
    where {get = do {_views_graph_0 <- Data.Binary.get;
                     _reactions_by_emotion_graph_1 <- Data.Binary.get;
                     GHC.Base.pure (Stats'messageStats' _views_graph_0 _reactions_by_emotion_graph_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._views_graph;
                                     Data.Binary.put to_be_encoded_2._reactions_by_emotion_graph}}
data Stats'MessageStats = Stats'messageStats !Stats'messageStats'
data Stats'messageStats'
    = Stats'messageStats' {_views_graph :: !StatsGraph,
                           _reactions_by_emotion_graph :: !StatsGraph}
instance Data.Binary.Binary Stats'MessageStats
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2145983508 -> fmap Stats'messageStats Data.Binary.get}};
           put (Stats'messageStats tmp_1) = do {Data.Binary.Put.putWord32le 2145983508;
                                                Data.Binary.put tmp_1}}
instance Data.Binary.Binary Stats'publicForwards'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _count_1 <- Data.Binary.get;
                     _forwards_2 <- Data.Binary.get;
                     _next_offset_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _chats_4 <- Data.Binary.get;
                     _users_5 <- Data.Binary.get;
                     GHC.Base.pure (Stats'publicForwards' _count_1 _forwards_2 _next_offset_3 _chats_4 _users_5)};
           put to_be_encoded_6 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_6._next_offset,
                                                              0)];
                                     Data.Binary.put to_be_encoded_6._count;
                                     Data.Binary.put to_be_encoded_6._forwards;
                                     Data.Binary.put to_be_encoded_6._next_offset;
                                     Data.Binary.put to_be_encoded_6._chats;
                                     Data.Binary.put to_be_encoded_6._users}}
data Stats'PublicForwards
    = Stats'publicForwards !Stats'publicForwards'
data Stats'publicForwards'
    = Stats'publicForwards' {_count :: !Int',
                             _forwards :: !(Vector PublicForward),
                             _next_offset :: !(Maybe String'),
                             _chats :: !(Vector Chat),
                             _users :: !(Vector User)}
instance Data.Binary.Binary Stats'PublicForwards
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2466479648 -> fmap Stats'publicForwards Data.Binary.get}};
           put (Stats'publicForwards tmp_1) = do {Data.Binary.Put.putWord32le 2466479648;
                                                  Data.Binary.put tmp_1}}
instance Data.Binary.Binary Stats'storyStats'
    where {get = do {_views_graph_0 <- Data.Binary.get;
                     _reactions_by_emotion_graph_1 <- Data.Binary.get;
                     GHC.Base.pure (Stats'storyStats' _views_graph_0 _reactions_by_emotion_graph_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._views_graph;
                                     Data.Binary.put to_be_encoded_2._reactions_by_emotion_graph}}
data Stats'StoryStats = Stats'storyStats !Stats'storyStats'
data Stats'storyStats'
    = Stats'storyStats' {_views_graph :: !StatsGraph,
                         _reactions_by_emotion_graph :: !StatsGraph}
instance Data.Binary.Binary Stats'StoryStats
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1355613820 -> fmap Stats'storyStats Data.Binary.get}};
           put (Stats'storyStats tmp_1) = do {Data.Binary.Put.putWord32le 1355613820;
                                              Data.Binary.put tmp_1}}
instance Data.Binary.Binary Stickers'suggestedShortName'
    where {get = do {_short_name_0 <- Data.Binary.get;
                     GHC.Base.pure (Stickers'suggestedShortName' _short_name_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._short_name}
data Stickers'SuggestedShortName
    = Stickers'suggestedShortName !Stickers'suggestedShortName'
data Stickers'suggestedShortName'
    = Stickers'suggestedShortName' {_short_name :: !String'}
instance Data.Binary.Binary Stickers'SuggestedShortName
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2248056895 -> fmap Stickers'suggestedShortName Data.Binary.get}};
           put (Stickers'suggestedShortName tmp_1) = do {Data.Binary.Put.putWord32le 2248056895;
                                                         Data.Binary.put tmp_1}}
instance Data.Binary.Binary Storage'fileGif'
    where {get = GHC.Base.pure Storage'fileGif';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary Storage'fileJpeg'
    where {get = GHC.Base.pure Storage'fileJpeg';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary Storage'fileMov'
    where {get = GHC.Base.pure Storage'fileMov';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary Storage'fileMp3'
    where {get = GHC.Base.pure Storage'fileMp3';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary Storage'fileMp4'
    where {get = GHC.Base.pure Storage'fileMp4';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary Storage'filePartial'
    where {get = GHC.Base.pure Storage'filePartial';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary Storage'filePdf'
    where {get = GHC.Base.pure Storage'filePdf';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary Storage'filePng'
    where {get = GHC.Base.pure Storage'filePng';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary Storage'fileUnknown'
    where {get = GHC.Base.pure Storage'fileUnknown';
           put to_be_encoded_0 = do GHC.Base.pure ()}
instance Data.Binary.Binary Storage'fileWebp'
    where {get = GHC.Base.pure Storage'fileWebp';
           put to_be_encoded_0 = do GHC.Base.pure ()}
data Storage'FileType
    = Storage'fileGif !Storage'fileGif'
    | Storage'fileJpeg !Storage'fileJpeg'
    | Storage'fileMov !Storage'fileMov'
    | Storage'fileMp3 !Storage'fileMp3'
    | Storage'fileMp4 !Storage'fileMp4'
    | Storage'filePartial !Storage'filePartial'
    | Storage'filePdf !Storage'filePdf'
    | Storage'filePng !Storage'filePng'
    | Storage'fileUnknown !Storage'fileUnknown'
    | Storage'fileWebp !Storage'fileWebp'
data Storage'fileGif' = Storage'fileGif' {}
data Storage'fileJpeg' = Storage'fileJpeg' {}
data Storage'fileMov' = Storage'fileMov' {}
data Storage'fileMp3' = Storage'fileMp3' {}
data Storage'fileMp4' = Storage'fileMp4' {}
data Storage'filePartial' = Storage'filePartial' {}
data Storage'filePdf' = Storage'filePdf' {}
data Storage'filePng' = Storage'filePng' {}
data Storage'fileUnknown' = Storage'fileUnknown' {}
data Storage'fileWebp' = Storage'fileWebp' {}
instance Data.Binary.Binary Storage'FileType
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3403786975 -> fmap Storage'fileGif Data.Binary.get;
                      8322574 -> fmap Storage'fileJpeg Data.Binary.get;
                      1258941372 -> fmap Storage'fileMov Data.Binary.get;
                      1384777335 -> fmap Storage'fileMp3 Data.Binary.get;
                      3016663268 -> fmap Storage'fileMp4 Data.Binary.get;
                      1086091090 -> fmap Storage'filePartial Data.Binary.get;
                      2921222285 -> fmap Storage'filePdf Data.Binary.get;
                      172975040 -> fmap Storage'filePng Data.Binary.get;
                      2861972229 -> fmap Storage'fileUnknown Data.Binary.get;
                      276907596 -> fmap Storage'fileWebp Data.Binary.get}};
           put (Storage'fileGif tmp_1) = do {Data.Binary.Put.putWord32le 3403786975;
                                             Data.Binary.put tmp_1};
           put (Storage'fileJpeg tmp_2) = do {Data.Binary.Put.putWord32le 8322574;
                                              Data.Binary.put tmp_2};
           put (Storage'fileMov tmp_3) = do {Data.Binary.Put.putWord32le 1258941372;
                                             Data.Binary.put tmp_3};
           put (Storage'fileMp3 tmp_4) = do {Data.Binary.Put.putWord32le 1384777335;
                                             Data.Binary.put tmp_4};
           put (Storage'fileMp4 tmp_5) = do {Data.Binary.Put.putWord32le 3016663268;
                                             Data.Binary.put tmp_5};
           put (Storage'filePartial tmp_6) = do {Data.Binary.Put.putWord32le 1086091090;
                                                 Data.Binary.put tmp_6};
           put (Storage'filePdf tmp_7) = do {Data.Binary.Put.putWord32le 2921222285;
                                             Data.Binary.put tmp_7};
           put (Storage'filePng tmp_8) = do {Data.Binary.Put.putWord32le 172975040;
                                             Data.Binary.put tmp_8};
           put (Storage'fileUnknown tmp_9) = do {Data.Binary.Put.putWord32le 2861972229;
                                                 Data.Binary.put tmp_9};
           put (Storage'fileWebp tmp_10) = do {Data.Binary.Put.putWord32le 276907596;
                                               Data.Binary.put tmp_10}}
instance Data.Binary.Binary Stories'allStories'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _has_more_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _count_2 <- Data.Binary.get;
                     _state_3 <- Data.Binary.get;
                     _peer_stories_4 <- Data.Binary.get;
                     _chats_5 <- Data.Binary.get;
                     _users_6 <- Data.Binary.get;
                     _stealth_mode_7 <- Data.Binary.get;
                     GHC.Base.pure (Stories'allStories' _has_more_1 _count_2 _state_3 _peer_stories_4 _chats_5 _users_6 _stealth_mode_7)};
           put to_be_encoded_8 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_8._has_more,
                                                              0)];
                                     Data.Binary.put to_be_encoded_8._has_more;
                                     Data.Binary.put to_be_encoded_8._count;
                                     Data.Binary.put to_be_encoded_8._state;
                                     Data.Binary.put to_be_encoded_8._peer_stories;
                                     Data.Binary.put to_be_encoded_8._chats;
                                     Data.Binary.put to_be_encoded_8._users;
                                     Data.Binary.put to_be_encoded_8._stealth_mode}}
instance Data.Binary.Binary Stories'allStoriesNotModified'
    where {get = do {_flags_0 <- Data.Binary.get;
                     _state_1 <- Data.Binary.get;
                     _stealth_mode_2 <- Data.Binary.get;
                     GHC.Base.pure (Stories'allStoriesNotModified' _flags_0 _state_1 _stealth_mode_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._flags;
                                     Data.Binary.put to_be_encoded_3._state;
                                     Data.Binary.put to_be_encoded_3._stealth_mode}}
data Stories'AllStories
    = Stories'allStories !Stories'allStories'
    | Stories'allStoriesNotModified !Stories'allStoriesNotModified'
data Stories'allStories'
    = Stories'allStories' {_has_more :: !(Maybe True'),
                           _count :: !Int',
                           _state :: !String',
                           _peer_stories :: !(Vector PeerStories),
                           _chats :: !(Vector Chat),
                           _users :: !(Vector User),
                           _stealth_mode :: !StoriesStealthMode}
data Stories'allStoriesNotModified'
    = Stories'allStoriesNotModified' {_flags :: !Nat',
                                      _state :: !String',
                                      _stealth_mode :: !StoriesStealthMode}
instance Data.Binary.Binary Stories'AllStories
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1862033025 -> fmap Stories'allStories Data.Binary.get;
                      291044926 -> fmap Stories'allStoriesNotModified Data.Binary.get}};
           put (Stories'allStories tmp_1) = do {Data.Binary.Put.putWord32le 1862033025;
                                                Data.Binary.put tmp_1};
           put (Stories'allStoriesNotModified tmp_2) = do {Data.Binary.Put.putWord32le 291044926;
                                                           Data.Binary.put tmp_2}}
instance Data.Binary.Binary Stories'peerStories'
    where {get = do {_stories_0 <- Data.Binary.get;
                     _chats_1 <- Data.Binary.get;
                     _users_2 <- Data.Binary.get;
                     GHC.Base.pure (Stories'peerStories' _stories_0 _chats_1 _users_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._stories;
                                     Data.Binary.put to_be_encoded_3._chats;
                                     Data.Binary.put to_be_encoded_3._users}}
data Stories'PeerStories
    = Stories'peerStories !Stories'peerStories'
data Stories'peerStories'
    = Stories'peerStories' {_stories :: !PeerStories,
                            _chats :: !(Vector Chat),
                            _users :: !(Vector User)}
instance Data.Binary.Binary Stories'PeerStories
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3404105576 -> fmap Stories'peerStories Data.Binary.get}};
           put (Stories'peerStories tmp_1) = do {Data.Binary.Put.putWord32le 3404105576;
                                                 Data.Binary.put tmp_1}}
instance Data.Binary.Binary Stories'stories'
    where {get = do {_count_0 <- Data.Binary.get;
                     _stories_1 <- Data.Binary.get;
                     _chats_2 <- Data.Binary.get;
                     _users_3 <- Data.Binary.get;
                     GHC.Base.pure (Stories'stories' _count_0 _stories_1 _chats_2 _users_3)};
           put to_be_encoded_4 = do {Data.Binary.put to_be_encoded_4._count;
                                     Data.Binary.put to_be_encoded_4._stories;
                                     Data.Binary.put to_be_encoded_4._chats;
                                     Data.Binary.put to_be_encoded_4._users}}
data Stories'Stories = Stories'stories !Stories'stories'
data Stories'stories'
    = Stories'stories' {_count :: !Int',
                        _stories :: !(Vector StoryItem),
                        _chats :: !(Vector Chat),
                        _users :: !(Vector User)}
instance Data.Binary.Binary Stories'Stories
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1574486984 -> fmap Stories'stories Data.Binary.get}};
           put (Stories'stories tmp_1) = do {Data.Binary.Put.putWord32le 1574486984;
                                             Data.Binary.put tmp_1}}
instance Data.Binary.Binary Stories'storyReactionsList'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _count_1 <- Data.Binary.get;
                     _reactions_2 <- Data.Binary.get;
                     _chats_3 <- Data.Binary.get;
                     _users_4 <- Data.Binary.get;
                     _next_offset_5 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     GHC.Base.pure (Stories'storyReactionsList' _count_1 _reactions_2 _chats_3 _users_4 _next_offset_5)};
           put to_be_encoded_6 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_6._next_offset,
                                                              0)];
                                     Data.Binary.put to_be_encoded_6._count;
                                     Data.Binary.put to_be_encoded_6._reactions;
                                     Data.Binary.put to_be_encoded_6._chats;
                                     Data.Binary.put to_be_encoded_6._users;
                                     Data.Binary.put to_be_encoded_6._next_offset}}
data Stories'StoryReactionsList
    = Stories'storyReactionsList !Stories'storyReactionsList'
data Stories'storyReactionsList'
    = Stories'storyReactionsList' {_count :: !Int',
                                   _reactions :: !(Vector StoryReaction),
                                   _chats :: !(Vector Chat),
                                   _users :: !(Vector User),
                                   _next_offset :: !(Maybe String')}
instance Data.Binary.Binary Stories'StoryReactionsList
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2858383516 -> fmap Stories'storyReactionsList Data.Binary.get}};
           put (Stories'storyReactionsList tmp_1) = do {Data.Binary.Put.putWord32le 2858383516;
                                                        Data.Binary.put tmp_1}}
instance Data.Binary.Binary Stories'storyViews'
    where {get = do {_views_0 <- Data.Binary.get;
                     _users_1 <- Data.Binary.get;
                     GHC.Base.pure (Stories'storyViews' _views_0 _users_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._views;
                                     Data.Binary.put to_be_encoded_2._users}}
data Stories'StoryViews = Stories'storyViews !Stories'storyViews'
data Stories'storyViews'
    = Stories'storyViews' {_views :: !(Vector StoryViews),
                           _users :: !(Vector User)}
instance Data.Binary.Binary Stories'StoryViews
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3734957341 -> fmap Stories'storyViews Data.Binary.get}};
           put (Stories'storyViews tmp_1) = do {Data.Binary.Put.putWord32le 3734957341;
                                                Data.Binary.put tmp_1}}
instance Data.Binary.Binary Stories'storyViewsList'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _count_1 <- Data.Binary.get;
                     _views_count_2 <- Data.Binary.get;
                     _forwards_count_3 <- Data.Binary.get;
                     _reactions_count_4 <- Data.Binary.get;
                     _views_5 <- Data.Binary.get;
                     _chats_6 <- Data.Binary.get;
                     _users_7 <- Data.Binary.get;
                     _next_offset_8 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     GHC.Base.pure (Stories'storyViewsList' _count_1 _views_count_2 _forwards_count_3 _reactions_count_4 _views_5 _chats_6 _users_7 _next_offset_8)};
           put to_be_encoded_9 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_9._next_offset,
                                                              0)];
                                     Data.Binary.put to_be_encoded_9._count;
                                     Data.Binary.put to_be_encoded_9._views_count;
                                     Data.Binary.put to_be_encoded_9._forwards_count;
                                     Data.Binary.put to_be_encoded_9._reactions_count;
                                     Data.Binary.put to_be_encoded_9._views;
                                     Data.Binary.put to_be_encoded_9._chats;
                                     Data.Binary.put to_be_encoded_9._users;
                                     Data.Binary.put to_be_encoded_9._next_offset}}
data Stories'StoryViewsList
    = Stories'storyViewsList !Stories'storyViewsList'
data Stories'storyViewsList'
    = Stories'storyViewsList' {_count :: !Int',
                               _views_count :: !Int',
                               _forwards_count :: !Int',
                               _reactions_count :: !Int',
                               _views :: !(Vector StoryView),
                               _chats :: !(Vector Chat),
                               _users :: !(Vector User),
                               _next_offset :: !(Maybe String')}
instance Data.Binary.Binary Stories'StoryViewsList
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1507299269 -> fmap Stories'storyViewsList Data.Binary.get}};
           put (Stories'storyViewsList tmp_1) = do {Data.Binary.Put.putWord32le 1507299269;
                                                    Data.Binary.put tmp_1}}
instance Data.Binary.Binary Updates'channelDifference'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _final_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _pts_2 <- Data.Binary.get;
                     _timeout_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _new_messages_4 <- Data.Binary.get;
                     _other_updates_5 <- Data.Binary.get;
                     _chats_6 <- Data.Binary.get;
                     _users_7 <- Data.Binary.get;
                     GHC.Base.pure (Updates'channelDifference' _final_1 _pts_2 _timeout_3 _new_messages_4 _other_updates_5 _chats_6 _users_7)};
           put to_be_encoded_8 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_8._timeout,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_8._final,
                                                              0)];
                                     Data.Binary.put to_be_encoded_8._final;
                                     Data.Binary.put to_be_encoded_8._pts;
                                     Data.Binary.put to_be_encoded_8._timeout;
                                     Data.Binary.put to_be_encoded_8._new_messages;
                                     Data.Binary.put to_be_encoded_8._other_updates;
                                     Data.Binary.put to_be_encoded_8._chats;
                                     Data.Binary.put to_be_encoded_8._users}}
instance Data.Binary.Binary Updates'channelDifferenceEmpty'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _final_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _pts_2 <- Data.Binary.get;
                     _timeout_3 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     GHC.Base.pure (Updates'channelDifferenceEmpty' _final_1 _pts_2 _timeout_3)};
           put to_be_encoded_4 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_4._timeout,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_4._final,
                                                              0)];
                                     Data.Binary.put to_be_encoded_4._final;
                                     Data.Binary.put to_be_encoded_4._pts;
                                     Data.Binary.put to_be_encoded_4._timeout}}
instance Data.Binary.Binary Updates'channelDifferenceTooLong'
    where {get = do {_flags_0 <- Data.Binary.Get.getWord32le;
                     _final_1 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 0);
                     _timeout_2 <- Data.Binary.tlHandleOpt _flags_0 (GHC.Maybe.Just 1);
                     _dialog_3 <- Data.Binary.get;
                     _messages_4 <- Data.Binary.get;
                     _chats_5 <- Data.Binary.get;
                     _users_6 <- Data.Binary.get;
                     GHC.Base.pure (Updates'channelDifferenceTooLong' _final_1 _timeout_2 _dialog_3 _messages_4 _chats_5 _users_6)};
           put to_be_encoded_7 = do {Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_7._timeout,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_7._final,
                                                              0)];
                                     Data.Binary.put to_be_encoded_7._final;
                                     Data.Binary.put to_be_encoded_7._timeout;
                                     Data.Binary.put to_be_encoded_7._dialog;
                                     Data.Binary.put to_be_encoded_7._messages;
                                     Data.Binary.put to_be_encoded_7._chats;
                                     Data.Binary.put to_be_encoded_7._users}}
data Updates'ChannelDifference
    = Updates'channelDifference !Updates'channelDifference'
    | Updates'channelDifferenceEmpty !Updates'channelDifferenceEmpty'
    | Updates'channelDifferenceTooLong !Updates'channelDifferenceTooLong'
data Updates'channelDifference'
    = Updates'channelDifference' {_final :: !(Maybe True'),
                                  _pts :: !Int',
                                  _timeout :: !(Maybe Int'),
                                  _new_messages :: !(Vector Message),
                                  _other_updates :: !(Vector Update),
                                  _chats :: !(Vector Chat),
                                  _users :: !(Vector User)}
data Updates'channelDifferenceEmpty'
    = Updates'channelDifferenceEmpty' {_final :: !(Maybe True'),
                                       _pts :: !Int',
                                       _timeout :: !(Maybe Int')}
data Updates'channelDifferenceTooLong'
    = Updates'channelDifferenceTooLong' {_final :: !(Maybe True'),
                                         _timeout :: !(Maybe Int'),
                                         _dialog :: !Dialog,
                                         _messages :: !(Vector Message),
                                         _chats :: !(Vector Chat),
                                         _users :: !(Vector User)}
instance Data.Binary.Binary Updates'ChannelDifference
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {543450958 -> fmap Updates'channelDifference Data.Binary.get;
                      1041346555 -> fmap Updates'channelDifferenceEmpty Data.Binary.get;
                      2763835134 -> fmap Updates'channelDifferenceTooLong Data.Binary.get}};
           put (Updates'channelDifference tmp_1) = do {Data.Binary.Put.putWord32le 543450958;
                                                       Data.Binary.put tmp_1};
           put (Updates'channelDifferenceEmpty tmp_2) = do {Data.Binary.Put.putWord32le 1041346555;
                                                            Data.Binary.put tmp_2};
           put (Updates'channelDifferenceTooLong tmp_3) = do {Data.Binary.Put.putWord32le 2763835134;
                                                              Data.Binary.put tmp_3}}
instance Data.Binary.Binary Updates'difference'
    where {get = do {_new_messages_0 <- Data.Binary.get;
                     _new_encrypted_messages_1 <- Data.Binary.get;
                     _other_updates_2 <- Data.Binary.get;
                     _chats_3 <- Data.Binary.get;
                     _users_4 <- Data.Binary.get;
                     _state_5 <- Data.Binary.get;
                     GHC.Base.pure (Updates'difference' _new_messages_0 _new_encrypted_messages_1 _other_updates_2 _chats_3 _users_4 _state_5)};
           put to_be_encoded_6 = do {Data.Binary.put to_be_encoded_6._new_messages;
                                     Data.Binary.put to_be_encoded_6._new_encrypted_messages;
                                     Data.Binary.put to_be_encoded_6._other_updates;
                                     Data.Binary.put to_be_encoded_6._chats;
                                     Data.Binary.put to_be_encoded_6._users;
                                     Data.Binary.put to_be_encoded_6._state}}
instance Data.Binary.Binary Updates'differenceEmpty'
    where {get = do {_date_0 <- Data.Binary.get;
                     _seq_1 <- Data.Binary.get;
                     GHC.Base.pure (Updates'differenceEmpty' _date_0 _seq_1)};
           put to_be_encoded_2 = do {Data.Binary.put to_be_encoded_2._date;
                                     Data.Binary.put to_be_encoded_2._seq}}
instance Data.Binary.Binary Updates'differenceSlice'
    where {get = do {_new_messages_0 <- Data.Binary.get;
                     _new_encrypted_messages_1 <- Data.Binary.get;
                     _other_updates_2 <- Data.Binary.get;
                     _chats_3 <- Data.Binary.get;
                     _users_4 <- Data.Binary.get;
                     _intermediate_state_5 <- Data.Binary.get;
                     GHC.Base.pure (Updates'differenceSlice' _new_messages_0 _new_encrypted_messages_1 _other_updates_2 _chats_3 _users_4 _intermediate_state_5)};
           put to_be_encoded_6 = do {Data.Binary.put to_be_encoded_6._new_messages;
                                     Data.Binary.put to_be_encoded_6._new_encrypted_messages;
                                     Data.Binary.put to_be_encoded_6._other_updates;
                                     Data.Binary.put to_be_encoded_6._chats;
                                     Data.Binary.put to_be_encoded_6._users;
                                     Data.Binary.put to_be_encoded_6._intermediate_state}}
instance Data.Binary.Binary Updates'differenceTooLong'
    where {get = do {_pts_0 <- Data.Binary.get;
                     GHC.Base.pure (Updates'differenceTooLong' _pts_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._pts}
data Updates'Difference
    = Updates'difference !Updates'difference'
    | Updates'differenceEmpty !Updates'differenceEmpty'
    | Updates'differenceSlice !Updates'differenceSlice'
    | Updates'differenceTooLong !Updates'differenceTooLong'
data Updates'difference'
    = Updates'difference' {_new_messages :: !(Vector Message),
                           _new_encrypted_messages :: !(Vector EncryptedMessage),
                           _other_updates :: !(Vector Update),
                           _chats :: !(Vector Chat),
                           _users :: !(Vector User),
                           _state :: !Updates'State}
data Updates'differenceEmpty'
    = Updates'differenceEmpty' {_date :: !Int', _seq :: !Int'}
data Updates'differenceSlice'
    = Updates'differenceSlice' {_new_messages :: !(Vector Message),
                                _new_encrypted_messages :: !(Vector EncryptedMessage),
                                _other_updates :: !(Vector Update),
                                _chats :: !(Vector Chat),
                                _users :: !(Vector User),
                                _intermediate_state :: !Updates'State}
data Updates'differenceTooLong'
    = Updates'differenceTooLong' {_pts :: !Int'}
instance Data.Binary.Binary Updates'Difference
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {16030880 -> fmap Updates'difference Data.Binary.get;
                      1567990072 -> fmap Updates'differenceEmpty Data.Binary.get;
                      2835028353 -> fmap Updates'differenceSlice Data.Binary.get;
                      1258196845 -> fmap Updates'differenceTooLong Data.Binary.get}};
           put (Updates'difference tmp_1) = do {Data.Binary.Put.putWord32le 16030880;
                                                Data.Binary.put tmp_1};
           put (Updates'differenceEmpty tmp_2) = do {Data.Binary.Put.putWord32le 1567990072;
                                                     Data.Binary.put tmp_2};
           put (Updates'differenceSlice tmp_3) = do {Data.Binary.Put.putWord32le 2835028353;
                                                     Data.Binary.put tmp_3};
           put (Updates'differenceTooLong tmp_4) = do {Data.Binary.Put.putWord32le 1258196845;
                                                       Data.Binary.put tmp_4}}
instance Data.Binary.Binary Updates'state'
    where {get = do {_pts_0 <- Data.Binary.get;
                     _qts_1 <- Data.Binary.get;
                     _date_2 <- Data.Binary.get;
                     _seq_3 <- Data.Binary.get;
                     _unread_count_4 <- Data.Binary.get;
                     GHC.Base.pure (Updates'state' _pts_0 _qts_1 _date_2 _seq_3 _unread_count_4)};
           put to_be_encoded_5 = do {Data.Binary.put to_be_encoded_5._pts;
                                     Data.Binary.put to_be_encoded_5._qts;
                                     Data.Binary.put to_be_encoded_5._date;
                                     Data.Binary.put to_be_encoded_5._seq;
                                     Data.Binary.put to_be_encoded_5._unread_count}}
data Updates'State = Updates'state !Updates'state'
data Updates'state'
    = Updates'state' {_pts :: !Int',
                      _qts :: !Int',
                      _date :: !Int',
                      _seq :: !Int',
                      _unread_count :: !Int'}
instance Data.Binary.Binary Updates'State
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2775329342 -> fmap Updates'state Data.Binary.get}};
           put (Updates'state tmp_1) = do {Data.Binary.Put.putWord32le 2775329342;
                                           Data.Binary.put tmp_1}}
instance Data.Binary.Binary Upload'cdnFile'
    where {get = do {_bytes_0 <- Data.Binary.get;
                     GHC.Base.pure (Upload'cdnFile' _bytes_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._bytes}
instance Data.Binary.Binary Upload'cdnFileReuploadNeeded'
    where {get = do {_request_token_0 <- Data.Binary.get;
                     GHC.Base.pure (Upload'cdnFileReuploadNeeded' _request_token_0)};
           put to_be_encoded_1 = do Data.Binary.put to_be_encoded_1._request_token}
data Upload'CdnFile
    = Upload'cdnFile !Upload'cdnFile'
    | Upload'cdnFileReuploadNeeded !Upload'cdnFileReuploadNeeded'
data Upload'cdnFile' = Upload'cdnFile' {_bytes :: !Bytes'}
data Upload'cdnFileReuploadNeeded'
    = Upload'cdnFileReuploadNeeded' {_request_token :: !Bytes'}
instance Data.Binary.Binary Upload'CdnFile
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2845821519 -> fmap Upload'cdnFile Data.Binary.get;
                      4004045934 -> fmap Upload'cdnFileReuploadNeeded Data.Binary.get}};
           put (Upload'cdnFile tmp_1) = do {Data.Binary.Put.putWord32le 2845821519;
                                            Data.Binary.put tmp_1};
           put (Upload'cdnFileReuploadNeeded tmp_2) = do {Data.Binary.Put.putWord32le 4004045934;
                                                          Data.Binary.put tmp_2}}
instance Data.Binary.Binary Upload'file'
    where {get = do {_type_0 <- Data.Binary.get;
                     _mtime_1 <- Data.Binary.get;
                     _bytes_2 <- Data.Binary.get;
                     GHC.Base.pure (Upload'file' _type_0 _mtime_1 _bytes_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._type;
                                     Data.Binary.put to_be_encoded_3._mtime;
                                     Data.Binary.put to_be_encoded_3._bytes}}
instance Data.Binary.Binary Upload'fileCdnRedirect'
    where {get = do {_dc_id_0 <- Data.Binary.get;
                     _file_token_1 <- Data.Binary.get;
                     _encryption_key_2 <- Data.Binary.get;
                     _encryption_iv_3 <- Data.Binary.get;
                     _file_hashes_4 <- Data.Binary.get;
                     GHC.Base.pure (Upload'fileCdnRedirect' _dc_id_0 _file_token_1 _encryption_key_2 _encryption_iv_3 _file_hashes_4)};
           put to_be_encoded_5 = do {Data.Binary.put to_be_encoded_5._dc_id;
                                     Data.Binary.put to_be_encoded_5._file_token;
                                     Data.Binary.put to_be_encoded_5._encryption_key;
                                     Data.Binary.put to_be_encoded_5._encryption_iv;
                                     Data.Binary.put to_be_encoded_5._file_hashes}}
data Upload'File
    = Upload'file !Upload'file'
    | Upload'fileCdnRedirect !Upload'fileCdnRedirect'
data Upload'file'
    = Upload'file' {_type :: !Storage'FileType,
                    _mtime :: !Int',
                    _bytes :: !Bytes'}
data Upload'fileCdnRedirect'
    = Upload'fileCdnRedirect' {_dc_id :: !Int',
                               _file_token :: !Bytes',
                               _encryption_key :: !Bytes',
                               _encryption_iv :: !Bytes',
                               _file_hashes :: !(Vector FileHash)}
instance Data.Binary.Binary Upload'File
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {157948117 -> fmap Upload'file Data.Binary.get;
                      4052539972 -> fmap Upload'fileCdnRedirect Data.Binary.get}};
           put (Upload'file tmp_1) = do {Data.Binary.Put.putWord32le 157948117;
                                         Data.Binary.put tmp_1};
           put (Upload'fileCdnRedirect tmp_2) = do {Data.Binary.Put.putWord32le 4052539972;
                                                    Data.Binary.put tmp_2}}
instance Data.Binary.Binary Upload'webFile'
    where {get = do {_size_0 <- Data.Binary.get;
                     _mime_type_1 <- Data.Binary.get;
                     _file_type_2 <- Data.Binary.get;
                     _mtime_3 <- Data.Binary.get;
                     _bytes_4 <- Data.Binary.get;
                     GHC.Base.pure (Upload'webFile' _size_0 _mime_type_1 _file_type_2 _mtime_3 _bytes_4)};
           put to_be_encoded_5 = do {Data.Binary.put to_be_encoded_5._size;
                                     Data.Binary.put to_be_encoded_5._mime_type;
                                     Data.Binary.put to_be_encoded_5._file_type;
                                     Data.Binary.put to_be_encoded_5._mtime;
                                     Data.Binary.put to_be_encoded_5._bytes}}
data Upload'WebFile = Upload'webFile !Upload'webFile'
data Upload'webFile'
    = Upload'webFile' {_size :: !Int',
                       _mime_type :: !String',
                       _file_type :: !Storage'FileType,
                       _mtime :: !Int',
                       _bytes :: !Bytes'}
instance Data.Binary.Binary Upload'WebFile
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {568808380 -> fmap Upload'webFile Data.Binary.get}};
           put (Upload'webFile tmp_1) = do {Data.Binary.Put.putWord32le 568808380;
                                            Data.Binary.put tmp_1}}
instance Data.Binary.Binary Users'userFull'
    where {get = do {_full_user_0 <- Data.Binary.get;
                     _chats_1 <- Data.Binary.get;
                     _users_2 <- Data.Binary.get;
                     GHC.Base.pure (Users'userFull' _full_user_0 _chats_1 _users_2)};
           put to_be_encoded_3 = do {Data.Binary.put to_be_encoded_3._full_user;
                                     Data.Binary.put to_be_encoded_3._chats;
                                     Data.Binary.put to_be_encoded_3._users}}
data Users'UserFull = Users'userFull !Users'userFull'
data Users'userFull'
    = Users'userFull' {_full_user :: !UserFull,
                       _chats :: !(Vector Chat),
                       _users :: !(Vector User)}
instance Data.Binary.Binary Users'UserFull
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {997004590 -> fmap Users'userFull Data.Binary.get}};
           put (Users'userFull tmp_1) = do {Data.Binary.Put.putWord32le 997004590;
                                            Data.Binary.put tmp_1}}
data Method'Auth'sendCode
    = Method'Auth'sendCode {_phone_number :: !String',
                            _api_id :: !Int',
                            _api_hash :: !String',
                            _settings :: !CodeSettings}
instance Data.Binary.Binary Method'Auth'sendCode
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2792825935 -> do {_phone_number_1 <- Data.Binary.get;
                                        _api_id_2 <- Data.Binary.get;
                                        _api_hash_3 <- Data.Binary.get;
                                        _settings_4 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Auth'sendCode _phone_number_1 _api_id_2 _api_hash_3 _settings_4)}}};
           put to_be_encoded_5 = do {Data.Binary.Put.putWord32le 2792825935;
                                     Data.Binary.put to_be_encoded_5._phone_number;
                                     Data.Binary.put to_be_encoded_5._api_id;
                                     Data.Binary.put to_be_encoded_5._api_hash;
                                     Data.Binary.put to_be_encoded_5._settings}}
instance TLFunctionʼ Method'Auth'sendCode Auth'SentCode
data Method'Auth'signUp
    = Method'Auth'signUp {_phone_number :: !String',
                          _phone_code_hash :: !String',
                          _first_name :: !String',
                          _last_name :: !String'}
instance Data.Binary.Binary Method'Auth'signUp
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2163139623 -> do {_phone_number_1 <- Data.Binary.get;
                                        _phone_code_hash_2 <- Data.Binary.get;
                                        _first_name_3 <- Data.Binary.get;
                                        _last_name_4 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Auth'signUp _phone_number_1 _phone_code_hash_2 _first_name_3 _last_name_4)}}};
           put to_be_encoded_5 = do {Data.Binary.Put.putWord32le 2163139623;
                                     Data.Binary.put to_be_encoded_5._phone_number;
                                     Data.Binary.put to_be_encoded_5._phone_code_hash;
                                     Data.Binary.put to_be_encoded_5._first_name;
                                     Data.Binary.put to_be_encoded_5._last_name}}
instance TLFunctionʼ Method'Auth'signUp Auth'Authorization
data Method'Auth'signIn
    = Method'Auth'signIn {_phone_number :: !String',
                          _phone_code_hash :: !String',
                          _phone_code :: !(Maybe String'),
                          _email_verification :: !(Maybe EmailVerification)}
instance Data.Binary.Binary Method'Auth'signIn
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2371004753 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _phone_number_2 <- Data.Binary.get;
                                        _phone_code_hash_3 <- Data.Binary.get;
                                        _phone_code_4 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        _email_verification_5 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 1);
                                        GHC.Base.pure (Method'Auth'signIn _phone_number_2 _phone_code_hash_3 _phone_code_4 _email_verification_5)}}};
           put to_be_encoded_6 = do {Data.Binary.Put.putWord32le 2371004753;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_6._email_verification,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_6._phone_code,
                                                              0)];
                                     Data.Binary.put to_be_encoded_6._phone_number;
                                     Data.Binary.put to_be_encoded_6._phone_code_hash;
                                     Data.Binary.put to_be_encoded_6._phone_code;
                                     Data.Binary.put to_be_encoded_6._email_verification}}
instance TLFunctionʼ Method'Auth'signIn Auth'Authorization
data Method'Auth'logOut = Method'Auth'logOut {}
instance Data.Binary.Binary Method'Auth'logOut
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1047706137 -> GHC.Base.pure Method'Auth'logOut}};
           put to_be_encoded_1 = do {Data.Binary.Put.putWord32le 1047706137;
                                     GHC.Base.pure ()}}
instance TLFunctionʼ Method'Auth'logOut Auth'LoggedOut
data Method'Auth'resetAuthorizations
    = Method'Auth'resetAuthorizations {}
instance Data.Binary.Binary Method'Auth'resetAuthorizations
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2678787354 -> GHC.Base.pure Method'Auth'resetAuthorizations}};
           put to_be_encoded_1 = do {Data.Binary.Put.putWord32le 2678787354;
                                     GHC.Base.pure ()}}
instance TLFunctionʼ Method'Auth'resetAuthorizations Bool
data Method'Auth'exportAuthorization
    = Method'Auth'exportAuthorization {_dc_id :: !Int'}
instance Data.Binary.Binary Method'Auth'exportAuthorization
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3854565325 -> do {_dc_id_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Auth'exportAuthorization _dc_id_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 3854565325;
                                     Data.Binary.put to_be_encoded_2._dc_id}}
instance TLFunctionʼ Method'Auth'exportAuthorization
                     Auth'ExportedAuthorization
data Method'Auth'importAuthorization
    = Method'Auth'importAuthorization {_id :: !Long',
                                       _bytes :: !Bytes'}
instance Data.Binary.Binary Method'Auth'importAuthorization
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2776268205 -> do {_id_1 <- Data.Binary.get;
                                        _bytes_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Auth'importAuthorization _id_1 _bytes_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 2776268205;
                                     Data.Binary.put to_be_encoded_3._id;
                                     Data.Binary.put to_be_encoded_3._bytes}}
instance TLFunctionʼ Method'Auth'importAuthorization
                     Auth'Authorization
data Method'Auth'bindTempAuthKey
    = Method'Auth'bindTempAuthKey {_perm_auth_key_id :: !Long',
                                   _nonce :: !Long',
                                   _expires_at :: !Int',
                                   _encrypted_message :: !Bytes'}
instance Data.Binary.Binary Method'Auth'bindTempAuthKey
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3453233669 -> do {_perm_auth_key_id_1 <- Data.Binary.get;
                                        _nonce_2 <- Data.Binary.get;
                                        _expires_at_3 <- Data.Binary.get;
                                        _encrypted_message_4 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Auth'bindTempAuthKey _perm_auth_key_id_1 _nonce_2 _expires_at_3 _encrypted_message_4)}}};
           put to_be_encoded_5 = do {Data.Binary.Put.putWord32le 3453233669;
                                     Data.Binary.put to_be_encoded_5._perm_auth_key_id;
                                     Data.Binary.put to_be_encoded_5._nonce;
                                     Data.Binary.put to_be_encoded_5._expires_at;
                                     Data.Binary.put to_be_encoded_5._encrypted_message}}
instance TLFunctionʼ Method'Auth'bindTempAuthKey Bool
data Method'Auth'importBotAuthorization
    = Method'Auth'importBotAuthorization {_flags :: !Int',
                                          _api_id :: !Int',
                                          _api_hash :: !String',
                                          _bot_auth_token :: !String'}
instance Data.Binary.Binary Method'Auth'importBotAuthorization
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1738800940 -> do {_flags_1 <- Data.Binary.get;
                                        _api_id_2 <- Data.Binary.get;
                                        _api_hash_3 <- Data.Binary.get;
                                        _bot_auth_token_4 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Auth'importBotAuthorization _flags_1 _api_id_2 _api_hash_3 _bot_auth_token_4)}}};
           put to_be_encoded_5 = do {Data.Binary.Put.putWord32le 1738800940;
                                     Data.Binary.put to_be_encoded_5._flags;
                                     Data.Binary.put to_be_encoded_5._api_id;
                                     Data.Binary.put to_be_encoded_5._api_hash;
                                     Data.Binary.put to_be_encoded_5._bot_auth_token}}
instance TLFunctionʼ Method'Auth'importBotAuthorization
                     Auth'Authorization
data Method'Auth'checkPassword
    = Method'Auth'checkPassword {_password :: !InputCheckPasswordSRP}
instance Data.Binary.Binary Method'Auth'checkPassword
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3515567382 -> do {_password_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Auth'checkPassword _password_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 3515567382;
                                     Data.Binary.put to_be_encoded_2._password}}
instance TLFunctionʼ Method'Auth'checkPassword Auth'Authorization
data Method'Auth'requestPasswordRecovery
    = Method'Auth'requestPasswordRecovery {}
instance Data.Binary.Binary Method'Auth'requestPasswordRecovery
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3633822822 -> GHC.Base.pure Method'Auth'requestPasswordRecovery}};
           put to_be_encoded_1 = do {Data.Binary.Put.putWord32le 3633822822;
                                     GHC.Base.pure ()}}
instance TLFunctionʼ Method'Auth'requestPasswordRecovery
                     Auth'PasswordRecovery
data Method'Auth'recoverPassword
    = Method'Auth'recoverPassword {_code :: !String',
                                   _new_settings :: !(Maybe Account'PasswordInputSettings)}
instance Data.Binary.Binary Method'Auth'recoverPassword
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {923364464 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                       _code_2 <- Data.Binary.get;
                                       _new_settings_3 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                       GHC.Base.pure (Method'Auth'recoverPassword _code_2 _new_settings_3)}}};
           put to_be_encoded_4 = do {Data.Binary.Put.putWord32le 923364464;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_4._new_settings,
                                                              0)];
                                     Data.Binary.put to_be_encoded_4._code;
                                     Data.Binary.put to_be_encoded_4._new_settings}}
instance TLFunctionʼ Method'Auth'recoverPassword Auth'Authorization
data Method'Auth'resendCode
    = Method'Auth'resendCode {_phone_number :: !String',
                              _phone_code_hash :: !String'}
instance Data.Binary.Binary Method'Auth'resendCode
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1056025023 -> do {_phone_number_1 <- Data.Binary.get;
                                        _phone_code_hash_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Auth'resendCode _phone_number_1 _phone_code_hash_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 1056025023;
                                     Data.Binary.put to_be_encoded_3._phone_number;
                                     Data.Binary.put to_be_encoded_3._phone_code_hash}}
instance TLFunctionʼ Method'Auth'resendCode Auth'SentCode
data Method'Auth'cancelCode
    = Method'Auth'cancelCode {_phone_number :: !String',
                              _phone_code_hash :: !String'}
instance Data.Binary.Binary Method'Auth'cancelCode
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {520357240 -> do {_phone_number_1 <- Data.Binary.get;
                                       _phone_code_hash_2 <- Data.Binary.get;
                                       GHC.Base.pure (Method'Auth'cancelCode _phone_number_1 _phone_code_hash_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 520357240;
                                     Data.Binary.put to_be_encoded_3._phone_number;
                                     Data.Binary.put to_be_encoded_3._phone_code_hash}}
instance TLFunctionʼ Method'Auth'cancelCode Bool
data Method'Auth'dropTempAuthKeys
    = Method'Auth'dropTempAuthKeys {_except_auth_keys :: !(Vector Long')}
instance Data.Binary.Binary Method'Auth'dropTempAuthKeys
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2387124616 -> do {_except_auth_keys_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Auth'dropTempAuthKeys _except_auth_keys_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 2387124616;
                                     Data.Binary.put to_be_encoded_2._except_auth_keys}}
instance TLFunctionʼ Method'Auth'dropTempAuthKeys Bool
data Method'Auth'exportLoginToken
    = Method'Auth'exportLoginToken {_api_id :: !Int',
                                    _api_hash :: !String',
                                    _except_ids :: !(Vector Long')}
instance Data.Binary.Binary Method'Auth'exportLoginToken
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3084944894 -> do {_api_id_1 <- Data.Binary.get;
                                        _api_hash_2 <- Data.Binary.get;
                                        _except_ids_3 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Auth'exportLoginToken _api_id_1 _api_hash_2 _except_ids_3)}}};
           put to_be_encoded_4 = do {Data.Binary.Put.putWord32le 3084944894;
                                     Data.Binary.put to_be_encoded_4._api_id;
                                     Data.Binary.put to_be_encoded_4._api_hash;
                                     Data.Binary.put to_be_encoded_4._except_ids}}
instance TLFunctionʼ Method'Auth'exportLoginToken Auth'LoginToken
data Method'Auth'importLoginToken
    = Method'Auth'importLoginToken {_token :: !Bytes'}
instance Data.Binary.Binary Method'Auth'importLoginToken
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2511101156 -> do {_token_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Auth'importLoginToken _token_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 2511101156;
                                     Data.Binary.put to_be_encoded_2._token}}
instance TLFunctionʼ Method'Auth'importLoginToken Auth'LoginToken
data Method'Auth'acceptLoginToken
    = Method'Auth'acceptLoginToken {_token :: !Bytes'}
instance Data.Binary.Binary Method'Auth'acceptLoginToken
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3902057805 -> do {_token_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Auth'acceptLoginToken _token_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 3902057805;
                                     Data.Binary.put to_be_encoded_2._token}}
instance TLFunctionʼ Method'Auth'acceptLoginToken Authorization
data Method'Auth'checkRecoveryPassword
    = Method'Auth'checkRecoveryPassword {_code :: !String'}
instance Data.Binary.Binary Method'Auth'checkRecoveryPassword
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {221691769 -> do {_code_1 <- Data.Binary.get;
                                       GHC.Base.pure (Method'Auth'checkRecoveryPassword _code_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 221691769;
                                     Data.Binary.put to_be_encoded_2._code}}
instance TLFunctionʼ Method'Auth'checkRecoveryPassword Bool
data Method'Auth'importWebTokenAuthorization
    = Method'Auth'importWebTokenAuthorization {_api_id :: !Int',
                                               _api_hash :: !String',
                                               _web_auth_token :: !String'}
instance Data.Binary.Binary Method'Auth'importWebTokenAuthorization
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {767062953 -> do {_api_id_1 <- Data.Binary.get;
                                       _api_hash_2 <- Data.Binary.get;
                                       _web_auth_token_3 <- Data.Binary.get;
                                       GHC.Base.pure (Method'Auth'importWebTokenAuthorization _api_id_1 _api_hash_2 _web_auth_token_3)}}};
           put to_be_encoded_4 = do {Data.Binary.Put.putWord32le 767062953;
                                     Data.Binary.put to_be_encoded_4._api_id;
                                     Data.Binary.put to_be_encoded_4._api_hash;
                                     Data.Binary.put to_be_encoded_4._web_auth_token}}
instance TLFunctionʼ Method'Auth'importWebTokenAuthorization
                     Auth'Authorization
data Method'Auth'requestFirebaseSms
    = Method'Auth'requestFirebaseSms {_phone_number :: !String',
                                      _phone_code_hash :: !String',
                                      _safety_net_token :: !(Maybe String'),
                                      _ios_push_secret :: !(Maybe String')}
instance Data.Binary.Binary Method'Auth'requestFirebaseSms
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2303085392 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _phone_number_2 <- Data.Binary.get;
                                        _phone_code_hash_3 <- Data.Binary.get;
                                        _safety_net_token_4 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        _ios_push_secret_5 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 1);
                                        GHC.Base.pure (Method'Auth'requestFirebaseSms _phone_number_2 _phone_code_hash_3 _safety_net_token_4 _ios_push_secret_5)}}};
           put to_be_encoded_6 = do {Data.Binary.Put.putWord32le 2303085392;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_6._ios_push_secret,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_6._safety_net_token,
                                                              0)];
                                     Data.Binary.put to_be_encoded_6._phone_number;
                                     Data.Binary.put to_be_encoded_6._phone_code_hash;
                                     Data.Binary.put to_be_encoded_6._safety_net_token;
                                     Data.Binary.put to_be_encoded_6._ios_push_secret}}
instance TLFunctionʼ Method'Auth'requestFirebaseSms Bool
data Method'Auth'resetLoginEmail
    = Method'Auth'resetLoginEmail {_phone_number :: !String',
                                   _phone_code_hash :: !String'}
instance Data.Binary.Binary Method'Auth'resetLoginEmail
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2123760019 -> do {_phone_number_1 <- Data.Binary.get;
                                        _phone_code_hash_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Auth'resetLoginEmail _phone_number_1 _phone_code_hash_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 2123760019;
                                     Data.Binary.put to_be_encoded_3._phone_number;
                                     Data.Binary.put to_be_encoded_3._phone_code_hash}}
instance TLFunctionʼ Method'Auth'resetLoginEmail Auth'SentCode
data Method'Account'registerDevice
    = Method'Account'registerDevice {_no_muted :: !(Maybe True'),
                                     _token_type :: !Int',
                                     _token :: !String',
                                     _app_sandbox :: !Bool,
                                     _secret :: !Bytes',
                                     _other_uids :: !(Vector Long')}
instance Data.Binary.Binary Method'Account'registerDevice
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3968205178 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _no_muted_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        _token_type_3 <- Data.Binary.get;
                                        _token_4 <- Data.Binary.get;
                                        _app_sandbox_5 <- Data.Binary.get;
                                        _secret_6 <- Data.Binary.get;
                                        _other_uids_7 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Account'registerDevice _no_muted_2 _token_type_3 _token_4 _app_sandbox_5 _secret_6 _other_uids_7)}}};
           put to_be_encoded_8 = do {Data.Binary.Put.putWord32le 3968205178;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_8._no_muted,
                                                              0)];
                                     Data.Binary.put to_be_encoded_8._no_muted;
                                     Data.Binary.put to_be_encoded_8._token_type;
                                     Data.Binary.put to_be_encoded_8._token;
                                     Data.Binary.put to_be_encoded_8._app_sandbox;
                                     Data.Binary.put to_be_encoded_8._secret;
                                     Data.Binary.put to_be_encoded_8._other_uids}}
instance TLFunctionʼ Method'Account'registerDevice Bool
data Method'Account'unregisterDevice
    = Method'Account'unregisterDevice {_token_type :: !Int',
                                       _token :: !String',
                                       _other_uids :: !(Vector Long')}
instance Data.Binary.Binary Method'Account'unregisterDevice
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1779249670 -> do {_token_type_1 <- Data.Binary.get;
                                        _token_2 <- Data.Binary.get;
                                        _other_uids_3 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Account'unregisterDevice _token_type_1 _token_2 _other_uids_3)}}};
           put to_be_encoded_4 = do {Data.Binary.Put.putWord32le 1779249670;
                                     Data.Binary.put to_be_encoded_4._token_type;
                                     Data.Binary.put to_be_encoded_4._token;
                                     Data.Binary.put to_be_encoded_4._other_uids}}
instance TLFunctionʼ Method'Account'unregisterDevice Bool
data Method'Account'updateNotifySettings
    = Method'Account'updateNotifySettings {_peer :: !InputNotifyPeer,
                                           _settings :: !InputPeerNotifySettings}
instance Data.Binary.Binary Method'Account'updateNotifySettings
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2227067795 -> do {_peer_1 <- Data.Binary.get;
                                        _settings_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Account'updateNotifySettings _peer_1 _settings_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 2227067795;
                                     Data.Binary.put to_be_encoded_3._peer;
                                     Data.Binary.put to_be_encoded_3._settings}}
instance TLFunctionʼ Method'Account'updateNotifySettings Bool
data Method'Account'getNotifySettings
    = Method'Account'getNotifySettings {_peer :: !InputNotifyPeer}
instance Data.Binary.Binary Method'Account'getNotifySettings
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {313765169 -> do {_peer_1 <- Data.Binary.get;
                                       GHC.Base.pure (Method'Account'getNotifySettings _peer_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 313765169;
                                     Data.Binary.put to_be_encoded_2._peer}}
instance TLFunctionʼ Method'Account'getNotifySettings
                     PeerNotifySettings
data Method'Account'resetNotifySettings
    = Method'Account'resetNotifySettings {}
instance Data.Binary.Binary Method'Account'resetNotifySettings
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3682473799 -> GHC.Base.pure Method'Account'resetNotifySettings}};
           put to_be_encoded_1 = do {Data.Binary.Put.putWord32le 3682473799;
                                     GHC.Base.pure ()}}
instance TLFunctionʼ Method'Account'resetNotifySettings Bool
data Method'Account'updateProfile
    = Method'Account'updateProfile {_first_name :: !(Maybe String'),
                                    _last_name :: !(Maybe String'),
                                    _about :: !(Maybe String')}
instance Data.Binary.Binary Method'Account'updateProfile
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2018596725 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _first_name_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        _last_name_3 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 1);
                                        _about_4 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 2);
                                        GHC.Base.pure (Method'Account'updateProfile _first_name_2 _last_name_3 _about_4)}}};
           put to_be_encoded_5 = do {Data.Binary.Put.putWord32le 2018596725;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_5._about,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_5._last_name,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_5._first_name,
                                                              0)];
                                     Data.Binary.put to_be_encoded_5._first_name;
                                     Data.Binary.put to_be_encoded_5._last_name;
                                     Data.Binary.put to_be_encoded_5._about}}
instance TLFunctionʼ Method'Account'updateProfile User
data Method'Account'updateStatus
    = Method'Account'updateStatus {_offline :: !Bool}
instance Data.Binary.Binary Method'Account'updateStatus
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1713919532 -> do {_offline_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Account'updateStatus _offline_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 1713919532;
                                     Data.Binary.put to_be_encoded_2._offline}}
instance TLFunctionʼ Method'Account'updateStatus Bool
data Method'Account'getWallPapers
    = Method'Account'getWallPapers {_hash :: !Long'}
instance Data.Binary.Binary Method'Account'getWallPapers
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {127302966 -> do {_hash_1 <- Data.Binary.get;
                                       GHC.Base.pure (Method'Account'getWallPapers _hash_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 127302966;
                                     Data.Binary.put to_be_encoded_2._hash}}
instance TLFunctionʼ Method'Account'getWallPapers
                     Account'WallPapers
data Method'Account'reportPeer
    = Method'Account'reportPeer {_peer :: !InputPeer,
                                 _reason :: !ReportReason,
                                 _message :: !String'}
instance Data.Binary.Binary Method'Account'reportPeer
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3317316998 -> do {_peer_1 <- Data.Binary.get;
                                        _reason_2 <- Data.Binary.get;
                                        _message_3 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Account'reportPeer _peer_1 _reason_2 _message_3)}}};
           put to_be_encoded_4 = do {Data.Binary.Put.putWord32le 3317316998;
                                     Data.Binary.put to_be_encoded_4._peer;
                                     Data.Binary.put to_be_encoded_4._reason;
                                     Data.Binary.put to_be_encoded_4._message}}
instance TLFunctionʼ Method'Account'reportPeer Bool
data Method'Account'checkUsername
    = Method'Account'checkUsername {_username :: !String'}
instance Data.Binary.Binary Method'Account'checkUsername
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {655677548 -> do {_username_1 <- Data.Binary.get;
                                       GHC.Base.pure (Method'Account'checkUsername _username_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 655677548;
                                     Data.Binary.put to_be_encoded_2._username}}
instance TLFunctionʼ Method'Account'checkUsername Bool
data Method'Account'updateUsername
    = Method'Account'updateUsername {_username :: !String'}
instance Data.Binary.Binary Method'Account'updateUsername
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1040964988 -> do {_username_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Account'updateUsername _username_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 1040964988;
                                     Data.Binary.put to_be_encoded_2._username}}
instance TLFunctionʼ Method'Account'updateUsername User
data Method'Account'getPrivacy
    = Method'Account'getPrivacy {_key :: !InputPrivacyKey}
instance Data.Binary.Binary Method'Account'getPrivacy
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3671837008 -> do {_key_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Account'getPrivacy _key_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 3671837008;
                                     Data.Binary.put to_be_encoded_2._key}}
instance TLFunctionʼ Method'Account'getPrivacy Account'PrivacyRules
data Method'Account'setPrivacy
    = Method'Account'setPrivacy {_key :: !InputPrivacyKey,
                                 _rules :: !(Vector InputPrivacyRule)}
instance Data.Binary.Binary Method'Account'setPrivacy
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3388480744 -> do {_key_1 <- Data.Binary.get;
                                        _rules_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Account'setPrivacy _key_1 _rules_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 3388480744;
                                     Data.Binary.put to_be_encoded_3._key;
                                     Data.Binary.put to_be_encoded_3._rules}}
instance TLFunctionʼ Method'Account'setPrivacy Account'PrivacyRules
data Method'Account'deleteAccount
    = Method'Account'deleteAccount {_reason :: !String',
                                    _password :: !(Maybe InputCheckPasswordSRP)}
instance Data.Binary.Binary Method'Account'deleteAccount
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2730545012 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _reason_2 <- Data.Binary.get;
                                        _password_3 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        GHC.Base.pure (Method'Account'deleteAccount _reason_2 _password_3)}}};
           put to_be_encoded_4 = do {Data.Binary.Put.putWord32le 2730545012;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_4._password,
                                                              0)];
                                     Data.Binary.put to_be_encoded_4._reason;
                                     Data.Binary.put to_be_encoded_4._password}}
instance TLFunctionʼ Method'Account'deleteAccount Bool
data Method'Account'getAccountTTL = Method'Account'getAccountTTL {}
instance Data.Binary.Binary Method'Account'getAccountTTL
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {150761757 -> GHC.Base.pure Method'Account'getAccountTTL}};
           put to_be_encoded_1 = do {Data.Binary.Put.putWord32le 150761757;
                                     GHC.Base.pure ()}}
instance TLFunctionʼ Method'Account'getAccountTTL AccountDaysTTL
data Method'Account'setAccountTTL
    = Method'Account'setAccountTTL {_ttl :: !AccountDaysTTL}
instance Data.Binary.Binary Method'Account'setAccountTTL
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {608323678 -> do {_ttl_1 <- Data.Binary.get;
                                       GHC.Base.pure (Method'Account'setAccountTTL _ttl_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 608323678;
                                     Data.Binary.put to_be_encoded_2._ttl}}
instance TLFunctionʼ Method'Account'setAccountTTL Bool
data Method'Account'sendChangePhoneCode
    = Method'Account'sendChangePhoneCode {_phone_number :: !String',
                                          _settings :: !CodeSettings}
instance Data.Binary.Binary Method'Account'sendChangePhoneCode
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2186758885 -> do {_phone_number_1 <- Data.Binary.get;
                                        _settings_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Account'sendChangePhoneCode _phone_number_1 _settings_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 2186758885;
                                     Data.Binary.put to_be_encoded_3._phone_number;
                                     Data.Binary.put to_be_encoded_3._settings}}
instance TLFunctionʼ Method'Account'sendChangePhoneCode
                     Auth'SentCode
data Method'Account'changePhone
    = Method'Account'changePhone {_phone_number :: !String',
                                  _phone_code_hash :: !String',
                                  _phone_code :: !String'}
instance Data.Binary.Binary Method'Account'changePhone
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1891839707 -> do {_phone_number_1 <- Data.Binary.get;
                                        _phone_code_hash_2 <- Data.Binary.get;
                                        _phone_code_3 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Account'changePhone _phone_number_1 _phone_code_hash_2 _phone_code_3)}}};
           put to_be_encoded_4 = do {Data.Binary.Put.putWord32le 1891839707;
                                     Data.Binary.put to_be_encoded_4._phone_number;
                                     Data.Binary.put to_be_encoded_4._phone_code_hash;
                                     Data.Binary.put to_be_encoded_4._phone_code}}
instance TLFunctionʼ Method'Account'changePhone User
data Method'Account'updateDeviceLocked
    = Method'Account'updateDeviceLocked {_period :: !Int'}
instance Data.Binary.Binary Method'Account'updateDeviceLocked
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {954152242 -> do {_period_1 <- Data.Binary.get;
                                       GHC.Base.pure (Method'Account'updateDeviceLocked _period_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 954152242;
                                     Data.Binary.put to_be_encoded_2._period}}
instance TLFunctionʼ Method'Account'updateDeviceLocked Bool
data Method'Account'getAuthorizations
    = Method'Account'getAuthorizations {}
instance Data.Binary.Binary Method'Account'getAuthorizations
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3810574680 -> GHC.Base.pure Method'Account'getAuthorizations}};
           put to_be_encoded_1 = do {Data.Binary.Put.putWord32le 3810574680;
                                     GHC.Base.pure ()}}
instance TLFunctionʼ Method'Account'getAuthorizations
                     Account'Authorizations
data Method'Account'resetAuthorization
    = Method'Account'resetAuthorization {_hash :: !Long'}
instance Data.Binary.Binary Method'Account'resetAuthorization
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3749180348 -> do {_hash_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Account'resetAuthorization _hash_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 3749180348;
                                     Data.Binary.put to_be_encoded_2._hash}}
instance TLFunctionʼ Method'Account'resetAuthorization Bool
data Method'Account'getPassword = Method'Account'getPassword {}
instance Data.Binary.Binary Method'Account'getPassword
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1418342645 -> GHC.Base.pure Method'Account'getPassword}};
           put to_be_encoded_1 = do {Data.Binary.Put.putWord32le 1418342645;
                                     GHC.Base.pure ()}}
instance TLFunctionʼ Method'Account'getPassword Account'Password
data Method'Account'getPasswordSettings
    = Method'Account'getPasswordSettings {_password :: !InputCheckPasswordSRP}
instance Data.Binary.Binary Method'Account'getPasswordSettings
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2631199481 -> do {_password_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Account'getPasswordSettings _password_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 2631199481;
                                     Data.Binary.put to_be_encoded_2._password}}
instance TLFunctionʼ Method'Account'getPasswordSettings
                     Account'PasswordSettings
data Method'Account'updatePasswordSettings
    = Method'Account'updatePasswordSettings {_password :: !InputCheckPasswordSRP,
                                             _new_settings :: !Account'PasswordInputSettings}
instance Data.Binary.Binary Method'Account'updatePasswordSettings
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2778402863 -> do {_password_1 <- Data.Binary.get;
                                        _new_settings_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Account'updatePasswordSettings _password_1 _new_settings_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 2778402863;
                                     Data.Binary.put to_be_encoded_3._password;
                                     Data.Binary.put to_be_encoded_3._new_settings}}
instance TLFunctionʼ Method'Account'updatePasswordSettings Bool
data Method'Account'sendConfirmPhoneCode
    = Method'Account'sendConfirmPhoneCode {_hash :: !String',
                                           _settings :: !CodeSettings}
instance Data.Binary.Binary Method'Account'sendConfirmPhoneCode
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {457157256 -> do {_hash_1 <- Data.Binary.get;
                                       _settings_2 <- Data.Binary.get;
                                       GHC.Base.pure (Method'Account'sendConfirmPhoneCode _hash_1 _settings_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 457157256;
                                     Data.Binary.put to_be_encoded_3._hash;
                                     Data.Binary.put to_be_encoded_3._settings}}
instance TLFunctionʼ Method'Account'sendConfirmPhoneCode
                     Auth'SentCode
data Method'Account'confirmPhone
    = Method'Account'confirmPhone {_phone_code_hash :: !String',
                                   _phone_code :: !String'}
instance Data.Binary.Binary Method'Account'confirmPhone
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1596029123 -> do {_phone_code_hash_1 <- Data.Binary.get;
                                        _phone_code_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Account'confirmPhone _phone_code_hash_1 _phone_code_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 1596029123;
                                     Data.Binary.put to_be_encoded_3._phone_code_hash;
                                     Data.Binary.put to_be_encoded_3._phone_code}}
instance TLFunctionʼ Method'Account'confirmPhone Bool
data Method'Account'getTmpPassword
    = Method'Account'getTmpPassword {_password :: !InputCheckPasswordSRP,
                                     _period :: !Int'}
instance Data.Binary.Binary Method'Account'getTmpPassword
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1151208273 -> do {_password_1 <- Data.Binary.get;
                                        _period_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Account'getTmpPassword _password_1 _period_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 1151208273;
                                     Data.Binary.put to_be_encoded_3._password;
                                     Data.Binary.put to_be_encoded_3._period}}
instance TLFunctionʼ Method'Account'getTmpPassword
                     Account'TmpPassword
data Method'Account'getWebAuthorizations
    = Method'Account'getWebAuthorizations {}
instance Data.Binary.Binary Method'Account'getWebAuthorizations
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {405695855 -> GHC.Base.pure Method'Account'getWebAuthorizations}};
           put to_be_encoded_1 = do {Data.Binary.Put.putWord32le 405695855;
                                     GHC.Base.pure ()}}
instance TLFunctionʼ Method'Account'getWebAuthorizations
                     Account'WebAuthorizations
data Method'Account'resetWebAuthorization
    = Method'Account'resetWebAuthorization {_hash :: !Long'}
instance Data.Binary.Binary Method'Account'resetWebAuthorization
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {755087855 -> do {_hash_1 <- Data.Binary.get;
                                       GHC.Base.pure (Method'Account'resetWebAuthorization _hash_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 755087855;
                                     Data.Binary.put to_be_encoded_2._hash}}
instance TLFunctionʼ Method'Account'resetWebAuthorization Bool
data Method'Account'resetWebAuthorizations
    = Method'Account'resetWebAuthorizations {}
instance Data.Binary.Binary Method'Account'resetWebAuthorizations
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1747789204 -> GHC.Base.pure Method'Account'resetWebAuthorizations}};
           put to_be_encoded_1 = do {Data.Binary.Put.putWord32le 1747789204;
                                     GHC.Base.pure ()}}
instance TLFunctionʼ Method'Account'resetWebAuthorizations Bool
data Method'Account'getAllSecureValues
    = Method'Account'getAllSecureValues {}
instance Data.Binary.Binary Method'Account'getAllSecureValues
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2995305597 -> GHC.Base.pure Method'Account'getAllSecureValues}};
           put to_be_encoded_1 = do {Data.Binary.Put.putWord32le 2995305597;
                                     GHC.Base.pure ()}}
instance TLFunctionʼ Method'Account'getAllSecureValues
                     (Vector SecureValue)
data Method'Account'getSecureValue
    = Method'Account'getSecureValue {_types :: !(Vector SecureValueType)}
instance Data.Binary.Binary Method'Account'getSecureValue
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1936088002 -> do {_types_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Account'getSecureValue _types_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 1936088002;
                                     Data.Binary.put to_be_encoded_2._types}}
instance TLFunctionʼ Method'Account'getSecureValue
                     (Vector SecureValue)
data Method'Account'saveSecureValue
    = Method'Account'saveSecureValue {_value :: !InputSecureValue,
                                      _secure_secret_id :: !Long'}
instance Data.Binary.Binary Method'Account'saveSecureValue
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2308956957 -> do {_value_1 <- Data.Binary.get;
                                        _secure_secret_id_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Account'saveSecureValue _value_1 _secure_secret_id_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 2308956957;
                                     Data.Binary.put to_be_encoded_3._value;
                                     Data.Binary.put to_be_encoded_3._secure_secret_id}}
instance TLFunctionʼ Method'Account'saveSecureValue SecureValue
data Method'Account'deleteSecureValue
    = Method'Account'deleteSecureValue {_types :: !(Vector SecureValueType)}
instance Data.Binary.Binary Method'Account'deleteSecureValue
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3095444555 -> do {_types_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Account'deleteSecureValue _types_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 3095444555;
                                     Data.Binary.put to_be_encoded_2._types}}
instance TLFunctionʼ Method'Account'deleteSecureValue Bool
data Method'Account'getAuthorizationForm
    = Method'Account'getAuthorizationForm {_bot_id :: !Long',
                                           _scope :: !String',
                                           _public_key :: !String'}
instance Data.Binary.Binary Method'Account'getAuthorizationForm
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2838059386 -> do {_bot_id_1 <- Data.Binary.get;
                                        _scope_2 <- Data.Binary.get;
                                        _public_key_3 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Account'getAuthorizationForm _bot_id_1 _scope_2 _public_key_3)}}};
           put to_be_encoded_4 = do {Data.Binary.Put.putWord32le 2838059386;
                                     Data.Binary.put to_be_encoded_4._bot_id;
                                     Data.Binary.put to_be_encoded_4._scope;
                                     Data.Binary.put to_be_encoded_4._public_key}}
instance TLFunctionʼ Method'Account'getAuthorizationForm
                     Account'AuthorizationForm
data Method'Account'acceptAuthorization
    = Method'Account'acceptAuthorization {_bot_id :: !Long',
                                          _scope :: !String',
                                          _public_key :: !String',
                                          _value_hashes :: !(Vector SecureValueHash),
                                          _credentials :: !SecureCredentialsEncrypted}
instance Data.Binary.Binary Method'Account'acceptAuthorization
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {4092415091 -> do {_bot_id_1 <- Data.Binary.get;
                                        _scope_2 <- Data.Binary.get;
                                        _public_key_3 <- Data.Binary.get;
                                        _value_hashes_4 <- Data.Binary.get;
                                        _credentials_5 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Account'acceptAuthorization _bot_id_1 _scope_2 _public_key_3 _value_hashes_4 _credentials_5)}}};
           put to_be_encoded_6 = do {Data.Binary.Put.putWord32le 4092415091;
                                     Data.Binary.put to_be_encoded_6._bot_id;
                                     Data.Binary.put to_be_encoded_6._scope;
                                     Data.Binary.put to_be_encoded_6._public_key;
                                     Data.Binary.put to_be_encoded_6._value_hashes;
                                     Data.Binary.put to_be_encoded_6._credentials}}
instance TLFunctionʼ Method'Account'acceptAuthorization Bool
data Method'Account'sendVerifyPhoneCode
    = Method'Account'sendVerifyPhoneCode {_phone_number :: !String',
                                          _settings :: !CodeSettings}
instance Data.Binary.Binary Method'Account'sendVerifyPhoneCode
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2778945273 -> do {_phone_number_1 <- Data.Binary.get;
                                        _settings_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Account'sendVerifyPhoneCode _phone_number_1 _settings_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 2778945273;
                                     Data.Binary.put to_be_encoded_3._phone_number;
                                     Data.Binary.put to_be_encoded_3._settings}}
instance TLFunctionʼ Method'Account'sendVerifyPhoneCode
                     Auth'SentCode
data Method'Account'verifyPhone
    = Method'Account'verifyPhone {_phone_number :: !String',
                                  _phone_code_hash :: !String',
                                  _phone_code :: !String'}
instance Data.Binary.Binary Method'Account'verifyPhone
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1305716726 -> do {_phone_number_1 <- Data.Binary.get;
                                        _phone_code_hash_2 <- Data.Binary.get;
                                        _phone_code_3 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Account'verifyPhone _phone_number_1 _phone_code_hash_2 _phone_code_3)}}};
           put to_be_encoded_4 = do {Data.Binary.Put.putWord32le 1305716726;
                                     Data.Binary.put to_be_encoded_4._phone_number;
                                     Data.Binary.put to_be_encoded_4._phone_code_hash;
                                     Data.Binary.put to_be_encoded_4._phone_code}}
instance TLFunctionʼ Method'Account'verifyPhone Bool
data Method'Account'sendVerifyEmailCode
    = Method'Account'sendVerifyEmailCode {_purpose :: !EmailVerifyPurpose,
                                          _email :: !String'}
instance Data.Binary.Binary Method'Account'sendVerifyEmailCode
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2564831163 -> do {_purpose_1 <- Data.Binary.get;
                                        _email_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Account'sendVerifyEmailCode _purpose_1 _email_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 2564831163;
                                     Data.Binary.put to_be_encoded_3._purpose;
                                     Data.Binary.put to_be_encoded_3._email}}
instance TLFunctionʼ Method'Account'sendVerifyEmailCode
                     Account'SentEmailCode
data Method'Account'verifyEmail
    = Method'Account'verifyEmail {_purpose :: !EmailVerifyPurpose,
                                  _verification :: !EmailVerification}
instance Data.Binary.Binary Method'Account'verifyEmail
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {53322959 -> do {_purpose_1 <- Data.Binary.get;
                                      _verification_2 <- Data.Binary.get;
                                      GHC.Base.pure (Method'Account'verifyEmail _purpose_1 _verification_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 53322959;
                                     Data.Binary.put to_be_encoded_3._purpose;
                                     Data.Binary.put to_be_encoded_3._verification}}
instance TLFunctionʼ Method'Account'verifyEmail
                     Account'EmailVerified
data Method'Account'initTakeoutSession
    = Method'Account'initTakeoutSession {_contacts :: !(Maybe True'),
                                         _message_users :: !(Maybe True'),
                                         _message_chats :: !(Maybe True'),
                                         _message_megagroups :: !(Maybe True'),
                                         _message_channels :: !(Maybe True'),
                                         _files :: !(Maybe True'),
                                         _file_max_size :: !(Maybe Long')}
instance Data.Binary.Binary Method'Account'initTakeoutSession
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2398350000 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _contacts_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        _message_users_3 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 1);
                                        _message_chats_4 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 2);
                                        _message_megagroups_5 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 3);
                                        _message_channels_6 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 4);
                                        _files_7 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 5);
                                        _file_max_size_8 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 5);
                                        GHC.Base.pure (Method'Account'initTakeoutSession _contacts_2 _message_users_3 _message_chats_4 _message_megagroups_5 _message_channels_6 _files_7 _file_max_size_8)}}};
           put to_be_encoded_9 = do {Data.Binary.Put.putWord32le 2398350000;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_9._file_max_size,
                                                              5),
                                                             (Data.Maybe.isJust to_be_encoded_9._files,
                                                              5),
                                                             (Data.Maybe.isJust to_be_encoded_9._message_channels,
                                                              4),
                                                             (Data.Maybe.isJust to_be_encoded_9._message_megagroups,
                                                              3),
                                                             (Data.Maybe.isJust to_be_encoded_9._message_chats,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_9._message_users,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_9._contacts,
                                                              0)];
                                     Data.Binary.put to_be_encoded_9._contacts;
                                     Data.Binary.put to_be_encoded_9._message_users;
                                     Data.Binary.put to_be_encoded_9._message_chats;
                                     Data.Binary.put to_be_encoded_9._message_megagroups;
                                     Data.Binary.put to_be_encoded_9._message_channels;
                                     Data.Binary.put to_be_encoded_9._files;
                                     Data.Binary.put to_be_encoded_9._file_max_size}}
instance TLFunctionʼ Method'Account'initTakeoutSession
                     Account'Takeout
data Method'Account'finishTakeoutSession
    = Method'Account'finishTakeoutSession {_success :: !(Maybe True')}
instance Data.Binary.Binary Method'Account'finishTakeoutSession
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {489050862 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                       _success_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                       GHC.Base.pure (Method'Account'finishTakeoutSession _success_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 489050862;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_3._success,
                                                              0)];
                                     Data.Binary.put to_be_encoded_3._success}}
instance TLFunctionʼ Method'Account'finishTakeoutSession Bool
data Method'Account'confirmPasswordEmail
    = Method'Account'confirmPasswordEmail {_code :: !String'}
instance Data.Binary.Binary Method'Account'confirmPasswordEmail
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2413762848 -> do {_code_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Account'confirmPasswordEmail _code_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 2413762848;
                                     Data.Binary.put to_be_encoded_2._code}}
instance TLFunctionʼ Method'Account'confirmPasswordEmail Bool
data Method'Account'resendPasswordEmail
    = Method'Account'resendPasswordEmail {}
instance Data.Binary.Binary Method'Account'resendPasswordEmail
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2055154197 -> GHC.Base.pure Method'Account'resendPasswordEmail}};
           put to_be_encoded_1 = do {Data.Binary.Put.putWord32le 2055154197;
                                     GHC.Base.pure ()}}
instance TLFunctionʼ Method'Account'resendPasswordEmail Bool
data Method'Account'cancelPasswordEmail
    = Method'Account'cancelPasswordEmail {}
instance Data.Binary.Binary Method'Account'cancelPasswordEmail
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3251361206 -> GHC.Base.pure Method'Account'cancelPasswordEmail}};
           put to_be_encoded_1 = do {Data.Binary.Put.putWord32le 3251361206;
                                     GHC.Base.pure ()}}
instance TLFunctionʼ Method'Account'cancelPasswordEmail Bool
data Method'Account'getContactSignUpNotification
    = Method'Account'getContactSignUpNotification {}
instance Data.Binary.Binary Method'Account'getContactSignUpNotification
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2668087080 -> GHC.Base.pure Method'Account'getContactSignUpNotification}};
           put to_be_encoded_1 = do {Data.Binary.Put.putWord32le 2668087080;
                                     GHC.Base.pure ()}}
instance TLFunctionʼ Method'Account'getContactSignUpNotification
                     Bool
data Method'Account'setContactSignUpNotification
    = Method'Account'setContactSignUpNotification {_silent :: !Bool}
instance Data.Binary.Binary Method'Account'setContactSignUpNotification
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3488890721 -> do {_silent_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Account'setContactSignUpNotification _silent_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 3488890721;
                                     Data.Binary.put to_be_encoded_2._silent}}
instance TLFunctionʼ Method'Account'setContactSignUpNotification
                     Bool
data Method'Account'getNotifyExceptions
    = Method'Account'getNotifyExceptions {_compare_sound :: !(Maybe True'),
                                          _compare_stories :: !(Maybe True'),
                                          _peer :: !(Maybe InputNotifyPeer)}
instance Data.Binary.Binary Method'Account'getNotifyExceptions
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1398240377 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _compare_sound_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 1);
                                        _compare_stories_3 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 2);
                                        _peer_4 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        GHC.Base.pure (Method'Account'getNotifyExceptions _compare_sound_2 _compare_stories_3 _peer_4)}}};
           put to_be_encoded_5 = do {Data.Binary.Put.putWord32le 1398240377;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_5._peer,
                                                              0),
                                                             (Data.Maybe.isJust to_be_encoded_5._compare_stories,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_5._compare_sound,
                                                              1)];
                                     Data.Binary.put to_be_encoded_5._compare_sound;
                                     Data.Binary.put to_be_encoded_5._compare_stories;
                                     Data.Binary.put to_be_encoded_5._peer}}
instance TLFunctionʼ Method'Account'getNotifyExceptions Updates
data Method'Account'getWallPaper
    = Method'Account'getWallPaper {_wallpaper :: !InputWallPaper}
instance Data.Binary.Binary Method'Account'getWallPaper
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {4237155306 -> do {_wallpaper_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Account'getWallPaper _wallpaper_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 4237155306;
                                     Data.Binary.put to_be_encoded_2._wallpaper}}
instance TLFunctionʼ Method'Account'getWallPaper WallPaper
data Method'Account'uploadWallPaper
    = Method'Account'uploadWallPaper {_for_chat :: !(Maybe True'),
                                      _file :: !InputFile,
                                      _mime_type :: !String',
                                      _settings :: !WallPaperSettings}
instance Data.Binary.Binary Method'Account'uploadWallPaper
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3818557187 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _for_chat_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        _file_3 <- Data.Binary.get;
                                        _mime_type_4 <- Data.Binary.get;
                                        _settings_5 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Account'uploadWallPaper _for_chat_2 _file_3 _mime_type_4 _settings_5)}}};
           put to_be_encoded_6 = do {Data.Binary.Put.putWord32le 3818557187;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_6._for_chat,
                                                              0)];
                                     Data.Binary.put to_be_encoded_6._for_chat;
                                     Data.Binary.put to_be_encoded_6._file;
                                     Data.Binary.put to_be_encoded_6._mime_type;
                                     Data.Binary.put to_be_encoded_6._settings}}
instance TLFunctionʼ Method'Account'uploadWallPaper WallPaper
data Method'Account'saveWallPaper
    = Method'Account'saveWallPaper {_wallpaper :: !InputWallPaper,
                                    _unsave :: !Bool,
                                    _settings :: !WallPaperSettings}
instance Data.Binary.Binary Method'Account'saveWallPaper
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1817860919 -> do {_wallpaper_1 <- Data.Binary.get;
                                        _unsave_2 <- Data.Binary.get;
                                        _settings_3 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Account'saveWallPaper _wallpaper_1 _unsave_2 _settings_3)}}};
           put to_be_encoded_4 = do {Data.Binary.Put.putWord32le 1817860919;
                                     Data.Binary.put to_be_encoded_4._wallpaper;
                                     Data.Binary.put to_be_encoded_4._unsave;
                                     Data.Binary.put to_be_encoded_4._settings}}
instance TLFunctionʼ Method'Account'saveWallPaper Bool
data Method'Account'installWallPaper
    = Method'Account'installWallPaper {_wallpaper :: !InputWallPaper,
                                       _settings :: !WallPaperSettings}
instance Data.Binary.Binary Method'Account'installWallPaper
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {4276967273 -> do {_wallpaper_1 <- Data.Binary.get;
                                        _settings_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Account'installWallPaper _wallpaper_1 _settings_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 4276967273;
                                     Data.Binary.put to_be_encoded_3._wallpaper;
                                     Data.Binary.put to_be_encoded_3._settings}}
instance TLFunctionʼ Method'Account'installWallPaper Bool
data Method'Account'resetWallPapers
    = Method'Account'resetWallPapers {}
instance Data.Binary.Binary Method'Account'resetWallPapers
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3141244932 -> GHC.Base.pure Method'Account'resetWallPapers}};
           put to_be_encoded_1 = do {Data.Binary.Put.putWord32le 3141244932;
                                     GHC.Base.pure ()}}
instance TLFunctionʼ Method'Account'resetWallPapers Bool
data Method'Account'getAutoDownloadSettings
    = Method'Account'getAutoDownloadSettings {}
instance Data.Binary.Binary Method'Account'getAutoDownloadSettings
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1457130303 -> GHC.Base.pure Method'Account'getAutoDownloadSettings}};
           put to_be_encoded_1 = do {Data.Binary.Put.putWord32le 1457130303;
                                     GHC.Base.pure ()}}
instance TLFunctionʼ Method'Account'getAutoDownloadSettings
                     Account'AutoDownloadSettings
data Method'Account'saveAutoDownloadSettings
    = Method'Account'saveAutoDownloadSettings {_low :: !(Maybe True'),
                                               _high :: !(Maybe True'),
                                               _settings :: !AutoDownloadSettings}
instance Data.Binary.Binary Method'Account'saveAutoDownloadSettings
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1995661875 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _low_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        _high_3 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 1);
                                        _settings_4 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Account'saveAutoDownloadSettings _low_2 _high_3 _settings_4)}}};
           put to_be_encoded_5 = do {Data.Binary.Put.putWord32le 1995661875;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_5._high,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_5._low,
                                                              0)];
                                     Data.Binary.put to_be_encoded_5._low;
                                     Data.Binary.put to_be_encoded_5._high;
                                     Data.Binary.put to_be_encoded_5._settings}}
instance TLFunctionʼ Method'Account'saveAutoDownloadSettings Bool
data Method'Account'uploadTheme
    = Method'Account'uploadTheme {_file :: !InputFile,
                                  _thumb :: !(Maybe InputFile),
                                  _file_name :: !String',
                                  _mime_type :: !String'}
instance Data.Binary.Binary Method'Account'uploadTheme
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {473805619 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                       _file_2 <- Data.Binary.get;
                                       _thumb_3 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                       _file_name_4 <- Data.Binary.get;
                                       _mime_type_5 <- Data.Binary.get;
                                       GHC.Base.pure (Method'Account'uploadTheme _file_2 _thumb_3 _file_name_4 _mime_type_5)}}};
           put to_be_encoded_6 = do {Data.Binary.Put.putWord32le 473805619;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_6._thumb,
                                                              0)];
                                     Data.Binary.put to_be_encoded_6._file;
                                     Data.Binary.put to_be_encoded_6._thumb;
                                     Data.Binary.put to_be_encoded_6._file_name;
                                     Data.Binary.put to_be_encoded_6._mime_type}}
instance TLFunctionʼ Method'Account'uploadTheme Document
data Method'Account'createTheme
    = Method'Account'createTheme {_slug :: !String',
                                  _title :: !String',
                                  _document :: !(Maybe InputDocument),
                                  _settings :: !(Maybe (Vector InputThemeSettings))}
instance Data.Binary.Binary Method'Account'createTheme
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1697530880 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _slug_2 <- Data.Binary.get;
                                        _title_3 <- Data.Binary.get;
                                        _document_4 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 2);
                                        _settings_5 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 3);
                                        GHC.Base.pure (Method'Account'createTheme _slug_2 _title_3 _document_4 _settings_5)}}};
           put to_be_encoded_6 = do {Data.Binary.Put.putWord32le 1697530880;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_6._settings,
                                                              3),
                                                             (Data.Maybe.isJust to_be_encoded_6._document,
                                                              2)];
                                     Data.Binary.put to_be_encoded_6._slug;
                                     Data.Binary.put to_be_encoded_6._title;
                                     Data.Binary.put to_be_encoded_6._document;
                                     Data.Binary.put to_be_encoded_6._settings}}
instance TLFunctionʼ Method'Account'createTheme Theme
data Method'Account'updateTheme
    = Method'Account'updateTheme {_format :: !String',
                                  _theme :: !InputTheme,
                                  _slug :: !(Maybe String'),
                                  _title :: !(Maybe String'),
                                  _document :: !(Maybe InputDocument),
                                  _settings :: !(Maybe (Vector InputThemeSettings))}
instance Data.Binary.Binary Method'Account'updateTheme
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {737414348 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                       _format_2 <- Data.Binary.get;
                                       _theme_3 <- Data.Binary.get;
                                       _slug_4 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                       _title_5 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 1);
                                       _document_6 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 2);
                                       _settings_7 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 3);
                                       GHC.Base.pure (Method'Account'updateTheme _format_2 _theme_3 _slug_4 _title_5 _document_6 _settings_7)}}};
           put to_be_encoded_8 = do {Data.Binary.Put.putWord32le 737414348;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_8._settings,
                                                              3),
                                                             (Data.Maybe.isJust to_be_encoded_8._document,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_8._title,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_8._slug,
                                                              0)];
                                     Data.Binary.put to_be_encoded_8._format;
                                     Data.Binary.put to_be_encoded_8._theme;
                                     Data.Binary.put to_be_encoded_8._slug;
                                     Data.Binary.put to_be_encoded_8._title;
                                     Data.Binary.put to_be_encoded_8._document;
                                     Data.Binary.put to_be_encoded_8._settings}}
instance TLFunctionʼ Method'Account'updateTheme Theme
data Method'Account'saveTheme
    = Method'Account'saveTheme {_theme :: !InputTheme,
                                _unsave :: !Bool}
instance Data.Binary.Binary Method'Account'saveTheme
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {4065792108 -> do {_theme_1 <- Data.Binary.get;
                                        _unsave_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Account'saveTheme _theme_1 _unsave_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 4065792108;
                                     Data.Binary.put to_be_encoded_3._theme;
                                     Data.Binary.put to_be_encoded_3._unsave}}
instance TLFunctionʼ Method'Account'saveTheme Bool
data Method'Account'installTheme
    = Method'Account'installTheme {_dark :: !(Maybe True'),
                                   _theme :: !(Maybe InputTheme),
                                   _format :: !(Maybe String'),
                                   _base_theme :: !(Maybe BaseTheme)}
instance Data.Binary.Binary Method'Account'installTheme
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3341269819 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _dark_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        _theme_3 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 1);
                                        _format_4 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 2);
                                        _base_theme_5 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 3);
                                        GHC.Base.pure (Method'Account'installTheme _dark_2 _theme_3 _format_4 _base_theme_5)}}};
           put to_be_encoded_6 = do {Data.Binary.Put.putWord32le 3341269819;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_6._base_theme,
                                                              3),
                                                             (Data.Maybe.isJust to_be_encoded_6._format,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_6._theme,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_6._dark,
                                                              0)];
                                     Data.Binary.put to_be_encoded_6._dark;
                                     Data.Binary.put to_be_encoded_6._theme;
                                     Data.Binary.put to_be_encoded_6._format;
                                     Data.Binary.put to_be_encoded_6._base_theme}}
instance TLFunctionʼ Method'Account'installTheme Bool
data Method'Account'getTheme
    = Method'Account'getTheme {_format :: !String',
                               _theme :: !InputTheme}
instance Data.Binary.Binary Method'Account'getTheme
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {978872812 -> do {_format_1 <- Data.Binary.get;
                                       _theme_2 <- Data.Binary.get;
                                       GHC.Base.pure (Method'Account'getTheme _format_1 _theme_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 978872812;
                                     Data.Binary.put to_be_encoded_3._format;
                                     Data.Binary.put to_be_encoded_3._theme}}
instance TLFunctionʼ Method'Account'getTheme Theme
data Method'Account'getThemes
    = Method'Account'getThemes {_format :: !String', _hash :: !Long'}
instance Data.Binary.Binary Method'Account'getThemes
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1913054296 -> do {_format_1 <- Data.Binary.get;
                                        _hash_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Account'getThemes _format_1 _hash_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 1913054296;
                                     Data.Binary.put to_be_encoded_3._format;
                                     Data.Binary.put to_be_encoded_3._hash}}
instance TLFunctionʼ Method'Account'getThemes Account'Themes
data Method'Account'setContentSettings
    = Method'Account'setContentSettings {_sensitive_enabled :: !(Maybe True')}
instance Data.Binary.Binary Method'Account'setContentSettings
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3044323691 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _sensitive_enabled_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        GHC.Base.pure (Method'Account'setContentSettings _sensitive_enabled_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 3044323691;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_3._sensitive_enabled,
                                                              0)];
                                     Data.Binary.put to_be_encoded_3._sensitive_enabled}}
instance TLFunctionʼ Method'Account'setContentSettings Bool
data Method'Account'getContentSettings
    = Method'Account'getContentSettings {}
instance Data.Binary.Binary Method'Account'getContentSettings
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2342210990 -> GHC.Base.pure Method'Account'getContentSettings}};
           put to_be_encoded_1 = do {Data.Binary.Put.putWord32le 2342210990;
                                     GHC.Base.pure ()}}
instance TLFunctionʼ Method'Account'getContentSettings
                     Account'ContentSettings
data Method'Account'getMultiWallPapers
    = Method'Account'getMultiWallPapers {_wallpapers :: !(Vector InputWallPaper)}
instance Data.Binary.Binary Method'Account'getMultiWallPapers
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1705865692 -> do {_wallpapers_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Account'getMultiWallPapers _wallpapers_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 1705865692;
                                     Data.Binary.put to_be_encoded_2._wallpapers}}
instance TLFunctionʼ Method'Account'getMultiWallPapers
                     (Vector WallPaper)
data Method'Account'getGlobalPrivacySettings
    = Method'Account'getGlobalPrivacySettings {}
instance Data.Binary.Binary Method'Account'getGlobalPrivacySettings
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3945483510 -> GHC.Base.pure Method'Account'getGlobalPrivacySettings}};
           put to_be_encoded_1 = do {Data.Binary.Put.putWord32le 3945483510;
                                     GHC.Base.pure ()}}
instance TLFunctionʼ Method'Account'getGlobalPrivacySettings
                     GlobalPrivacySettings
data Method'Account'setGlobalPrivacySettings
    = Method'Account'setGlobalPrivacySettings {_settings :: !GlobalPrivacySettings}
instance Data.Binary.Binary Method'Account'setGlobalPrivacySettings
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {517647042 -> do {_settings_1 <- Data.Binary.get;
                                       GHC.Base.pure (Method'Account'setGlobalPrivacySettings _settings_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 517647042;
                                     Data.Binary.put to_be_encoded_2._settings}}
instance TLFunctionʼ Method'Account'setGlobalPrivacySettings
                     GlobalPrivacySettings
data Method'Account'reportProfilePhoto
    = Method'Account'reportProfilePhoto {_peer :: !InputPeer,
                                         _photo_id :: !InputPhoto,
                                         _reason :: !ReportReason,
                                         _message :: !String'}
instance Data.Binary.Binary Method'Account'reportProfilePhoto
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {4203529973 -> do {_peer_1 <- Data.Binary.get;
                                        _photo_id_2 <- Data.Binary.get;
                                        _reason_3 <- Data.Binary.get;
                                        _message_4 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Account'reportProfilePhoto _peer_1 _photo_id_2 _reason_3 _message_4)}}};
           put to_be_encoded_5 = do {Data.Binary.Put.putWord32le 4203529973;
                                     Data.Binary.put to_be_encoded_5._peer;
                                     Data.Binary.put to_be_encoded_5._photo_id;
                                     Data.Binary.put to_be_encoded_5._reason;
                                     Data.Binary.put to_be_encoded_5._message}}
instance TLFunctionʼ Method'Account'reportProfilePhoto Bool
data Method'Account'resetPassword = Method'Account'resetPassword {}
instance Data.Binary.Binary Method'Account'resetPassword
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2466827803 -> GHC.Base.pure Method'Account'resetPassword}};
           put to_be_encoded_1 = do {Data.Binary.Put.putWord32le 2466827803;
                                     GHC.Base.pure ()}}
instance TLFunctionʼ Method'Account'resetPassword
                     Account'ResetPasswordResult
data Method'Account'declinePasswordReset
    = Method'Account'declinePasswordReset {}
instance Data.Binary.Binary Method'Account'declinePasswordReset
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1284770294 -> GHC.Base.pure Method'Account'declinePasswordReset}};
           put to_be_encoded_1 = do {Data.Binary.Put.putWord32le 1284770294;
                                     GHC.Base.pure ()}}
instance TLFunctionʼ Method'Account'declinePasswordReset Bool
data Method'Account'getChatThemes
    = Method'Account'getChatThemes {_hash :: !Long'}
instance Data.Binary.Binary Method'Account'getChatThemes
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3594051209 -> do {_hash_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Account'getChatThemes _hash_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 3594051209;
                                     Data.Binary.put to_be_encoded_2._hash}}
instance TLFunctionʼ Method'Account'getChatThemes Account'Themes
data Method'Account'setAuthorizationTTL
    = Method'Account'setAuthorizationTTL {_authorization_ttl_days :: !Int'}
instance Data.Binary.Binary Method'Account'setAuthorizationTTL
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3213466272 -> do {_authorization_ttl_days_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Account'setAuthorizationTTL _authorization_ttl_days_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 3213466272;
                                     Data.Binary.put to_be_encoded_2._authorization_ttl_days}}
instance TLFunctionʼ Method'Account'setAuthorizationTTL Bool
data Method'Account'changeAuthorizationSettings
    = Method'Account'changeAuthorizationSettings {_confirmed :: !(Maybe True'),
                                                  _hash :: !Long',
                                                  _encrypted_requests_disabled :: !(Maybe Bool),
                                                  _call_requests_disabled :: !(Maybe Bool)}
instance Data.Binary.Binary Method'Account'changeAuthorizationSettings
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1089766498 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _confirmed_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 3);
                                        _hash_3 <- Data.Binary.get;
                                        _encrypted_requests_disabled_4 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        _call_requests_disabled_5 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 1);
                                        GHC.Base.pure (Method'Account'changeAuthorizationSettings _confirmed_2 _hash_3 _encrypted_requests_disabled_4 _call_requests_disabled_5)}}};
           put to_be_encoded_6 = do {Data.Binary.Put.putWord32le 1089766498;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_6._call_requests_disabled,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_6._encrypted_requests_disabled,
                                                              0),
                                                             (Data.Maybe.isJust to_be_encoded_6._confirmed,
                                                              3)];
                                     Data.Binary.put to_be_encoded_6._confirmed;
                                     Data.Binary.put to_be_encoded_6._hash;
                                     Data.Binary.put to_be_encoded_6._encrypted_requests_disabled;
                                     Data.Binary.put to_be_encoded_6._call_requests_disabled}}
instance TLFunctionʼ Method'Account'changeAuthorizationSettings
                     Bool
data Method'Account'getSavedRingtones
    = Method'Account'getSavedRingtones {_hash :: !Long'}
instance Data.Binary.Binary Method'Account'getSavedRingtones
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3784319624 -> do {_hash_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Account'getSavedRingtones _hash_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 3784319624;
                                     Data.Binary.put to_be_encoded_2._hash}}
instance TLFunctionʼ Method'Account'getSavedRingtones
                     Account'SavedRingtones
data Method'Account'saveRingtone
    = Method'Account'saveRingtone {_id :: !InputDocument,
                                   _unsave :: !Bool}
instance Data.Binary.Binary Method'Account'saveRingtone
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1038768899 -> do {_id_1 <- Data.Binary.get;
                                        _unsave_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Account'saveRingtone _id_1 _unsave_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 1038768899;
                                     Data.Binary.put to_be_encoded_3._id;
                                     Data.Binary.put to_be_encoded_3._unsave}}
instance TLFunctionʼ Method'Account'saveRingtone
                     Account'SavedRingtone
data Method'Account'uploadRingtone
    = Method'Account'uploadRingtone {_file :: !InputFile,
                                     _file_name :: !String',
                                     _mime_type :: !String'}
instance Data.Binary.Binary Method'Account'uploadRingtone
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2199552930 -> do {_file_1 <- Data.Binary.get;
                                        _file_name_2 <- Data.Binary.get;
                                        _mime_type_3 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Account'uploadRingtone _file_1 _file_name_2 _mime_type_3)}}};
           put to_be_encoded_4 = do {Data.Binary.Put.putWord32le 2199552930;
                                     Data.Binary.put to_be_encoded_4._file;
                                     Data.Binary.put to_be_encoded_4._file_name;
                                     Data.Binary.put to_be_encoded_4._mime_type}}
instance TLFunctionʼ Method'Account'uploadRingtone Document
data Method'Account'updateEmojiStatus
    = Method'Account'updateEmojiStatus {_emoji_status :: !EmojiStatus}
instance Data.Binary.Binary Method'Account'updateEmojiStatus
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {4224966251 -> do {_emoji_status_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Account'updateEmojiStatus _emoji_status_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 4224966251;
                                     Data.Binary.put to_be_encoded_2._emoji_status}}
instance TLFunctionʼ Method'Account'updateEmojiStatus Bool
data Method'Account'getDefaultEmojiStatuses
    = Method'Account'getDefaultEmojiStatuses {_hash :: !Long'}
instance Data.Binary.Binary Method'Account'getDefaultEmojiStatuses
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3598005126 -> do {_hash_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Account'getDefaultEmojiStatuses _hash_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 3598005126;
                                     Data.Binary.put to_be_encoded_2._hash}}
instance TLFunctionʼ Method'Account'getDefaultEmojiStatuses
                     Account'EmojiStatuses
data Method'Account'getRecentEmojiStatuses
    = Method'Account'getRecentEmojiStatuses {_hash :: !Long'}
instance Data.Binary.Binary Method'Account'getRecentEmojiStatuses
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {257392901 -> do {_hash_1 <- Data.Binary.get;
                                       GHC.Base.pure (Method'Account'getRecentEmojiStatuses _hash_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 257392901;
                                     Data.Binary.put to_be_encoded_2._hash}}
instance TLFunctionʼ Method'Account'getRecentEmojiStatuses
                     Account'EmojiStatuses
data Method'Account'clearRecentEmojiStatuses
    = Method'Account'clearRecentEmojiStatuses {}
instance Data.Binary.Binary Method'Account'clearRecentEmojiStatuses
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {404757166 -> GHC.Base.pure Method'Account'clearRecentEmojiStatuses}};
           put to_be_encoded_1 = do {Data.Binary.Put.putWord32le 404757166;
                                     GHC.Base.pure ()}}
instance TLFunctionʼ Method'Account'clearRecentEmojiStatuses Bool
data Method'Account'reorderUsernames
    = Method'Account'reorderUsernames {_order :: !(Vector String')}
instance Data.Binary.Binary Method'Account'reorderUsernames
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {4015001259 -> do {_order_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Account'reorderUsernames _order_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 4015001259;
                                     Data.Binary.put to_be_encoded_2._order}}
instance TLFunctionʼ Method'Account'reorderUsernames Bool
data Method'Account'toggleUsername
    = Method'Account'toggleUsername {_username :: !String',
                                     _active :: !Bool}
instance Data.Binary.Binary Method'Account'toggleUsername
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1490465654 -> do {_username_1 <- Data.Binary.get;
                                        _active_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Account'toggleUsername _username_1 _active_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 1490465654;
                                     Data.Binary.put to_be_encoded_3._username;
                                     Data.Binary.put to_be_encoded_3._active}}
instance TLFunctionʼ Method'Account'toggleUsername Bool
data Method'Account'getDefaultProfilePhotoEmojis
    = Method'Account'getDefaultProfilePhotoEmojis {_hash :: !Long'}
instance Data.Binary.Binary Method'Account'getDefaultProfilePhotoEmojis
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3799319336 -> do {_hash_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Account'getDefaultProfilePhotoEmojis _hash_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 3799319336;
                                     Data.Binary.put to_be_encoded_2._hash}}
instance TLFunctionʼ Method'Account'getDefaultProfilePhotoEmojis
                     EmojiList
data Method'Account'getDefaultGroupPhotoEmojis
    = Method'Account'getDefaultGroupPhotoEmojis {_hash :: !Long'}
instance Data.Binary.Binary Method'Account'getDefaultGroupPhotoEmojis
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2438488238 -> do {_hash_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Account'getDefaultGroupPhotoEmojis _hash_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 2438488238;
                                     Data.Binary.put to_be_encoded_2._hash}}
instance TLFunctionʼ Method'Account'getDefaultGroupPhotoEmojis
                     EmojiList
data Method'Account'getAutoSaveSettings
    = Method'Account'getAutoSaveSettings {}
instance Data.Binary.Binary Method'Account'getAutoSaveSettings
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2915810522 -> GHC.Base.pure Method'Account'getAutoSaveSettings}};
           put to_be_encoded_1 = do {Data.Binary.Put.putWord32le 2915810522;
                                     GHC.Base.pure ()}}
instance TLFunctionʼ Method'Account'getAutoSaveSettings
                     Account'AutoSaveSettings
data Method'Account'saveAutoSaveSettings
    = Method'Account'saveAutoSaveSettings {_users :: !(Maybe True'),
                                           _chats :: !(Maybe True'),
                                           _broadcasts :: !(Maybe True'),
                                           _peer :: !(Maybe InputPeer),
                                           _settings :: !AutoSaveSettings}
instance Data.Binary.Binary Method'Account'saveAutoSaveSettings
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3600515937 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _users_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        _chats_3 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 1);
                                        _broadcasts_4 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 2);
                                        _peer_5 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 3);
                                        _settings_6 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Account'saveAutoSaveSettings _users_2 _chats_3 _broadcasts_4 _peer_5 _settings_6)}}};
           put to_be_encoded_7 = do {Data.Binary.Put.putWord32le 3600515937;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_7._peer,
                                                              3),
                                                             (Data.Maybe.isJust to_be_encoded_7._broadcasts,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_7._chats,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_7._users,
                                                              0)];
                                     Data.Binary.put to_be_encoded_7._users;
                                     Data.Binary.put to_be_encoded_7._chats;
                                     Data.Binary.put to_be_encoded_7._broadcasts;
                                     Data.Binary.put to_be_encoded_7._peer;
                                     Data.Binary.put to_be_encoded_7._settings}}
instance TLFunctionʼ Method'Account'saveAutoSaveSettings Bool
data Method'Account'deleteAutoSaveExceptions
    = Method'Account'deleteAutoSaveExceptions {}
instance Data.Binary.Binary Method'Account'deleteAutoSaveExceptions
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1404829728 -> GHC.Base.pure Method'Account'deleteAutoSaveExceptions}};
           put to_be_encoded_1 = do {Data.Binary.Put.putWord32le 1404829728;
                                     GHC.Base.pure ()}}
instance TLFunctionʼ Method'Account'deleteAutoSaveExceptions Bool
data Method'Account'invalidateSignInCodes
    = Method'Account'invalidateSignInCodes {_codes :: !(Vector String')}
instance Data.Binary.Binary Method'Account'invalidateSignInCodes
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3398101178 -> do {_codes_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Account'invalidateSignInCodes _codes_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 3398101178;
                                     Data.Binary.put to_be_encoded_2._codes}}
instance TLFunctionʼ Method'Account'invalidateSignInCodes Bool
data Method'Account'updateColor
    = Method'Account'updateColor {_for_profile :: !(Maybe True'),
                                  _color :: !(Maybe Int'),
                                  _background_emoji_id :: !(Maybe Long')}
instance Data.Binary.Binary Method'Account'updateColor
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2096079197 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _for_profile_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 1);
                                        _color_3 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 2);
                                        _background_emoji_id_4 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        GHC.Base.pure (Method'Account'updateColor _for_profile_2 _color_3 _background_emoji_id_4)}}};
           put to_be_encoded_5 = do {Data.Binary.Put.putWord32le 2096079197;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_5._background_emoji_id,
                                                              0),
                                                             (Data.Maybe.isJust to_be_encoded_5._color,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_5._for_profile,
                                                              1)];
                                     Data.Binary.put to_be_encoded_5._for_profile;
                                     Data.Binary.put to_be_encoded_5._color;
                                     Data.Binary.put to_be_encoded_5._background_emoji_id}}
instance TLFunctionʼ Method'Account'updateColor Bool
data Method'Account'getDefaultBackgroundEmojis
    = Method'Account'getDefaultBackgroundEmojis {_hash :: !Long'}
instance Data.Binary.Binary Method'Account'getDefaultBackgroundEmojis
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2785720782 -> do {_hash_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Account'getDefaultBackgroundEmojis _hash_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 2785720782;
                                     Data.Binary.put to_be_encoded_2._hash}}
instance TLFunctionʼ Method'Account'getDefaultBackgroundEmojis
                     EmojiList
data Method'Account'getChannelDefaultEmojiStatuses
    = Method'Account'getChannelDefaultEmojiStatuses {_hash :: !Long'}
instance Data.Binary.Binary Method'Account'getChannelDefaultEmojiStatuses
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1999087573 -> do {_hash_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Account'getChannelDefaultEmojiStatuses _hash_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 1999087573;
                                     Data.Binary.put to_be_encoded_2._hash}}
instance TLFunctionʼ Method'Account'getChannelDefaultEmojiStatuses
                     Account'EmojiStatuses
data Method'Account'getChannelRestrictedStatusEmojis
    = Method'Account'getChannelRestrictedStatusEmojis {_hash :: !Long'}
instance Data.Binary.Binary Method'Account'getChannelRestrictedStatusEmojis
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {900325589 -> do {_hash_1 <- Data.Binary.get;
                                       GHC.Base.pure (Method'Account'getChannelRestrictedStatusEmojis _hash_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 900325589;
                                     Data.Binary.put to_be_encoded_2._hash}}
instance TLFunctionʼ Method'Account'getChannelRestrictedStatusEmojis
                     EmojiList
data Method'Users'getUsers
    = Method'Users'getUsers {_id :: !(Vector InputUser)}
instance Data.Binary.Binary Method'Users'getUsers
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {227648840 -> do {_id_1 <- Data.Binary.get;
                                       GHC.Base.pure (Method'Users'getUsers _id_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 227648840;
                                     Data.Binary.put to_be_encoded_2._id}}
instance TLFunctionʼ Method'Users'getUsers (Vector User)
data Method'Users'getFullUser
    = Method'Users'getFullUser {_id :: !InputUser}
instance Data.Binary.Binary Method'Users'getFullUser
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3054459160 -> do {_id_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Users'getFullUser _id_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 3054459160;
                                     Data.Binary.put to_be_encoded_2._id}}
instance TLFunctionʼ Method'Users'getFullUser Users'UserFull
data Method'Users'setSecureValueErrors
    = Method'Users'setSecureValueErrors {_id :: !InputUser,
                                         _errors :: !(Vector SecureValueError)}
instance Data.Binary.Binary Method'Users'setSecureValueErrors
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2429064373 -> do {_id_1 <- Data.Binary.get;
                                        _errors_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Users'setSecureValueErrors _id_1 _errors_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 2429064373;
                                     Data.Binary.put to_be_encoded_3._id;
                                     Data.Binary.put to_be_encoded_3._errors}}
instance TLFunctionʼ Method'Users'setSecureValueErrors Bool
data Method'Contacts'getContactIDs
    = Method'Contacts'getContactIDs {_hash :: !Long'}
instance Data.Binary.Binary Method'Contacts'getContactIDs
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2061264541 -> do {_hash_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Contacts'getContactIDs _hash_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 2061264541;
                                     Data.Binary.put to_be_encoded_2._hash}}
instance TLFunctionʼ Method'Contacts'getContactIDs (Vector Int')
data Method'Contacts'getStatuses = Method'Contacts'getStatuses {}
instance Data.Binary.Binary Method'Contacts'getStatuses
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3299038190 -> GHC.Base.pure Method'Contacts'getStatuses}};
           put to_be_encoded_1 = do {Data.Binary.Put.putWord32le 3299038190;
                                     GHC.Base.pure ()}}
instance TLFunctionʼ Method'Contacts'getStatuses
                     (Vector ContactStatus)
data Method'Contacts'getContacts
    = Method'Contacts'getContacts {_hash :: !Long'}
instance Data.Binary.Binary Method'Contacts'getContacts
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1574346258 -> do {_hash_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Contacts'getContacts _hash_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 1574346258;
                                     Data.Binary.put to_be_encoded_2._hash}}
instance TLFunctionʼ Method'Contacts'getContacts Contacts'Contacts
data Method'Contacts'importContacts
    = Method'Contacts'importContacts {_contacts :: !(Vector InputContact)}
instance Data.Binary.Binary Method'Contacts'importContacts
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {746589157 -> do {_contacts_1 <- Data.Binary.get;
                                       GHC.Base.pure (Method'Contacts'importContacts _contacts_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 746589157;
                                     Data.Binary.put to_be_encoded_2._contacts}}
instance TLFunctionʼ Method'Contacts'importContacts
                     Contacts'ImportedContacts
data Method'Contacts'deleteContacts
    = Method'Contacts'deleteContacts {_id :: !(Vector InputUser)}
instance Data.Binary.Binary Method'Contacts'deleteContacts
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {157945344 -> do {_id_1 <- Data.Binary.get;
                                       GHC.Base.pure (Method'Contacts'deleteContacts _id_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 157945344;
                                     Data.Binary.put to_be_encoded_2._id}}
instance TLFunctionʼ Method'Contacts'deleteContacts Updates
data Method'Contacts'deleteByPhones
    = Method'Contacts'deleteByPhones {_phones :: !(Vector String')}
instance Data.Binary.Binary Method'Contacts'deleteByPhones
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {269745566 -> do {_phones_1 <- Data.Binary.get;
                                       GHC.Base.pure (Method'Contacts'deleteByPhones _phones_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 269745566;
                                     Data.Binary.put to_be_encoded_2._phones}}
instance TLFunctionʼ Method'Contacts'deleteByPhones Bool
data Method'Contacts'block
    = Method'Contacts'block {_my_stories_from :: !(Maybe True'),
                             _id :: !InputPeer}
instance Data.Binary.Binary Method'Contacts'block
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {774801204 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                       _my_stories_from_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                       _id_3 <- Data.Binary.get;
                                       GHC.Base.pure (Method'Contacts'block _my_stories_from_2 _id_3)}}};
           put to_be_encoded_4 = do {Data.Binary.Put.putWord32le 774801204;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_4._my_stories_from,
                                                              0)];
                                     Data.Binary.put to_be_encoded_4._my_stories_from;
                                     Data.Binary.put to_be_encoded_4._id}}
instance TLFunctionʼ Method'Contacts'block Bool
data Method'Contacts'unblock
    = Method'Contacts'unblock {_my_stories_from :: !(Maybe True'),
                               _id :: !InputPeer}
instance Data.Binary.Binary Method'Contacts'unblock
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3041973032 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _my_stories_from_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        _id_3 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Contacts'unblock _my_stories_from_2 _id_3)}}};
           put to_be_encoded_4 = do {Data.Binary.Put.putWord32le 3041973032;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_4._my_stories_from,
                                                              0)];
                                     Data.Binary.put to_be_encoded_4._my_stories_from;
                                     Data.Binary.put to_be_encoded_4._id}}
instance TLFunctionʼ Method'Contacts'unblock Bool
data Method'Contacts'getBlocked
    = Method'Contacts'getBlocked {_my_stories_from :: !(Maybe True'),
                                  _offset :: !Int',
                                  _limit :: !Int'}
instance Data.Binary.Binary Method'Contacts'getBlocked
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2592509824 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _my_stories_from_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        _offset_3 <- Data.Binary.get;
                                        _limit_4 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Contacts'getBlocked _my_stories_from_2 _offset_3 _limit_4)}}};
           put to_be_encoded_5 = do {Data.Binary.Put.putWord32le 2592509824;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_5._my_stories_from,
                                                              0)];
                                     Data.Binary.put to_be_encoded_5._my_stories_from;
                                     Data.Binary.put to_be_encoded_5._offset;
                                     Data.Binary.put to_be_encoded_5._limit}}
instance TLFunctionʼ Method'Contacts'getBlocked Contacts'Blocked
data Method'Contacts'search
    = Method'Contacts'search {_q :: !String', _limit :: !Int'}
instance Data.Binary.Binary Method'Contacts'search
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {301470424 -> do {_q_1 <- Data.Binary.get;
                                       _limit_2 <- Data.Binary.get;
                                       GHC.Base.pure (Method'Contacts'search _q_1 _limit_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 301470424;
                                     Data.Binary.put to_be_encoded_3._q;
                                     Data.Binary.put to_be_encoded_3._limit}}
instance TLFunctionʼ Method'Contacts'search Contacts'Found
data Method'Contacts'resolveUsername
    = Method'Contacts'resolveUsername {_username :: !String'}
instance Data.Binary.Binary Method'Contacts'resolveUsername
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {4181511075 -> do {_username_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Contacts'resolveUsername _username_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 4181511075;
                                     Data.Binary.put to_be_encoded_2._username}}
instance TLFunctionʼ Method'Contacts'resolveUsername
                     Contacts'ResolvedPeer
data Method'Contacts'getTopPeers
    = Method'Contacts'getTopPeers {_correspondents :: !(Maybe True'),
                                   _bots_pm :: !(Maybe True'),
                                   _bots_inline :: !(Maybe True'),
                                   _phone_calls :: !(Maybe True'),
                                   _forward_users :: !(Maybe True'),
                                   _forward_chats :: !(Maybe True'),
                                   _groups :: !(Maybe True'),
                                   _channels :: !(Maybe True'),
                                   _offset :: !Int',
                                   _limit :: !Int',
                                   _hash :: !Long'}
instance Data.Binary.Binary Method'Contacts'getTopPeers
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2536798390 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _correspondents_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        _bots_pm_3 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 1);
                                        _bots_inline_4 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 2);
                                        _phone_calls_5 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 3);
                                        _forward_users_6 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 4);
                                        _forward_chats_7 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 5);
                                        _groups_8 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 10);
                                        _channels_9 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 15);
                                        _offset_10 <- Data.Binary.get;
                                        _limit_11 <- Data.Binary.get;
                                        _hash_12 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Contacts'getTopPeers _correspondents_2 _bots_pm_3 _bots_inline_4 _phone_calls_5 _forward_users_6 _forward_chats_7 _groups_8 _channels_9 _offset_10 _limit_11 _hash_12)}}};
           put to_be_encoded_13 = do {Data.Binary.Put.putWord32le 2536798390;
                                      Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_13._channels,
                                                               15),
                                                              (Data.Maybe.isJust to_be_encoded_13._groups,
                                                               10),
                                                              (Data.Maybe.isJust to_be_encoded_13._forward_chats,
                                                               5),
                                                              (Data.Maybe.isJust to_be_encoded_13._forward_users,
                                                               4),
                                                              (Data.Maybe.isJust to_be_encoded_13._phone_calls,
                                                               3),
                                                              (Data.Maybe.isJust to_be_encoded_13._bots_inline,
                                                               2),
                                                              (Data.Maybe.isJust to_be_encoded_13._bots_pm,
                                                               1),
                                                              (Data.Maybe.isJust to_be_encoded_13._correspondents,
                                                               0)];
                                      Data.Binary.put to_be_encoded_13._correspondents;
                                      Data.Binary.put to_be_encoded_13._bots_pm;
                                      Data.Binary.put to_be_encoded_13._bots_inline;
                                      Data.Binary.put to_be_encoded_13._phone_calls;
                                      Data.Binary.put to_be_encoded_13._forward_users;
                                      Data.Binary.put to_be_encoded_13._forward_chats;
                                      Data.Binary.put to_be_encoded_13._groups;
                                      Data.Binary.put to_be_encoded_13._channels;
                                      Data.Binary.put to_be_encoded_13._offset;
                                      Data.Binary.put to_be_encoded_13._limit;
                                      Data.Binary.put to_be_encoded_13._hash}}
instance TLFunctionʼ Method'Contacts'getTopPeers Contacts'TopPeers
data Method'Contacts'resetTopPeerRating
    = Method'Contacts'resetTopPeerRating {_category :: !TopPeerCategory,
                                          _peer :: !InputPeer}
instance Data.Binary.Binary Method'Contacts'resetTopPeerRating
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {451113900 -> do {_category_1 <- Data.Binary.get;
                                       _peer_2 <- Data.Binary.get;
                                       GHC.Base.pure (Method'Contacts'resetTopPeerRating _category_1 _peer_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 451113900;
                                     Data.Binary.put to_be_encoded_3._category;
                                     Data.Binary.put to_be_encoded_3._peer}}
instance TLFunctionʼ Method'Contacts'resetTopPeerRating Bool
data Method'Contacts'resetSaved = Method'Contacts'resetSaved {}
instance Data.Binary.Binary Method'Contacts'resetSaved
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2274703345 -> GHC.Base.pure Method'Contacts'resetSaved}};
           put to_be_encoded_1 = do {Data.Binary.Put.putWord32le 2274703345;
                                     GHC.Base.pure ()}}
instance TLFunctionʼ Method'Contacts'resetSaved Bool
data Method'Contacts'getSaved = Method'Contacts'getSaved {}
instance Data.Binary.Binary Method'Contacts'getSaved
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2196890527 -> GHC.Base.pure Method'Contacts'getSaved}};
           put to_be_encoded_1 = do {Data.Binary.Put.putWord32le 2196890527;
                                     GHC.Base.pure ()}}
instance TLFunctionʼ Method'Contacts'getSaved (Vector SavedContact)
data Method'Contacts'toggleTopPeers
    = Method'Contacts'toggleTopPeers {_enabled :: !Bool}
instance Data.Binary.Binary Method'Contacts'toggleTopPeers
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2232729050 -> do {_enabled_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Contacts'toggleTopPeers _enabled_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 2232729050;
                                     Data.Binary.put to_be_encoded_2._enabled}}
instance TLFunctionʼ Method'Contacts'toggleTopPeers Bool
data Method'Contacts'addContact
    = Method'Contacts'addContact {_add_phone_privacy_exception :: !(Maybe True'),
                                  _id :: !InputUser,
                                  _first_name :: !String',
                                  _last_name :: !String',
                                  _phone :: !String'}
instance Data.Binary.Binary Method'Contacts'addContact
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3908330448 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _add_phone_privacy_exception_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        _id_3 <- Data.Binary.get;
                                        _first_name_4 <- Data.Binary.get;
                                        _last_name_5 <- Data.Binary.get;
                                        _phone_6 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Contacts'addContact _add_phone_privacy_exception_2 _id_3 _first_name_4 _last_name_5 _phone_6)}}};
           put to_be_encoded_7 = do {Data.Binary.Put.putWord32le 3908330448;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_7._add_phone_privacy_exception,
                                                              0)];
                                     Data.Binary.put to_be_encoded_7._add_phone_privacy_exception;
                                     Data.Binary.put to_be_encoded_7._id;
                                     Data.Binary.put to_be_encoded_7._first_name;
                                     Data.Binary.put to_be_encoded_7._last_name;
                                     Data.Binary.put to_be_encoded_7._phone}}
instance TLFunctionʼ Method'Contacts'addContact Updates
data Method'Contacts'acceptContact
    = Method'Contacts'acceptContact {_id :: !InputUser}
instance Data.Binary.Binary Method'Contacts'acceptContact
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {4164002319 -> do {_id_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Contacts'acceptContact _id_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 4164002319;
                                     Data.Binary.put to_be_encoded_2._id}}
instance TLFunctionʼ Method'Contacts'acceptContact Updates
data Method'Contacts'getLocated
    = Method'Contacts'getLocated {_background :: !(Maybe True'),
                                  _geo_point :: !InputGeoPoint,
                                  _self_expires :: !(Maybe Int')}
instance Data.Binary.Binary Method'Contacts'getLocated
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3544759364 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _background_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 1);
                                        _geo_point_3 <- Data.Binary.get;
                                        _self_expires_4 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        GHC.Base.pure (Method'Contacts'getLocated _background_2 _geo_point_3 _self_expires_4)}}};
           put to_be_encoded_5 = do {Data.Binary.Put.putWord32le 3544759364;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_5._self_expires,
                                                              0),
                                                             (Data.Maybe.isJust to_be_encoded_5._background,
                                                              1)];
                                     Data.Binary.put to_be_encoded_5._background;
                                     Data.Binary.put to_be_encoded_5._geo_point;
                                     Data.Binary.put to_be_encoded_5._self_expires}}
instance TLFunctionʼ Method'Contacts'getLocated Updates
data Method'Contacts'blockFromReplies
    = Method'Contacts'blockFromReplies {_delete_message :: !(Maybe True'),
                                        _delete_history :: !(Maybe True'),
                                        _report_spam :: !(Maybe True'),
                                        _msg_id :: !Int'}
instance Data.Binary.Binary Method'Contacts'blockFromReplies
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {698914348 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                       _delete_message_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                       _delete_history_3 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 1);
                                       _report_spam_4 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 2);
                                       _msg_id_5 <- Data.Binary.get;
                                       GHC.Base.pure (Method'Contacts'blockFromReplies _delete_message_2 _delete_history_3 _report_spam_4 _msg_id_5)}}};
           put to_be_encoded_6 = do {Data.Binary.Put.putWord32le 698914348;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_6._report_spam,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_6._delete_history,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_6._delete_message,
                                                              0)];
                                     Data.Binary.put to_be_encoded_6._delete_message;
                                     Data.Binary.put to_be_encoded_6._delete_history;
                                     Data.Binary.put to_be_encoded_6._report_spam;
                                     Data.Binary.put to_be_encoded_6._msg_id}}
instance TLFunctionʼ Method'Contacts'blockFromReplies Updates
data Method'Contacts'resolvePhone
    = Method'Contacts'resolvePhone {_phone :: !String'}
instance Data.Binary.Binary Method'Contacts'resolvePhone
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2331591492 -> do {_phone_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Contacts'resolvePhone _phone_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 2331591492;
                                     Data.Binary.put to_be_encoded_2._phone}}
instance TLFunctionʼ Method'Contacts'resolvePhone
                     Contacts'ResolvedPeer
data Method'Contacts'exportContactToken
    = Method'Contacts'exportContactToken {}
instance Data.Binary.Binary Method'Contacts'exportContactToken
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {4167385127 -> GHC.Base.pure Method'Contacts'exportContactToken}};
           put to_be_encoded_1 = do {Data.Binary.Put.putWord32le 4167385127;
                                     GHC.Base.pure ()}}
instance TLFunctionʼ Method'Contacts'exportContactToken
                     ExportedContactToken
data Method'Contacts'importContactToken
    = Method'Contacts'importContactToken {_token :: !String'}
instance Data.Binary.Binary Method'Contacts'importContactToken
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {318789512 -> do {_token_1 <- Data.Binary.get;
                                       GHC.Base.pure (Method'Contacts'importContactToken _token_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 318789512;
                                     Data.Binary.put to_be_encoded_2._token}}
instance TLFunctionʼ Method'Contacts'importContactToken User
data Method'Contacts'editCloseFriends
    = Method'Contacts'editCloseFriends {_id :: !(Vector Long')}
instance Data.Binary.Binary Method'Contacts'editCloseFriends
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3127313904 -> do {_id_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Contacts'editCloseFriends _id_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 3127313904;
                                     Data.Binary.put to_be_encoded_2._id}}
instance TLFunctionʼ Method'Contacts'editCloseFriends Bool
data Method'Contacts'setBlocked
    = Method'Contacts'setBlocked {_my_stories_from :: !(Maybe True'),
                                  _id :: !(Vector InputPeer),
                                  _limit :: !Int'}
instance Data.Binary.Binary Method'Contacts'setBlocked
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2496027766 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _my_stories_from_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        _id_3 <- Data.Binary.get;
                                        _limit_4 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Contacts'setBlocked _my_stories_from_2 _id_3 _limit_4)}}};
           put to_be_encoded_5 = do {Data.Binary.Put.putWord32le 2496027766;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_5._my_stories_from,
                                                              0)];
                                     Data.Binary.put to_be_encoded_5._my_stories_from;
                                     Data.Binary.put to_be_encoded_5._id;
                                     Data.Binary.put to_be_encoded_5._limit}}
instance TLFunctionʼ Method'Contacts'setBlocked Bool
data Method'Messages'getMessages
    = Method'Messages'getMessages {_id :: !(Vector InputMessage)}
instance Data.Binary.Binary Method'Messages'getMessages
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1673946374 -> do {_id_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'getMessages _id_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 1673946374;
                                     Data.Binary.put to_be_encoded_2._id}}
instance TLFunctionʼ Method'Messages'getMessages Messages'Messages
data Method'Messages'getDialogs
    = Method'Messages'getDialogs {_exclude_pinned :: !(Maybe True'),
                                  _folder_id :: !(Maybe Int'),
                                  _offset_date :: !Int',
                                  _offset_id :: !Int',
                                  _offset_peer :: !InputPeer,
                                  _limit :: !Int',
                                  _hash :: !Long'}
instance Data.Binary.Binary Method'Messages'getDialogs
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2700397391 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _exclude_pinned_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        _folder_id_3 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 1);
                                        _offset_date_4 <- Data.Binary.get;
                                        _offset_id_5 <- Data.Binary.get;
                                        _offset_peer_6 <- Data.Binary.get;
                                        _limit_7 <- Data.Binary.get;
                                        _hash_8 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'getDialogs _exclude_pinned_2 _folder_id_3 _offset_date_4 _offset_id_5 _offset_peer_6 _limit_7 _hash_8)}}};
           put to_be_encoded_9 = do {Data.Binary.Put.putWord32le 2700397391;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_9._folder_id,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_9._exclude_pinned,
                                                              0)];
                                     Data.Binary.put to_be_encoded_9._exclude_pinned;
                                     Data.Binary.put to_be_encoded_9._folder_id;
                                     Data.Binary.put to_be_encoded_9._offset_date;
                                     Data.Binary.put to_be_encoded_9._offset_id;
                                     Data.Binary.put to_be_encoded_9._offset_peer;
                                     Data.Binary.put to_be_encoded_9._limit;
                                     Data.Binary.put to_be_encoded_9._hash}}
instance TLFunctionʼ Method'Messages'getDialogs Messages'Dialogs
data Method'Messages'getHistory
    = Method'Messages'getHistory {_peer :: !InputPeer,
                                  _offset_id :: !Int',
                                  _offset_date :: !Int',
                                  _add_offset :: !Int',
                                  _limit :: !Int',
                                  _max_id :: !Int',
                                  _min_id :: !Int',
                                  _hash :: !Long'}
instance Data.Binary.Binary Method'Messages'getHistory
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1143203525 -> do {_peer_1 <- Data.Binary.get;
                                        _offset_id_2 <- Data.Binary.get;
                                        _offset_date_3 <- Data.Binary.get;
                                        _add_offset_4 <- Data.Binary.get;
                                        _limit_5 <- Data.Binary.get;
                                        _max_id_6 <- Data.Binary.get;
                                        _min_id_7 <- Data.Binary.get;
                                        _hash_8 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'getHistory _peer_1 _offset_id_2 _offset_date_3 _add_offset_4 _limit_5 _max_id_6 _min_id_7 _hash_8)}}};
           put to_be_encoded_9 = do {Data.Binary.Put.putWord32le 1143203525;
                                     Data.Binary.put to_be_encoded_9._peer;
                                     Data.Binary.put to_be_encoded_9._offset_id;
                                     Data.Binary.put to_be_encoded_9._offset_date;
                                     Data.Binary.put to_be_encoded_9._add_offset;
                                     Data.Binary.put to_be_encoded_9._limit;
                                     Data.Binary.put to_be_encoded_9._max_id;
                                     Data.Binary.put to_be_encoded_9._min_id;
                                     Data.Binary.put to_be_encoded_9._hash}}
instance TLFunctionʼ Method'Messages'getHistory Messages'Messages
data Method'Messages'search
    = Method'Messages'search {_peer :: !InputPeer,
                              _q :: !String',
                              _from_id :: !(Maybe InputPeer),
                              _saved_peer_id :: !(Maybe InputPeer),
                              _top_msg_id :: !(Maybe Int'),
                              _filter :: !MessagesFilter,
                              _min_date :: !Int',
                              _max_date :: !Int',
                              _offset_id :: !Int',
                              _add_offset :: !Int',
                              _limit :: !Int',
                              _max_id :: !Int',
                              _min_id :: !Int',
                              _hash :: !Long'}
instance Data.Binary.Binary Method'Messages'search
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2813651241 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _peer_2 <- Data.Binary.get;
                                        _q_3 <- Data.Binary.get;
                                        _from_id_4 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        _saved_peer_id_5 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 2);
                                        _top_msg_id_6 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 1);
                                        _filter_7 <- Data.Binary.get;
                                        _min_date_8 <- Data.Binary.get;
                                        _max_date_9 <- Data.Binary.get;
                                        _offset_id_10 <- Data.Binary.get;
                                        _add_offset_11 <- Data.Binary.get;
                                        _limit_12 <- Data.Binary.get;
                                        _max_id_13 <- Data.Binary.get;
                                        _min_id_14 <- Data.Binary.get;
                                        _hash_15 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'search _peer_2 _q_3 _from_id_4 _saved_peer_id_5 _top_msg_id_6 _filter_7 _min_date_8 _max_date_9 _offset_id_10 _add_offset_11 _limit_12 _max_id_13 _min_id_14 _hash_15)}}};
           put to_be_encoded_16 = do {Data.Binary.Put.putWord32le 2813651241;
                                      Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_16._top_msg_id,
                                                               1),
                                                              (Data.Maybe.isJust to_be_encoded_16._saved_peer_id,
                                                               2),
                                                              (Data.Maybe.isJust to_be_encoded_16._from_id,
                                                               0)];
                                      Data.Binary.put to_be_encoded_16._peer;
                                      Data.Binary.put to_be_encoded_16._q;
                                      Data.Binary.put to_be_encoded_16._from_id;
                                      Data.Binary.put to_be_encoded_16._saved_peer_id;
                                      Data.Binary.put to_be_encoded_16._top_msg_id;
                                      Data.Binary.put to_be_encoded_16._filter;
                                      Data.Binary.put to_be_encoded_16._min_date;
                                      Data.Binary.put to_be_encoded_16._max_date;
                                      Data.Binary.put to_be_encoded_16._offset_id;
                                      Data.Binary.put to_be_encoded_16._add_offset;
                                      Data.Binary.put to_be_encoded_16._limit;
                                      Data.Binary.put to_be_encoded_16._max_id;
                                      Data.Binary.put to_be_encoded_16._min_id;
                                      Data.Binary.put to_be_encoded_16._hash}}
instance TLFunctionʼ Method'Messages'search Messages'Messages
data Method'Messages'readHistory
    = Method'Messages'readHistory {_peer :: !InputPeer,
                                   _max_id :: !Int'}
instance Data.Binary.Binary Method'Messages'readHistory
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {238054714 -> do {_peer_1 <- Data.Binary.get;
                                       _max_id_2 <- Data.Binary.get;
                                       GHC.Base.pure (Method'Messages'readHistory _peer_1 _max_id_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 238054714;
                                     Data.Binary.put to_be_encoded_3._peer;
                                     Data.Binary.put to_be_encoded_3._max_id}}
instance TLFunctionʼ Method'Messages'readHistory
                     Messages'AffectedMessages
data Method'Messages'deleteHistory
    = Method'Messages'deleteHistory {_just_clear :: !(Maybe True'),
                                     _revoke :: !(Maybe True'),
                                     _peer :: !InputPeer,
                                     _max_id :: !Int',
                                     _min_date :: !(Maybe Int'),
                                     _max_date :: !(Maybe Int')}
instance Data.Binary.Binary Method'Messages'deleteHistory
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2962199082 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _just_clear_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        _revoke_3 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 1);
                                        _peer_4 <- Data.Binary.get;
                                        _max_id_5 <- Data.Binary.get;
                                        _min_date_6 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 2);
                                        _max_date_7 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 3);
                                        GHC.Base.pure (Method'Messages'deleteHistory _just_clear_2 _revoke_3 _peer_4 _max_id_5 _min_date_6 _max_date_7)}}};
           put to_be_encoded_8 = do {Data.Binary.Put.putWord32le 2962199082;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_8._max_date,
                                                              3),
                                                             (Data.Maybe.isJust to_be_encoded_8._min_date,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_8._revoke,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_8._just_clear,
                                                              0)];
                                     Data.Binary.put to_be_encoded_8._just_clear;
                                     Data.Binary.put to_be_encoded_8._revoke;
                                     Data.Binary.put to_be_encoded_8._peer;
                                     Data.Binary.put to_be_encoded_8._max_id;
                                     Data.Binary.put to_be_encoded_8._min_date;
                                     Data.Binary.put to_be_encoded_8._max_date}}
instance TLFunctionʼ Method'Messages'deleteHistory
                     Messages'AffectedHistory
data Method'Messages'deleteMessages
    = Method'Messages'deleteMessages {_revoke :: !(Maybe True'),
                                      _id :: !(Vector Int')}
instance Data.Binary.Binary Method'Messages'deleteMessages
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3851326930 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _revoke_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        _id_3 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'deleteMessages _revoke_2 _id_3)}}};
           put to_be_encoded_4 = do {Data.Binary.Put.putWord32le 3851326930;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_4._revoke,
                                                              0)];
                                     Data.Binary.put to_be_encoded_4._revoke;
                                     Data.Binary.put to_be_encoded_4._id}}
instance TLFunctionʼ Method'Messages'deleteMessages
                     Messages'AffectedMessages
data Method'Messages'receivedMessages
    = Method'Messages'receivedMessages {_max_id :: !Int'}
instance Data.Binary.Binary Method'Messages'receivedMessages
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {94983360 -> do {_max_id_1 <- Data.Binary.get;
                                      GHC.Base.pure (Method'Messages'receivedMessages _max_id_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 94983360;
                                     Data.Binary.put to_be_encoded_2._max_id}}
instance TLFunctionʼ Method'Messages'receivedMessages
                     (Vector ReceivedNotifyMessage)
data Method'Messages'setTyping
    = Method'Messages'setTyping {_peer :: !InputPeer,
                                 _top_msg_id :: !(Maybe Int'),
                                 _action :: !SendMessageAction}
instance Data.Binary.Binary Method'Messages'setTyping
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1486110434 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _peer_2 <- Data.Binary.get;
                                        _top_msg_id_3 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        _action_4 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'setTyping _peer_2 _top_msg_id_3 _action_4)}}};
           put to_be_encoded_5 = do {Data.Binary.Put.putWord32le 1486110434;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_5._top_msg_id,
                                                              0)];
                                     Data.Binary.put to_be_encoded_5._peer;
                                     Data.Binary.put to_be_encoded_5._top_msg_id;
                                     Data.Binary.put to_be_encoded_5._action}}
instance TLFunctionʼ Method'Messages'setTyping Bool
data Method'Messages'sendMessage
    = Method'Messages'sendMessage {_no_webpage :: !(Maybe True'),
                                   _silent :: !(Maybe True'),
                                   _background :: !(Maybe True'),
                                   _clear_draft :: !(Maybe True'),
                                   _noforwards :: !(Maybe True'),
                                   _update_stickersets_order :: !(Maybe True'),
                                   _invert_media :: !(Maybe True'),
                                   _peer :: !InputPeer,
                                   _reply_to :: !(Maybe InputReplyTo),
                                   _message :: !String',
                                   _random_id :: !Long',
                                   _reply_markup :: !(Maybe ReplyMarkup),
                                   _entities :: !(Maybe (Vector MessageEntity)),
                                   _schedule_date :: !(Maybe Int'),
                                   _send_as :: !(Maybe InputPeer)}
instance Data.Binary.Binary Method'Messages'sendMessage
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {671943023 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                       _no_webpage_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 1);
                                       _silent_3 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 5);
                                       _background_4 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 6);
                                       _clear_draft_5 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 7);
                                       _noforwards_6 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 14);
                                       _update_stickersets_order_7 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 15);
                                       _invert_media_8 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 16);
                                       _peer_9 <- Data.Binary.get;
                                       _reply_to_10 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                       _message_11 <- Data.Binary.get;
                                       _random_id_12 <- Data.Binary.get;
                                       _reply_markup_13 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 2);
                                       _entities_14 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 3);
                                       _schedule_date_15 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 10);
                                       _send_as_16 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 13);
                                       GHC.Base.pure (Method'Messages'sendMessage _no_webpage_2 _silent_3 _background_4 _clear_draft_5 _noforwards_6 _update_stickersets_order_7 _invert_media_8 _peer_9 _reply_to_10 _message_11 _random_id_12 _reply_markup_13 _entities_14 _schedule_date_15 _send_as_16)}}};
           put to_be_encoded_17 = do {Data.Binary.Put.putWord32le 671943023;
                                      Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_17._send_as,
                                                               13),
                                                              (Data.Maybe.isJust to_be_encoded_17._schedule_date,
                                                               10),
                                                              (Data.Maybe.isJust to_be_encoded_17._entities,
                                                               3),
                                                              (Data.Maybe.isJust to_be_encoded_17._reply_markup,
                                                               2),
                                                              (Data.Maybe.isJust to_be_encoded_17._reply_to,
                                                               0),
                                                              (Data.Maybe.isJust to_be_encoded_17._invert_media,
                                                               16),
                                                              (Data.Maybe.isJust to_be_encoded_17._update_stickersets_order,
                                                               15),
                                                              (Data.Maybe.isJust to_be_encoded_17._noforwards,
                                                               14),
                                                              (Data.Maybe.isJust to_be_encoded_17._clear_draft,
                                                               7),
                                                              (Data.Maybe.isJust to_be_encoded_17._background,
                                                               6),
                                                              (Data.Maybe.isJust to_be_encoded_17._silent,
                                                               5),
                                                              (Data.Maybe.isJust to_be_encoded_17._no_webpage,
                                                               1)];
                                      Data.Binary.put to_be_encoded_17._no_webpage;
                                      Data.Binary.put to_be_encoded_17._silent;
                                      Data.Binary.put to_be_encoded_17._background;
                                      Data.Binary.put to_be_encoded_17._clear_draft;
                                      Data.Binary.put to_be_encoded_17._noforwards;
                                      Data.Binary.put to_be_encoded_17._update_stickersets_order;
                                      Data.Binary.put to_be_encoded_17._invert_media;
                                      Data.Binary.put to_be_encoded_17._peer;
                                      Data.Binary.put to_be_encoded_17._reply_to;
                                      Data.Binary.put to_be_encoded_17._message;
                                      Data.Binary.put to_be_encoded_17._random_id;
                                      Data.Binary.put to_be_encoded_17._reply_markup;
                                      Data.Binary.put to_be_encoded_17._entities;
                                      Data.Binary.put to_be_encoded_17._schedule_date;
                                      Data.Binary.put to_be_encoded_17._send_as}}
instance TLFunctionʼ Method'Messages'sendMessage Updates
data Method'Messages'sendMedia
    = Method'Messages'sendMedia {_silent :: !(Maybe True'),
                                 _background :: !(Maybe True'),
                                 _clear_draft :: !(Maybe True'),
                                 _noforwards :: !(Maybe True'),
                                 _update_stickersets_order :: !(Maybe True'),
                                 _invert_media :: !(Maybe True'),
                                 _peer :: !InputPeer,
                                 _reply_to :: !(Maybe InputReplyTo),
                                 _media :: !InputMedia,
                                 _message :: !String',
                                 _random_id :: !Long',
                                 _reply_markup :: !(Maybe ReplyMarkup),
                                 _entities :: !(Maybe (Vector MessageEntity)),
                                 _schedule_date :: !(Maybe Int'),
                                 _send_as :: !(Maybe InputPeer)}
instance Data.Binary.Binary Method'Messages'sendMedia
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1926021693 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _silent_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 5);
                                        _background_3 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 6);
                                        _clear_draft_4 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 7);
                                        _noforwards_5 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 14);
                                        _update_stickersets_order_6 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 15);
                                        _invert_media_7 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 16);
                                        _peer_8 <- Data.Binary.get;
                                        _reply_to_9 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        _media_10 <- Data.Binary.get;
                                        _message_11 <- Data.Binary.get;
                                        _random_id_12 <- Data.Binary.get;
                                        _reply_markup_13 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 2);
                                        _entities_14 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 3);
                                        _schedule_date_15 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 10);
                                        _send_as_16 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 13);
                                        GHC.Base.pure (Method'Messages'sendMedia _silent_2 _background_3 _clear_draft_4 _noforwards_5 _update_stickersets_order_6 _invert_media_7 _peer_8 _reply_to_9 _media_10 _message_11 _random_id_12 _reply_markup_13 _entities_14 _schedule_date_15 _send_as_16)}}};
           put to_be_encoded_17 = do {Data.Binary.Put.putWord32le 1926021693;
                                      Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_17._send_as,
                                                               13),
                                                              (Data.Maybe.isJust to_be_encoded_17._schedule_date,
                                                               10),
                                                              (Data.Maybe.isJust to_be_encoded_17._entities,
                                                               3),
                                                              (Data.Maybe.isJust to_be_encoded_17._reply_markup,
                                                               2),
                                                              (Data.Maybe.isJust to_be_encoded_17._reply_to,
                                                               0),
                                                              (Data.Maybe.isJust to_be_encoded_17._invert_media,
                                                               16),
                                                              (Data.Maybe.isJust to_be_encoded_17._update_stickersets_order,
                                                               15),
                                                              (Data.Maybe.isJust to_be_encoded_17._noforwards,
                                                               14),
                                                              (Data.Maybe.isJust to_be_encoded_17._clear_draft,
                                                               7),
                                                              (Data.Maybe.isJust to_be_encoded_17._background,
                                                               6),
                                                              (Data.Maybe.isJust to_be_encoded_17._silent,
                                                               5)];
                                      Data.Binary.put to_be_encoded_17._silent;
                                      Data.Binary.put to_be_encoded_17._background;
                                      Data.Binary.put to_be_encoded_17._clear_draft;
                                      Data.Binary.put to_be_encoded_17._noforwards;
                                      Data.Binary.put to_be_encoded_17._update_stickersets_order;
                                      Data.Binary.put to_be_encoded_17._invert_media;
                                      Data.Binary.put to_be_encoded_17._peer;
                                      Data.Binary.put to_be_encoded_17._reply_to;
                                      Data.Binary.put to_be_encoded_17._media;
                                      Data.Binary.put to_be_encoded_17._message;
                                      Data.Binary.put to_be_encoded_17._random_id;
                                      Data.Binary.put to_be_encoded_17._reply_markup;
                                      Data.Binary.put to_be_encoded_17._entities;
                                      Data.Binary.put to_be_encoded_17._schedule_date;
                                      Data.Binary.put to_be_encoded_17._send_as}}
instance TLFunctionʼ Method'Messages'sendMedia Updates
data Method'Messages'forwardMessages
    = Method'Messages'forwardMessages {_silent :: !(Maybe True'),
                                       _background :: !(Maybe True'),
                                       _with_my_score :: !(Maybe True'),
                                       _drop_author :: !(Maybe True'),
                                       _drop_media_captions :: !(Maybe True'),
                                       _noforwards :: !(Maybe True'),
                                       _from_peer :: !InputPeer,
                                       _id :: !(Vector Int'),
                                       _random_id :: !(Vector Long'),
                                       _to_peer :: !InputPeer,
                                       _top_msg_id :: !(Maybe Int'),
                                       _schedule_date :: !(Maybe Int'),
                                       _send_as :: !(Maybe InputPeer)}
instance Data.Binary.Binary Method'Messages'forwardMessages
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3328293828 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _silent_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 5);
                                        _background_3 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 6);
                                        _with_my_score_4 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 8);
                                        _drop_author_5 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 11);
                                        _drop_media_captions_6 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 12);
                                        _noforwards_7 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 14);
                                        _from_peer_8 <- Data.Binary.get;
                                        _id_9 <- Data.Binary.get;
                                        _random_id_10 <- Data.Binary.get;
                                        _to_peer_11 <- Data.Binary.get;
                                        _top_msg_id_12 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 9);
                                        _schedule_date_13 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 10);
                                        _send_as_14 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 13);
                                        GHC.Base.pure (Method'Messages'forwardMessages _silent_2 _background_3 _with_my_score_4 _drop_author_5 _drop_media_captions_6 _noforwards_7 _from_peer_8 _id_9 _random_id_10 _to_peer_11 _top_msg_id_12 _schedule_date_13 _send_as_14)}}};
           put to_be_encoded_15 = do {Data.Binary.Put.putWord32le 3328293828;
                                      Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_15._send_as,
                                                               13),
                                                              (Data.Maybe.isJust to_be_encoded_15._schedule_date,
                                                               10),
                                                              (Data.Maybe.isJust to_be_encoded_15._top_msg_id,
                                                               9),
                                                              (Data.Maybe.isJust to_be_encoded_15._noforwards,
                                                               14),
                                                              (Data.Maybe.isJust to_be_encoded_15._drop_media_captions,
                                                               12),
                                                              (Data.Maybe.isJust to_be_encoded_15._drop_author,
                                                               11),
                                                              (Data.Maybe.isJust to_be_encoded_15._with_my_score,
                                                               8),
                                                              (Data.Maybe.isJust to_be_encoded_15._background,
                                                               6),
                                                              (Data.Maybe.isJust to_be_encoded_15._silent,
                                                               5)];
                                      Data.Binary.put to_be_encoded_15._silent;
                                      Data.Binary.put to_be_encoded_15._background;
                                      Data.Binary.put to_be_encoded_15._with_my_score;
                                      Data.Binary.put to_be_encoded_15._drop_author;
                                      Data.Binary.put to_be_encoded_15._drop_media_captions;
                                      Data.Binary.put to_be_encoded_15._noforwards;
                                      Data.Binary.put to_be_encoded_15._from_peer;
                                      Data.Binary.put to_be_encoded_15._id;
                                      Data.Binary.put to_be_encoded_15._random_id;
                                      Data.Binary.put to_be_encoded_15._to_peer;
                                      Data.Binary.put to_be_encoded_15._top_msg_id;
                                      Data.Binary.put to_be_encoded_15._schedule_date;
                                      Data.Binary.put to_be_encoded_15._send_as}}
instance TLFunctionʼ Method'Messages'forwardMessages Updates
data Method'Messages'reportSpam
    = Method'Messages'reportSpam {_peer :: !InputPeer}
instance Data.Binary.Binary Method'Messages'reportSpam
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3474297563 -> do {_peer_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'reportSpam _peer_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 3474297563;
                                     Data.Binary.put to_be_encoded_2._peer}}
instance TLFunctionʼ Method'Messages'reportSpam Bool
data Method'Messages'getPeerSettings
    = Method'Messages'getPeerSettings {_peer :: !InputPeer}
instance Data.Binary.Binary Method'Messages'getPeerSettings
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {4024018594 -> do {_peer_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'getPeerSettings _peer_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 4024018594;
                                     Data.Binary.put to_be_encoded_2._peer}}
instance TLFunctionʼ Method'Messages'getPeerSettings
                     Messages'PeerSettings
data Method'Messages'report
    = Method'Messages'report {_peer :: !InputPeer,
                              _id :: !(Vector Int'),
                              _reason :: !ReportReason,
                              _message :: !String'}
instance Data.Binary.Binary Method'Messages'report
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2303961934 -> do {_peer_1 <- Data.Binary.get;
                                        _id_2 <- Data.Binary.get;
                                        _reason_3 <- Data.Binary.get;
                                        _message_4 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'report _peer_1 _id_2 _reason_3 _message_4)}}};
           put to_be_encoded_5 = do {Data.Binary.Put.putWord32le 2303961934;
                                     Data.Binary.put to_be_encoded_5._peer;
                                     Data.Binary.put to_be_encoded_5._id;
                                     Data.Binary.put to_be_encoded_5._reason;
                                     Data.Binary.put to_be_encoded_5._message}}
instance TLFunctionʼ Method'Messages'report Bool
data Method'Messages'getChats
    = Method'Messages'getChats {_id :: !(Vector Long')}
instance Data.Binary.Binary Method'Messages'getChats
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1240027791 -> do {_id_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'getChats _id_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 1240027791;
                                     Data.Binary.put to_be_encoded_2._id}}
instance TLFunctionʼ Method'Messages'getChats Messages'Chats
data Method'Messages'getFullChat
    = Method'Messages'getFullChat {_chat_id :: !Long'}
instance Data.Binary.Binary Method'Messages'getFullChat
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2930772788 -> do {_chat_id_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'getFullChat _chat_id_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 2930772788;
                                     Data.Binary.put to_be_encoded_2._chat_id}}
instance TLFunctionʼ Method'Messages'getFullChat Messages'ChatFull
data Method'Messages'editChatTitle
    = Method'Messages'editChatTitle {_chat_id :: !Long',
                                     _title :: !String'}
instance Data.Binary.Binary Method'Messages'editChatTitle
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1937260541 -> do {_chat_id_1 <- Data.Binary.get;
                                        _title_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'editChatTitle _chat_id_1 _title_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 1937260541;
                                     Data.Binary.put to_be_encoded_3._chat_id;
                                     Data.Binary.put to_be_encoded_3._title}}
instance TLFunctionʼ Method'Messages'editChatTitle Updates
data Method'Messages'editChatPhoto
    = Method'Messages'editChatPhoto {_chat_id :: !Long',
                                     _photo :: !InputChatPhoto}
instance Data.Binary.Binary Method'Messages'editChatPhoto
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {903730804 -> do {_chat_id_1 <- Data.Binary.get;
                                       _photo_2 <- Data.Binary.get;
                                       GHC.Base.pure (Method'Messages'editChatPhoto _chat_id_1 _photo_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 903730804;
                                     Data.Binary.put to_be_encoded_3._chat_id;
                                     Data.Binary.put to_be_encoded_3._photo}}
instance TLFunctionʼ Method'Messages'editChatPhoto Updates
data Method'Messages'addChatUser
    = Method'Messages'addChatUser {_chat_id :: !Long',
                                   _user_id :: !InputUser,
                                   _fwd_limit :: !Int'}
instance Data.Binary.Binary Method'Messages'addChatUser
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {4064760803 -> do {_chat_id_1 <- Data.Binary.get;
                                        _user_id_2 <- Data.Binary.get;
                                        _fwd_limit_3 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'addChatUser _chat_id_1 _user_id_2 _fwd_limit_3)}}};
           put to_be_encoded_4 = do {Data.Binary.Put.putWord32le 4064760803;
                                     Data.Binary.put to_be_encoded_4._chat_id;
                                     Data.Binary.put to_be_encoded_4._user_id;
                                     Data.Binary.put to_be_encoded_4._fwd_limit}}
instance TLFunctionʼ Method'Messages'addChatUser Updates
data Method'Messages'deleteChatUser
    = Method'Messages'deleteChatUser {_revoke_history :: !(Maybe True'),
                                      _chat_id :: !Long',
                                      _user_id :: !InputUser}
instance Data.Binary.Binary Method'Messages'deleteChatUser
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2719505579 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _revoke_history_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        _chat_id_3 <- Data.Binary.get;
                                        _user_id_4 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'deleteChatUser _revoke_history_2 _chat_id_3 _user_id_4)}}};
           put to_be_encoded_5 = do {Data.Binary.Put.putWord32le 2719505579;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_5._revoke_history,
                                                              0)];
                                     Data.Binary.put to_be_encoded_5._revoke_history;
                                     Data.Binary.put to_be_encoded_5._chat_id;
                                     Data.Binary.put to_be_encoded_5._user_id}}
instance TLFunctionʼ Method'Messages'deleteChatUser Updates
data Method'Messages'createChat
    = Method'Messages'createChat {_users :: !(Vector InputUser),
                                  _title :: !String',
                                  _ttl_period :: !(Maybe Int')}
instance Data.Binary.Binary Method'Messages'createChat
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3450904 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                     _users_2 <- Data.Binary.get;
                                     _title_3 <- Data.Binary.get;
                                     _ttl_period_4 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                     GHC.Base.pure (Method'Messages'createChat _users_2 _title_3 _ttl_period_4)}}};
           put to_be_encoded_5 = do {Data.Binary.Put.putWord32le 3450904;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_5._ttl_period,
                                                              0)];
                                     Data.Binary.put to_be_encoded_5._users;
                                     Data.Binary.put to_be_encoded_5._title;
                                     Data.Binary.put to_be_encoded_5._ttl_period}}
instance TLFunctionʼ Method'Messages'createChat Updates
data Method'Messages'getDhConfig
    = Method'Messages'getDhConfig {_version :: !Int',
                                   _random_length :: !Int'}
instance Data.Binary.Binary Method'Messages'getDhConfig
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {651135312 -> do {_version_1 <- Data.Binary.get;
                                       _random_length_2 <- Data.Binary.get;
                                       GHC.Base.pure (Method'Messages'getDhConfig _version_1 _random_length_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 651135312;
                                     Data.Binary.put to_be_encoded_3._version;
                                     Data.Binary.put to_be_encoded_3._random_length}}
instance TLFunctionʼ Method'Messages'getDhConfig Messages'DhConfig
data Method'Messages'requestEncryption
    = Method'Messages'requestEncryption {_user_id :: !InputUser,
                                         _random_id :: !Int',
                                         _g_a :: !Bytes'}
instance Data.Binary.Binary Method'Messages'requestEncryption
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {4132286275 -> do {_user_id_1 <- Data.Binary.get;
                                        _random_id_2 <- Data.Binary.get;
                                        _g_a_3 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'requestEncryption _user_id_1 _random_id_2 _g_a_3)}}};
           put to_be_encoded_4 = do {Data.Binary.Put.putWord32le 4132286275;
                                     Data.Binary.put to_be_encoded_4._user_id;
                                     Data.Binary.put to_be_encoded_4._random_id;
                                     Data.Binary.put to_be_encoded_4._g_a}}
instance TLFunctionʼ Method'Messages'requestEncryption
                     EncryptedChat
data Method'Messages'acceptEncryption
    = Method'Messages'acceptEncryption {_peer :: !InputEncryptedChat,
                                        _g_b :: !Bytes',
                                        _key_fingerprint :: !Long'}
instance Data.Binary.Binary Method'Messages'acceptEncryption
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1035731989 -> do {_peer_1 <- Data.Binary.get;
                                        _g_b_2 <- Data.Binary.get;
                                        _key_fingerprint_3 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'acceptEncryption _peer_1 _g_b_2 _key_fingerprint_3)}}};
           put to_be_encoded_4 = do {Data.Binary.Put.putWord32le 1035731989;
                                     Data.Binary.put to_be_encoded_4._peer;
                                     Data.Binary.put to_be_encoded_4._g_b;
                                     Data.Binary.put to_be_encoded_4._key_fingerprint}}
instance TLFunctionʼ Method'Messages'acceptEncryption EncryptedChat
data Method'Messages'discardEncryption
    = Method'Messages'discardEncryption {_delete_history :: !(Maybe True'),
                                         _chat_id :: !Int'}
instance Data.Binary.Binary Method'Messages'discardEncryption
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {4086541984 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _delete_history_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        _chat_id_3 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'discardEncryption _delete_history_2 _chat_id_3)}}};
           put to_be_encoded_4 = do {Data.Binary.Put.putWord32le 4086541984;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_4._delete_history,
                                                              0)];
                                     Data.Binary.put to_be_encoded_4._delete_history;
                                     Data.Binary.put to_be_encoded_4._chat_id}}
instance TLFunctionʼ Method'Messages'discardEncryption Bool
data Method'Messages'setEncryptedTyping
    = Method'Messages'setEncryptedTyping {_peer :: !InputEncryptedChat,
                                          _typing :: !Bool}
instance Data.Binary.Binary Method'Messages'setEncryptedTyping
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2031374829 -> do {_peer_1 <- Data.Binary.get;
                                        _typing_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'setEncryptedTyping _peer_1 _typing_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 2031374829;
                                     Data.Binary.put to_be_encoded_3._peer;
                                     Data.Binary.put to_be_encoded_3._typing}}
instance TLFunctionʼ Method'Messages'setEncryptedTyping Bool
data Method'Messages'readEncryptedHistory
    = Method'Messages'readEncryptedHistory {_peer :: !InputEncryptedChat,
                                            _max_date :: !Int'}
instance Data.Binary.Binary Method'Messages'readEncryptedHistory
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2135648522 -> do {_peer_1 <- Data.Binary.get;
                                        _max_date_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'readEncryptedHistory _peer_1 _max_date_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 2135648522;
                                     Data.Binary.put to_be_encoded_3._peer;
                                     Data.Binary.put to_be_encoded_3._max_date}}
instance TLFunctionʼ Method'Messages'readEncryptedHistory Bool
data Method'Messages'sendEncrypted
    = Method'Messages'sendEncrypted {_silent :: !(Maybe True'),
                                     _peer :: !InputEncryptedChat,
                                     _random_id :: !Long',
                                     _data :: !Bytes'}
instance Data.Binary.Binary Method'Messages'sendEncrypted
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1157265941 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _silent_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        _peer_3 <- Data.Binary.get;
                                        _random_id_4 <- Data.Binary.get;
                                        _data_5 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'sendEncrypted _silent_2 _peer_3 _random_id_4 _data_5)}}};
           put to_be_encoded_6 = do {Data.Binary.Put.putWord32le 1157265941;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_6._silent,
                                                              0)];
                                     Data.Binary.put to_be_encoded_6._silent;
                                     Data.Binary.put to_be_encoded_6._peer;
                                     Data.Binary.put to_be_encoded_6._random_id;
                                     Data.Binary.put to_be_encoded_6._data}}
instance TLFunctionʼ Method'Messages'sendEncrypted
                     Messages'SentEncryptedMessage
data Method'Messages'sendEncryptedFile
    = Method'Messages'sendEncryptedFile {_silent :: !(Maybe True'),
                                         _peer :: !InputEncryptedChat,
                                         _random_id :: !Long',
                                         _data :: !Bytes',
                                         _file :: !InputEncryptedFile}
instance Data.Binary.Binary Method'Messages'sendEncryptedFile
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1431914525 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _silent_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        _peer_3 <- Data.Binary.get;
                                        _random_id_4 <- Data.Binary.get;
                                        _data_5 <- Data.Binary.get;
                                        _file_6 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'sendEncryptedFile _silent_2 _peer_3 _random_id_4 _data_5 _file_6)}}};
           put to_be_encoded_7 = do {Data.Binary.Put.putWord32le 1431914525;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_7._silent,
                                                              0)];
                                     Data.Binary.put to_be_encoded_7._silent;
                                     Data.Binary.put to_be_encoded_7._peer;
                                     Data.Binary.put to_be_encoded_7._random_id;
                                     Data.Binary.put to_be_encoded_7._data;
                                     Data.Binary.put to_be_encoded_7._file}}
instance TLFunctionʼ Method'Messages'sendEncryptedFile
                     Messages'SentEncryptedMessage
data Method'Messages'sendEncryptedService
    = Method'Messages'sendEncryptedService {_peer :: !InputEncryptedChat,
                                            _random_id :: !Long',
                                            _data :: !Bytes'}
instance Data.Binary.Binary Method'Messages'sendEncryptedService
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {852769188 -> do {_peer_1 <- Data.Binary.get;
                                       _random_id_2 <- Data.Binary.get;
                                       _data_3 <- Data.Binary.get;
                                       GHC.Base.pure (Method'Messages'sendEncryptedService _peer_1 _random_id_2 _data_3)}}};
           put to_be_encoded_4 = do {Data.Binary.Put.putWord32le 852769188;
                                     Data.Binary.put to_be_encoded_4._peer;
                                     Data.Binary.put to_be_encoded_4._random_id;
                                     Data.Binary.put to_be_encoded_4._data}}
instance TLFunctionʼ Method'Messages'sendEncryptedService
                     Messages'SentEncryptedMessage
data Method'Messages'receivedQueue
    = Method'Messages'receivedQueue {_max_qts :: !Int'}
instance Data.Binary.Binary Method'Messages'receivedQueue
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1436924774 -> do {_max_qts_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'receivedQueue _max_qts_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 1436924774;
                                     Data.Binary.put to_be_encoded_2._max_qts}}
instance TLFunctionʼ Method'Messages'receivedQueue (Vector Long')
data Method'Messages'reportEncryptedSpam
    = Method'Messages'reportEncryptedSpam {_peer :: !InputEncryptedChat}
instance Data.Binary.Binary Method'Messages'reportEncryptedSpam
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1259113487 -> do {_peer_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'reportEncryptedSpam _peer_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 1259113487;
                                     Data.Binary.put to_be_encoded_2._peer}}
instance TLFunctionʼ Method'Messages'reportEncryptedSpam Bool
data Method'Messages'readMessageContents
    = Method'Messages'readMessageContents {_id :: !(Vector Int')}
instance Data.Binary.Binary Method'Messages'readMessageContents
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {916930423 -> do {_id_1 <- Data.Binary.get;
                                       GHC.Base.pure (Method'Messages'readMessageContents _id_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 916930423;
                                     Data.Binary.put to_be_encoded_2._id}}
instance TLFunctionʼ Method'Messages'readMessageContents
                     Messages'AffectedMessages
data Method'Messages'getStickers
    = Method'Messages'getStickers {_emoticon :: !String',
                                   _hash :: !Long'}
instance Data.Binary.Binary Method'Messages'getStickers
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3584414625 -> do {_emoticon_1 <- Data.Binary.get;
                                        _hash_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'getStickers _emoticon_1 _hash_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 3584414625;
                                     Data.Binary.put to_be_encoded_3._emoticon;
                                     Data.Binary.put to_be_encoded_3._hash}}
instance TLFunctionʼ Method'Messages'getStickers Messages'Stickers
data Method'Messages'getAllStickers
    = Method'Messages'getAllStickers {_hash :: !Long'}
instance Data.Binary.Binary Method'Messages'getAllStickers
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3097534888 -> do {_hash_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'getAllStickers _hash_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 3097534888;
                                     Data.Binary.put to_be_encoded_2._hash}}
instance TLFunctionʼ Method'Messages'getAllStickers
                     Messages'AllStickers
data Method'Messages'getWebPagePreview
    = Method'Messages'getWebPagePreview {_message :: !String',
                                         _entities :: !(Maybe (Vector MessageEntity))}
instance Data.Binary.Binary Method'Messages'getWebPagePreview
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2338894028 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _message_2 <- Data.Binary.get;
                                        _entities_3 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 3);
                                        GHC.Base.pure (Method'Messages'getWebPagePreview _message_2 _entities_3)}}};
           put to_be_encoded_4 = do {Data.Binary.Put.putWord32le 2338894028;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_4._entities,
                                                              3)];
                                     Data.Binary.put to_be_encoded_4._message;
                                     Data.Binary.put to_be_encoded_4._entities}}
instance TLFunctionʼ Method'Messages'getWebPagePreview MessageMedia
data Method'Messages'exportChatInvite
    = Method'Messages'exportChatInvite {_legacy_revoke_permanent :: !(Maybe True'),
                                        _request_needed :: !(Maybe True'),
                                        _peer :: !InputPeer,
                                        _expire_date :: !(Maybe Int'),
                                        _usage_limit :: !(Maybe Int'),
                                        _title :: !(Maybe String')}
instance Data.Binary.Binary Method'Messages'exportChatInvite
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2687296981 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _legacy_revoke_permanent_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 2);
                                        _request_needed_3 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 3);
                                        _peer_4 <- Data.Binary.get;
                                        _expire_date_5 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        _usage_limit_6 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 1);
                                        _title_7 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 4);
                                        GHC.Base.pure (Method'Messages'exportChatInvite _legacy_revoke_permanent_2 _request_needed_3 _peer_4 _expire_date_5 _usage_limit_6 _title_7)}}};
           put to_be_encoded_8 = do {Data.Binary.Put.putWord32le 2687296981;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_8._title,
                                                              4),
                                                             (Data.Maybe.isJust to_be_encoded_8._usage_limit,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_8._expire_date,
                                                              0),
                                                             (Data.Maybe.isJust to_be_encoded_8._request_needed,
                                                              3),
                                                             (Data.Maybe.isJust to_be_encoded_8._legacy_revoke_permanent,
                                                              2)];
                                     Data.Binary.put to_be_encoded_8._legacy_revoke_permanent;
                                     Data.Binary.put to_be_encoded_8._request_needed;
                                     Data.Binary.put to_be_encoded_8._peer;
                                     Data.Binary.put to_be_encoded_8._expire_date;
                                     Data.Binary.put to_be_encoded_8._usage_limit;
                                     Data.Binary.put to_be_encoded_8._title}}
instance TLFunctionʼ Method'Messages'exportChatInvite
                     ExportedChatInvite
data Method'Messages'checkChatInvite
    = Method'Messages'checkChatInvite {_hash :: !String'}
instance Data.Binary.Binary Method'Messages'checkChatInvite
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1051570619 -> do {_hash_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'checkChatInvite _hash_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 1051570619;
                                     Data.Binary.put to_be_encoded_2._hash}}
instance TLFunctionʼ Method'Messages'checkChatInvite ChatInvite
data Method'Messages'importChatInvite
    = Method'Messages'importChatInvite {_hash :: !String'}
instance Data.Binary.Binary Method'Messages'importChatInvite
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1817183516 -> do {_hash_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'importChatInvite _hash_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 1817183516;
                                     Data.Binary.put to_be_encoded_2._hash}}
instance TLFunctionʼ Method'Messages'importChatInvite Updates
data Method'Messages'getStickerSet
    = Method'Messages'getStickerSet {_stickerset :: !InputStickerSet,
                                     _hash :: !Int'}
instance Data.Binary.Binary Method'Messages'getStickerSet
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3365989492 -> do {_stickerset_1 <- Data.Binary.get;
                                        _hash_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'getStickerSet _stickerset_1 _hash_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 3365989492;
                                     Data.Binary.put to_be_encoded_3._stickerset;
                                     Data.Binary.put to_be_encoded_3._hash}}
instance TLFunctionʼ Method'Messages'getStickerSet
                     Messages'StickerSet
data Method'Messages'installStickerSet
    = Method'Messages'installStickerSet {_stickerset :: !InputStickerSet,
                                         _archived :: !Bool}
instance Data.Binary.Binary Method'Messages'installStickerSet
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3348096096 -> do {_stickerset_1 <- Data.Binary.get;
                                        _archived_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'installStickerSet _stickerset_1 _archived_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 3348096096;
                                     Data.Binary.put to_be_encoded_3._stickerset;
                                     Data.Binary.put to_be_encoded_3._archived}}
instance TLFunctionʼ Method'Messages'installStickerSet
                     Messages'StickerSetInstallResult
data Method'Messages'uninstallStickerSet
    = Method'Messages'uninstallStickerSet {_stickerset :: !InputStickerSet}
instance Data.Binary.Binary Method'Messages'uninstallStickerSet
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {4184757726 -> do {_stickerset_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'uninstallStickerSet _stickerset_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 4184757726;
                                     Data.Binary.put to_be_encoded_2._stickerset}}
instance TLFunctionʼ Method'Messages'uninstallStickerSet Bool
data Method'Messages'startBot
    = Method'Messages'startBot {_bot :: !InputUser,
                                _peer :: !InputPeer,
                                _random_id :: !Long',
                                _start_param :: !String'}
instance Data.Binary.Binary Method'Messages'startBot
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3873403768 -> do {_bot_1 <- Data.Binary.get;
                                        _peer_2 <- Data.Binary.get;
                                        _random_id_3 <- Data.Binary.get;
                                        _start_param_4 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'startBot _bot_1 _peer_2 _random_id_3 _start_param_4)}}};
           put to_be_encoded_5 = do {Data.Binary.Put.putWord32le 3873403768;
                                     Data.Binary.put to_be_encoded_5._bot;
                                     Data.Binary.put to_be_encoded_5._peer;
                                     Data.Binary.put to_be_encoded_5._random_id;
                                     Data.Binary.put to_be_encoded_5._start_param}}
instance TLFunctionʼ Method'Messages'startBot Updates
data Method'Messages'getMessagesViews
    = Method'Messages'getMessagesViews {_peer :: !InputPeer,
                                        _id :: !(Vector Int'),
                                        _increment :: !Bool}
instance Data.Binary.Binary Method'Messages'getMessagesViews
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1468322785 -> do {_peer_1 <- Data.Binary.get;
                                        _id_2 <- Data.Binary.get;
                                        _increment_3 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'getMessagesViews _peer_1 _id_2 _increment_3)}}};
           put to_be_encoded_4 = do {Data.Binary.Put.putWord32le 1468322785;
                                     Data.Binary.put to_be_encoded_4._peer;
                                     Data.Binary.put to_be_encoded_4._id;
                                     Data.Binary.put to_be_encoded_4._increment}}
instance TLFunctionʼ Method'Messages'getMessagesViews
                     Messages'MessageViews
data Method'Messages'editChatAdmin
    = Method'Messages'editChatAdmin {_chat_id :: !Long',
                                     _user_id :: !InputUser,
                                     _is_admin :: !Bool}
instance Data.Binary.Binary Method'Messages'editChatAdmin
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2824589762 -> do {_chat_id_1 <- Data.Binary.get;
                                        _user_id_2 <- Data.Binary.get;
                                        _is_admin_3 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'editChatAdmin _chat_id_1 _user_id_2 _is_admin_3)}}};
           put to_be_encoded_4 = do {Data.Binary.Put.putWord32le 2824589762;
                                     Data.Binary.put to_be_encoded_4._chat_id;
                                     Data.Binary.put to_be_encoded_4._user_id;
                                     Data.Binary.put to_be_encoded_4._is_admin}}
instance TLFunctionʼ Method'Messages'editChatAdmin Bool
data Method'Messages'migrateChat
    = Method'Messages'migrateChat {_chat_id :: !Long'}
instance Data.Binary.Binary Method'Messages'migrateChat
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2726777625 -> do {_chat_id_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'migrateChat _chat_id_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 2726777625;
                                     Data.Binary.put to_be_encoded_2._chat_id}}
instance TLFunctionʼ Method'Messages'migrateChat Updates
data Method'Messages'searchGlobal
    = Method'Messages'searchGlobal {_broadcasts_only :: !(Maybe True'),
                                    _folder_id :: !(Maybe Int'),
                                    _q :: !String',
                                    _filter :: !MessagesFilter,
                                    _min_date :: !Int',
                                    _max_date :: !Int',
                                    _offset_rate :: !Int',
                                    _offset_peer :: !InputPeer,
                                    _offset_id :: !Int',
                                    _limit :: !Int'}
instance Data.Binary.Binary Method'Messages'searchGlobal
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1271290010 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _broadcasts_only_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 1);
                                        _folder_id_3 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        _q_4 <- Data.Binary.get;
                                        _filter_5 <- Data.Binary.get;
                                        _min_date_6 <- Data.Binary.get;
                                        _max_date_7 <- Data.Binary.get;
                                        _offset_rate_8 <- Data.Binary.get;
                                        _offset_peer_9 <- Data.Binary.get;
                                        _offset_id_10 <- Data.Binary.get;
                                        _limit_11 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'searchGlobal _broadcasts_only_2 _folder_id_3 _q_4 _filter_5 _min_date_6 _max_date_7 _offset_rate_8 _offset_peer_9 _offset_id_10 _limit_11)}}};
           put to_be_encoded_12 = do {Data.Binary.Put.putWord32le 1271290010;
                                      Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_12._folder_id,
                                                               0),
                                                              (Data.Maybe.isJust to_be_encoded_12._broadcasts_only,
                                                               1)];
                                      Data.Binary.put to_be_encoded_12._broadcasts_only;
                                      Data.Binary.put to_be_encoded_12._folder_id;
                                      Data.Binary.put to_be_encoded_12._q;
                                      Data.Binary.put to_be_encoded_12._filter;
                                      Data.Binary.put to_be_encoded_12._min_date;
                                      Data.Binary.put to_be_encoded_12._max_date;
                                      Data.Binary.put to_be_encoded_12._offset_rate;
                                      Data.Binary.put to_be_encoded_12._offset_peer;
                                      Data.Binary.put to_be_encoded_12._offset_id;
                                      Data.Binary.put to_be_encoded_12._limit}}
instance TLFunctionʼ Method'Messages'searchGlobal Messages'Messages
data Method'Messages'reorderStickerSets
    = Method'Messages'reorderStickerSets {_masks :: !(Maybe True'),
                                          _emojis :: !(Maybe True'),
                                          _order :: !(Vector Long')}
instance Data.Binary.Binary Method'Messages'reorderStickerSets
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2016638777 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _masks_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        _emojis_3 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 1);
                                        _order_4 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'reorderStickerSets _masks_2 _emojis_3 _order_4)}}};
           put to_be_encoded_5 = do {Data.Binary.Put.putWord32le 2016638777;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_5._emojis,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_5._masks,
                                                              0)];
                                     Data.Binary.put to_be_encoded_5._masks;
                                     Data.Binary.put to_be_encoded_5._emojis;
                                     Data.Binary.put to_be_encoded_5._order}}
instance TLFunctionʼ Method'Messages'reorderStickerSets Bool
data Method'Messages'getDocumentByHash
    = Method'Messages'getDocumentByHash {_sha256 :: !Bytes',
                                         _size :: !Long',
                                         _mime_type :: !String'}
instance Data.Binary.Binary Method'Messages'getDocumentByHash
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2985428511 -> do {_sha256_1 <- Data.Binary.get;
                                        _size_2 <- Data.Binary.get;
                                        _mime_type_3 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'getDocumentByHash _sha256_1 _size_2 _mime_type_3)}}};
           put to_be_encoded_4 = do {Data.Binary.Put.putWord32le 2985428511;
                                     Data.Binary.put to_be_encoded_4._sha256;
                                     Data.Binary.put to_be_encoded_4._size;
                                     Data.Binary.put to_be_encoded_4._mime_type}}
instance TLFunctionʼ Method'Messages'getDocumentByHash Document
data Method'Messages'getSavedGifs
    = Method'Messages'getSavedGifs {_hash :: !Long'}
instance Data.Binary.Binary Method'Messages'getSavedGifs
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1559270965 -> do {_hash_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'getSavedGifs _hash_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 1559270965;
                                     Data.Binary.put to_be_encoded_2._hash}}
instance TLFunctionʼ Method'Messages'getSavedGifs
                     Messages'SavedGifs
data Method'Messages'saveGif
    = Method'Messages'saveGif {_id :: !InputDocument, _unsave :: !Bool}
instance Data.Binary.Binary Method'Messages'saveGif
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {846868683 -> do {_id_1 <- Data.Binary.get;
                                       _unsave_2 <- Data.Binary.get;
                                       GHC.Base.pure (Method'Messages'saveGif _id_1 _unsave_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 846868683;
                                     Data.Binary.put to_be_encoded_3._id;
                                     Data.Binary.put to_be_encoded_3._unsave}}
instance TLFunctionʼ Method'Messages'saveGif Bool
data Method'Messages'getInlineBotResults
    = Method'Messages'getInlineBotResults {_bot :: !InputUser,
                                           _peer :: !InputPeer,
                                           _geo_point :: !(Maybe InputGeoPoint),
                                           _query :: !String',
                                           _offset :: !String'}
instance Data.Binary.Binary Method'Messages'getInlineBotResults
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1364105629 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _bot_2 <- Data.Binary.get;
                                        _peer_3 <- Data.Binary.get;
                                        _geo_point_4 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        _query_5 <- Data.Binary.get;
                                        _offset_6 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'getInlineBotResults _bot_2 _peer_3 _geo_point_4 _query_5 _offset_6)}}};
           put to_be_encoded_7 = do {Data.Binary.Put.putWord32le 1364105629;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_7._geo_point,
                                                              0)];
                                     Data.Binary.put to_be_encoded_7._bot;
                                     Data.Binary.put to_be_encoded_7._peer;
                                     Data.Binary.put to_be_encoded_7._geo_point;
                                     Data.Binary.put to_be_encoded_7._query;
                                     Data.Binary.put to_be_encoded_7._offset}}
instance TLFunctionʼ Method'Messages'getInlineBotResults
                     Messages'BotResults
data Method'Messages'setInlineBotResults
    = Method'Messages'setInlineBotResults {_gallery :: !(Maybe True'),
                                           _private :: !(Maybe True'),
                                           _query_id :: !Long',
                                           _results :: !(Vector InputBotInlineResult),
                                           _cache_time :: !Int',
                                           _next_offset :: !(Maybe String'),
                                           _switch_pm :: !(Maybe InlineBotSwitchPM),
                                           _switch_webview :: !(Maybe InlineBotWebView)}
instance Data.Binary.Binary Method'Messages'setInlineBotResults
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3138561049 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _gallery_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        _private_3 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 1);
                                        _query_id_4 <- Data.Binary.get;
                                        _results_5 <- Data.Binary.get;
                                        _cache_time_6 <- Data.Binary.get;
                                        _next_offset_7 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 2);
                                        _switch_pm_8 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 3);
                                        _switch_webview_9 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 4);
                                        GHC.Base.pure (Method'Messages'setInlineBotResults _gallery_2 _private_3 _query_id_4 _results_5 _cache_time_6 _next_offset_7 _switch_pm_8 _switch_webview_9)}}};
           put to_be_encoded_10 = do {Data.Binary.Put.putWord32le 3138561049;
                                      Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_10._switch_webview,
                                                               4),
                                                              (Data.Maybe.isJust to_be_encoded_10._switch_pm,
                                                               3),
                                                              (Data.Maybe.isJust to_be_encoded_10._next_offset,
                                                               2),
                                                              (Data.Maybe.isJust to_be_encoded_10._private,
                                                               1),
                                                              (Data.Maybe.isJust to_be_encoded_10._gallery,
                                                               0)];
                                      Data.Binary.put to_be_encoded_10._gallery;
                                      Data.Binary.put to_be_encoded_10._private;
                                      Data.Binary.put to_be_encoded_10._query_id;
                                      Data.Binary.put to_be_encoded_10._results;
                                      Data.Binary.put to_be_encoded_10._cache_time;
                                      Data.Binary.put to_be_encoded_10._next_offset;
                                      Data.Binary.put to_be_encoded_10._switch_pm;
                                      Data.Binary.put to_be_encoded_10._switch_webview}}
instance TLFunctionʼ Method'Messages'setInlineBotResults Bool
data Method'Messages'sendInlineBotResult
    = Method'Messages'sendInlineBotResult {_silent :: !(Maybe True'),
                                           _background :: !(Maybe True'),
                                           _clear_draft :: !(Maybe True'),
                                           _hide_via :: !(Maybe True'),
                                           _peer :: !InputPeer,
                                           _reply_to :: !(Maybe InputReplyTo),
                                           _random_id :: !Long',
                                           _query_id :: !Long',
                                           _id :: !String',
                                           _schedule_date :: !(Maybe Int'),
                                           _send_as :: !(Maybe InputPeer)}
instance Data.Binary.Binary Method'Messages'sendInlineBotResult
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {4156319930 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _silent_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 5);
                                        _background_3 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 6);
                                        _clear_draft_4 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 7);
                                        _hide_via_5 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 11);
                                        _peer_6 <- Data.Binary.get;
                                        _reply_to_7 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        _random_id_8 <- Data.Binary.get;
                                        _query_id_9 <- Data.Binary.get;
                                        _id_10 <- Data.Binary.get;
                                        _schedule_date_11 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 10);
                                        _send_as_12 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 13);
                                        GHC.Base.pure (Method'Messages'sendInlineBotResult _silent_2 _background_3 _clear_draft_4 _hide_via_5 _peer_6 _reply_to_7 _random_id_8 _query_id_9 _id_10 _schedule_date_11 _send_as_12)}}};
           put to_be_encoded_13 = do {Data.Binary.Put.putWord32le 4156319930;
                                      Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_13._send_as,
                                                               13),
                                                              (Data.Maybe.isJust to_be_encoded_13._schedule_date,
                                                               10),
                                                              (Data.Maybe.isJust to_be_encoded_13._reply_to,
                                                               0),
                                                              (Data.Maybe.isJust to_be_encoded_13._hide_via,
                                                               11),
                                                              (Data.Maybe.isJust to_be_encoded_13._clear_draft,
                                                               7),
                                                              (Data.Maybe.isJust to_be_encoded_13._background,
                                                               6),
                                                              (Data.Maybe.isJust to_be_encoded_13._silent,
                                                               5)];
                                      Data.Binary.put to_be_encoded_13._silent;
                                      Data.Binary.put to_be_encoded_13._background;
                                      Data.Binary.put to_be_encoded_13._clear_draft;
                                      Data.Binary.put to_be_encoded_13._hide_via;
                                      Data.Binary.put to_be_encoded_13._peer;
                                      Data.Binary.put to_be_encoded_13._reply_to;
                                      Data.Binary.put to_be_encoded_13._random_id;
                                      Data.Binary.put to_be_encoded_13._query_id;
                                      Data.Binary.put to_be_encoded_13._id;
                                      Data.Binary.put to_be_encoded_13._schedule_date;
                                      Data.Binary.put to_be_encoded_13._send_as}}
instance TLFunctionʼ Method'Messages'sendInlineBotResult Updates
data Method'Messages'getMessageEditData
    = Method'Messages'getMessageEditData {_peer :: !InputPeer,
                                          _id :: !Int'}
instance Data.Binary.Binary Method'Messages'getMessageEditData
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {4255550774 -> do {_peer_1 <- Data.Binary.get;
                                        _id_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'getMessageEditData _peer_1 _id_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 4255550774;
                                     Data.Binary.put to_be_encoded_3._peer;
                                     Data.Binary.put to_be_encoded_3._id}}
instance TLFunctionʼ Method'Messages'getMessageEditData
                     Messages'MessageEditData
data Method'Messages'editMessage
    = Method'Messages'editMessage {_no_webpage :: !(Maybe True'),
                                   _invert_media :: !(Maybe True'),
                                   _peer :: !InputPeer,
                                   _id :: !Int',
                                   _message :: !(Maybe String'),
                                   _media :: !(Maybe InputMedia),
                                   _reply_markup :: !(Maybe ReplyMarkup),
                                   _entities :: !(Maybe (Vector MessageEntity)),
                                   _schedule_date :: !(Maybe Int')}
instance Data.Binary.Binary Method'Messages'editMessage
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1224152952 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _no_webpage_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 1);
                                        _invert_media_3 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 16);
                                        _peer_4 <- Data.Binary.get;
                                        _id_5 <- Data.Binary.get;
                                        _message_6 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 11);
                                        _media_7 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 14);
                                        _reply_markup_8 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 2);
                                        _entities_9 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 3);
                                        _schedule_date_10 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 15);
                                        GHC.Base.pure (Method'Messages'editMessage _no_webpage_2 _invert_media_3 _peer_4 _id_5 _message_6 _media_7 _reply_markup_8 _entities_9 _schedule_date_10)}}};
           put to_be_encoded_11 = do {Data.Binary.Put.putWord32le 1224152952;
                                      Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_11._schedule_date,
                                                               15),
                                                              (Data.Maybe.isJust to_be_encoded_11._entities,
                                                               3),
                                                              (Data.Maybe.isJust to_be_encoded_11._reply_markup,
                                                               2),
                                                              (Data.Maybe.isJust to_be_encoded_11._media,
                                                               14),
                                                              (Data.Maybe.isJust to_be_encoded_11._message,
                                                               11),
                                                              (Data.Maybe.isJust to_be_encoded_11._invert_media,
                                                               16),
                                                              (Data.Maybe.isJust to_be_encoded_11._no_webpage,
                                                               1)];
                                      Data.Binary.put to_be_encoded_11._no_webpage;
                                      Data.Binary.put to_be_encoded_11._invert_media;
                                      Data.Binary.put to_be_encoded_11._peer;
                                      Data.Binary.put to_be_encoded_11._id;
                                      Data.Binary.put to_be_encoded_11._message;
                                      Data.Binary.put to_be_encoded_11._media;
                                      Data.Binary.put to_be_encoded_11._reply_markup;
                                      Data.Binary.put to_be_encoded_11._entities;
                                      Data.Binary.put to_be_encoded_11._schedule_date}}
instance TLFunctionʼ Method'Messages'editMessage Updates
data Method'Messages'editInlineBotMessage
    = Method'Messages'editInlineBotMessage {_no_webpage :: !(Maybe True'),
                                            _invert_media :: !(Maybe True'),
                                            _id :: !InputBotInlineMessageID,
                                            _message :: !(Maybe String'),
                                            _media :: !(Maybe InputMedia),
                                            _reply_markup :: !(Maybe ReplyMarkup),
                                            _entities :: !(Maybe (Vector MessageEntity))}
instance Data.Binary.Binary Method'Messages'editInlineBotMessage
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2203418042 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _no_webpage_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 1);
                                        _invert_media_3 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 16);
                                        _id_4 <- Data.Binary.get;
                                        _message_5 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 11);
                                        _media_6 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 14);
                                        _reply_markup_7 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 2);
                                        _entities_8 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 3);
                                        GHC.Base.pure (Method'Messages'editInlineBotMessage _no_webpage_2 _invert_media_3 _id_4 _message_5 _media_6 _reply_markup_7 _entities_8)}}};
           put to_be_encoded_9 = do {Data.Binary.Put.putWord32le 2203418042;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_9._entities,
                                                              3),
                                                             (Data.Maybe.isJust to_be_encoded_9._reply_markup,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_9._media,
                                                              14),
                                                             (Data.Maybe.isJust to_be_encoded_9._message,
                                                              11),
                                                             (Data.Maybe.isJust to_be_encoded_9._invert_media,
                                                              16),
                                                             (Data.Maybe.isJust to_be_encoded_9._no_webpage,
                                                              1)];
                                     Data.Binary.put to_be_encoded_9._no_webpage;
                                     Data.Binary.put to_be_encoded_9._invert_media;
                                     Data.Binary.put to_be_encoded_9._id;
                                     Data.Binary.put to_be_encoded_9._message;
                                     Data.Binary.put to_be_encoded_9._media;
                                     Data.Binary.put to_be_encoded_9._reply_markup;
                                     Data.Binary.put to_be_encoded_9._entities}}
instance TLFunctionʼ Method'Messages'editInlineBotMessage Bool
data Method'Messages'getBotCallbackAnswer
    = Method'Messages'getBotCallbackAnswer {_game :: !(Maybe True'),
                                            _peer :: !InputPeer,
                                            _msg_id :: !Int',
                                            _data :: !(Maybe Bytes'),
                                            _password :: !(Maybe InputCheckPasswordSRP)}
instance Data.Binary.Binary Method'Messages'getBotCallbackAnswer
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2470627847 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _game_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 1);
                                        _peer_3 <- Data.Binary.get;
                                        _msg_id_4 <- Data.Binary.get;
                                        _data_5 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        _password_6 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 2);
                                        GHC.Base.pure (Method'Messages'getBotCallbackAnswer _game_2 _peer_3 _msg_id_4 _data_5 _password_6)}}};
           put to_be_encoded_7 = do {Data.Binary.Put.putWord32le 2470627847;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_7._password,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_7._data,
                                                              0),
                                                             (Data.Maybe.isJust to_be_encoded_7._game,
                                                              1)];
                                     Data.Binary.put to_be_encoded_7._game;
                                     Data.Binary.put to_be_encoded_7._peer;
                                     Data.Binary.put to_be_encoded_7._msg_id;
                                     Data.Binary.put to_be_encoded_7._data;
                                     Data.Binary.put to_be_encoded_7._password}}
instance TLFunctionʼ Method'Messages'getBotCallbackAnswer
                     Messages'BotCallbackAnswer
data Method'Messages'setBotCallbackAnswer
    = Method'Messages'setBotCallbackAnswer {_alert :: !(Maybe True'),
                                            _query_id :: !Long',
                                            _message :: !(Maybe String'),
                                            _url :: !(Maybe String'),
                                            _cache_time :: !Int'}
instance Data.Binary.Binary Method'Messages'setBotCallbackAnswer
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3582923530 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _alert_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 1);
                                        _query_id_3 <- Data.Binary.get;
                                        _message_4 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        _url_5 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 2);
                                        _cache_time_6 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'setBotCallbackAnswer _alert_2 _query_id_3 _message_4 _url_5 _cache_time_6)}}};
           put to_be_encoded_7 = do {Data.Binary.Put.putWord32le 3582923530;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_7._url,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_7._message,
                                                              0),
                                                             (Data.Maybe.isJust to_be_encoded_7._alert,
                                                              1)];
                                     Data.Binary.put to_be_encoded_7._alert;
                                     Data.Binary.put to_be_encoded_7._query_id;
                                     Data.Binary.put to_be_encoded_7._message;
                                     Data.Binary.put to_be_encoded_7._url;
                                     Data.Binary.put to_be_encoded_7._cache_time}}
instance TLFunctionʼ Method'Messages'setBotCallbackAnswer Bool
data Method'Messages'getPeerDialogs
    = Method'Messages'getPeerDialogs {_peers :: !(Vector InputDialogPeer)}
instance Data.Binary.Binary Method'Messages'getPeerDialogs
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3832593661 -> do {_peers_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'getPeerDialogs _peers_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 3832593661;
                                     Data.Binary.put to_be_encoded_2._peers}}
instance TLFunctionʼ Method'Messages'getPeerDialogs
                     Messages'PeerDialogs
data Method'Messages'saveDraft
    = Method'Messages'saveDraft {_no_webpage :: !(Maybe True'),
                                 _invert_media :: !(Maybe True'),
                                 _reply_to :: !(Maybe InputReplyTo),
                                 _peer :: !InputPeer,
                                 _message :: !String',
                                 _entities :: !(Maybe (Vector MessageEntity)),
                                 _media :: !(Maybe InputMedia)}
instance Data.Binary.Binary Method'Messages'saveDraft
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2146678790 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _no_webpage_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 1);
                                        _invert_media_3 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 6);
                                        _reply_to_4 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 4);
                                        _peer_5 <- Data.Binary.get;
                                        _message_6 <- Data.Binary.get;
                                        _entities_7 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 3);
                                        _media_8 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 5);
                                        GHC.Base.pure (Method'Messages'saveDraft _no_webpage_2 _invert_media_3 _reply_to_4 _peer_5 _message_6 _entities_7 _media_8)}}};
           put to_be_encoded_9 = do {Data.Binary.Put.putWord32le 2146678790;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_9._media,
                                                              5),
                                                             (Data.Maybe.isJust to_be_encoded_9._entities,
                                                              3),
                                                             (Data.Maybe.isJust to_be_encoded_9._reply_to,
                                                              4),
                                                             (Data.Maybe.isJust to_be_encoded_9._invert_media,
                                                              6),
                                                             (Data.Maybe.isJust to_be_encoded_9._no_webpage,
                                                              1)];
                                     Data.Binary.put to_be_encoded_9._no_webpage;
                                     Data.Binary.put to_be_encoded_9._invert_media;
                                     Data.Binary.put to_be_encoded_9._reply_to;
                                     Data.Binary.put to_be_encoded_9._peer;
                                     Data.Binary.put to_be_encoded_9._message;
                                     Data.Binary.put to_be_encoded_9._entities;
                                     Data.Binary.put to_be_encoded_9._media}}
instance TLFunctionʼ Method'Messages'saveDraft Bool
data Method'Messages'getAllDrafts = Method'Messages'getAllDrafts {}
instance Data.Binary.Binary Method'Messages'getAllDrafts
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1782549861 -> GHC.Base.pure Method'Messages'getAllDrafts}};
           put to_be_encoded_1 = do {Data.Binary.Put.putWord32le 1782549861;
                                     GHC.Base.pure ()}}
instance TLFunctionʼ Method'Messages'getAllDrafts Updates
data Method'Messages'getFeaturedStickers
    = Method'Messages'getFeaturedStickers {_hash :: !Long'}
instance Data.Binary.Binary Method'Messages'getFeaturedStickers
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1685588756 -> do {_hash_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'getFeaturedStickers _hash_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 1685588756;
                                     Data.Binary.put to_be_encoded_2._hash}}
instance TLFunctionʼ Method'Messages'getFeaturedStickers
                     Messages'FeaturedStickers
data Method'Messages'readFeaturedStickers
    = Method'Messages'readFeaturedStickers {_id :: !(Vector Long')}
instance Data.Binary.Binary Method'Messages'readFeaturedStickers
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1527873830 -> do {_id_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'readFeaturedStickers _id_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 1527873830;
                                     Data.Binary.put to_be_encoded_2._id}}
instance TLFunctionʼ Method'Messages'readFeaturedStickers Bool
data Method'Messages'getRecentStickers
    = Method'Messages'getRecentStickers {_attached :: !(Maybe True'),
                                         _hash :: !Long'}
instance Data.Binary.Binary Method'Messages'getRecentStickers
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2645114939 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _attached_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        _hash_3 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'getRecentStickers _attached_2 _hash_3)}}};
           put to_be_encoded_4 = do {Data.Binary.Put.putWord32le 2645114939;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_4._attached,
                                                              0)];
                                     Data.Binary.put to_be_encoded_4._attached;
                                     Data.Binary.put to_be_encoded_4._hash}}
instance TLFunctionʼ Method'Messages'getRecentStickers
                     Messages'RecentStickers
data Method'Messages'saveRecentSticker
    = Method'Messages'saveRecentSticker {_attached :: !(Maybe True'),
                                         _id :: !InputDocument,
                                         _unsave :: !Bool}
instance Data.Binary.Binary Method'Messages'saveRecentSticker
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {958863608 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                       _attached_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                       _id_3 <- Data.Binary.get;
                                       _unsave_4 <- Data.Binary.get;
                                       GHC.Base.pure (Method'Messages'saveRecentSticker _attached_2 _id_3 _unsave_4)}}};
           put to_be_encoded_5 = do {Data.Binary.Put.putWord32le 958863608;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_5._attached,
                                                              0)];
                                     Data.Binary.put to_be_encoded_5._attached;
                                     Data.Binary.put to_be_encoded_5._id;
                                     Data.Binary.put to_be_encoded_5._unsave}}
instance TLFunctionʼ Method'Messages'saveRecentSticker Bool
data Method'Messages'clearRecentStickers
    = Method'Messages'clearRecentStickers {_attached :: !(Maybe True')}
instance Data.Binary.Binary Method'Messages'clearRecentStickers
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2308530221 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _attached_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        GHC.Base.pure (Method'Messages'clearRecentStickers _attached_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 2308530221;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_3._attached,
                                                              0)];
                                     Data.Binary.put to_be_encoded_3._attached}}
instance TLFunctionʼ Method'Messages'clearRecentStickers Bool
data Method'Messages'getArchivedStickers
    = Method'Messages'getArchivedStickers {_masks :: !(Maybe True'),
                                           _emojis :: !(Maybe True'),
                                           _offset_id :: !Long',
                                           _limit :: !Int'}
instance Data.Binary.Binary Method'Messages'getArchivedStickers
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1475442322 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _masks_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        _emojis_3 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 1);
                                        _offset_id_4 <- Data.Binary.get;
                                        _limit_5 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'getArchivedStickers _masks_2 _emojis_3 _offset_id_4 _limit_5)}}};
           put to_be_encoded_6 = do {Data.Binary.Put.putWord32le 1475442322;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_6._emojis,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_6._masks,
                                                              0)];
                                     Data.Binary.put to_be_encoded_6._masks;
                                     Data.Binary.put to_be_encoded_6._emojis;
                                     Data.Binary.put to_be_encoded_6._offset_id;
                                     Data.Binary.put to_be_encoded_6._limit}}
instance TLFunctionʼ Method'Messages'getArchivedStickers
                     Messages'ArchivedStickers
data Method'Messages'getMaskStickers
    = Method'Messages'getMaskStickers {_hash :: !Long'}
instance Data.Binary.Binary Method'Messages'getMaskStickers
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1678738104 -> do {_hash_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'getMaskStickers _hash_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 1678738104;
                                     Data.Binary.put to_be_encoded_2._hash}}
instance TLFunctionʼ Method'Messages'getMaskStickers
                     Messages'AllStickers
data Method'Messages'getAttachedStickers
    = Method'Messages'getAttachedStickers {_media :: !InputStickeredMedia}
instance Data.Binary.Binary Method'Messages'getAttachedStickers
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3428542412 -> do {_media_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'getAttachedStickers _media_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 3428542412;
                                     Data.Binary.put to_be_encoded_2._media}}
instance TLFunctionʼ Method'Messages'getAttachedStickers
                     (Vector StickerSetCovered)
data Method'Messages'setGameScore
    = Method'Messages'setGameScore {_edit_message :: !(Maybe True'),
                                    _force :: !(Maybe True'),
                                    _peer :: !InputPeer,
                                    _id :: !Int',
                                    _user_id :: !InputUser,
                                    _score :: !Int'}
instance Data.Binary.Binary Method'Messages'setGameScore
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2398678208 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _edit_message_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        _force_3 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 1);
                                        _peer_4 <- Data.Binary.get;
                                        _id_5 <- Data.Binary.get;
                                        _user_id_6 <- Data.Binary.get;
                                        _score_7 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'setGameScore _edit_message_2 _force_3 _peer_4 _id_5 _user_id_6 _score_7)}}};
           put to_be_encoded_8 = do {Data.Binary.Put.putWord32le 2398678208;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_8._force,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_8._edit_message,
                                                              0)];
                                     Data.Binary.put to_be_encoded_8._edit_message;
                                     Data.Binary.put to_be_encoded_8._force;
                                     Data.Binary.put to_be_encoded_8._peer;
                                     Data.Binary.put to_be_encoded_8._id;
                                     Data.Binary.put to_be_encoded_8._user_id;
                                     Data.Binary.put to_be_encoded_8._score}}
instance TLFunctionʼ Method'Messages'setGameScore Updates
data Method'Messages'setInlineGameScore
    = Method'Messages'setInlineGameScore {_edit_message :: !(Maybe True'),
                                          _force :: !(Maybe True'),
                                          _id :: !InputBotInlineMessageID,
                                          _user_id :: !InputUser,
                                          _score :: !Int'}
instance Data.Binary.Binary Method'Messages'setInlineGameScore
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {363700068 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                       _edit_message_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                       _force_3 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 1);
                                       _id_4 <- Data.Binary.get;
                                       _user_id_5 <- Data.Binary.get;
                                       _score_6 <- Data.Binary.get;
                                       GHC.Base.pure (Method'Messages'setInlineGameScore _edit_message_2 _force_3 _id_4 _user_id_5 _score_6)}}};
           put to_be_encoded_7 = do {Data.Binary.Put.putWord32le 363700068;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_7._force,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_7._edit_message,
                                                              0)];
                                     Data.Binary.put to_be_encoded_7._edit_message;
                                     Data.Binary.put to_be_encoded_7._force;
                                     Data.Binary.put to_be_encoded_7._id;
                                     Data.Binary.put to_be_encoded_7._user_id;
                                     Data.Binary.put to_be_encoded_7._score}}
instance TLFunctionʼ Method'Messages'setInlineGameScore Bool
data Method'Messages'getGameHighScores
    = Method'Messages'getGameHighScores {_peer :: !InputPeer,
                                         _id :: !Int',
                                         _user_id :: !InputUser}
instance Data.Binary.Binary Method'Messages'getGameHighScores
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3894568093 -> do {_peer_1 <- Data.Binary.get;
                                        _id_2 <- Data.Binary.get;
                                        _user_id_3 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'getGameHighScores _peer_1 _id_2 _user_id_3)}}};
           put to_be_encoded_4 = do {Data.Binary.Put.putWord32le 3894568093;
                                     Data.Binary.put to_be_encoded_4._peer;
                                     Data.Binary.put to_be_encoded_4._id;
                                     Data.Binary.put to_be_encoded_4._user_id}}
instance TLFunctionʼ Method'Messages'getGameHighScores
                     Messages'HighScores
data Method'Messages'getInlineGameHighScores
    = Method'Messages'getInlineGameHighScores {_id :: !InputBotInlineMessageID,
                                               _user_id :: !InputUser}
instance Data.Binary.Binary Method'Messages'getInlineGameHighScores
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {258170395 -> do {_id_1 <- Data.Binary.get;
                                       _user_id_2 <- Data.Binary.get;
                                       GHC.Base.pure (Method'Messages'getInlineGameHighScores _id_1 _user_id_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 258170395;
                                     Data.Binary.put to_be_encoded_3._id;
                                     Data.Binary.put to_be_encoded_3._user_id}}
instance TLFunctionʼ Method'Messages'getInlineGameHighScores
                     Messages'HighScores
data Method'Messages'getCommonChats
    = Method'Messages'getCommonChats {_user_id :: !InputUser,
                                      _max_id :: !Long',
                                      _limit :: !Int'}
instance Data.Binary.Binary Method'Messages'getCommonChats
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3826032900 -> do {_user_id_1 <- Data.Binary.get;
                                        _max_id_2 <- Data.Binary.get;
                                        _limit_3 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'getCommonChats _user_id_1 _max_id_2 _limit_3)}}};
           put to_be_encoded_4 = do {Data.Binary.Put.putWord32le 3826032900;
                                     Data.Binary.put to_be_encoded_4._user_id;
                                     Data.Binary.put to_be_encoded_4._max_id;
                                     Data.Binary.put to_be_encoded_4._limit}}
instance TLFunctionʼ Method'Messages'getCommonChats Messages'Chats
data Method'Messages'getWebPage
    = Method'Messages'getWebPage {_url :: !String', _hash :: !Int'}
instance Data.Binary.Binary Method'Messages'getWebPage
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2375455395 -> do {_url_1 <- Data.Binary.get;
                                        _hash_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'getWebPage _url_1 _hash_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 2375455395;
                                     Data.Binary.put to_be_encoded_3._url;
                                     Data.Binary.put to_be_encoded_3._hash}}
instance TLFunctionʼ Method'Messages'getWebPage Messages'WebPage
data Method'Messages'toggleDialogPin
    = Method'Messages'toggleDialogPin {_pinned :: !(Maybe True'),
                                       _peer :: !InputDialogPeer}
instance Data.Binary.Binary Method'Messages'toggleDialogPin
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2805064279 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _pinned_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        _peer_3 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'toggleDialogPin _pinned_2 _peer_3)}}};
           put to_be_encoded_4 = do {Data.Binary.Put.putWord32le 2805064279;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_4._pinned,
                                                              0)];
                                     Data.Binary.put to_be_encoded_4._pinned;
                                     Data.Binary.put to_be_encoded_4._peer}}
instance TLFunctionʼ Method'Messages'toggleDialogPin Bool
data Method'Messages'reorderPinnedDialogs
    = Method'Messages'reorderPinnedDialogs {_force :: !(Maybe True'),
                                            _folder_id :: !Int',
                                            _order :: !(Vector InputDialogPeer)}
instance Data.Binary.Binary Method'Messages'reorderPinnedDialogs
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {991616823 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                       _force_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                       _folder_id_3 <- Data.Binary.get;
                                       _order_4 <- Data.Binary.get;
                                       GHC.Base.pure (Method'Messages'reorderPinnedDialogs _force_2 _folder_id_3 _order_4)}}};
           put to_be_encoded_5 = do {Data.Binary.Put.putWord32le 991616823;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_5._force,
                                                              0)];
                                     Data.Binary.put to_be_encoded_5._force;
                                     Data.Binary.put to_be_encoded_5._folder_id;
                                     Data.Binary.put to_be_encoded_5._order}}
instance TLFunctionʼ Method'Messages'reorderPinnedDialogs Bool
data Method'Messages'getPinnedDialogs
    = Method'Messages'getPinnedDialogs {_folder_id :: !Int'}
instance Data.Binary.Binary Method'Messages'getPinnedDialogs
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3602468338 -> do {_folder_id_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'getPinnedDialogs _folder_id_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 3602468338;
                                     Data.Binary.put to_be_encoded_2._folder_id}}
instance TLFunctionʼ Method'Messages'getPinnedDialogs
                     Messages'PeerDialogs
data Method'Messages'setBotShippingResults
    = Method'Messages'setBotShippingResults {_query_id :: !Long',
                                             _error :: !(Maybe String'),
                                             _shipping_options :: !(Maybe (Vector ShippingOption))}
instance Data.Binary.Binary Method'Messages'setBotShippingResults
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3858133754 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _query_id_2 <- Data.Binary.get;
                                        _error_3 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        _shipping_options_4 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 1);
                                        GHC.Base.pure (Method'Messages'setBotShippingResults _query_id_2 _error_3 _shipping_options_4)}}};
           put to_be_encoded_5 = do {Data.Binary.Put.putWord32le 3858133754;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_5._shipping_options,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_5._error,
                                                              0)];
                                     Data.Binary.put to_be_encoded_5._query_id;
                                     Data.Binary.put to_be_encoded_5._error;
                                     Data.Binary.put to_be_encoded_5._shipping_options}}
instance TLFunctionʼ Method'Messages'setBotShippingResults Bool
data Method'Messages'setBotPrecheckoutResults
    = Method'Messages'setBotPrecheckoutResults {_success :: !(Maybe True'),
                                                _query_id :: !Long',
                                                _error :: !(Maybe String')}
instance Data.Binary.Binary Method'Messages'setBotPrecheckoutResults
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {163765653 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                       _success_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 1);
                                       _query_id_3 <- Data.Binary.get;
                                       _error_4 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                       GHC.Base.pure (Method'Messages'setBotPrecheckoutResults _success_2 _query_id_3 _error_4)}}};
           put to_be_encoded_5 = do {Data.Binary.Put.putWord32le 163765653;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_5._error,
                                                              0),
                                                             (Data.Maybe.isJust to_be_encoded_5._success,
                                                              1)];
                                     Data.Binary.put to_be_encoded_5._success;
                                     Data.Binary.put to_be_encoded_5._query_id;
                                     Data.Binary.put to_be_encoded_5._error}}
instance TLFunctionʼ Method'Messages'setBotPrecheckoutResults Bool
data Method'Messages'uploadMedia
    = Method'Messages'uploadMedia {_peer :: !InputPeer,
                                   _media :: !InputMedia}
instance Data.Binary.Binary Method'Messages'uploadMedia
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1369162417 -> do {_peer_1 <- Data.Binary.get;
                                        _media_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'uploadMedia _peer_1 _media_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 1369162417;
                                     Data.Binary.put to_be_encoded_3._peer;
                                     Data.Binary.put to_be_encoded_3._media}}
instance TLFunctionʼ Method'Messages'uploadMedia MessageMedia
data Method'Messages'sendScreenshotNotification
    = Method'Messages'sendScreenshotNotification {_peer :: !InputPeer,
                                                  _reply_to :: !InputReplyTo,
                                                  _random_id :: !Long'}
instance Data.Binary.Binary Method'Messages'sendScreenshotNotification
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2705348631 -> do {_peer_1 <- Data.Binary.get;
                                        _reply_to_2 <- Data.Binary.get;
                                        _random_id_3 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'sendScreenshotNotification _peer_1 _reply_to_2 _random_id_3)}}};
           put to_be_encoded_4 = do {Data.Binary.Put.putWord32le 2705348631;
                                     Data.Binary.put to_be_encoded_4._peer;
                                     Data.Binary.put to_be_encoded_4._reply_to;
                                     Data.Binary.put to_be_encoded_4._random_id}}
instance TLFunctionʼ Method'Messages'sendScreenshotNotification
                     Updates
data Method'Messages'getFavedStickers
    = Method'Messages'getFavedStickers {_hash :: !Long'}
instance Data.Binary.Binary Method'Messages'getFavedStickers
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {82946729 -> do {_hash_1 <- Data.Binary.get;
                                      GHC.Base.pure (Method'Messages'getFavedStickers _hash_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 82946729;
                                     Data.Binary.put to_be_encoded_2._hash}}
instance TLFunctionʼ Method'Messages'getFavedStickers
                     Messages'FavedStickers
data Method'Messages'faveSticker
    = Method'Messages'faveSticker {_id :: !InputDocument,
                                   _unfave :: !Bool}
instance Data.Binary.Binary Method'Messages'faveSticker
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3120547163 -> do {_id_1 <- Data.Binary.get;
                                        _unfave_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'faveSticker _id_1 _unfave_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 3120547163;
                                     Data.Binary.put to_be_encoded_3._id;
                                     Data.Binary.put to_be_encoded_3._unfave}}
instance TLFunctionʼ Method'Messages'faveSticker Bool
data Method'Messages'getUnreadMentions
    = Method'Messages'getUnreadMentions {_peer :: !InputPeer,
                                         _top_msg_id :: !(Maybe Int'),
                                         _offset_id :: !Int',
                                         _add_offset :: !Int',
                                         _limit :: !Int',
                                         _max_id :: !Int',
                                         _min_id :: !Int'}
instance Data.Binary.Binary Method'Messages'getUnreadMentions
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {4043827088 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _peer_2 <- Data.Binary.get;
                                        _top_msg_id_3 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        _offset_id_4 <- Data.Binary.get;
                                        _add_offset_5 <- Data.Binary.get;
                                        _limit_6 <- Data.Binary.get;
                                        _max_id_7 <- Data.Binary.get;
                                        _min_id_8 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'getUnreadMentions _peer_2 _top_msg_id_3 _offset_id_4 _add_offset_5 _limit_6 _max_id_7 _min_id_8)}}};
           put to_be_encoded_9 = do {Data.Binary.Put.putWord32le 4043827088;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_9._top_msg_id,
                                                              0)];
                                     Data.Binary.put to_be_encoded_9._peer;
                                     Data.Binary.put to_be_encoded_9._top_msg_id;
                                     Data.Binary.put to_be_encoded_9._offset_id;
                                     Data.Binary.put to_be_encoded_9._add_offset;
                                     Data.Binary.put to_be_encoded_9._limit;
                                     Data.Binary.put to_be_encoded_9._max_id;
                                     Data.Binary.put to_be_encoded_9._min_id}}
instance TLFunctionʼ Method'Messages'getUnreadMentions
                     Messages'Messages
data Method'Messages'readMentions
    = Method'Messages'readMentions {_peer :: !InputPeer,
                                    _top_msg_id :: !(Maybe Int')}
instance Data.Binary.Binary Method'Messages'readMentions
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {921026381 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                       _peer_2 <- Data.Binary.get;
                                       _top_msg_id_3 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                       GHC.Base.pure (Method'Messages'readMentions _peer_2 _top_msg_id_3)}}};
           put to_be_encoded_4 = do {Data.Binary.Put.putWord32le 921026381;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_4._top_msg_id,
                                                              0)];
                                     Data.Binary.put to_be_encoded_4._peer;
                                     Data.Binary.put to_be_encoded_4._top_msg_id}}
instance TLFunctionʼ Method'Messages'readMentions
                     Messages'AffectedHistory
data Method'Messages'getRecentLocations
    = Method'Messages'getRecentLocations {_peer :: !InputPeer,
                                          _limit :: !Int',
                                          _hash :: !Long'}
instance Data.Binary.Binary Method'Messages'getRecentLocations
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1881817312 -> do {_peer_1 <- Data.Binary.get;
                                        _limit_2 <- Data.Binary.get;
                                        _hash_3 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'getRecentLocations _peer_1 _limit_2 _hash_3)}}};
           put to_be_encoded_4 = do {Data.Binary.Put.putWord32le 1881817312;
                                     Data.Binary.put to_be_encoded_4._peer;
                                     Data.Binary.put to_be_encoded_4._limit;
                                     Data.Binary.put to_be_encoded_4._hash}}
instance TLFunctionʼ Method'Messages'getRecentLocations
                     Messages'Messages
data Method'Messages'sendMultiMedia
    = Method'Messages'sendMultiMedia {_silent :: !(Maybe True'),
                                      _background :: !(Maybe True'),
                                      _clear_draft :: !(Maybe True'),
                                      _noforwards :: !(Maybe True'),
                                      _update_stickersets_order :: !(Maybe True'),
                                      _invert_media :: !(Maybe True'),
                                      _peer :: !InputPeer,
                                      _reply_to :: !(Maybe InputReplyTo),
                                      _multi_media :: !(Vector InputSingleMedia),
                                      _schedule_date :: !(Maybe Int'),
                                      _send_as :: !(Maybe InputPeer)}
instance Data.Binary.Binary Method'Messages'sendMultiMedia
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1164872071 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _silent_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 5);
                                        _background_3 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 6);
                                        _clear_draft_4 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 7);
                                        _noforwards_5 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 14);
                                        _update_stickersets_order_6 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 15);
                                        _invert_media_7 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 16);
                                        _peer_8 <- Data.Binary.get;
                                        _reply_to_9 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        _multi_media_10 <- Data.Binary.get;
                                        _schedule_date_11 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 10);
                                        _send_as_12 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 13);
                                        GHC.Base.pure (Method'Messages'sendMultiMedia _silent_2 _background_3 _clear_draft_4 _noforwards_5 _update_stickersets_order_6 _invert_media_7 _peer_8 _reply_to_9 _multi_media_10 _schedule_date_11 _send_as_12)}}};
           put to_be_encoded_13 = do {Data.Binary.Put.putWord32le 1164872071;
                                      Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_13._send_as,
                                                               13),
                                                              (Data.Maybe.isJust to_be_encoded_13._schedule_date,
                                                               10),
                                                              (Data.Maybe.isJust to_be_encoded_13._reply_to,
                                                               0),
                                                              (Data.Maybe.isJust to_be_encoded_13._invert_media,
                                                               16),
                                                              (Data.Maybe.isJust to_be_encoded_13._update_stickersets_order,
                                                               15),
                                                              (Data.Maybe.isJust to_be_encoded_13._noforwards,
                                                               14),
                                                              (Data.Maybe.isJust to_be_encoded_13._clear_draft,
                                                               7),
                                                              (Data.Maybe.isJust to_be_encoded_13._background,
                                                               6),
                                                              (Data.Maybe.isJust to_be_encoded_13._silent,
                                                               5)];
                                      Data.Binary.put to_be_encoded_13._silent;
                                      Data.Binary.put to_be_encoded_13._background;
                                      Data.Binary.put to_be_encoded_13._clear_draft;
                                      Data.Binary.put to_be_encoded_13._noforwards;
                                      Data.Binary.put to_be_encoded_13._update_stickersets_order;
                                      Data.Binary.put to_be_encoded_13._invert_media;
                                      Data.Binary.put to_be_encoded_13._peer;
                                      Data.Binary.put to_be_encoded_13._reply_to;
                                      Data.Binary.put to_be_encoded_13._multi_media;
                                      Data.Binary.put to_be_encoded_13._schedule_date;
                                      Data.Binary.put to_be_encoded_13._send_as}}
instance TLFunctionʼ Method'Messages'sendMultiMedia Updates
data Method'Messages'uploadEncryptedFile
    = Method'Messages'uploadEncryptedFile {_peer :: !InputEncryptedChat,
                                           _file :: !InputEncryptedFile}
instance Data.Binary.Binary Method'Messages'uploadEncryptedFile
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1347929239 -> do {_peer_1 <- Data.Binary.get;
                                        _file_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'uploadEncryptedFile _peer_1 _file_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 1347929239;
                                     Data.Binary.put to_be_encoded_3._peer;
                                     Data.Binary.put to_be_encoded_3._file}}
instance TLFunctionʼ Method'Messages'uploadEncryptedFile
                     EncryptedFile
data Method'Messages'searchStickerSets
    = Method'Messages'searchStickerSets {_exclude_featured :: !(Maybe True'),
                                         _q :: !String',
                                         _hash :: !Long'}
instance Data.Binary.Binary Method'Messages'searchStickerSets
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {896555914 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                       _exclude_featured_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                       _q_3 <- Data.Binary.get;
                                       _hash_4 <- Data.Binary.get;
                                       GHC.Base.pure (Method'Messages'searchStickerSets _exclude_featured_2 _q_3 _hash_4)}}};
           put to_be_encoded_5 = do {Data.Binary.Put.putWord32le 896555914;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_5._exclude_featured,
                                                              0)];
                                     Data.Binary.put to_be_encoded_5._exclude_featured;
                                     Data.Binary.put to_be_encoded_5._q;
                                     Data.Binary.put to_be_encoded_5._hash}}
instance TLFunctionʼ Method'Messages'searchStickerSets
                     Messages'FoundStickerSets
data Method'Messages'getSplitRanges
    = Method'Messages'getSplitRanges {}
instance Data.Binary.Binary Method'Messages'getSplitRanges
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {486505992 -> GHC.Base.pure Method'Messages'getSplitRanges}};
           put to_be_encoded_1 = do {Data.Binary.Put.putWord32le 486505992;
                                     GHC.Base.pure ()}}
instance TLFunctionʼ Method'Messages'getSplitRanges
                     (Vector MessageRange)
data Method'Messages'markDialogUnread
    = Method'Messages'markDialogUnread {_unread :: !(Maybe True'),
                                        _peer :: !InputDialogPeer}
instance Data.Binary.Binary Method'Messages'markDialogUnread
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3263617423 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _unread_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        _peer_3 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'markDialogUnread _unread_2 _peer_3)}}};
           put to_be_encoded_4 = do {Data.Binary.Put.putWord32le 3263617423;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_4._unread,
                                                              0)];
                                     Data.Binary.put to_be_encoded_4._unread;
                                     Data.Binary.put to_be_encoded_4._peer}}
instance TLFunctionʼ Method'Messages'markDialogUnread Bool
data Method'Messages'getDialogUnreadMarks
    = Method'Messages'getDialogUnreadMarks {}
instance Data.Binary.Binary Method'Messages'getDialogUnreadMarks
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {585256482 -> GHC.Base.pure Method'Messages'getDialogUnreadMarks}};
           put to_be_encoded_1 = do {Data.Binary.Put.putWord32le 585256482;
                                     GHC.Base.pure ()}}
instance TLFunctionʼ Method'Messages'getDialogUnreadMarks
                     (Vector DialogPeer)
data Method'Messages'clearAllDrafts
    = Method'Messages'clearAllDrafts {}
instance Data.Binary.Binary Method'Messages'clearAllDrafts
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2119757468 -> GHC.Base.pure Method'Messages'clearAllDrafts}};
           put to_be_encoded_1 = do {Data.Binary.Put.putWord32le 2119757468;
                                     GHC.Base.pure ()}}
instance TLFunctionʼ Method'Messages'clearAllDrafts Bool
data Method'Messages'updatePinnedMessage
    = Method'Messages'updatePinnedMessage {_silent :: !(Maybe True'),
                                           _unpin :: !(Maybe True'),
                                           _pm_oneside :: !(Maybe True'),
                                           _peer :: !InputPeer,
                                           _id :: !Int'}
instance Data.Binary.Binary Method'Messages'updatePinnedMessage
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3534419948 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _silent_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        _unpin_3 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 1);
                                        _pm_oneside_4 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 2);
                                        _peer_5 <- Data.Binary.get;
                                        _id_6 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'updatePinnedMessage _silent_2 _unpin_3 _pm_oneside_4 _peer_5 _id_6)}}};
           put to_be_encoded_7 = do {Data.Binary.Put.putWord32le 3534419948;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_7._pm_oneside,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_7._unpin,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_7._silent,
                                                              0)];
                                     Data.Binary.put to_be_encoded_7._silent;
                                     Data.Binary.put to_be_encoded_7._unpin;
                                     Data.Binary.put to_be_encoded_7._pm_oneside;
                                     Data.Binary.put to_be_encoded_7._peer;
                                     Data.Binary.put to_be_encoded_7._id}}
instance TLFunctionʼ Method'Messages'updatePinnedMessage Updates
data Method'Messages'sendVote
    = Method'Messages'sendVote {_peer :: !InputPeer,
                                _msg_id :: !Int',
                                _options :: !(Vector Bytes')}
instance Data.Binary.Binary Method'Messages'sendVote
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {283795844 -> do {_peer_1 <- Data.Binary.get;
                                       _msg_id_2 <- Data.Binary.get;
                                       _options_3 <- Data.Binary.get;
                                       GHC.Base.pure (Method'Messages'sendVote _peer_1 _msg_id_2 _options_3)}}};
           put to_be_encoded_4 = do {Data.Binary.Put.putWord32le 283795844;
                                     Data.Binary.put to_be_encoded_4._peer;
                                     Data.Binary.put to_be_encoded_4._msg_id;
                                     Data.Binary.put to_be_encoded_4._options}}
instance TLFunctionʼ Method'Messages'sendVote Updates
data Method'Messages'getPollResults
    = Method'Messages'getPollResults {_peer :: !InputPeer,
                                      _msg_id :: !Int'}
instance Data.Binary.Binary Method'Messages'getPollResults
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1941660731 -> do {_peer_1 <- Data.Binary.get;
                                        _msg_id_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'getPollResults _peer_1 _msg_id_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 1941660731;
                                     Data.Binary.put to_be_encoded_3._peer;
                                     Data.Binary.put to_be_encoded_3._msg_id}}
instance TLFunctionʼ Method'Messages'getPollResults Updates
data Method'Messages'getOnlines
    = Method'Messages'getOnlines {_peer :: !InputPeer}
instance Data.Binary.Binary Method'Messages'getOnlines
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1848369232 -> do {_peer_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'getOnlines _peer_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 1848369232;
                                     Data.Binary.put to_be_encoded_2._peer}}
instance TLFunctionʼ Method'Messages'getOnlines ChatOnlines
data Method'Messages'editChatAbout
    = Method'Messages'editChatAbout {_peer :: !InputPeer,
                                     _about :: !String'}
instance Data.Binary.Binary Method'Messages'editChatAbout
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3740665751 -> do {_peer_1 <- Data.Binary.get;
                                        _about_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'editChatAbout _peer_1 _about_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 3740665751;
                                     Data.Binary.put to_be_encoded_3._peer;
                                     Data.Binary.put to_be_encoded_3._about}}
instance TLFunctionʼ Method'Messages'editChatAbout Bool
data Method'Messages'editChatDefaultBannedRights
    = Method'Messages'editChatDefaultBannedRights {_peer :: !InputPeer,
                                                   _banned_rights :: !ChatBannedRights}
instance Data.Binary.Binary Method'Messages'editChatDefaultBannedRights
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2777049921 -> do {_peer_1 <- Data.Binary.get;
                                        _banned_rights_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'editChatDefaultBannedRights _peer_1 _banned_rights_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 2777049921;
                                     Data.Binary.put to_be_encoded_3._peer;
                                     Data.Binary.put to_be_encoded_3._banned_rights}}
instance TLFunctionʼ Method'Messages'editChatDefaultBannedRights
                     Updates
data Method'Messages'getEmojiKeywords
    = Method'Messages'getEmojiKeywords {_lang_code :: !String'}
instance Data.Binary.Binary Method'Messages'getEmojiKeywords
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {899735650 -> do {_lang_code_1 <- Data.Binary.get;
                                       GHC.Base.pure (Method'Messages'getEmojiKeywords _lang_code_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 899735650;
                                     Data.Binary.put to_be_encoded_2._lang_code}}
instance TLFunctionʼ Method'Messages'getEmojiKeywords
                     EmojiKeywordsDifference
data Method'Messages'getEmojiKeywordsDifference
    = Method'Messages'getEmojiKeywordsDifference {_lang_code :: !String',
                                                  _from_version :: !Int'}
instance Data.Binary.Binary Method'Messages'getEmojiKeywordsDifference
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {352892591 -> do {_lang_code_1 <- Data.Binary.get;
                                       _from_version_2 <- Data.Binary.get;
                                       GHC.Base.pure (Method'Messages'getEmojiKeywordsDifference _lang_code_1 _from_version_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 352892591;
                                     Data.Binary.put to_be_encoded_3._lang_code;
                                     Data.Binary.put to_be_encoded_3._from_version}}
instance TLFunctionʼ Method'Messages'getEmojiKeywordsDifference
                     EmojiKeywordsDifference
data Method'Messages'getEmojiKeywordsLanguages
    = Method'Messages'getEmojiKeywordsLanguages {_lang_codes :: !(Vector String')}
instance Data.Binary.Binary Method'Messages'getEmojiKeywordsLanguages
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1318675378 -> do {_lang_codes_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'getEmojiKeywordsLanguages _lang_codes_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 1318675378;
                                     Data.Binary.put to_be_encoded_2._lang_codes}}
instance TLFunctionʼ Method'Messages'getEmojiKeywordsLanguages
                     (Vector EmojiLanguage)
data Method'Messages'getEmojiURL
    = Method'Messages'getEmojiURL {_lang_code :: !String'}
instance Data.Binary.Binary Method'Messages'getEmojiURL
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3585149990 -> do {_lang_code_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'getEmojiURL _lang_code_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 3585149990;
                                     Data.Binary.put to_be_encoded_2._lang_code}}
instance TLFunctionʼ Method'Messages'getEmojiURL EmojiURL
data Method'Messages'getSearchCounters
    = Method'Messages'getSearchCounters {_peer :: !InputPeer,
                                         _saved_peer_id :: !(Maybe InputPeer),
                                         _top_msg_id :: !(Maybe Int'),
                                         _filters :: !(Vector MessagesFilter)}
instance Data.Binary.Binary Method'Messages'getSearchCounters
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {465367808 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                       _peer_2 <- Data.Binary.get;
                                       _saved_peer_id_3 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 2);
                                       _top_msg_id_4 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                       _filters_5 <- Data.Binary.get;
                                       GHC.Base.pure (Method'Messages'getSearchCounters _peer_2 _saved_peer_id_3 _top_msg_id_4 _filters_5)}}};
           put to_be_encoded_6 = do {Data.Binary.Put.putWord32le 465367808;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_6._top_msg_id,
                                                              0),
                                                             (Data.Maybe.isJust to_be_encoded_6._saved_peer_id,
                                                              2)];
                                     Data.Binary.put to_be_encoded_6._peer;
                                     Data.Binary.put to_be_encoded_6._saved_peer_id;
                                     Data.Binary.put to_be_encoded_6._top_msg_id;
                                     Data.Binary.put to_be_encoded_6._filters}}
instance TLFunctionʼ Method'Messages'getSearchCounters
                     (Vector Messages'SearchCounter)
data Method'Messages'requestUrlAuth
    = Method'Messages'requestUrlAuth {_peer :: !(Maybe InputPeer),
                                      _msg_id :: !(Maybe Int'),
                                      _button_id :: !(Maybe Int'),
                                      _url :: !(Maybe String')}
instance Data.Binary.Binary Method'Messages'requestUrlAuth
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {428848198 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                       _peer_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 1);
                                       _msg_id_3 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 1);
                                       _button_id_4 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 1);
                                       _url_5 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 2);
                                       GHC.Base.pure (Method'Messages'requestUrlAuth _peer_2 _msg_id_3 _button_id_4 _url_5)}}};
           put to_be_encoded_6 = do {Data.Binary.Put.putWord32le 428848198;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_6._url,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_6._button_id,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_6._msg_id,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_6._peer,
                                                              1)];
                                     Data.Binary.put to_be_encoded_6._peer;
                                     Data.Binary.put to_be_encoded_6._msg_id;
                                     Data.Binary.put to_be_encoded_6._button_id;
                                     Data.Binary.put to_be_encoded_6._url}}
instance TLFunctionʼ Method'Messages'requestUrlAuth UrlAuthResult
data Method'Messages'acceptUrlAuth
    = Method'Messages'acceptUrlAuth {_write_allowed :: !(Maybe True'),
                                     _peer :: !(Maybe InputPeer),
                                     _msg_id :: !(Maybe Int'),
                                     _button_id :: !(Maybe Int'),
                                     _url :: !(Maybe String')}
instance Data.Binary.Binary Method'Messages'acceptUrlAuth
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2972479781 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _write_allowed_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        _peer_3 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 1);
                                        _msg_id_4 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 1);
                                        _button_id_5 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 1);
                                        _url_6 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 2);
                                        GHC.Base.pure (Method'Messages'acceptUrlAuth _write_allowed_2 _peer_3 _msg_id_4 _button_id_5 _url_6)}}};
           put to_be_encoded_7 = do {Data.Binary.Put.putWord32le 2972479781;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_7._url,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_7._button_id,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_7._msg_id,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_7._peer,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_7._write_allowed,
                                                              0)];
                                     Data.Binary.put to_be_encoded_7._write_allowed;
                                     Data.Binary.put to_be_encoded_7._peer;
                                     Data.Binary.put to_be_encoded_7._msg_id;
                                     Data.Binary.put to_be_encoded_7._button_id;
                                     Data.Binary.put to_be_encoded_7._url}}
instance TLFunctionʼ Method'Messages'acceptUrlAuth UrlAuthResult
data Method'Messages'hidePeerSettingsBar
    = Method'Messages'hidePeerSettingsBar {_peer :: !InputPeer}
instance Data.Binary.Binary Method'Messages'hidePeerSettingsBar
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1336717624 -> do {_peer_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'hidePeerSettingsBar _peer_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 1336717624;
                                     Data.Binary.put to_be_encoded_2._peer}}
instance TLFunctionʼ Method'Messages'hidePeerSettingsBar Bool
data Method'Messages'getScheduledHistory
    = Method'Messages'getScheduledHistory {_peer :: !InputPeer,
                                           _hash :: !Long'}
instance Data.Binary.Binary Method'Messages'getScheduledHistory
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {4111889931 -> do {_peer_1 <- Data.Binary.get;
                                        _hash_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'getScheduledHistory _peer_1 _hash_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 4111889931;
                                     Data.Binary.put to_be_encoded_3._peer;
                                     Data.Binary.put to_be_encoded_3._hash}}
instance TLFunctionʼ Method'Messages'getScheduledHistory
                     Messages'Messages
data Method'Messages'getScheduledMessages
    = Method'Messages'getScheduledMessages {_peer :: !InputPeer,
                                            _id :: !(Vector Int')}
instance Data.Binary.Binary Method'Messages'getScheduledMessages
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3183150180 -> do {_peer_1 <- Data.Binary.get;
                                        _id_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'getScheduledMessages _peer_1 _id_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 3183150180;
                                     Data.Binary.put to_be_encoded_3._peer;
                                     Data.Binary.put to_be_encoded_3._id}}
instance TLFunctionʼ Method'Messages'getScheduledMessages
                     Messages'Messages
data Method'Messages'sendScheduledMessages
    = Method'Messages'sendScheduledMessages {_peer :: !InputPeer,
                                             _id :: !(Vector Int')}
instance Data.Binary.Binary Method'Messages'sendScheduledMessages
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3174597898 -> do {_peer_1 <- Data.Binary.get;
                                        _id_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'sendScheduledMessages _peer_1 _id_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 3174597898;
                                     Data.Binary.put to_be_encoded_3._peer;
                                     Data.Binary.put to_be_encoded_3._id}}
instance TLFunctionʼ Method'Messages'sendScheduledMessages Updates
data Method'Messages'deleteScheduledMessages
    = Method'Messages'deleteScheduledMessages {_peer :: !InputPeer,
                                               _id :: !(Vector Int')}
instance Data.Binary.Binary Method'Messages'deleteScheduledMessages
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1504586518 -> do {_peer_1 <- Data.Binary.get;
                                        _id_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'deleteScheduledMessages _peer_1 _id_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 1504586518;
                                     Data.Binary.put to_be_encoded_3._peer;
                                     Data.Binary.put to_be_encoded_3._id}}
instance TLFunctionʼ Method'Messages'deleteScheduledMessages
                     Updates
data Method'Messages'getPollVotes
    = Method'Messages'getPollVotes {_peer :: !InputPeer,
                                    _id :: !Int',
                                    _option :: !(Maybe Bytes'),
                                    _offset :: !(Maybe String'),
                                    _limit :: !Int'}
instance Data.Binary.Binary Method'Messages'getPollVotes
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3094231054 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _peer_2 <- Data.Binary.get;
                                        _id_3 <- Data.Binary.get;
                                        _option_4 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        _offset_5 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 1);
                                        _limit_6 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'getPollVotes _peer_2 _id_3 _option_4 _offset_5 _limit_6)}}};
           put to_be_encoded_7 = do {Data.Binary.Put.putWord32le 3094231054;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_7._offset,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_7._option,
                                                              0)];
                                     Data.Binary.put to_be_encoded_7._peer;
                                     Data.Binary.put to_be_encoded_7._id;
                                     Data.Binary.put to_be_encoded_7._option;
                                     Data.Binary.put to_be_encoded_7._offset;
                                     Data.Binary.put to_be_encoded_7._limit}}
instance TLFunctionʼ Method'Messages'getPollVotes
                     Messages'VotesList
data Method'Messages'toggleStickerSets
    = Method'Messages'toggleStickerSets {_uninstall :: !(Maybe True'),
                                         _archive :: !(Maybe True'),
                                         _unarchive :: !(Maybe True'),
                                         _stickersets :: !(Vector InputStickerSet)}
instance Data.Binary.Binary Method'Messages'toggleStickerSets
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3037016042 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _uninstall_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        _archive_3 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 1);
                                        _unarchive_4 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 2);
                                        _stickersets_5 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'toggleStickerSets _uninstall_2 _archive_3 _unarchive_4 _stickersets_5)}}};
           put to_be_encoded_6 = do {Data.Binary.Put.putWord32le 3037016042;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_6._unarchive,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_6._archive,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_6._uninstall,
                                                              0)];
                                     Data.Binary.put to_be_encoded_6._uninstall;
                                     Data.Binary.put to_be_encoded_6._archive;
                                     Data.Binary.put to_be_encoded_6._unarchive;
                                     Data.Binary.put to_be_encoded_6._stickersets}}
instance TLFunctionʼ Method'Messages'toggleStickerSets Bool
data Method'Messages'getDialogFilters
    = Method'Messages'getDialogFilters {}
instance Data.Binary.Binary Method'Messages'getDialogFilters
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {4053719405 -> GHC.Base.pure Method'Messages'getDialogFilters}};
           put to_be_encoded_1 = do {Data.Binary.Put.putWord32le 4053719405;
                                     GHC.Base.pure ()}}
instance TLFunctionʼ Method'Messages'getDialogFilters
                     (Vector DialogFilter)
data Method'Messages'getSuggestedDialogFilters
    = Method'Messages'getSuggestedDialogFilters {}
instance Data.Binary.Binary Method'Messages'getSuggestedDialogFilters
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2728186924 -> GHC.Base.pure Method'Messages'getSuggestedDialogFilters}};
           put to_be_encoded_1 = do {Data.Binary.Put.putWord32le 2728186924;
                                     GHC.Base.pure ()}}
instance TLFunctionʼ Method'Messages'getSuggestedDialogFilters
                     (Vector DialogFilterSuggested)
data Method'Messages'updateDialogFilter
    = Method'Messages'updateDialogFilter {_id :: !Int',
                                          _filter :: !(Maybe DialogFilter)}
instance Data.Binary.Binary Method'Messages'updateDialogFilter
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {450142282 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                       _id_2 <- Data.Binary.get;
                                       _filter_3 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                       GHC.Base.pure (Method'Messages'updateDialogFilter _id_2 _filter_3)}}};
           put to_be_encoded_4 = do {Data.Binary.Put.putWord32le 450142282;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_4._filter,
                                                              0)];
                                     Data.Binary.put to_be_encoded_4._id;
                                     Data.Binary.put to_be_encoded_4._filter}}
instance TLFunctionʼ Method'Messages'updateDialogFilter Bool
data Method'Messages'updateDialogFiltersOrder
    = Method'Messages'updateDialogFiltersOrder {_order :: !(Vector Int')}
instance Data.Binary.Binary Method'Messages'updateDialogFiltersOrder
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3311649252 -> do {_order_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'updateDialogFiltersOrder _order_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 3311649252;
                                     Data.Binary.put to_be_encoded_2._order}}
instance TLFunctionʼ Method'Messages'updateDialogFiltersOrder Bool
data Method'Messages'getOldFeaturedStickers
    = Method'Messages'getOldFeaturedStickers {_offset :: !Int',
                                              _limit :: !Int',
                                              _hash :: !Long'}
instance Data.Binary.Binary Method'Messages'getOldFeaturedStickers
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2127598753 -> do {_offset_1 <- Data.Binary.get;
                                        _limit_2 <- Data.Binary.get;
                                        _hash_3 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'getOldFeaturedStickers _offset_1 _limit_2 _hash_3)}}};
           put to_be_encoded_4 = do {Data.Binary.Put.putWord32le 2127598753;
                                     Data.Binary.put to_be_encoded_4._offset;
                                     Data.Binary.put to_be_encoded_4._limit;
                                     Data.Binary.put to_be_encoded_4._hash}}
instance TLFunctionʼ Method'Messages'getOldFeaturedStickers
                     Messages'FeaturedStickers
data Method'Messages'getReplies
    = Method'Messages'getReplies {_peer :: !InputPeer,
                                  _msg_id :: !Int',
                                  _offset_id :: !Int',
                                  _offset_date :: !Int',
                                  _add_offset :: !Int',
                                  _limit :: !Int',
                                  _max_id :: !Int',
                                  _min_id :: !Int',
                                  _hash :: !Long'}
instance Data.Binary.Binary Method'Messages'getReplies
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {584962828 -> do {_peer_1 <- Data.Binary.get;
                                       _msg_id_2 <- Data.Binary.get;
                                       _offset_id_3 <- Data.Binary.get;
                                       _offset_date_4 <- Data.Binary.get;
                                       _add_offset_5 <- Data.Binary.get;
                                       _limit_6 <- Data.Binary.get;
                                       _max_id_7 <- Data.Binary.get;
                                       _min_id_8 <- Data.Binary.get;
                                       _hash_9 <- Data.Binary.get;
                                       GHC.Base.pure (Method'Messages'getReplies _peer_1 _msg_id_2 _offset_id_3 _offset_date_4 _add_offset_5 _limit_6 _max_id_7 _min_id_8 _hash_9)}}};
           put to_be_encoded_10 = do {Data.Binary.Put.putWord32le 584962828;
                                      Data.Binary.put to_be_encoded_10._peer;
                                      Data.Binary.put to_be_encoded_10._msg_id;
                                      Data.Binary.put to_be_encoded_10._offset_id;
                                      Data.Binary.put to_be_encoded_10._offset_date;
                                      Data.Binary.put to_be_encoded_10._add_offset;
                                      Data.Binary.put to_be_encoded_10._limit;
                                      Data.Binary.put to_be_encoded_10._max_id;
                                      Data.Binary.put to_be_encoded_10._min_id;
                                      Data.Binary.put to_be_encoded_10._hash}}
instance TLFunctionʼ Method'Messages'getReplies Messages'Messages
data Method'Messages'getDiscussionMessage
    = Method'Messages'getDiscussionMessage {_peer :: !InputPeer,
                                            _msg_id :: !Int'}
instance Data.Binary.Binary Method'Messages'getDiscussionMessage
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1147761405 -> do {_peer_1 <- Data.Binary.get;
                                        _msg_id_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'getDiscussionMessage _peer_1 _msg_id_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 1147761405;
                                     Data.Binary.put to_be_encoded_3._peer;
                                     Data.Binary.put to_be_encoded_3._msg_id}}
instance TLFunctionʼ Method'Messages'getDiscussionMessage
                     Messages'DiscussionMessage
data Method'Messages'readDiscussion
    = Method'Messages'readDiscussion {_peer :: !InputPeer,
                                      _msg_id :: !Int',
                                      _read_max_id :: !Int'}
instance Data.Binary.Binary Method'Messages'readDiscussion
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {4147227124 -> do {_peer_1 <- Data.Binary.get;
                                        _msg_id_2 <- Data.Binary.get;
                                        _read_max_id_3 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'readDiscussion _peer_1 _msg_id_2 _read_max_id_3)}}};
           put to_be_encoded_4 = do {Data.Binary.Put.putWord32le 4147227124;
                                     Data.Binary.put to_be_encoded_4._peer;
                                     Data.Binary.put to_be_encoded_4._msg_id;
                                     Data.Binary.put to_be_encoded_4._read_max_id}}
instance TLFunctionʼ Method'Messages'readDiscussion Bool
data Method'Messages'unpinAllMessages
    = Method'Messages'unpinAllMessages {_peer :: !InputPeer,
                                        _top_msg_id :: !(Maybe Int')}
instance Data.Binary.Binary Method'Messages'unpinAllMessages
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3995253160 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _peer_2 <- Data.Binary.get;
                                        _top_msg_id_3 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        GHC.Base.pure (Method'Messages'unpinAllMessages _peer_2 _top_msg_id_3)}}};
           put to_be_encoded_4 = do {Data.Binary.Put.putWord32le 3995253160;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_4._top_msg_id,
                                                              0)];
                                     Data.Binary.put to_be_encoded_4._peer;
                                     Data.Binary.put to_be_encoded_4._top_msg_id}}
instance TLFunctionʼ Method'Messages'unpinAllMessages
                     Messages'AffectedHistory
data Method'Messages'deleteChat
    = Method'Messages'deleteChat {_chat_id :: !Long'}
instance Data.Binary.Binary Method'Messages'deleteChat
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1540419152 -> do {_chat_id_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'deleteChat _chat_id_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 1540419152;
                                     Data.Binary.put to_be_encoded_2._chat_id}}
instance TLFunctionʼ Method'Messages'deleteChat Bool
data Method'Messages'deletePhoneCallHistory
    = Method'Messages'deletePhoneCallHistory {_revoke :: !(Maybe True')}
instance Data.Binary.Binary Method'Messages'deletePhoneCallHistory
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {4190888969 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _revoke_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        GHC.Base.pure (Method'Messages'deletePhoneCallHistory _revoke_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 4190888969;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_3._revoke,
                                                              0)];
                                     Data.Binary.put to_be_encoded_3._revoke}}
instance TLFunctionʼ Method'Messages'deletePhoneCallHistory
                     Messages'AffectedFoundMessages
data Method'Messages'checkHistoryImport
    = Method'Messages'checkHistoryImport {_import_head :: !String'}
instance Data.Binary.Binary Method'Messages'checkHistoryImport
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1140726259 -> do {_import_head_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'checkHistoryImport _import_head_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 1140726259;
                                     Data.Binary.put to_be_encoded_2._import_head}}
instance TLFunctionʼ Method'Messages'checkHistoryImport
                     Messages'HistoryImportParsed
data Method'Messages'initHistoryImport
    = Method'Messages'initHistoryImport {_peer :: !InputPeer,
                                         _file :: !InputFile,
                                         _media_count :: !Int'}
instance Data.Binary.Binary Method'Messages'initHistoryImport
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {873008187 -> do {_peer_1 <- Data.Binary.get;
                                       _file_2 <- Data.Binary.get;
                                       _media_count_3 <- Data.Binary.get;
                                       GHC.Base.pure (Method'Messages'initHistoryImport _peer_1 _file_2 _media_count_3)}}};
           put to_be_encoded_4 = do {Data.Binary.Put.putWord32le 873008187;
                                     Data.Binary.put to_be_encoded_4._peer;
                                     Data.Binary.put to_be_encoded_4._file;
                                     Data.Binary.put to_be_encoded_4._media_count}}
instance TLFunctionʼ Method'Messages'initHistoryImport
                     Messages'HistoryImport
data Method'Messages'uploadImportedMedia
    = Method'Messages'uploadImportedMedia {_peer :: !InputPeer,
                                           _import_id :: !Long',
                                           _file_name :: !String',
                                           _media :: !InputMedia}
instance Data.Binary.Binary Method'Messages'uploadImportedMedia
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {713433234 -> do {_peer_1 <- Data.Binary.get;
                                       _import_id_2 <- Data.Binary.get;
                                       _file_name_3 <- Data.Binary.get;
                                       _media_4 <- Data.Binary.get;
                                       GHC.Base.pure (Method'Messages'uploadImportedMedia _peer_1 _import_id_2 _file_name_3 _media_4)}}};
           put to_be_encoded_5 = do {Data.Binary.Put.putWord32le 713433234;
                                     Data.Binary.put to_be_encoded_5._peer;
                                     Data.Binary.put to_be_encoded_5._import_id;
                                     Data.Binary.put to_be_encoded_5._file_name;
                                     Data.Binary.put to_be_encoded_5._media}}
instance TLFunctionʼ Method'Messages'uploadImportedMedia
                     MessageMedia
data Method'Messages'startHistoryImport
    = Method'Messages'startHistoryImport {_peer :: !InputPeer,
                                          _import_id :: !Long'}
instance Data.Binary.Binary Method'Messages'startHistoryImport
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3023958852 -> do {_peer_1 <- Data.Binary.get;
                                        _import_id_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'startHistoryImport _peer_1 _import_id_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 3023958852;
                                     Data.Binary.put to_be_encoded_3._peer;
                                     Data.Binary.put to_be_encoded_3._import_id}}
instance TLFunctionʼ Method'Messages'startHistoryImport Bool
data Method'Messages'getExportedChatInvites
    = Method'Messages'getExportedChatInvites {_revoked :: !(Maybe True'),
                                              _peer :: !InputPeer,
                                              _admin_id :: !InputUser,
                                              _offset_date :: !(Maybe Int'),
                                              _offset_link :: !(Maybe String'),
                                              _limit :: !Int'}
instance Data.Binary.Binary Method'Messages'getExportedChatInvites
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2729812982 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _revoked_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 3);
                                        _peer_3 <- Data.Binary.get;
                                        _admin_id_4 <- Data.Binary.get;
                                        _offset_date_5 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 2);
                                        _offset_link_6 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 2);
                                        _limit_7 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'getExportedChatInvites _revoked_2 _peer_3 _admin_id_4 _offset_date_5 _offset_link_6 _limit_7)}}};
           put to_be_encoded_8 = do {Data.Binary.Put.putWord32le 2729812982;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_8._offset_link,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_8._offset_date,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_8._revoked,
                                                              3)];
                                     Data.Binary.put to_be_encoded_8._revoked;
                                     Data.Binary.put to_be_encoded_8._peer;
                                     Data.Binary.put to_be_encoded_8._admin_id;
                                     Data.Binary.put to_be_encoded_8._offset_date;
                                     Data.Binary.put to_be_encoded_8._offset_link;
                                     Data.Binary.put to_be_encoded_8._limit}}
instance TLFunctionʼ Method'Messages'getExportedChatInvites
                     Messages'ExportedChatInvites
data Method'Messages'getExportedChatInvite
    = Method'Messages'getExportedChatInvite {_peer :: !InputPeer,
                                             _link :: !String'}
instance Data.Binary.Binary Method'Messages'getExportedChatInvite
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1937010524 -> do {_peer_1 <- Data.Binary.get;
                                        _link_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'getExportedChatInvite _peer_1 _link_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 1937010524;
                                     Data.Binary.put to_be_encoded_3._peer;
                                     Data.Binary.put to_be_encoded_3._link}}
instance TLFunctionʼ Method'Messages'getExportedChatInvite
                     Messages'ExportedChatInvite
data Method'Messages'editExportedChatInvite
    = Method'Messages'editExportedChatInvite {_revoked :: !(Maybe True'),
                                              _peer :: !InputPeer,
                                              _link :: !String',
                                              _expire_date :: !(Maybe Int'),
                                              _usage_limit :: !(Maybe Int'),
                                              _request_needed :: !(Maybe Bool),
                                              _title :: !(Maybe String')}
instance Data.Binary.Binary Method'Messages'editExportedChatInvite
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3184144245 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _revoked_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 2);
                                        _peer_3 <- Data.Binary.get;
                                        _link_4 <- Data.Binary.get;
                                        _expire_date_5 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        _usage_limit_6 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 1);
                                        _request_needed_7 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 3);
                                        _title_8 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 4);
                                        GHC.Base.pure (Method'Messages'editExportedChatInvite _revoked_2 _peer_3 _link_4 _expire_date_5 _usage_limit_6 _request_needed_7 _title_8)}}};
           put to_be_encoded_9 = do {Data.Binary.Put.putWord32le 3184144245;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_9._title,
                                                              4),
                                                             (Data.Maybe.isJust to_be_encoded_9._request_needed,
                                                              3),
                                                             (Data.Maybe.isJust to_be_encoded_9._usage_limit,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_9._expire_date,
                                                              0),
                                                             (Data.Maybe.isJust to_be_encoded_9._revoked,
                                                              2)];
                                     Data.Binary.put to_be_encoded_9._revoked;
                                     Data.Binary.put to_be_encoded_9._peer;
                                     Data.Binary.put to_be_encoded_9._link;
                                     Data.Binary.put to_be_encoded_9._expire_date;
                                     Data.Binary.put to_be_encoded_9._usage_limit;
                                     Data.Binary.put to_be_encoded_9._request_needed;
                                     Data.Binary.put to_be_encoded_9._title}}
instance TLFunctionʼ Method'Messages'editExportedChatInvite
                     Messages'ExportedChatInvite
data Method'Messages'deleteRevokedExportedChatInvites
    = Method'Messages'deleteRevokedExportedChatInvites {_peer :: !InputPeer,
                                                        _admin_id :: !InputUser}
instance Data.Binary.Binary Method'Messages'deleteRevokedExportedChatInvites
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1452833749 -> do {_peer_1 <- Data.Binary.get;
                                        _admin_id_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'deleteRevokedExportedChatInvites _peer_1 _admin_id_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 1452833749;
                                     Data.Binary.put to_be_encoded_3._peer;
                                     Data.Binary.put to_be_encoded_3._admin_id}}
instance TLFunctionʼ Method'Messages'deleteRevokedExportedChatInvites
                     Bool
data Method'Messages'deleteExportedChatInvite
    = Method'Messages'deleteExportedChatInvite {_peer :: !InputPeer,
                                                _link :: !String'}
instance Data.Binary.Binary Method'Messages'deleteExportedChatInvite
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3563365419 -> do {_peer_1 <- Data.Binary.get;
                                        _link_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'deleteExportedChatInvite _peer_1 _link_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 3563365419;
                                     Data.Binary.put to_be_encoded_3._peer;
                                     Data.Binary.put to_be_encoded_3._link}}
instance TLFunctionʼ Method'Messages'deleteExportedChatInvite Bool
data Method'Messages'getAdminsWithInvites
    = Method'Messages'getAdminsWithInvites {_peer :: !InputPeer}
instance Data.Binary.Binary Method'Messages'getAdminsWithInvites
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {958457583 -> do {_peer_1 <- Data.Binary.get;
                                       GHC.Base.pure (Method'Messages'getAdminsWithInvites _peer_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 958457583;
                                     Data.Binary.put to_be_encoded_2._peer}}
instance TLFunctionʼ Method'Messages'getAdminsWithInvites
                     Messages'ChatAdminsWithInvites
data Method'Messages'getChatInviteImporters
    = Method'Messages'getChatInviteImporters {_requested :: !(Maybe True'),
                                              _peer :: !InputPeer,
                                              _link :: !(Maybe String'),
                                              _q :: !(Maybe String'),
                                              _offset_date :: !Int',
                                              _offset_user :: !InputUser,
                                              _limit :: !Int'}
instance Data.Binary.Binary Method'Messages'getChatInviteImporters
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3741637966 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _requested_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        _peer_3 <- Data.Binary.get;
                                        _link_4 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 1);
                                        _q_5 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 2);
                                        _offset_date_6 <- Data.Binary.get;
                                        _offset_user_7 <- Data.Binary.get;
                                        _limit_8 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'getChatInviteImporters _requested_2 _peer_3 _link_4 _q_5 _offset_date_6 _offset_user_7 _limit_8)}}};
           put to_be_encoded_9 = do {Data.Binary.Put.putWord32le 3741637966;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_9._q,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_9._link,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_9._requested,
                                                              0)];
                                     Data.Binary.put to_be_encoded_9._requested;
                                     Data.Binary.put to_be_encoded_9._peer;
                                     Data.Binary.put to_be_encoded_9._link;
                                     Data.Binary.put to_be_encoded_9._q;
                                     Data.Binary.put to_be_encoded_9._offset_date;
                                     Data.Binary.put to_be_encoded_9._offset_user;
                                     Data.Binary.put to_be_encoded_9._limit}}
instance TLFunctionʼ Method'Messages'getChatInviteImporters
                     Messages'ChatInviteImporters
data Method'Messages'setHistoryTTL
    = Method'Messages'setHistoryTTL {_peer :: !InputPeer,
                                     _period :: !Int'}
instance Data.Binary.Binary Method'Messages'setHistoryTTL
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3087949796 -> do {_peer_1 <- Data.Binary.get;
                                        _period_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'setHistoryTTL _peer_1 _period_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 3087949796;
                                     Data.Binary.put to_be_encoded_3._peer;
                                     Data.Binary.put to_be_encoded_3._period}}
instance TLFunctionʼ Method'Messages'setHistoryTTL Updates
data Method'Messages'checkHistoryImportPeer
    = Method'Messages'checkHistoryImportPeer {_peer :: !InputPeer}
instance Data.Binary.Binary Method'Messages'checkHistoryImportPeer
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1573261059 -> do {_peer_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'checkHistoryImportPeer _peer_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 1573261059;
                                     Data.Binary.put to_be_encoded_2._peer}}
instance TLFunctionʼ Method'Messages'checkHistoryImportPeer
                     Messages'CheckedHistoryImportPeer
data Method'Messages'setChatTheme
    = Method'Messages'setChatTheme {_peer :: !InputPeer,
                                    _emoticon :: !String'}
instance Data.Binary.Binary Method'Messages'setChatTheme
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3862683967 -> do {_peer_1 <- Data.Binary.get;
                                        _emoticon_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'setChatTheme _peer_1 _emoticon_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 3862683967;
                                     Data.Binary.put to_be_encoded_3._peer;
                                     Data.Binary.put to_be_encoded_3._emoticon}}
instance TLFunctionʼ Method'Messages'setChatTheme Updates
data Method'Messages'getMessageReadParticipants
    = Method'Messages'getMessageReadParticipants {_peer :: !InputPeer,
                                                  _msg_id :: !Int'}
instance Data.Binary.Binary Method'Messages'getMessageReadParticipants
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {834782287 -> do {_peer_1 <- Data.Binary.get;
                                       _msg_id_2 <- Data.Binary.get;
                                       GHC.Base.pure (Method'Messages'getMessageReadParticipants _peer_1 _msg_id_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 834782287;
                                     Data.Binary.put to_be_encoded_3._peer;
                                     Data.Binary.put to_be_encoded_3._msg_id}}
instance TLFunctionʼ Method'Messages'getMessageReadParticipants
                     (Vector ReadParticipantDate)
data Method'Messages'getSearchResultsCalendar
    = Method'Messages'getSearchResultsCalendar {_peer :: !InputPeer,
                                                _saved_peer_id :: !(Maybe InputPeer),
                                                _filter :: !MessagesFilter,
                                                _offset_id :: !Int',
                                                _offset_date :: !Int'}
instance Data.Binary.Binary Method'Messages'getSearchResultsCalendar
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1789130429 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _peer_2 <- Data.Binary.get;
                                        _saved_peer_id_3 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 2);
                                        _filter_4 <- Data.Binary.get;
                                        _offset_id_5 <- Data.Binary.get;
                                        _offset_date_6 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'getSearchResultsCalendar _peer_2 _saved_peer_id_3 _filter_4 _offset_id_5 _offset_date_6)}}};
           put to_be_encoded_7 = do {Data.Binary.Put.putWord32le 1789130429;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_7._saved_peer_id,
                                                              2)];
                                     Data.Binary.put to_be_encoded_7._peer;
                                     Data.Binary.put to_be_encoded_7._saved_peer_id;
                                     Data.Binary.put to_be_encoded_7._filter;
                                     Data.Binary.put to_be_encoded_7._offset_id;
                                     Data.Binary.put to_be_encoded_7._offset_date}}
instance TLFunctionʼ Method'Messages'getSearchResultsCalendar
                     Messages'SearchResultsCalendar
data Method'Messages'getSearchResultsPositions
    = Method'Messages'getSearchResultsPositions {_peer :: !InputPeer,
                                                 _saved_peer_id :: !(Maybe InputPeer),
                                                 _filter :: !MessagesFilter,
                                                 _offset_id :: !Int',
                                                 _limit :: !Int'}
instance Data.Binary.Binary Method'Messages'getSearchResultsPositions
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2625580816 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _peer_2 <- Data.Binary.get;
                                        _saved_peer_id_3 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 2);
                                        _filter_4 <- Data.Binary.get;
                                        _offset_id_5 <- Data.Binary.get;
                                        _limit_6 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'getSearchResultsPositions _peer_2 _saved_peer_id_3 _filter_4 _offset_id_5 _limit_6)}}};
           put to_be_encoded_7 = do {Data.Binary.Put.putWord32le 2625580816;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_7._saved_peer_id,
                                                              2)];
                                     Data.Binary.put to_be_encoded_7._peer;
                                     Data.Binary.put to_be_encoded_7._saved_peer_id;
                                     Data.Binary.put to_be_encoded_7._filter;
                                     Data.Binary.put to_be_encoded_7._offset_id;
                                     Data.Binary.put to_be_encoded_7._limit}}
instance TLFunctionʼ Method'Messages'getSearchResultsPositions
                     Messages'SearchResultsPositions
data Method'Messages'hideChatJoinRequest
    = Method'Messages'hideChatJoinRequest {_approved :: !(Maybe True'),
                                           _peer :: !InputPeer,
                                           _user_id :: !InputUser}
instance Data.Binary.Binary Method'Messages'hideChatJoinRequest
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2145904661 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _approved_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        _peer_3 <- Data.Binary.get;
                                        _user_id_4 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'hideChatJoinRequest _approved_2 _peer_3 _user_id_4)}}};
           put to_be_encoded_5 = do {Data.Binary.Put.putWord32le 2145904661;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_5._approved,
                                                              0)];
                                     Data.Binary.put to_be_encoded_5._approved;
                                     Data.Binary.put to_be_encoded_5._peer;
                                     Data.Binary.put to_be_encoded_5._user_id}}
instance TLFunctionʼ Method'Messages'hideChatJoinRequest Updates
data Method'Messages'hideAllChatJoinRequests
    = Method'Messages'hideAllChatJoinRequests {_approved :: !(Maybe True'),
                                               _peer :: !InputPeer,
                                               _link :: !(Maybe String')}
instance Data.Binary.Binary Method'Messages'hideAllChatJoinRequests
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3766875370 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _approved_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        _peer_3 <- Data.Binary.get;
                                        _link_4 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 1);
                                        GHC.Base.pure (Method'Messages'hideAllChatJoinRequests _approved_2 _peer_3 _link_4)}}};
           put to_be_encoded_5 = do {Data.Binary.Put.putWord32le 3766875370;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_5._link,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_5._approved,
                                                              0)];
                                     Data.Binary.put to_be_encoded_5._approved;
                                     Data.Binary.put to_be_encoded_5._peer;
                                     Data.Binary.put to_be_encoded_5._link}}
instance TLFunctionʼ Method'Messages'hideAllChatJoinRequests
                     Updates
data Method'Messages'toggleNoForwards
    = Method'Messages'toggleNoForwards {_peer :: !InputPeer,
                                        _enabled :: !Bool}
instance Data.Binary.Binary Method'Messages'toggleNoForwards
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2971578274 -> do {_peer_1 <- Data.Binary.get;
                                        _enabled_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'toggleNoForwards _peer_1 _enabled_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 2971578274;
                                     Data.Binary.put to_be_encoded_3._peer;
                                     Data.Binary.put to_be_encoded_3._enabled}}
instance TLFunctionʼ Method'Messages'toggleNoForwards Updates
data Method'Messages'saveDefaultSendAs
    = Method'Messages'saveDefaultSendAs {_peer :: !InputPeer,
                                         _send_as :: !InputPeer}
instance Data.Binary.Binary Method'Messages'saveDefaultSendAs
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3439189910 -> do {_peer_1 <- Data.Binary.get;
                                        _send_as_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'saveDefaultSendAs _peer_1 _send_as_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 3439189910;
                                     Data.Binary.put to_be_encoded_3._peer;
                                     Data.Binary.put to_be_encoded_3._send_as}}
instance TLFunctionʼ Method'Messages'saveDefaultSendAs Bool
data Method'Messages'sendReaction
    = Method'Messages'sendReaction {_big :: !(Maybe True'),
                                    _add_to_recent :: !(Maybe True'),
                                    _peer :: !InputPeer,
                                    _msg_id :: !Int',
                                    _reaction :: !(Maybe (Vector Reaction))}
instance Data.Binary.Binary Method'Messages'sendReaction
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3540875476 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _big_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 1);
                                        _add_to_recent_3 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 2);
                                        _peer_4 <- Data.Binary.get;
                                        _msg_id_5 <- Data.Binary.get;
                                        _reaction_6 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        GHC.Base.pure (Method'Messages'sendReaction _big_2 _add_to_recent_3 _peer_4 _msg_id_5 _reaction_6)}}};
           put to_be_encoded_7 = do {Data.Binary.Put.putWord32le 3540875476;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_7._reaction,
                                                              0),
                                                             (Data.Maybe.isJust to_be_encoded_7._add_to_recent,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_7._big,
                                                              1)];
                                     Data.Binary.put to_be_encoded_7._big;
                                     Data.Binary.put to_be_encoded_7._add_to_recent;
                                     Data.Binary.put to_be_encoded_7._peer;
                                     Data.Binary.put to_be_encoded_7._msg_id;
                                     Data.Binary.put to_be_encoded_7._reaction}}
instance TLFunctionʼ Method'Messages'sendReaction Updates
data Method'Messages'getMessagesReactions
    = Method'Messages'getMessagesReactions {_peer :: !InputPeer,
                                            _id :: !(Vector Int')}
instance Data.Binary.Binary Method'Messages'getMessagesReactions
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2344259814 -> do {_peer_1 <- Data.Binary.get;
                                        _id_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'getMessagesReactions _peer_1 _id_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 2344259814;
                                     Data.Binary.put to_be_encoded_3._peer;
                                     Data.Binary.put to_be_encoded_3._id}}
instance TLFunctionʼ Method'Messages'getMessagesReactions Updates
data Method'Messages'getMessageReactionsList
    = Method'Messages'getMessageReactionsList {_peer :: !InputPeer,
                                               _id :: !Int',
                                               _reaction :: !(Maybe Reaction),
                                               _offset :: !(Maybe String'),
                                               _limit :: !Int'}
instance Data.Binary.Binary Method'Messages'getMessageReactionsList
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1176190792 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _peer_2 <- Data.Binary.get;
                                        _id_3 <- Data.Binary.get;
                                        _reaction_4 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        _offset_5 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 1);
                                        _limit_6 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'getMessageReactionsList _peer_2 _id_3 _reaction_4 _offset_5 _limit_6)}}};
           put to_be_encoded_7 = do {Data.Binary.Put.putWord32le 1176190792;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_7._offset,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_7._reaction,
                                                              0)];
                                     Data.Binary.put to_be_encoded_7._peer;
                                     Data.Binary.put to_be_encoded_7._id;
                                     Data.Binary.put to_be_encoded_7._reaction;
                                     Data.Binary.put to_be_encoded_7._offset;
                                     Data.Binary.put to_be_encoded_7._limit}}
instance TLFunctionʼ Method'Messages'getMessageReactionsList
                     Messages'MessageReactionsList
data Method'Messages'setChatAvailableReactions
    = Method'Messages'setChatAvailableReactions {_peer :: !InputPeer,
                                                 _available_reactions :: !ChatReactions}
instance Data.Binary.Binary Method'Messages'setChatAvailableReactions
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {4273039217 -> do {_peer_1 <- Data.Binary.get;
                                        _available_reactions_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'setChatAvailableReactions _peer_1 _available_reactions_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 4273039217;
                                     Data.Binary.put to_be_encoded_3._peer;
                                     Data.Binary.put to_be_encoded_3._available_reactions}}
instance TLFunctionʼ Method'Messages'setChatAvailableReactions
                     Updates
data Method'Messages'getAvailableReactions
    = Method'Messages'getAvailableReactions {_hash :: !Int'}
instance Data.Binary.Binary Method'Messages'getAvailableReactions
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {417243308 -> do {_hash_1 <- Data.Binary.get;
                                       GHC.Base.pure (Method'Messages'getAvailableReactions _hash_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 417243308;
                                     Data.Binary.put to_be_encoded_2._hash}}
instance TLFunctionʼ Method'Messages'getAvailableReactions
                     Messages'AvailableReactions
data Method'Messages'setDefaultReaction
    = Method'Messages'setDefaultReaction {_reaction :: !Reaction}
instance Data.Binary.Binary Method'Messages'setDefaultReaction
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1330094102 -> do {_reaction_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'setDefaultReaction _reaction_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 1330094102;
                                     Data.Binary.put to_be_encoded_2._reaction}}
instance TLFunctionʼ Method'Messages'setDefaultReaction Bool
data Method'Messages'translateText
    = Method'Messages'translateText {_peer :: !(Maybe InputPeer),
                                     _id :: !(Maybe (Vector Int')),
                                     _text :: !(Maybe (Vector TextWithEntities)),
                                     _to_lang :: !String'}
instance Data.Binary.Binary Method'Messages'translateText
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1662529584 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _peer_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        _id_3 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        _text_4 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 1);
                                        _to_lang_5 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'translateText _peer_2 _id_3 _text_4 _to_lang_5)}}};
           put to_be_encoded_6 = do {Data.Binary.Put.putWord32le 1662529584;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_6._text,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_6._id,
                                                              0),
                                                             (Data.Maybe.isJust to_be_encoded_6._peer,
                                                              0)];
                                     Data.Binary.put to_be_encoded_6._peer;
                                     Data.Binary.put to_be_encoded_6._id;
                                     Data.Binary.put to_be_encoded_6._text;
                                     Data.Binary.put to_be_encoded_6._to_lang}}
instance TLFunctionʼ Method'Messages'translateText
                     Messages'TranslatedText
data Method'Messages'getUnreadReactions
    = Method'Messages'getUnreadReactions {_peer :: !InputPeer,
                                          _top_msg_id :: !(Maybe Int'),
                                          _offset_id :: !Int',
                                          _add_offset :: !Int',
                                          _limit :: !Int',
                                          _max_id :: !Int',
                                          _min_id :: !Int'}
instance Data.Binary.Binary Method'Messages'getUnreadReactions
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {841173339 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                       _peer_2 <- Data.Binary.get;
                                       _top_msg_id_3 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                       _offset_id_4 <- Data.Binary.get;
                                       _add_offset_5 <- Data.Binary.get;
                                       _limit_6 <- Data.Binary.get;
                                       _max_id_7 <- Data.Binary.get;
                                       _min_id_8 <- Data.Binary.get;
                                       GHC.Base.pure (Method'Messages'getUnreadReactions _peer_2 _top_msg_id_3 _offset_id_4 _add_offset_5 _limit_6 _max_id_7 _min_id_8)}}};
           put to_be_encoded_9 = do {Data.Binary.Put.putWord32le 841173339;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_9._top_msg_id,
                                                              0)];
                                     Data.Binary.put to_be_encoded_9._peer;
                                     Data.Binary.put to_be_encoded_9._top_msg_id;
                                     Data.Binary.put to_be_encoded_9._offset_id;
                                     Data.Binary.put to_be_encoded_9._add_offset;
                                     Data.Binary.put to_be_encoded_9._limit;
                                     Data.Binary.put to_be_encoded_9._max_id;
                                     Data.Binary.put to_be_encoded_9._min_id}}
instance TLFunctionʼ Method'Messages'getUnreadReactions
                     Messages'Messages
data Method'Messages'readReactions
    = Method'Messages'readReactions {_peer :: !InputPeer,
                                     _top_msg_id :: !(Maybe Int')}
instance Data.Binary.Binary Method'Messages'readReactions
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1420459918 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _peer_2 <- Data.Binary.get;
                                        _top_msg_id_3 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        GHC.Base.pure (Method'Messages'readReactions _peer_2 _top_msg_id_3)}}};
           put to_be_encoded_4 = do {Data.Binary.Put.putWord32le 1420459918;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_4._top_msg_id,
                                                              0)];
                                     Data.Binary.put to_be_encoded_4._peer;
                                     Data.Binary.put to_be_encoded_4._top_msg_id}}
instance TLFunctionʼ Method'Messages'readReactions
                     Messages'AffectedHistory
data Method'Messages'searchSentMedia
    = Method'Messages'searchSentMedia {_q :: !String',
                                       _filter :: !MessagesFilter,
                                       _limit :: !Int'}
instance Data.Binary.Binary Method'Messages'searchSentMedia
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {276705696 -> do {_q_1 <- Data.Binary.get;
                                       _filter_2 <- Data.Binary.get;
                                       _limit_3 <- Data.Binary.get;
                                       GHC.Base.pure (Method'Messages'searchSentMedia _q_1 _filter_2 _limit_3)}}};
           put to_be_encoded_4 = do {Data.Binary.Put.putWord32le 276705696;
                                     Data.Binary.put to_be_encoded_4._q;
                                     Data.Binary.put to_be_encoded_4._filter;
                                     Data.Binary.put to_be_encoded_4._limit}}
instance TLFunctionʼ Method'Messages'searchSentMedia
                     Messages'Messages
data Method'Messages'getAttachMenuBots
    = Method'Messages'getAttachMenuBots {_hash :: !Long'}
instance Data.Binary.Binary Method'Messages'getAttachMenuBots
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {385663691 -> do {_hash_1 <- Data.Binary.get;
                                       GHC.Base.pure (Method'Messages'getAttachMenuBots _hash_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 385663691;
                                     Data.Binary.put to_be_encoded_2._hash}}
instance TLFunctionʼ Method'Messages'getAttachMenuBots
                     AttachMenuBots
data Method'Messages'getAttachMenuBot
    = Method'Messages'getAttachMenuBot {_bot :: !InputUser}
instance Data.Binary.Binary Method'Messages'getAttachMenuBot
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1998676370 -> do {_bot_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'getAttachMenuBot _bot_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 1998676370;
                                     Data.Binary.put to_be_encoded_2._bot}}
instance TLFunctionʼ Method'Messages'getAttachMenuBot
                     AttachMenuBotsBot
data Method'Messages'toggleBotInAttachMenu
    = Method'Messages'toggleBotInAttachMenu {_write_allowed :: !(Maybe True'),
                                             _bot :: !InputUser,
                                             _enabled :: !Bool}
instance Data.Binary.Binary Method'Messages'toggleBotInAttachMenu
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1777704297 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _write_allowed_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        _bot_3 <- Data.Binary.get;
                                        _enabled_4 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'toggleBotInAttachMenu _write_allowed_2 _bot_3 _enabled_4)}}};
           put to_be_encoded_5 = do {Data.Binary.Put.putWord32le 1777704297;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_5._write_allowed,
                                                              0)];
                                     Data.Binary.put to_be_encoded_5._write_allowed;
                                     Data.Binary.put to_be_encoded_5._bot;
                                     Data.Binary.put to_be_encoded_5._enabled}}
instance TLFunctionʼ Method'Messages'toggleBotInAttachMenu Bool
data Method'Messages'requestWebView
    = Method'Messages'requestWebView {_from_bot_menu :: !(Maybe True'),
                                      _silent :: !(Maybe True'),
                                      _peer :: !InputPeer,
                                      _bot :: !InputUser,
                                      _url :: !(Maybe String'),
                                      _start_param :: !(Maybe String'),
                                      _theme_params :: !(Maybe DataJSON),
                                      _platform :: !String',
                                      _reply_to :: !(Maybe InputReplyTo),
                                      _send_as :: !(Maybe InputPeer)}
instance Data.Binary.Binary Method'Messages'requestWebView
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {647873217 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                       _from_bot_menu_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 4);
                                       _silent_3 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 5);
                                       _peer_4 <- Data.Binary.get;
                                       _bot_5 <- Data.Binary.get;
                                       _url_6 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 1);
                                       _start_param_7 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 3);
                                       _theme_params_8 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 2);
                                       _platform_9 <- Data.Binary.get;
                                       _reply_to_10 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                       _send_as_11 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 13);
                                       GHC.Base.pure (Method'Messages'requestWebView _from_bot_menu_2 _silent_3 _peer_4 _bot_5 _url_6 _start_param_7 _theme_params_8 _platform_9 _reply_to_10 _send_as_11)}}};
           put to_be_encoded_12 = do {Data.Binary.Put.putWord32le 647873217;
                                      Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_12._send_as,
                                                               13),
                                                              (Data.Maybe.isJust to_be_encoded_12._reply_to,
                                                               0),
                                                              (Data.Maybe.isJust to_be_encoded_12._theme_params,
                                                               2),
                                                              (Data.Maybe.isJust to_be_encoded_12._start_param,
                                                               3),
                                                              (Data.Maybe.isJust to_be_encoded_12._url,
                                                               1),
                                                              (Data.Maybe.isJust to_be_encoded_12._silent,
                                                               5),
                                                              (Data.Maybe.isJust to_be_encoded_12._from_bot_menu,
                                                               4)];
                                      Data.Binary.put to_be_encoded_12._from_bot_menu;
                                      Data.Binary.put to_be_encoded_12._silent;
                                      Data.Binary.put to_be_encoded_12._peer;
                                      Data.Binary.put to_be_encoded_12._bot;
                                      Data.Binary.put to_be_encoded_12._url;
                                      Data.Binary.put to_be_encoded_12._start_param;
                                      Data.Binary.put to_be_encoded_12._theme_params;
                                      Data.Binary.put to_be_encoded_12._platform;
                                      Data.Binary.put to_be_encoded_12._reply_to;
                                      Data.Binary.put to_be_encoded_12._send_as}}
instance TLFunctionʼ Method'Messages'requestWebView WebViewResult
data Method'Messages'prolongWebView
    = Method'Messages'prolongWebView {_silent :: !(Maybe True'),
                                      _peer :: !InputPeer,
                                      _bot :: !InputUser,
                                      _query_id :: !Long',
                                      _reply_to :: !(Maybe InputReplyTo),
                                      _send_as :: !(Maybe InputPeer)}
instance Data.Binary.Binary Method'Messages'prolongWebView
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2966952579 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _silent_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 5);
                                        _peer_3 <- Data.Binary.get;
                                        _bot_4 <- Data.Binary.get;
                                        _query_id_5 <- Data.Binary.get;
                                        _reply_to_6 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        _send_as_7 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 13);
                                        GHC.Base.pure (Method'Messages'prolongWebView _silent_2 _peer_3 _bot_4 _query_id_5 _reply_to_6 _send_as_7)}}};
           put to_be_encoded_8 = do {Data.Binary.Put.putWord32le 2966952579;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_8._send_as,
                                                              13),
                                                             (Data.Maybe.isJust to_be_encoded_8._reply_to,
                                                              0),
                                                             (Data.Maybe.isJust to_be_encoded_8._silent,
                                                              5)];
                                     Data.Binary.put to_be_encoded_8._silent;
                                     Data.Binary.put to_be_encoded_8._peer;
                                     Data.Binary.put to_be_encoded_8._bot;
                                     Data.Binary.put to_be_encoded_8._query_id;
                                     Data.Binary.put to_be_encoded_8._reply_to;
                                     Data.Binary.put to_be_encoded_8._send_as}}
instance TLFunctionʼ Method'Messages'prolongWebView Bool
data Method'Messages'requestSimpleWebView
    = Method'Messages'requestSimpleWebView {_from_switch_webview :: !(Maybe True'),
                                            _from_side_menu :: !(Maybe True'),
                                            _bot :: !InputUser,
                                            _url :: !(Maybe String'),
                                            _start_param :: !(Maybe String'),
                                            _theme_params :: !(Maybe DataJSON),
                                            _platform :: !String'}
instance Data.Binary.Binary Method'Messages'requestSimpleWebView
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {440815626 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                       _from_switch_webview_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 1);
                                       _from_side_menu_3 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 2);
                                       _bot_4 <- Data.Binary.get;
                                       _url_5 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 3);
                                       _start_param_6 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 4);
                                       _theme_params_7 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                       _platform_8 <- Data.Binary.get;
                                       GHC.Base.pure (Method'Messages'requestSimpleWebView _from_switch_webview_2 _from_side_menu_3 _bot_4 _url_5 _start_param_6 _theme_params_7 _platform_8)}}};
           put to_be_encoded_9 = do {Data.Binary.Put.putWord32le 440815626;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_9._theme_params,
                                                              0),
                                                             (Data.Maybe.isJust to_be_encoded_9._start_param,
                                                              4),
                                                             (Data.Maybe.isJust to_be_encoded_9._url,
                                                              3),
                                                             (Data.Maybe.isJust to_be_encoded_9._from_side_menu,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_9._from_switch_webview,
                                                              1)];
                                     Data.Binary.put to_be_encoded_9._from_switch_webview;
                                     Data.Binary.put to_be_encoded_9._from_side_menu;
                                     Data.Binary.put to_be_encoded_9._bot;
                                     Data.Binary.put to_be_encoded_9._url;
                                     Data.Binary.put to_be_encoded_9._start_param;
                                     Data.Binary.put to_be_encoded_9._theme_params;
                                     Data.Binary.put to_be_encoded_9._platform}}
instance TLFunctionʼ Method'Messages'requestSimpleWebView
                     SimpleWebViewResult
data Method'Messages'sendWebViewResultMessage
    = Method'Messages'sendWebViewResultMessage {_bot_query_id :: !String',
                                                _result :: !InputBotInlineResult}
instance Data.Binary.Binary Method'Messages'sendWebViewResultMessage
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {172168437 -> do {_bot_query_id_1 <- Data.Binary.get;
                                       _result_2 <- Data.Binary.get;
                                       GHC.Base.pure (Method'Messages'sendWebViewResultMessage _bot_query_id_1 _result_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 172168437;
                                     Data.Binary.put to_be_encoded_3._bot_query_id;
                                     Data.Binary.put to_be_encoded_3._result}}
instance TLFunctionʼ Method'Messages'sendWebViewResultMessage
                     WebViewMessageSent
data Method'Messages'sendWebViewData
    = Method'Messages'sendWebViewData {_bot :: !InputUser,
                                       _random_id :: !Long',
                                       _button_text :: !String',
                                       _data :: !String'}
instance Data.Binary.Binary Method'Messages'sendWebViewData
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3691135688 -> do {_bot_1 <- Data.Binary.get;
                                        _random_id_2 <- Data.Binary.get;
                                        _button_text_3 <- Data.Binary.get;
                                        _data_4 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'sendWebViewData _bot_1 _random_id_2 _button_text_3 _data_4)}}};
           put to_be_encoded_5 = do {Data.Binary.Put.putWord32le 3691135688;
                                     Data.Binary.put to_be_encoded_5._bot;
                                     Data.Binary.put to_be_encoded_5._random_id;
                                     Data.Binary.put to_be_encoded_5._button_text;
                                     Data.Binary.put to_be_encoded_5._data}}
instance TLFunctionʼ Method'Messages'sendWebViewData Updates
data Method'Messages'transcribeAudio
    = Method'Messages'transcribeAudio {_peer :: !InputPeer,
                                       _msg_id :: !Int'}
instance Data.Binary.Binary Method'Messages'transcribeAudio
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {647928393 -> do {_peer_1 <- Data.Binary.get;
                                       _msg_id_2 <- Data.Binary.get;
                                       GHC.Base.pure (Method'Messages'transcribeAudio _peer_1 _msg_id_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 647928393;
                                     Data.Binary.put to_be_encoded_3._peer;
                                     Data.Binary.put to_be_encoded_3._msg_id}}
instance TLFunctionʼ Method'Messages'transcribeAudio
                     Messages'TranscribedAudio
data Method'Messages'rateTranscribedAudio
    = Method'Messages'rateTranscribedAudio {_peer :: !InputPeer,
                                            _msg_id :: !Int',
                                            _transcription_id :: !Long',
                                            _good :: !Bool}
instance Data.Binary.Binary Method'Messages'rateTranscribedAudio
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2132608815 -> do {_peer_1 <- Data.Binary.get;
                                        _msg_id_2 <- Data.Binary.get;
                                        _transcription_id_3 <- Data.Binary.get;
                                        _good_4 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'rateTranscribedAudio _peer_1 _msg_id_2 _transcription_id_3 _good_4)}}};
           put to_be_encoded_5 = do {Data.Binary.Put.putWord32le 2132608815;
                                     Data.Binary.put to_be_encoded_5._peer;
                                     Data.Binary.put to_be_encoded_5._msg_id;
                                     Data.Binary.put to_be_encoded_5._transcription_id;
                                     Data.Binary.put to_be_encoded_5._good}}
instance TLFunctionʼ Method'Messages'rateTranscribedAudio Bool
data Method'Messages'getCustomEmojiDocuments
    = Method'Messages'getCustomEmojiDocuments {_document_id :: !(Vector Long')}
instance Data.Binary.Binary Method'Messages'getCustomEmojiDocuments
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3651866452 -> do {_document_id_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'getCustomEmojiDocuments _document_id_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 3651866452;
                                     Data.Binary.put to_be_encoded_2._document_id}}
instance TLFunctionʼ Method'Messages'getCustomEmojiDocuments
                     (Vector Document)
data Method'Messages'getEmojiStickers
    = Method'Messages'getEmojiStickers {_hash :: !Long'}
instance Data.Binary.Binary Method'Messages'getEmojiStickers
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {4227637647 -> do {_hash_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'getEmojiStickers _hash_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 4227637647;
                                     Data.Binary.put to_be_encoded_2._hash}}
instance TLFunctionʼ Method'Messages'getEmojiStickers
                     Messages'AllStickers
data Method'Messages'getFeaturedEmojiStickers
    = Method'Messages'getFeaturedEmojiStickers {_hash :: !Long'}
instance Data.Binary.Binary Method'Messages'getFeaturedEmojiStickers
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {248473398 -> do {_hash_1 <- Data.Binary.get;
                                       GHC.Base.pure (Method'Messages'getFeaturedEmojiStickers _hash_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 248473398;
                                     Data.Binary.put to_be_encoded_2._hash}}
instance TLFunctionʼ Method'Messages'getFeaturedEmojiStickers
                     Messages'FeaturedStickers
data Method'Messages'reportReaction
    = Method'Messages'reportReaction {_peer :: !InputPeer,
                                      _id :: !Int',
                                      _reaction_peer :: !InputPeer}
instance Data.Binary.Binary Method'Messages'reportReaction
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1063567478 -> do {_peer_1 <- Data.Binary.get;
                                        _id_2 <- Data.Binary.get;
                                        _reaction_peer_3 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'reportReaction _peer_1 _id_2 _reaction_peer_3)}}};
           put to_be_encoded_4 = do {Data.Binary.Put.putWord32le 1063567478;
                                     Data.Binary.put to_be_encoded_4._peer;
                                     Data.Binary.put to_be_encoded_4._id;
                                     Data.Binary.put to_be_encoded_4._reaction_peer}}
instance TLFunctionʼ Method'Messages'reportReaction Bool
data Method'Messages'getTopReactions
    = Method'Messages'getTopReactions {_limit :: !Int',
                                       _hash :: !Long'}
instance Data.Binary.Binary Method'Messages'getTopReactions
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3145803194 -> do {_limit_1 <- Data.Binary.get;
                                        _hash_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'getTopReactions _limit_1 _hash_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 3145803194;
                                     Data.Binary.put to_be_encoded_3._limit;
                                     Data.Binary.put to_be_encoded_3._hash}}
instance TLFunctionʼ Method'Messages'getTopReactions
                     Messages'Reactions
data Method'Messages'getRecentReactions
    = Method'Messages'getRecentReactions {_limit :: !Int',
                                          _hash :: !Long'}
instance Data.Binary.Binary Method'Messages'getRecentReactions
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {960896434 -> do {_limit_1 <- Data.Binary.get;
                                       _hash_2 <- Data.Binary.get;
                                       GHC.Base.pure (Method'Messages'getRecentReactions _limit_1 _hash_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 960896434;
                                     Data.Binary.put to_be_encoded_3._limit;
                                     Data.Binary.put to_be_encoded_3._hash}}
instance TLFunctionʼ Method'Messages'getRecentReactions
                     Messages'Reactions
data Method'Messages'clearRecentReactions
    = Method'Messages'clearRecentReactions {}
instance Data.Binary.Binary Method'Messages'clearRecentReactions
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2650730420 -> GHC.Base.pure Method'Messages'clearRecentReactions}};
           put to_be_encoded_1 = do {Data.Binary.Put.putWord32le 2650730420;
                                     GHC.Base.pure ()}}
instance TLFunctionʼ Method'Messages'clearRecentReactions Bool
data Method'Messages'getExtendedMedia
    = Method'Messages'getExtendedMedia {_peer :: !InputPeer,
                                        _id :: !(Vector Int')}
instance Data.Binary.Binary Method'Messages'getExtendedMedia
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2230847508 -> do {_peer_1 <- Data.Binary.get;
                                        _id_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'getExtendedMedia _peer_1 _id_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 2230847508;
                                     Data.Binary.put to_be_encoded_3._peer;
                                     Data.Binary.put to_be_encoded_3._id}}
instance TLFunctionʼ Method'Messages'getExtendedMedia Updates
data Method'Messages'setDefaultHistoryTTL
    = Method'Messages'setDefaultHistoryTTL {_period :: !Int'}
instance Data.Binary.Binary Method'Messages'setDefaultHistoryTTL
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2662667333 -> do {_period_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'setDefaultHistoryTTL _period_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 2662667333;
                                     Data.Binary.put to_be_encoded_2._period}}
instance TLFunctionʼ Method'Messages'setDefaultHistoryTTL Bool
data Method'Messages'getDefaultHistoryTTL
    = Method'Messages'getDefaultHistoryTTL {}
instance Data.Binary.Binary Method'Messages'getDefaultHistoryTTL
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1703637384 -> GHC.Base.pure Method'Messages'getDefaultHistoryTTL}};
           put to_be_encoded_1 = do {Data.Binary.Put.putWord32le 1703637384;
                                     GHC.Base.pure ()}}
instance TLFunctionʼ Method'Messages'getDefaultHistoryTTL
                     DefaultHistoryTTL
data Method'Messages'sendBotRequestedPeer
    = Method'Messages'sendBotRequestedPeer {_peer :: !InputPeer,
                                            _msg_id :: !Int',
                                            _button_id :: !Int',
                                            _requested_peers :: !(Vector InputPeer)}
instance Data.Binary.Binary Method'Messages'sendBotRequestedPeer
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2444415072 -> do {_peer_1 <- Data.Binary.get;
                                        _msg_id_2 <- Data.Binary.get;
                                        _button_id_3 <- Data.Binary.get;
                                        _requested_peers_4 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'sendBotRequestedPeer _peer_1 _msg_id_2 _button_id_3 _requested_peers_4)}}};
           put to_be_encoded_5 = do {Data.Binary.Put.putWord32le 2444415072;
                                     Data.Binary.put to_be_encoded_5._peer;
                                     Data.Binary.put to_be_encoded_5._msg_id;
                                     Data.Binary.put to_be_encoded_5._button_id;
                                     Data.Binary.put to_be_encoded_5._requested_peers}}
instance TLFunctionʼ Method'Messages'sendBotRequestedPeer Updates
data Method'Messages'getEmojiGroups
    = Method'Messages'getEmojiGroups {_hash :: !Int'}
instance Data.Binary.Binary Method'Messages'getEmojiGroups
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1955122779 -> do {_hash_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'getEmojiGroups _hash_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 1955122779;
                                     Data.Binary.put to_be_encoded_2._hash}}
instance TLFunctionʼ Method'Messages'getEmojiGroups
                     Messages'EmojiGroups
data Method'Messages'getEmojiStatusGroups
    = Method'Messages'getEmojiStatusGroups {_hash :: !Int'}
instance Data.Binary.Binary Method'Messages'getEmojiStatusGroups
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {785209037 -> do {_hash_1 <- Data.Binary.get;
                                       GHC.Base.pure (Method'Messages'getEmojiStatusGroups _hash_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 785209037;
                                     Data.Binary.put to_be_encoded_2._hash}}
instance TLFunctionʼ Method'Messages'getEmojiStatusGroups
                     Messages'EmojiGroups
data Method'Messages'getEmojiProfilePhotoGroups
    = Method'Messages'getEmojiProfilePhotoGroups {_hash :: !Int'}
instance Data.Binary.Binary Method'Messages'getEmojiProfilePhotoGroups
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {564480243 -> do {_hash_1 <- Data.Binary.get;
                                       GHC.Base.pure (Method'Messages'getEmojiProfilePhotoGroups _hash_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 564480243;
                                     Data.Binary.put to_be_encoded_2._hash}}
instance TLFunctionʼ Method'Messages'getEmojiProfilePhotoGroups
                     Messages'EmojiGroups
data Method'Messages'searchCustomEmoji
    = Method'Messages'searchCustomEmoji {_emoticon :: !String',
                                         _hash :: !Long'}
instance Data.Binary.Binary Method'Messages'searchCustomEmoji
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {739360983 -> do {_emoticon_1 <- Data.Binary.get;
                                       _hash_2 <- Data.Binary.get;
                                       GHC.Base.pure (Method'Messages'searchCustomEmoji _emoticon_1 _hash_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 739360983;
                                     Data.Binary.put to_be_encoded_3._emoticon;
                                     Data.Binary.put to_be_encoded_3._hash}}
instance TLFunctionʼ Method'Messages'searchCustomEmoji EmojiList
data Method'Messages'togglePeerTranslations
    = Method'Messages'togglePeerTranslations {_disabled :: !(Maybe True'),
                                              _peer :: !InputPeer}
instance Data.Binary.Binary Method'Messages'togglePeerTranslations
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3833378169 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _disabled_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        _peer_3 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'togglePeerTranslations _disabled_2 _peer_3)}}};
           put to_be_encoded_4 = do {Data.Binary.Put.putWord32le 3833378169;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_4._disabled,
                                                              0)];
                                     Data.Binary.put to_be_encoded_4._disabled;
                                     Data.Binary.put to_be_encoded_4._peer}}
instance TLFunctionʼ Method'Messages'togglePeerTranslations Bool
data Method'Messages'getBotApp
    = Method'Messages'getBotApp {_app :: !InputBotApp, _hash :: !Long'}
instance Data.Binary.Binary Method'Messages'getBotApp
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {889046467 -> do {_app_1 <- Data.Binary.get;
                                       _hash_2 <- Data.Binary.get;
                                       GHC.Base.pure (Method'Messages'getBotApp _app_1 _hash_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 889046467;
                                     Data.Binary.put to_be_encoded_3._app;
                                     Data.Binary.put to_be_encoded_3._hash}}
instance TLFunctionʼ Method'Messages'getBotApp Messages'BotApp
data Method'Messages'requestAppWebView
    = Method'Messages'requestAppWebView {_write_allowed :: !(Maybe True'),
                                         _peer :: !InputPeer,
                                         _app :: !InputBotApp,
                                         _start_param :: !(Maybe String'),
                                         _theme_params :: !(Maybe DataJSON),
                                         _platform :: !String'}
instance Data.Binary.Binary Method'Messages'requestAppWebView
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2354723644 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _write_allowed_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        _peer_3 <- Data.Binary.get;
                                        _app_4 <- Data.Binary.get;
                                        _start_param_5 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 1);
                                        _theme_params_6 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 2);
                                        _platform_7 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'requestAppWebView _write_allowed_2 _peer_3 _app_4 _start_param_5 _theme_params_6 _platform_7)}}};
           put to_be_encoded_8 = do {Data.Binary.Put.putWord32le 2354723644;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_8._theme_params,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_8._start_param,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_8._write_allowed,
                                                              0)];
                                     Data.Binary.put to_be_encoded_8._write_allowed;
                                     Data.Binary.put to_be_encoded_8._peer;
                                     Data.Binary.put to_be_encoded_8._app;
                                     Data.Binary.put to_be_encoded_8._start_param;
                                     Data.Binary.put to_be_encoded_8._theme_params;
                                     Data.Binary.put to_be_encoded_8._platform}}
instance TLFunctionʼ Method'Messages'requestAppWebView
                     AppWebViewResult
data Method'Messages'setChatWallPaper
    = Method'Messages'setChatWallPaper {_for_both :: !(Maybe True'),
                                        _revert :: !(Maybe True'),
                                        _peer :: !InputPeer,
                                        _wallpaper :: !(Maybe InputWallPaper),
                                        _settings :: !(Maybe WallPaperSettings),
                                        _id :: !(Maybe Int')}
instance Data.Binary.Binary Method'Messages'setChatWallPaper
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2415577825 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _for_both_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 3);
                                        _revert_3 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 4);
                                        _peer_4 <- Data.Binary.get;
                                        _wallpaper_5 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        _settings_6 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 2);
                                        _id_7 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 1);
                                        GHC.Base.pure (Method'Messages'setChatWallPaper _for_both_2 _revert_3 _peer_4 _wallpaper_5 _settings_6 _id_7)}}};
           put to_be_encoded_8 = do {Data.Binary.Put.putWord32le 2415577825;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_8._id,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_8._settings,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_8._wallpaper,
                                                              0),
                                                             (Data.Maybe.isJust to_be_encoded_8._revert,
                                                              4),
                                                             (Data.Maybe.isJust to_be_encoded_8._for_both,
                                                              3)];
                                     Data.Binary.put to_be_encoded_8._for_both;
                                     Data.Binary.put to_be_encoded_8._revert;
                                     Data.Binary.put to_be_encoded_8._peer;
                                     Data.Binary.put to_be_encoded_8._wallpaper;
                                     Data.Binary.put to_be_encoded_8._settings;
                                     Data.Binary.put to_be_encoded_8._id}}
instance TLFunctionʼ Method'Messages'setChatWallPaper Updates
data Method'Messages'searchEmojiStickerSets
    = Method'Messages'searchEmojiStickerSets {_exclude_featured :: !(Maybe True'),
                                              _q :: !String',
                                              _hash :: !Long'}
instance Data.Binary.Binary Method'Messages'searchEmojiStickerSets
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2461288780 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _exclude_featured_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        _q_3 <- Data.Binary.get;
                                        _hash_4 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'searchEmojiStickerSets _exclude_featured_2 _q_3 _hash_4)}}};
           put to_be_encoded_5 = do {Data.Binary.Put.putWord32le 2461288780;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_5._exclude_featured,
                                                              0)];
                                     Data.Binary.put to_be_encoded_5._exclude_featured;
                                     Data.Binary.put to_be_encoded_5._q;
                                     Data.Binary.put to_be_encoded_5._hash}}
instance TLFunctionʼ Method'Messages'searchEmojiStickerSets
                     Messages'FoundStickerSets
data Method'Messages'getSavedDialogs
    = Method'Messages'getSavedDialogs {_exclude_pinned :: !(Maybe True'),
                                       _offset_date :: !Int',
                                       _offset_id :: !Int',
                                       _offset_peer :: !InputPeer,
                                       _limit :: !Int',
                                       _hash :: !Long'}
instance Data.Binary.Binary Method'Messages'getSavedDialogs
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1401016858 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _exclude_pinned_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        _offset_date_3 <- Data.Binary.get;
                                        _offset_id_4 <- Data.Binary.get;
                                        _offset_peer_5 <- Data.Binary.get;
                                        _limit_6 <- Data.Binary.get;
                                        _hash_7 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'getSavedDialogs _exclude_pinned_2 _offset_date_3 _offset_id_4 _offset_peer_5 _limit_6 _hash_7)}}};
           put to_be_encoded_8 = do {Data.Binary.Put.putWord32le 1401016858;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_8._exclude_pinned,
                                                              0)];
                                     Data.Binary.put to_be_encoded_8._exclude_pinned;
                                     Data.Binary.put to_be_encoded_8._offset_date;
                                     Data.Binary.put to_be_encoded_8._offset_id;
                                     Data.Binary.put to_be_encoded_8._offset_peer;
                                     Data.Binary.put to_be_encoded_8._limit;
                                     Data.Binary.put to_be_encoded_8._hash}}
instance TLFunctionʼ Method'Messages'getSavedDialogs
                     Messages'SavedDialogs
data Method'Messages'getSavedHistory
    = Method'Messages'getSavedHistory {_peer :: !InputPeer,
                                       _offset_id :: !Int',
                                       _offset_date :: !Int',
                                       _add_offset :: !Int',
                                       _limit :: !Int',
                                       _max_id :: !Int',
                                       _min_id :: !Int',
                                       _hash :: !Long'}
instance Data.Binary.Binary Method'Messages'getSavedHistory
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1033519437 -> do {_peer_1 <- Data.Binary.get;
                                        _offset_id_2 <- Data.Binary.get;
                                        _offset_date_3 <- Data.Binary.get;
                                        _add_offset_4 <- Data.Binary.get;
                                        _limit_5 <- Data.Binary.get;
                                        _max_id_6 <- Data.Binary.get;
                                        _min_id_7 <- Data.Binary.get;
                                        _hash_8 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'getSavedHistory _peer_1 _offset_id_2 _offset_date_3 _add_offset_4 _limit_5 _max_id_6 _min_id_7 _hash_8)}}};
           put to_be_encoded_9 = do {Data.Binary.Put.putWord32le 1033519437;
                                     Data.Binary.put to_be_encoded_9._peer;
                                     Data.Binary.put to_be_encoded_9._offset_id;
                                     Data.Binary.put to_be_encoded_9._offset_date;
                                     Data.Binary.put to_be_encoded_9._add_offset;
                                     Data.Binary.put to_be_encoded_9._limit;
                                     Data.Binary.put to_be_encoded_9._max_id;
                                     Data.Binary.put to_be_encoded_9._min_id;
                                     Data.Binary.put to_be_encoded_9._hash}}
instance TLFunctionʼ Method'Messages'getSavedHistory
                     Messages'Messages
data Method'Messages'deleteSavedHistory
    = Method'Messages'deleteSavedHistory {_peer :: !InputPeer,
                                          _max_id :: !Int',
                                          _min_date :: !(Maybe Int'),
                                          _max_date :: !(Maybe Int')}
instance Data.Binary.Binary Method'Messages'deleteSavedHistory
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1855459371 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _peer_2 <- Data.Binary.get;
                                        _max_id_3 <- Data.Binary.get;
                                        _min_date_4 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 2);
                                        _max_date_5 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 3);
                                        GHC.Base.pure (Method'Messages'deleteSavedHistory _peer_2 _max_id_3 _min_date_4 _max_date_5)}}};
           put to_be_encoded_6 = do {Data.Binary.Put.putWord32le 1855459371;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_6._max_date,
                                                              3),
                                                             (Data.Maybe.isJust to_be_encoded_6._min_date,
                                                              2)];
                                     Data.Binary.put to_be_encoded_6._peer;
                                     Data.Binary.put to_be_encoded_6._max_id;
                                     Data.Binary.put to_be_encoded_6._min_date;
                                     Data.Binary.put to_be_encoded_6._max_date}}
instance TLFunctionʼ Method'Messages'deleteSavedHistory
                     Messages'AffectedHistory
data Method'Messages'getPinnedSavedDialogs
    = Method'Messages'getPinnedSavedDialogs {}
instance Data.Binary.Binary Method'Messages'getPinnedSavedDialogs
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3594360032 -> GHC.Base.pure Method'Messages'getPinnedSavedDialogs}};
           put to_be_encoded_1 = do {Data.Binary.Put.putWord32le 3594360032;
                                     GHC.Base.pure ()}}
instance TLFunctionʼ Method'Messages'getPinnedSavedDialogs
                     Messages'SavedDialogs
data Method'Messages'toggleSavedDialogPin
    = Method'Messages'toggleSavedDialogPin {_pinned :: !(Maybe True'),
                                            _peer :: !InputDialogPeer}
instance Data.Binary.Binary Method'Messages'toggleSavedDialogPin
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2894183390 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _pinned_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        _peer_3 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'toggleSavedDialogPin _pinned_2 _peer_3)}}};
           put to_be_encoded_4 = do {Data.Binary.Put.putWord32le 2894183390;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_4._pinned,
                                                              0)];
                                     Data.Binary.put to_be_encoded_4._pinned;
                                     Data.Binary.put to_be_encoded_4._peer}}
instance TLFunctionʼ Method'Messages'toggleSavedDialogPin Bool
data Method'Messages'reorderPinnedSavedDialogs
    = Method'Messages'reorderPinnedSavedDialogs {_force :: !(Maybe True'),
                                                 _order :: !(Vector InputDialogPeer)}
instance Data.Binary.Binary Method'Messages'reorderPinnedSavedDialogs
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2339464583 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _force_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        _order_3 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Messages'reorderPinnedSavedDialogs _force_2 _order_3)}}};
           put to_be_encoded_4 = do {Data.Binary.Put.putWord32le 2339464583;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_4._force,
                                                              0)];
                                     Data.Binary.put to_be_encoded_4._force;
                                     Data.Binary.put to_be_encoded_4._order}}
instance TLFunctionʼ Method'Messages'reorderPinnedSavedDialogs Bool
data Method'Updates'getState = Method'Updates'getState {}
instance Data.Binary.Binary Method'Updates'getState
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3990128682 -> GHC.Base.pure Method'Updates'getState}};
           put to_be_encoded_1 = do {Data.Binary.Put.putWord32le 3990128682;
                                     GHC.Base.pure ()}}
instance TLFunctionʼ Method'Updates'getState Updates'State
data Method'Updates'getDifference
    = Method'Updates'getDifference {_pts :: !Int',
                                    _pts_limit :: !(Maybe Int'),
                                    _pts_total_limit :: !(Maybe Int'),
                                    _date :: !Int',
                                    _qts :: !Int',
                                    _qts_limit :: !(Maybe Int')}
instance Data.Binary.Binary Method'Updates'getDifference
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {432207715 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                       _pts_2 <- Data.Binary.get;
                                       _pts_limit_3 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 1);
                                       _pts_total_limit_4 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                       _date_5 <- Data.Binary.get;
                                       _qts_6 <- Data.Binary.get;
                                       _qts_limit_7 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 2);
                                       GHC.Base.pure (Method'Updates'getDifference _pts_2 _pts_limit_3 _pts_total_limit_4 _date_5 _qts_6 _qts_limit_7)}}};
           put to_be_encoded_8 = do {Data.Binary.Put.putWord32le 432207715;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_8._qts_limit,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_8._pts_total_limit,
                                                              0),
                                                             (Data.Maybe.isJust to_be_encoded_8._pts_limit,
                                                              1)];
                                     Data.Binary.put to_be_encoded_8._pts;
                                     Data.Binary.put to_be_encoded_8._pts_limit;
                                     Data.Binary.put to_be_encoded_8._pts_total_limit;
                                     Data.Binary.put to_be_encoded_8._date;
                                     Data.Binary.put to_be_encoded_8._qts;
                                     Data.Binary.put to_be_encoded_8._qts_limit}}
instance TLFunctionʼ Method'Updates'getDifference
                     Updates'Difference
data Method'Updates'getChannelDifference
    = Method'Updates'getChannelDifference {_force :: !(Maybe True'),
                                           _channel :: !InputChannel,
                                           _filter :: !ChannelMessagesFilter,
                                           _pts :: !Int',
                                           _limit :: !Int'}
instance Data.Binary.Binary Method'Updates'getChannelDifference
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {51854712 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                      _force_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                      _channel_3 <- Data.Binary.get;
                                      _filter_4 <- Data.Binary.get;
                                      _pts_5 <- Data.Binary.get;
                                      _limit_6 <- Data.Binary.get;
                                      GHC.Base.pure (Method'Updates'getChannelDifference _force_2 _channel_3 _filter_4 _pts_5 _limit_6)}}};
           put to_be_encoded_7 = do {Data.Binary.Put.putWord32le 51854712;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_7._force,
                                                              0)];
                                     Data.Binary.put to_be_encoded_7._force;
                                     Data.Binary.put to_be_encoded_7._channel;
                                     Data.Binary.put to_be_encoded_7._filter;
                                     Data.Binary.put to_be_encoded_7._pts;
                                     Data.Binary.put to_be_encoded_7._limit}}
instance TLFunctionʼ Method'Updates'getChannelDifference
                     Updates'ChannelDifference
data Method'Photos'updateProfilePhoto
    = Method'Photos'updateProfilePhoto {_fallback :: !(Maybe True'),
                                        _bot :: !(Maybe InputUser),
                                        _id :: !InputPhoto}
instance Data.Binary.Binary Method'Photos'updateProfilePhoto
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {166207545 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                       _fallback_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                       _bot_3 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 1);
                                       _id_4 <- Data.Binary.get;
                                       GHC.Base.pure (Method'Photos'updateProfilePhoto _fallback_2 _bot_3 _id_4)}}};
           put to_be_encoded_5 = do {Data.Binary.Put.putWord32le 166207545;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_5._bot,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_5._fallback,
                                                              0)];
                                     Data.Binary.put to_be_encoded_5._fallback;
                                     Data.Binary.put to_be_encoded_5._bot;
                                     Data.Binary.put to_be_encoded_5._id}}
instance TLFunctionʼ Method'Photos'updateProfilePhoto Photos'Photo
data Method'Photos'uploadProfilePhoto
    = Method'Photos'uploadProfilePhoto {_fallback :: !(Maybe True'),
                                        _bot :: !(Maybe InputUser),
                                        _file :: !(Maybe InputFile),
                                        _video :: !(Maybe InputFile),
                                        _video_start_ts :: !(Maybe Double'),
                                        _video_emoji_markup :: !(Maybe VideoSize)}
instance Data.Binary.Binary Method'Photos'uploadProfilePhoto
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {59286453 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                      _fallback_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 3);
                                      _bot_3 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 5);
                                      _file_4 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                      _video_5 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 1);
                                      _video_start_ts_6 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 2);
                                      _video_emoji_markup_7 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 4);
                                      GHC.Base.pure (Method'Photos'uploadProfilePhoto _fallback_2 _bot_3 _file_4 _video_5 _video_start_ts_6 _video_emoji_markup_7)}}};
           put to_be_encoded_8 = do {Data.Binary.Put.putWord32le 59286453;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_8._video_emoji_markup,
                                                              4),
                                                             (Data.Maybe.isJust to_be_encoded_8._video_start_ts,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_8._video,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_8._file,
                                                              0),
                                                             (Data.Maybe.isJust to_be_encoded_8._bot,
                                                              5),
                                                             (Data.Maybe.isJust to_be_encoded_8._fallback,
                                                              3)];
                                     Data.Binary.put to_be_encoded_8._fallback;
                                     Data.Binary.put to_be_encoded_8._bot;
                                     Data.Binary.put to_be_encoded_8._file;
                                     Data.Binary.put to_be_encoded_8._video;
                                     Data.Binary.put to_be_encoded_8._video_start_ts;
                                     Data.Binary.put to_be_encoded_8._video_emoji_markup}}
instance TLFunctionʼ Method'Photos'uploadProfilePhoto Photos'Photo
data Method'Photos'deletePhotos
    = Method'Photos'deletePhotos {_id :: !(Vector InputPhoto)}
instance Data.Binary.Binary Method'Photos'deletePhotos
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2278522671 -> do {_id_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Photos'deletePhotos _id_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 2278522671;
                                     Data.Binary.put to_be_encoded_2._id}}
instance TLFunctionʼ Method'Photos'deletePhotos (Vector Long')
data Method'Photos'getUserPhotos
    = Method'Photos'getUserPhotos {_user_id :: !InputUser,
                                   _offset :: !Int',
                                   _max_id :: !Long',
                                   _limit :: !Int'}
instance Data.Binary.Binary Method'Photos'getUserPhotos
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2446144168 -> do {_user_id_1 <- Data.Binary.get;
                                        _offset_2 <- Data.Binary.get;
                                        _max_id_3 <- Data.Binary.get;
                                        _limit_4 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Photos'getUserPhotos _user_id_1 _offset_2 _max_id_3 _limit_4)}}};
           put to_be_encoded_5 = do {Data.Binary.Put.putWord32le 2446144168;
                                     Data.Binary.put to_be_encoded_5._user_id;
                                     Data.Binary.put to_be_encoded_5._offset;
                                     Data.Binary.put to_be_encoded_5._max_id;
                                     Data.Binary.put to_be_encoded_5._limit}}
instance TLFunctionʼ Method'Photos'getUserPhotos Photos'Photos
data Method'Photos'uploadContactProfilePhoto
    = Method'Photos'uploadContactProfilePhoto {_suggest :: !(Maybe True'),
                                               _save :: !(Maybe True'),
                                               _user_id :: !InputUser,
                                               _file :: !(Maybe InputFile),
                                               _video :: !(Maybe InputFile),
                                               _video_start_ts :: !(Maybe Double'),
                                               _video_emoji_markup :: !(Maybe VideoSize)}
instance Data.Binary.Binary Method'Photos'uploadContactProfilePhoto
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3779873393 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _suggest_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 3);
                                        _save_3 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 4);
                                        _user_id_4 <- Data.Binary.get;
                                        _file_5 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        _video_6 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 1);
                                        _video_start_ts_7 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 2);
                                        _video_emoji_markup_8 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 5);
                                        GHC.Base.pure (Method'Photos'uploadContactProfilePhoto _suggest_2 _save_3 _user_id_4 _file_5 _video_6 _video_start_ts_7 _video_emoji_markup_8)}}};
           put to_be_encoded_9 = do {Data.Binary.Put.putWord32le 3779873393;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_9._video_emoji_markup,
                                                              5),
                                                             (Data.Maybe.isJust to_be_encoded_9._video_start_ts,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_9._video,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_9._file,
                                                              0),
                                                             (Data.Maybe.isJust to_be_encoded_9._save,
                                                              4),
                                                             (Data.Maybe.isJust to_be_encoded_9._suggest,
                                                              3)];
                                     Data.Binary.put to_be_encoded_9._suggest;
                                     Data.Binary.put to_be_encoded_9._save;
                                     Data.Binary.put to_be_encoded_9._user_id;
                                     Data.Binary.put to_be_encoded_9._file;
                                     Data.Binary.put to_be_encoded_9._video;
                                     Data.Binary.put to_be_encoded_9._video_start_ts;
                                     Data.Binary.put to_be_encoded_9._video_emoji_markup}}
instance TLFunctionʼ Method'Photos'uploadContactProfilePhoto
                     Photos'Photo
data Method'Upload'saveFilePart
    = Method'Upload'saveFilePart {_file_id :: !Long',
                                  _file_part :: !Int',
                                  _bytes :: !Bytes'}
instance Data.Binary.Binary Method'Upload'saveFilePart
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3003426337 -> do {_file_id_1 <- Data.Binary.get;
                                        _file_part_2 <- Data.Binary.get;
                                        _bytes_3 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Upload'saveFilePart _file_id_1 _file_part_2 _bytes_3)}}};
           put to_be_encoded_4 = do {Data.Binary.Put.putWord32le 3003426337;
                                     Data.Binary.put to_be_encoded_4._file_id;
                                     Data.Binary.put to_be_encoded_4._file_part;
                                     Data.Binary.put to_be_encoded_4._bytes}}
instance TLFunctionʼ Method'Upload'saveFilePart Bool
data Method'Upload'getFile
    = Method'Upload'getFile {_precise :: !(Maybe True'),
                             _cdn_supported :: !(Maybe True'),
                             _location :: !InputFileLocation,
                             _offset :: !Long',
                             _limit :: !Int'}
instance Data.Binary.Binary Method'Upload'getFile
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3193124286 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _precise_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        _cdn_supported_3 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 1);
                                        _location_4 <- Data.Binary.get;
                                        _offset_5 <- Data.Binary.get;
                                        _limit_6 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Upload'getFile _precise_2 _cdn_supported_3 _location_4 _offset_5 _limit_6)}}};
           put to_be_encoded_7 = do {Data.Binary.Put.putWord32le 3193124286;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_7._cdn_supported,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_7._precise,
                                                              0)];
                                     Data.Binary.put to_be_encoded_7._precise;
                                     Data.Binary.put to_be_encoded_7._cdn_supported;
                                     Data.Binary.put to_be_encoded_7._location;
                                     Data.Binary.put to_be_encoded_7._offset;
                                     Data.Binary.put to_be_encoded_7._limit}}
instance TLFunctionʼ Method'Upload'getFile Upload'File
data Method'Upload'saveBigFilePart
    = Method'Upload'saveBigFilePart {_file_id :: !Long',
                                     _file_part :: !Int',
                                     _file_total_parts :: !Int',
                                     _bytes :: !Bytes'}
instance Data.Binary.Binary Method'Upload'saveBigFilePart
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3732629309 -> do {_file_id_1 <- Data.Binary.get;
                                        _file_part_2 <- Data.Binary.get;
                                        _file_total_parts_3 <- Data.Binary.get;
                                        _bytes_4 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Upload'saveBigFilePart _file_id_1 _file_part_2 _file_total_parts_3 _bytes_4)}}};
           put to_be_encoded_5 = do {Data.Binary.Put.putWord32le 3732629309;
                                     Data.Binary.put to_be_encoded_5._file_id;
                                     Data.Binary.put to_be_encoded_5._file_part;
                                     Data.Binary.put to_be_encoded_5._file_total_parts;
                                     Data.Binary.put to_be_encoded_5._bytes}}
instance TLFunctionʼ Method'Upload'saveBigFilePart Bool
data Method'Upload'getWebFile
    = Method'Upload'getWebFile {_location :: !InputWebFileLocation,
                                _offset :: !Int',
                                _limit :: !Int'}
instance Data.Binary.Binary Method'Upload'getWebFile
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {619086221 -> do {_location_1 <- Data.Binary.get;
                                       _offset_2 <- Data.Binary.get;
                                       _limit_3 <- Data.Binary.get;
                                       GHC.Base.pure (Method'Upload'getWebFile _location_1 _offset_2 _limit_3)}}};
           put to_be_encoded_4 = do {Data.Binary.Put.putWord32le 619086221;
                                     Data.Binary.put to_be_encoded_4._location;
                                     Data.Binary.put to_be_encoded_4._offset;
                                     Data.Binary.put to_be_encoded_4._limit}}
instance TLFunctionʼ Method'Upload'getWebFile Upload'WebFile
data Method'Upload'getCdnFile
    = Method'Upload'getCdnFile {_file_token :: !Bytes',
                                _offset :: !Long',
                                _limit :: !Int'}
instance Data.Binary.Binary Method'Upload'getCdnFile
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {962554330 -> do {_file_token_1 <- Data.Binary.get;
                                       _offset_2 <- Data.Binary.get;
                                       _limit_3 <- Data.Binary.get;
                                       GHC.Base.pure (Method'Upload'getCdnFile _file_token_1 _offset_2 _limit_3)}}};
           put to_be_encoded_4 = do {Data.Binary.Put.putWord32le 962554330;
                                     Data.Binary.put to_be_encoded_4._file_token;
                                     Data.Binary.put to_be_encoded_4._offset;
                                     Data.Binary.put to_be_encoded_4._limit}}
instance TLFunctionʼ Method'Upload'getCdnFile Upload'CdnFile
data Method'Upload'reuploadCdnFile
    = Method'Upload'reuploadCdnFile {_file_token :: !Bytes',
                                     _request_token :: !Bytes'}
instance Data.Binary.Binary Method'Upload'reuploadCdnFile
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2603046056 -> do {_file_token_1 <- Data.Binary.get;
                                        _request_token_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Upload'reuploadCdnFile _file_token_1 _request_token_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 2603046056;
                                     Data.Binary.put to_be_encoded_3._file_token;
                                     Data.Binary.put to_be_encoded_3._request_token}}
instance TLFunctionʼ Method'Upload'reuploadCdnFile
                     (Vector FileHash)
data Method'Upload'getCdnFileHashes
    = Method'Upload'getCdnFileHashes {_file_token :: !Bytes',
                                      _offset :: !Long'}
instance Data.Binary.Binary Method'Upload'getCdnFileHashes
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2447130417 -> do {_file_token_1 <- Data.Binary.get;
                                        _offset_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Upload'getCdnFileHashes _file_token_1 _offset_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 2447130417;
                                     Data.Binary.put to_be_encoded_3._file_token;
                                     Data.Binary.put to_be_encoded_3._offset}}
instance TLFunctionʼ Method'Upload'getCdnFileHashes
                     (Vector FileHash)
data Method'Upload'getFileHashes
    = Method'Upload'getFileHashes {_location :: !InputFileLocation,
                                   _offset :: !Long'}
instance Data.Binary.Binary Method'Upload'getFileHashes
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2438371370 -> do {_location_1 <- Data.Binary.get;
                                        _offset_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Upload'getFileHashes _location_1 _offset_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 2438371370;
                                     Data.Binary.put to_be_encoded_3._location;
                                     Data.Binary.put to_be_encoded_3._offset}}
instance TLFunctionʼ Method'Upload'getFileHashes (Vector FileHash)
data Method'Help'getConfig = Method'Help'getConfig {}
instance Data.Binary.Binary Method'Help'getConfig
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3304659051 -> GHC.Base.pure Method'Help'getConfig}};
           put to_be_encoded_1 = do {Data.Binary.Put.putWord32le 3304659051;
                                     GHC.Base.pure ()}}
instance TLFunctionʼ Method'Help'getConfig Config
data Method'Help'getNearestDc = Method'Help'getNearestDc {}
instance Data.Binary.Binary Method'Help'getNearestDc
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {531836966 -> GHC.Base.pure Method'Help'getNearestDc}};
           put to_be_encoded_1 = do {Data.Binary.Put.putWord32le 531836966;
                                     GHC.Base.pure ()}}
instance TLFunctionʼ Method'Help'getNearestDc NearestDc
data Method'Help'getAppUpdate
    = Method'Help'getAppUpdate {_source :: !String'}
instance Data.Binary.Binary Method'Help'getAppUpdate
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1378703997 -> do {_source_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Help'getAppUpdate _source_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 1378703997;
                                     Data.Binary.put to_be_encoded_2._source}}
instance TLFunctionʼ Method'Help'getAppUpdate Help'AppUpdate
data Method'Help'getInviteText = Method'Help'getInviteText {}
instance Data.Binary.Binary Method'Help'getInviteText
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1295590211 -> GHC.Base.pure Method'Help'getInviteText}};
           put to_be_encoded_1 = do {Data.Binary.Put.putWord32le 1295590211;
                                     GHC.Base.pure ()}}
instance TLFunctionʼ Method'Help'getInviteText Help'InviteText
data Method'Help'getSupport = Method'Help'getSupport {}
instance Data.Binary.Binary Method'Help'getSupport
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2631862477 -> GHC.Base.pure Method'Help'getSupport}};
           put to_be_encoded_1 = do {Data.Binary.Put.putWord32le 2631862477;
                                     GHC.Base.pure ()}}
instance TLFunctionʼ Method'Help'getSupport Help'Support
data Method'Help'setBotUpdatesStatus
    = Method'Help'setBotUpdatesStatus {_pending_updates_count :: !Int',
                                       _message :: !String'}
instance Data.Binary.Binary Method'Help'setBotUpdatesStatus
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3961704397 -> do {_pending_updates_count_1 <- Data.Binary.get;
                                        _message_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Help'setBotUpdatesStatus _pending_updates_count_1 _message_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 3961704397;
                                     Data.Binary.put to_be_encoded_3._pending_updates_count;
                                     Data.Binary.put to_be_encoded_3._message}}
instance TLFunctionʼ Method'Help'setBotUpdatesStatus Bool
data Method'Help'getCdnConfig = Method'Help'getCdnConfig {}
instance Data.Binary.Binary Method'Help'getCdnConfig
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1375900482 -> GHC.Base.pure Method'Help'getCdnConfig}};
           put to_be_encoded_1 = do {Data.Binary.Put.putWord32le 1375900482;
                                     GHC.Base.pure ()}}
instance TLFunctionʼ Method'Help'getCdnConfig CdnConfig
data Method'Help'getRecentMeUrls
    = Method'Help'getRecentMeUrls {_referer :: !String'}
instance Data.Binary.Binary Method'Help'getRecentMeUrls
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1036054804 -> do {_referer_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Help'getRecentMeUrls _referer_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 1036054804;
                                     Data.Binary.put to_be_encoded_2._referer}}
instance TLFunctionʼ Method'Help'getRecentMeUrls Help'RecentMeUrls
data Method'Help'getTermsOfServiceUpdate
    = Method'Help'getTermsOfServiceUpdate {}
instance Data.Binary.Binary Method'Help'getTermsOfServiceUpdate
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {749019089 -> GHC.Base.pure Method'Help'getTermsOfServiceUpdate}};
           put to_be_encoded_1 = do {Data.Binary.Put.putWord32le 749019089;
                                     GHC.Base.pure ()}}
instance TLFunctionʼ Method'Help'getTermsOfServiceUpdate
                     Help'TermsOfServiceUpdate
data Method'Help'acceptTermsOfService
    = Method'Help'acceptTermsOfService {_id :: !DataJSON}
instance Data.Binary.Binary Method'Help'acceptTermsOfService
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {4000511898 -> do {_id_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Help'acceptTermsOfService _id_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 4000511898;
                                     Data.Binary.put to_be_encoded_2._id}}
instance TLFunctionʼ Method'Help'acceptTermsOfService Bool
data Method'Help'getDeepLinkInfo
    = Method'Help'getDeepLinkInfo {_path :: !String'}
instance Data.Binary.Binary Method'Help'getDeepLinkInfo
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1072547679 -> do {_path_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Help'getDeepLinkInfo _path_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 1072547679;
                                     Data.Binary.put to_be_encoded_2._path}}
instance TLFunctionʼ Method'Help'getDeepLinkInfo Help'DeepLinkInfo
data Method'Help'getAppConfig
    = Method'Help'getAppConfig {_hash :: !Int'}
instance Data.Binary.Binary Method'Help'getAppConfig
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1642330196 -> do {_hash_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Help'getAppConfig _hash_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 1642330196;
                                     Data.Binary.put to_be_encoded_2._hash}}
instance TLFunctionʼ Method'Help'getAppConfig Help'AppConfig
data Method'Help'saveAppLog
    = Method'Help'saveAppLog {_events :: !(Vector InputAppEvent)}
instance Data.Binary.Binary Method'Help'saveAppLog
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1862465352 -> do {_events_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Help'saveAppLog _events_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 1862465352;
                                     Data.Binary.put to_be_encoded_2._events}}
instance TLFunctionʼ Method'Help'saveAppLog Bool
data Method'Help'getPassportConfig
    = Method'Help'getPassportConfig {_hash :: !Int'}
instance Data.Binary.Binary Method'Help'getPassportConfig
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3328290056 -> do {_hash_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Help'getPassportConfig _hash_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 3328290056;
                                     Data.Binary.put to_be_encoded_2._hash}}
instance TLFunctionʼ Method'Help'getPassportConfig
                     Help'PassportConfig
data Method'Help'getSupportName = Method'Help'getSupportName {}
instance Data.Binary.Binary Method'Help'getSupportName
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3546343212 -> GHC.Base.pure Method'Help'getSupportName}};
           put to_be_encoded_1 = do {Data.Binary.Put.putWord32le 3546343212;
                                     GHC.Base.pure ()}}
instance TLFunctionʼ Method'Help'getSupportName Help'SupportName
data Method'Help'getUserInfo
    = Method'Help'getUserInfo {_user_id :: !InputUser}
instance Data.Binary.Binary Method'Help'getUserInfo
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {59377875 -> do {_user_id_1 <- Data.Binary.get;
                                      GHC.Base.pure (Method'Help'getUserInfo _user_id_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 59377875;
                                     Data.Binary.put to_be_encoded_2._user_id}}
instance TLFunctionʼ Method'Help'getUserInfo Help'UserInfo
data Method'Help'editUserInfo
    = Method'Help'editUserInfo {_user_id :: !InputUser,
                                _message :: !String',
                                _entities :: !(Vector MessageEntity)}
instance Data.Binary.Binary Method'Help'editUserInfo
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1723407216 -> do {_user_id_1 <- Data.Binary.get;
                                        _message_2 <- Data.Binary.get;
                                        _entities_3 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Help'editUserInfo _user_id_1 _message_2 _entities_3)}}};
           put to_be_encoded_4 = do {Data.Binary.Put.putWord32le 1723407216;
                                     Data.Binary.put to_be_encoded_4._user_id;
                                     Data.Binary.put to_be_encoded_4._message;
                                     Data.Binary.put to_be_encoded_4._entities}}
instance TLFunctionʼ Method'Help'editUserInfo Help'UserInfo
data Method'Help'getPromoData = Method'Help'getPromoData {}
instance Data.Binary.Binary Method'Help'getPromoData
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3231151137 -> GHC.Base.pure Method'Help'getPromoData}};
           put to_be_encoded_1 = do {Data.Binary.Put.putWord32le 3231151137;
                                     GHC.Base.pure ()}}
instance TLFunctionʼ Method'Help'getPromoData Help'PromoData
data Method'Help'hidePromoData
    = Method'Help'hidePromoData {_peer :: !InputPeer}
instance Data.Binary.Binary Method'Help'hidePromoData
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {505748629 -> do {_peer_1 <- Data.Binary.get;
                                       GHC.Base.pure (Method'Help'hidePromoData _peer_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 505748629;
                                     Data.Binary.put to_be_encoded_2._peer}}
instance TLFunctionʼ Method'Help'hidePromoData Bool
data Method'Help'dismissSuggestion
    = Method'Help'dismissSuggestion {_peer :: !InputPeer,
                                     _suggestion :: !String'}
instance Data.Binary.Binary Method'Help'dismissSuggestion
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {4111317665 -> do {_peer_1 <- Data.Binary.get;
                                        _suggestion_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Help'dismissSuggestion _peer_1 _suggestion_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 4111317665;
                                     Data.Binary.put to_be_encoded_3._peer;
                                     Data.Binary.put to_be_encoded_3._suggestion}}
instance TLFunctionʼ Method'Help'dismissSuggestion Bool
data Method'Help'getCountriesList
    = Method'Help'getCountriesList {_lang_code :: !String',
                                    _hash :: !Int'}
instance Data.Binary.Binary Method'Help'getCountriesList
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1935116200 -> do {_lang_code_1 <- Data.Binary.get;
                                        _hash_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Help'getCountriesList _lang_code_1 _hash_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 1935116200;
                                     Data.Binary.put to_be_encoded_3._lang_code;
                                     Data.Binary.put to_be_encoded_3._hash}}
instance TLFunctionʼ Method'Help'getCountriesList
                     Help'CountriesList
data Method'Help'getPremiumPromo = Method'Help'getPremiumPromo {}
instance Data.Binary.Binary Method'Help'getPremiumPromo
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3088815060 -> GHC.Base.pure Method'Help'getPremiumPromo}};
           put to_be_encoded_1 = do {Data.Binary.Put.putWord32le 3088815060;
                                     GHC.Base.pure ()}}
instance TLFunctionʼ Method'Help'getPremiumPromo Help'PremiumPromo
data Method'Help'getPeerColors
    = Method'Help'getPeerColors {_hash :: !Int'}
instance Data.Binary.Binary Method'Help'getPeerColors
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3665884207 -> do {_hash_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Help'getPeerColors _hash_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 3665884207;
                                     Data.Binary.put to_be_encoded_2._hash}}
instance TLFunctionʼ Method'Help'getPeerColors Help'PeerColors
data Method'Help'getPeerProfileColors
    = Method'Help'getPeerProfileColors {_hash :: !Int'}
instance Data.Binary.Binary Method'Help'getPeerProfileColors
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2882513405 -> do {_hash_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Help'getPeerProfileColors _hash_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 2882513405;
                                     Data.Binary.put to_be_encoded_2._hash}}
instance TLFunctionʼ Method'Help'getPeerProfileColors
                     Help'PeerColors
data Method'Channels'readHistory
    = Method'Channels'readHistory {_channel :: !InputChannel,
                                   _max_id :: !Int'}
instance Data.Binary.Binary Method'Channels'readHistory
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3423619383 -> do {_channel_1 <- Data.Binary.get;
                                        _max_id_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Channels'readHistory _channel_1 _max_id_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 3423619383;
                                     Data.Binary.put to_be_encoded_3._channel;
                                     Data.Binary.put to_be_encoded_3._max_id}}
instance TLFunctionʼ Method'Channels'readHistory Bool
data Method'Channels'deleteMessages
    = Method'Channels'deleteMessages {_channel :: !InputChannel,
                                      _id :: !(Vector Int')}
instance Data.Binary.Binary Method'Channels'deleteMessages
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2227305806 -> do {_channel_1 <- Data.Binary.get;
                                        _id_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Channels'deleteMessages _channel_1 _id_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 2227305806;
                                     Data.Binary.put to_be_encoded_3._channel;
                                     Data.Binary.put to_be_encoded_3._id}}
instance TLFunctionʼ Method'Channels'deleteMessages
                     Messages'AffectedMessages
data Method'Channels'reportSpam
    = Method'Channels'reportSpam {_channel :: !InputChannel,
                                  _participant :: !InputPeer,
                                  _id :: !(Vector Int')}
instance Data.Binary.Binary Method'Channels'reportSpam
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {4098523925 -> do {_channel_1 <- Data.Binary.get;
                                        _participant_2 <- Data.Binary.get;
                                        _id_3 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Channels'reportSpam _channel_1 _participant_2 _id_3)}}};
           put to_be_encoded_4 = do {Data.Binary.Put.putWord32le 4098523925;
                                     Data.Binary.put to_be_encoded_4._channel;
                                     Data.Binary.put to_be_encoded_4._participant;
                                     Data.Binary.put to_be_encoded_4._id}}
instance TLFunctionʼ Method'Channels'reportSpam Bool
data Method'Channels'getMessages
    = Method'Channels'getMessages {_channel :: !InputChannel,
                                   _id :: !(Vector InputMessage)}
instance Data.Binary.Binary Method'Channels'getMessages
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2911672867 -> do {_channel_1 <- Data.Binary.get;
                                        _id_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Channels'getMessages _channel_1 _id_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 2911672867;
                                     Data.Binary.put to_be_encoded_3._channel;
                                     Data.Binary.put to_be_encoded_3._id}}
instance TLFunctionʼ Method'Channels'getMessages Messages'Messages
data Method'Channels'getParticipants
    = Method'Channels'getParticipants {_channel :: !InputChannel,
                                       _filter :: !ChannelParticipantsFilter,
                                       _offset :: !Int',
                                       _limit :: !Int',
                                       _hash :: !Long'}
instance Data.Binary.Binary Method'Channels'getParticipants
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2010044880 -> do {_channel_1 <- Data.Binary.get;
                                        _filter_2 <- Data.Binary.get;
                                        _offset_3 <- Data.Binary.get;
                                        _limit_4 <- Data.Binary.get;
                                        _hash_5 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Channels'getParticipants _channel_1 _filter_2 _offset_3 _limit_4 _hash_5)}}};
           put to_be_encoded_6 = do {Data.Binary.Put.putWord32le 2010044880;
                                     Data.Binary.put to_be_encoded_6._channel;
                                     Data.Binary.put to_be_encoded_6._filter;
                                     Data.Binary.put to_be_encoded_6._offset;
                                     Data.Binary.put to_be_encoded_6._limit;
                                     Data.Binary.put to_be_encoded_6._hash}}
instance TLFunctionʼ Method'Channels'getParticipants
                     Channels'ChannelParticipants
data Method'Channels'getParticipant
    = Method'Channels'getParticipant {_channel :: !InputChannel,
                                      _participant :: !InputPeer}
instance Data.Binary.Binary Method'Channels'getParticipant
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2695589062 -> do {_channel_1 <- Data.Binary.get;
                                        _participant_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Channels'getParticipant _channel_1 _participant_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 2695589062;
                                     Data.Binary.put to_be_encoded_3._channel;
                                     Data.Binary.put to_be_encoded_3._participant}}
instance TLFunctionʼ Method'Channels'getParticipant
                     Channels'ChannelParticipant
data Method'Channels'getChannels
    = Method'Channels'getChannels {_id :: !(Vector InputChannel)}
instance Data.Binary.Binary Method'Channels'getChannels
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {176122811 -> do {_id_1 <- Data.Binary.get;
                                       GHC.Base.pure (Method'Channels'getChannels _id_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 176122811;
                                     Data.Binary.put to_be_encoded_2._id}}
instance TLFunctionʼ Method'Channels'getChannels Messages'Chats
data Method'Channels'getFullChannel
    = Method'Channels'getFullChannel {_channel :: !InputChannel}
instance Data.Binary.Binary Method'Channels'getFullChannel
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {141781513 -> do {_channel_1 <- Data.Binary.get;
                                       GHC.Base.pure (Method'Channels'getFullChannel _channel_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 141781513;
                                     Data.Binary.put to_be_encoded_2._channel}}
instance TLFunctionʼ Method'Channels'getFullChannel
                     Messages'ChatFull
data Method'Channels'createChannel
    = Method'Channels'createChannel {_broadcast :: !(Maybe True'),
                                     _megagroup :: !(Maybe True'),
                                     _for_import :: !(Maybe True'),
                                     _forum :: !(Maybe True'),
                                     _title :: !String',
                                     _about :: !String',
                                     _geo_point :: !(Maybe InputGeoPoint),
                                     _address :: !(Maybe String'),
                                     _ttl_period :: !(Maybe Int')}
instance Data.Binary.Binary Method'Channels'createChannel
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2432722695 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _broadcast_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        _megagroup_3 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 1);
                                        _for_import_4 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 3);
                                        _forum_5 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 5);
                                        _title_6 <- Data.Binary.get;
                                        _about_7 <- Data.Binary.get;
                                        _geo_point_8 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 2);
                                        _address_9 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 2);
                                        _ttl_period_10 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 4);
                                        GHC.Base.pure (Method'Channels'createChannel _broadcast_2 _megagroup_3 _for_import_4 _forum_5 _title_6 _about_7 _geo_point_8 _address_9 _ttl_period_10)}}};
           put to_be_encoded_11 = do {Data.Binary.Put.putWord32le 2432722695;
                                      Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_11._ttl_period,
                                                               4),
                                                              (Data.Maybe.isJust to_be_encoded_11._address,
                                                               2),
                                                              (Data.Maybe.isJust to_be_encoded_11._geo_point,
                                                               2),
                                                              (Data.Maybe.isJust to_be_encoded_11._forum,
                                                               5),
                                                              (Data.Maybe.isJust to_be_encoded_11._for_import,
                                                               3),
                                                              (Data.Maybe.isJust to_be_encoded_11._megagroup,
                                                               1),
                                                              (Data.Maybe.isJust to_be_encoded_11._broadcast,
                                                               0)];
                                      Data.Binary.put to_be_encoded_11._broadcast;
                                      Data.Binary.put to_be_encoded_11._megagroup;
                                      Data.Binary.put to_be_encoded_11._for_import;
                                      Data.Binary.put to_be_encoded_11._forum;
                                      Data.Binary.put to_be_encoded_11._title;
                                      Data.Binary.put to_be_encoded_11._about;
                                      Data.Binary.put to_be_encoded_11._geo_point;
                                      Data.Binary.put to_be_encoded_11._address;
                                      Data.Binary.put to_be_encoded_11._ttl_period}}
instance TLFunctionʼ Method'Channels'createChannel Updates
data Method'Channels'editAdmin
    = Method'Channels'editAdmin {_channel :: !InputChannel,
                                 _user_id :: !InputUser,
                                 _admin_rights :: !ChatAdminRights,
                                 _rank :: !String'}
instance Data.Binary.Binary Method'Channels'editAdmin
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3543959810 -> do {_channel_1 <- Data.Binary.get;
                                        _user_id_2 <- Data.Binary.get;
                                        _admin_rights_3 <- Data.Binary.get;
                                        _rank_4 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Channels'editAdmin _channel_1 _user_id_2 _admin_rights_3 _rank_4)}}};
           put to_be_encoded_5 = do {Data.Binary.Put.putWord32le 3543959810;
                                     Data.Binary.put to_be_encoded_5._channel;
                                     Data.Binary.put to_be_encoded_5._user_id;
                                     Data.Binary.put to_be_encoded_5._admin_rights;
                                     Data.Binary.put to_be_encoded_5._rank}}
instance TLFunctionʼ Method'Channels'editAdmin Updates
data Method'Channels'editTitle
    = Method'Channels'editTitle {_channel :: !InputChannel,
                                 _title :: !String'}
instance Data.Binary.Binary Method'Channels'editTitle
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1450044624 -> do {_channel_1 <- Data.Binary.get;
                                        _title_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Channels'editTitle _channel_1 _title_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 1450044624;
                                     Data.Binary.put to_be_encoded_3._channel;
                                     Data.Binary.put to_be_encoded_3._title}}
instance TLFunctionʼ Method'Channels'editTitle Updates
data Method'Channels'editPhoto
    = Method'Channels'editPhoto {_channel :: !InputChannel,
                                 _photo :: !InputChatPhoto}
instance Data.Binary.Binary Method'Channels'editPhoto
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {4046346185 -> do {_channel_1 <- Data.Binary.get;
                                        _photo_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Channels'editPhoto _channel_1 _photo_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 4046346185;
                                     Data.Binary.put to_be_encoded_3._channel;
                                     Data.Binary.put to_be_encoded_3._photo}}
instance TLFunctionʼ Method'Channels'editPhoto Updates
data Method'Channels'checkUsername
    = Method'Channels'checkUsername {_channel :: !InputChannel,
                                     _username :: !String'}
instance Data.Binary.Binary Method'Channels'checkUsername
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {283557164 -> do {_channel_1 <- Data.Binary.get;
                                       _username_2 <- Data.Binary.get;
                                       GHC.Base.pure (Method'Channels'checkUsername _channel_1 _username_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 283557164;
                                     Data.Binary.put to_be_encoded_3._channel;
                                     Data.Binary.put to_be_encoded_3._username}}
instance TLFunctionʼ Method'Channels'checkUsername Bool
data Method'Channels'updateUsername
    = Method'Channels'updateUsername {_channel :: !InputChannel,
                                      _username :: !String'}
instance Data.Binary.Binary Method'Channels'updateUsername
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {890549214 -> do {_channel_1 <- Data.Binary.get;
                                       _username_2 <- Data.Binary.get;
                                       GHC.Base.pure (Method'Channels'updateUsername _channel_1 _username_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 890549214;
                                     Data.Binary.put to_be_encoded_3._channel;
                                     Data.Binary.put to_be_encoded_3._username}}
instance TLFunctionʼ Method'Channels'updateUsername Bool
data Method'Channels'joinChannel
    = Method'Channels'joinChannel {_channel :: !InputChannel}
instance Data.Binary.Binary Method'Channels'joinChannel
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {615851205 -> do {_channel_1 <- Data.Binary.get;
                                       GHC.Base.pure (Method'Channels'joinChannel _channel_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 615851205;
                                     Data.Binary.put to_be_encoded_2._channel}}
instance TLFunctionʼ Method'Channels'joinChannel Updates
data Method'Channels'leaveChannel
    = Method'Channels'leaveChannel {_channel :: !InputChannel}
instance Data.Binary.Binary Method'Channels'leaveChannel
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {4164332181 -> do {_channel_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Channels'leaveChannel _channel_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 4164332181;
                                     Data.Binary.put to_be_encoded_2._channel}}
instance TLFunctionʼ Method'Channels'leaveChannel Updates
data Method'Channels'inviteToChannel
    = Method'Channels'inviteToChannel {_channel :: !InputChannel,
                                       _users :: !(Vector InputUser)}
instance Data.Binary.Binary Method'Channels'inviteToChannel
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {429865580 -> do {_channel_1 <- Data.Binary.get;
                                       _users_2 <- Data.Binary.get;
                                       GHC.Base.pure (Method'Channels'inviteToChannel _channel_1 _users_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 429865580;
                                     Data.Binary.put to_be_encoded_3._channel;
                                     Data.Binary.put to_be_encoded_3._users}}
instance TLFunctionʼ Method'Channels'inviteToChannel Updates
data Method'Channels'deleteChannel
    = Method'Channels'deleteChannel {_channel :: !InputChannel}
instance Data.Binary.Binary Method'Channels'deleteChannel
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3222347747 -> do {_channel_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Channels'deleteChannel _channel_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 3222347747;
                                     Data.Binary.put to_be_encoded_2._channel}}
instance TLFunctionʼ Method'Channels'deleteChannel Updates
data Method'Channels'exportMessageLink
    = Method'Channels'exportMessageLink {_grouped :: !(Maybe True'),
                                         _thread :: !(Maybe True'),
                                         _channel :: !InputChannel,
                                         _id :: !Int'}
instance Data.Binary.Binary Method'Channels'exportMessageLink
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3862932971 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _grouped_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        _thread_3 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 1);
                                        _channel_4 <- Data.Binary.get;
                                        _id_5 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Channels'exportMessageLink _grouped_2 _thread_3 _channel_4 _id_5)}}};
           put to_be_encoded_6 = do {Data.Binary.Put.putWord32le 3862932971;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_6._thread,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_6._grouped,
                                                              0)];
                                     Data.Binary.put to_be_encoded_6._grouped;
                                     Data.Binary.put to_be_encoded_6._thread;
                                     Data.Binary.put to_be_encoded_6._channel;
                                     Data.Binary.put to_be_encoded_6._id}}
instance TLFunctionʼ Method'Channels'exportMessageLink
                     ExportedMessageLink
data Method'Channels'toggleSignatures
    = Method'Channels'toggleSignatures {_channel :: !InputChannel,
                                        _enabled :: !Bool}
instance Data.Binary.Binary Method'Channels'toggleSignatures
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {527021574 -> do {_channel_1 <- Data.Binary.get;
                                       _enabled_2 <- Data.Binary.get;
                                       GHC.Base.pure (Method'Channels'toggleSignatures _channel_1 _enabled_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 527021574;
                                     Data.Binary.put to_be_encoded_3._channel;
                                     Data.Binary.put to_be_encoded_3._enabled}}
instance TLFunctionʼ Method'Channels'toggleSignatures Updates
data Method'Channels'getAdminedPublicChannels
    = Method'Channels'getAdminedPublicChannels {_by_location :: !(Maybe True'),
                                                _check_limit :: !(Maybe True')}
instance Data.Binary.Binary Method'Channels'getAdminedPublicChannels
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {4172297903 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _by_location_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        _check_limit_3 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 1);
                                        GHC.Base.pure (Method'Channels'getAdminedPublicChannels _by_location_2 _check_limit_3)}}};
           put to_be_encoded_4 = do {Data.Binary.Put.putWord32le 4172297903;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_4._check_limit,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_4._by_location,
                                                              0)];
                                     Data.Binary.put to_be_encoded_4._by_location;
                                     Data.Binary.put to_be_encoded_4._check_limit}}
instance TLFunctionʼ Method'Channels'getAdminedPublicChannels
                     Messages'Chats
data Method'Channels'editBanned
    = Method'Channels'editBanned {_channel :: !InputChannel,
                                  _participant :: !InputPeer,
                                  _banned_rights :: !ChatBannedRights}
instance Data.Binary.Binary Method'Channels'editBanned
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2531708289 -> do {_channel_1 <- Data.Binary.get;
                                        _participant_2 <- Data.Binary.get;
                                        _banned_rights_3 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Channels'editBanned _channel_1 _participant_2 _banned_rights_3)}}};
           put to_be_encoded_4 = do {Data.Binary.Put.putWord32le 2531708289;
                                     Data.Binary.put to_be_encoded_4._channel;
                                     Data.Binary.put to_be_encoded_4._participant;
                                     Data.Binary.put to_be_encoded_4._banned_rights}}
instance TLFunctionʼ Method'Channels'editBanned Updates
data Method'Channels'getAdminLog
    = Method'Channels'getAdminLog {_channel :: !InputChannel,
                                   _q :: !String',
                                   _events_filter :: !(Maybe ChannelAdminLogEventsFilter),
                                   _admins :: !(Maybe (Vector InputUser)),
                                   _max_id :: !Long',
                                   _min_id :: !Long',
                                   _limit :: !Int'}
instance Data.Binary.Binary Method'Channels'getAdminLog
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {870184064 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                       _channel_2 <- Data.Binary.get;
                                       _q_3 <- Data.Binary.get;
                                       _events_filter_4 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                       _admins_5 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 1);
                                       _max_id_6 <- Data.Binary.get;
                                       _min_id_7 <- Data.Binary.get;
                                       _limit_8 <- Data.Binary.get;
                                       GHC.Base.pure (Method'Channels'getAdminLog _channel_2 _q_3 _events_filter_4 _admins_5 _max_id_6 _min_id_7 _limit_8)}}};
           put to_be_encoded_9 = do {Data.Binary.Put.putWord32le 870184064;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_9._admins,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_9._events_filter,
                                                              0)];
                                     Data.Binary.put to_be_encoded_9._channel;
                                     Data.Binary.put to_be_encoded_9._q;
                                     Data.Binary.put to_be_encoded_9._events_filter;
                                     Data.Binary.put to_be_encoded_9._admins;
                                     Data.Binary.put to_be_encoded_9._max_id;
                                     Data.Binary.put to_be_encoded_9._min_id;
                                     Data.Binary.put to_be_encoded_9._limit}}
instance TLFunctionʼ Method'Channels'getAdminLog
                     Channels'AdminLogResults
data Method'Channels'setStickers
    = Method'Channels'setStickers {_channel :: !InputChannel,
                                   _stickerset :: !InputStickerSet}
instance Data.Binary.Binary Method'Channels'setStickers
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3935085817 -> do {_channel_1 <- Data.Binary.get;
                                        _stickerset_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Channels'setStickers _channel_1 _stickerset_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 3935085817;
                                     Data.Binary.put to_be_encoded_3._channel;
                                     Data.Binary.put to_be_encoded_3._stickerset}}
instance TLFunctionʼ Method'Channels'setStickers Bool
data Method'Channels'readMessageContents
    = Method'Channels'readMessageContents {_channel :: !InputChannel,
                                           _id :: !(Vector Int')}
instance Data.Binary.Binary Method'Channels'readMessageContents
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3937786936 -> do {_channel_1 <- Data.Binary.get;
                                        _id_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Channels'readMessageContents _channel_1 _id_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 3937786936;
                                     Data.Binary.put to_be_encoded_3._channel;
                                     Data.Binary.put to_be_encoded_3._id}}
instance TLFunctionʼ Method'Channels'readMessageContents Bool
data Method'Channels'deleteHistory
    = Method'Channels'deleteHistory {_for_everyone :: !(Maybe True'),
                                     _channel :: !InputChannel,
                                     _max_id :: !Int'}
instance Data.Binary.Binary Method'Channels'deleteHistory
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2611648071 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _for_everyone_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        _channel_3 <- Data.Binary.get;
                                        _max_id_4 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Channels'deleteHistory _for_everyone_2 _channel_3 _max_id_4)}}};
           put to_be_encoded_5 = do {Data.Binary.Put.putWord32le 2611648071;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_5._for_everyone,
                                                              0)];
                                     Data.Binary.put to_be_encoded_5._for_everyone;
                                     Data.Binary.put to_be_encoded_5._channel;
                                     Data.Binary.put to_be_encoded_5._max_id}}
instance TLFunctionʼ Method'Channels'deleteHistory Updates
data Method'Channels'togglePreHistoryHidden
    = Method'Channels'togglePreHistoryHidden {_channel :: !InputChannel,
                                              _enabled :: !Bool}
instance Data.Binary.Binary Method'Channels'togglePreHistoryHidden
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3938171212 -> do {_channel_1 <- Data.Binary.get;
                                        _enabled_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Channels'togglePreHistoryHidden _channel_1 _enabled_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 3938171212;
                                     Data.Binary.put to_be_encoded_3._channel;
                                     Data.Binary.put to_be_encoded_3._enabled}}
instance TLFunctionʼ Method'Channels'togglePreHistoryHidden Updates
data Method'Channels'getLeftChannels
    = Method'Channels'getLeftChannels {_offset :: !Int'}
instance Data.Binary.Binary Method'Channels'getLeftChannels
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2202135744 -> do {_offset_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Channels'getLeftChannels _offset_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 2202135744;
                                     Data.Binary.put to_be_encoded_2._offset}}
instance TLFunctionʼ Method'Channels'getLeftChannels Messages'Chats
data Method'Channels'getGroupsForDiscussion
    = Method'Channels'getGroupsForDiscussion {}
instance Data.Binary.Binary Method'Channels'getGroupsForDiscussion
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {4124758904 -> GHC.Base.pure Method'Channels'getGroupsForDiscussion}};
           put to_be_encoded_1 = do {Data.Binary.Put.putWord32le 4124758904;
                                     GHC.Base.pure ()}}
instance TLFunctionʼ Method'Channels'getGroupsForDiscussion
                     Messages'Chats
data Method'Channels'setDiscussionGroup
    = Method'Channels'setDiscussionGroup {_broadcast :: !InputChannel,
                                          _group :: !InputChannel}
instance Data.Binary.Binary Method'Channels'setDiscussionGroup
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1079520178 -> do {_broadcast_1 <- Data.Binary.get;
                                        _group_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Channels'setDiscussionGroup _broadcast_1 _group_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 1079520178;
                                     Data.Binary.put to_be_encoded_3._broadcast;
                                     Data.Binary.put to_be_encoded_3._group}}
instance TLFunctionʼ Method'Channels'setDiscussionGroup Bool
data Method'Channels'editCreator
    = Method'Channels'editCreator {_channel :: !InputChannel,
                                   _user_id :: !InputUser,
                                   _password :: !InputCheckPasswordSRP}
instance Data.Binary.Binary Method'Channels'editCreator
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2402864415 -> do {_channel_1 <- Data.Binary.get;
                                        _user_id_2 <- Data.Binary.get;
                                        _password_3 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Channels'editCreator _channel_1 _user_id_2 _password_3)}}};
           put to_be_encoded_4 = do {Data.Binary.Put.putWord32le 2402864415;
                                     Data.Binary.put to_be_encoded_4._channel;
                                     Data.Binary.put to_be_encoded_4._user_id;
                                     Data.Binary.put to_be_encoded_4._password}}
instance TLFunctionʼ Method'Channels'editCreator Updates
data Method'Channels'editLocation
    = Method'Channels'editLocation {_channel :: !InputChannel,
                                    _geo_point :: !InputGeoPoint,
                                    _address :: !String'}
instance Data.Binary.Binary Method'Channels'editLocation
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1491484525 -> do {_channel_1 <- Data.Binary.get;
                                        _geo_point_2 <- Data.Binary.get;
                                        _address_3 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Channels'editLocation _channel_1 _geo_point_2 _address_3)}}};
           put to_be_encoded_4 = do {Data.Binary.Put.putWord32le 1491484525;
                                     Data.Binary.put to_be_encoded_4._channel;
                                     Data.Binary.put to_be_encoded_4._geo_point;
                                     Data.Binary.put to_be_encoded_4._address}}
instance TLFunctionʼ Method'Channels'editLocation Bool
data Method'Channels'toggleSlowMode
    = Method'Channels'toggleSlowMode {_channel :: !InputChannel,
                                      _seconds :: !Int'}
instance Data.Binary.Binary Method'Channels'toggleSlowMode
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3990134512 -> do {_channel_1 <- Data.Binary.get;
                                        _seconds_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Channels'toggleSlowMode _channel_1 _seconds_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 3990134512;
                                     Data.Binary.put to_be_encoded_3._channel;
                                     Data.Binary.put to_be_encoded_3._seconds}}
instance TLFunctionʼ Method'Channels'toggleSlowMode Updates
data Method'Channels'getInactiveChannels
    = Method'Channels'getInactiveChannels {}
instance Data.Binary.Binary Method'Channels'getInactiveChannels
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {300429806 -> GHC.Base.pure Method'Channels'getInactiveChannels}};
           put to_be_encoded_1 = do {Data.Binary.Put.putWord32le 300429806;
                                     GHC.Base.pure ()}}
instance TLFunctionʼ Method'Channels'getInactiveChannels
                     Messages'InactiveChats
data Method'Channels'convertToGigagroup
    = Method'Channels'convertToGigagroup {_channel :: !InputChannel}
instance Data.Binary.Binary Method'Channels'convertToGigagroup
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {187239529 -> do {_channel_1 <- Data.Binary.get;
                                       GHC.Base.pure (Method'Channels'convertToGigagroup _channel_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 187239529;
                                     Data.Binary.put to_be_encoded_2._channel}}
instance TLFunctionʼ Method'Channels'convertToGigagroup Updates
data Method'Channels'viewSponsoredMessage
    = Method'Channels'viewSponsoredMessage {_channel :: !InputChannel,
                                            _random_id :: !Bytes'}
instance Data.Binary.Binary Method'Channels'viewSponsoredMessage
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3199130516 -> do {_channel_1 <- Data.Binary.get;
                                        _random_id_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Channels'viewSponsoredMessage _channel_1 _random_id_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 3199130516;
                                     Data.Binary.put to_be_encoded_3._channel;
                                     Data.Binary.put to_be_encoded_3._random_id}}
instance TLFunctionʼ Method'Channels'viewSponsoredMessage Bool
data Method'Channels'getSponsoredMessages
    = Method'Channels'getSponsoredMessages {_channel :: !InputChannel}
instance Data.Binary.Binary Method'Channels'getSponsoredMessages
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3961589695 -> do {_channel_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Channels'getSponsoredMessages _channel_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 3961589695;
                                     Data.Binary.put to_be_encoded_2._channel}}
instance TLFunctionʼ Method'Channels'getSponsoredMessages
                     Messages'SponsoredMessages
data Method'Channels'getSendAs
    = Method'Channels'getSendAs {_peer :: !InputPeer}
instance Data.Binary.Binary Method'Channels'getSendAs
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {231174382 -> do {_peer_1 <- Data.Binary.get;
                                       GHC.Base.pure (Method'Channels'getSendAs _peer_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 231174382;
                                     Data.Binary.put to_be_encoded_2._peer}}
instance TLFunctionʼ Method'Channels'getSendAs Channels'SendAsPeers
data Method'Channels'deleteParticipantHistory
    = Method'Channels'deleteParticipantHistory {_channel :: !InputChannel,
                                                _participant :: !InputPeer}
instance Data.Binary.Binary Method'Channels'deleteParticipantHistory
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {913655003 -> do {_channel_1 <- Data.Binary.get;
                                       _participant_2 <- Data.Binary.get;
                                       GHC.Base.pure (Method'Channels'deleteParticipantHistory _channel_1 _participant_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 913655003;
                                     Data.Binary.put to_be_encoded_3._channel;
                                     Data.Binary.put to_be_encoded_3._participant}}
instance TLFunctionʼ Method'Channels'deleteParticipantHistory
                     Messages'AffectedHistory
data Method'Channels'toggleJoinToSend
    = Method'Channels'toggleJoinToSend {_channel :: !InputChannel,
                                        _enabled :: !Bool}
instance Data.Binary.Binary Method'Channels'toggleJoinToSend
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3838547328 -> do {_channel_1 <- Data.Binary.get;
                                        _enabled_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Channels'toggleJoinToSend _channel_1 _enabled_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 3838547328;
                                     Data.Binary.put to_be_encoded_3._channel;
                                     Data.Binary.put to_be_encoded_3._enabled}}
instance TLFunctionʼ Method'Channels'toggleJoinToSend Updates
data Method'Channels'toggleJoinRequest
    = Method'Channels'toggleJoinRequest {_channel :: !InputChannel,
                                         _enabled :: !Bool}
instance Data.Binary.Binary Method'Channels'toggleJoinRequest
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1277789622 -> do {_channel_1 <- Data.Binary.get;
                                        _enabled_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Channels'toggleJoinRequest _channel_1 _enabled_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 1277789622;
                                     Data.Binary.put to_be_encoded_3._channel;
                                     Data.Binary.put to_be_encoded_3._enabled}}
instance TLFunctionʼ Method'Channels'toggleJoinRequest Updates
data Method'Channels'reorderUsernames
    = Method'Channels'reorderUsernames {_channel :: !InputChannel,
                                        _order :: !(Vector String')}
instance Data.Binary.Binary Method'Channels'reorderUsernames
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3025988893 -> do {_channel_1 <- Data.Binary.get;
                                        _order_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Channels'reorderUsernames _channel_1 _order_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 3025988893;
                                     Data.Binary.put to_be_encoded_3._channel;
                                     Data.Binary.put to_be_encoded_3._order}}
instance TLFunctionʼ Method'Channels'reorderUsernames Bool
data Method'Channels'toggleUsername
    = Method'Channels'toggleUsername {_channel :: !InputChannel,
                                      _username :: !String',
                                      _active :: !Bool}
instance Data.Binary.Binary Method'Channels'toggleUsername
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1358053637 -> do {_channel_1 <- Data.Binary.get;
                                        _username_2 <- Data.Binary.get;
                                        _active_3 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Channels'toggleUsername _channel_1 _username_2 _active_3)}}};
           put to_be_encoded_4 = do {Data.Binary.Put.putWord32le 1358053637;
                                     Data.Binary.put to_be_encoded_4._channel;
                                     Data.Binary.put to_be_encoded_4._username;
                                     Data.Binary.put to_be_encoded_4._active}}
instance TLFunctionʼ Method'Channels'toggleUsername Bool
data Method'Channels'deactivateAllUsernames
    = Method'Channels'deactivateAllUsernames {_channel :: !InputChannel}
instance Data.Binary.Binary Method'Channels'deactivateAllUsernames
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {170155475 -> do {_channel_1 <- Data.Binary.get;
                                       GHC.Base.pure (Method'Channels'deactivateAllUsernames _channel_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 170155475;
                                     Data.Binary.put to_be_encoded_2._channel}}
instance TLFunctionʼ Method'Channels'deactivateAllUsernames Bool
data Method'Channels'toggleForum
    = Method'Channels'toggleForum {_channel :: !InputChannel,
                                   _enabled :: !Bool}
instance Data.Binary.Binary Method'Channels'toggleForum
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2754186025 -> do {_channel_1 <- Data.Binary.get;
                                        _enabled_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Channels'toggleForum _channel_1 _enabled_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 2754186025;
                                     Data.Binary.put to_be_encoded_3._channel;
                                     Data.Binary.put to_be_encoded_3._enabled}}
instance TLFunctionʼ Method'Channels'toggleForum Updates
data Method'Channels'createForumTopic
    = Method'Channels'createForumTopic {_channel :: !InputChannel,
                                        _title :: !String',
                                        _icon_color :: !(Maybe Int'),
                                        _icon_emoji_id :: !(Maybe Long'),
                                        _random_id :: !Long',
                                        _send_as :: !(Maybe InputPeer)}
instance Data.Binary.Binary Method'Channels'createForumTopic
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {4094427684 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _channel_2 <- Data.Binary.get;
                                        _title_3 <- Data.Binary.get;
                                        _icon_color_4 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        _icon_emoji_id_5 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 3);
                                        _random_id_6 <- Data.Binary.get;
                                        _send_as_7 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 2);
                                        GHC.Base.pure (Method'Channels'createForumTopic _channel_2 _title_3 _icon_color_4 _icon_emoji_id_5 _random_id_6 _send_as_7)}}};
           put to_be_encoded_8 = do {Data.Binary.Put.putWord32le 4094427684;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_8._send_as,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_8._icon_emoji_id,
                                                              3),
                                                             (Data.Maybe.isJust to_be_encoded_8._icon_color,
                                                              0)];
                                     Data.Binary.put to_be_encoded_8._channel;
                                     Data.Binary.put to_be_encoded_8._title;
                                     Data.Binary.put to_be_encoded_8._icon_color;
                                     Data.Binary.put to_be_encoded_8._icon_emoji_id;
                                     Data.Binary.put to_be_encoded_8._random_id;
                                     Data.Binary.put to_be_encoded_8._send_as}}
instance TLFunctionʼ Method'Channels'createForumTopic Updates
data Method'Channels'getForumTopics
    = Method'Channels'getForumTopics {_channel :: !InputChannel,
                                      _q :: !(Maybe String'),
                                      _offset_date :: !Int',
                                      _offset_id :: !Int',
                                      _offset_topic :: !Int',
                                      _limit :: !Int'}
instance Data.Binary.Binary Method'Channels'getForumTopics
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {233136337 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                       _channel_2 <- Data.Binary.get;
                                       _q_3 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                       _offset_date_4 <- Data.Binary.get;
                                       _offset_id_5 <- Data.Binary.get;
                                       _offset_topic_6 <- Data.Binary.get;
                                       _limit_7 <- Data.Binary.get;
                                       GHC.Base.pure (Method'Channels'getForumTopics _channel_2 _q_3 _offset_date_4 _offset_id_5 _offset_topic_6 _limit_7)}}};
           put to_be_encoded_8 = do {Data.Binary.Put.putWord32le 233136337;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_8._q,
                                                              0)];
                                     Data.Binary.put to_be_encoded_8._channel;
                                     Data.Binary.put to_be_encoded_8._q;
                                     Data.Binary.put to_be_encoded_8._offset_date;
                                     Data.Binary.put to_be_encoded_8._offset_id;
                                     Data.Binary.put to_be_encoded_8._offset_topic;
                                     Data.Binary.put to_be_encoded_8._limit}}
instance TLFunctionʼ Method'Channels'getForumTopics
                     Messages'ForumTopics
data Method'Channels'getForumTopicsByID
    = Method'Channels'getForumTopicsByID {_channel :: !InputChannel,
                                          _topics :: !(Vector Int')}
instance Data.Binary.Binary Method'Channels'getForumTopicsByID
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2961383097 -> do {_channel_1 <- Data.Binary.get;
                                        _topics_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Channels'getForumTopicsByID _channel_1 _topics_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 2961383097;
                                     Data.Binary.put to_be_encoded_3._channel;
                                     Data.Binary.put to_be_encoded_3._topics}}
instance TLFunctionʼ Method'Channels'getForumTopicsByID
                     Messages'ForumTopics
data Method'Channels'editForumTopic
    = Method'Channels'editForumTopic {_channel :: !InputChannel,
                                      _topic_id :: !Int',
                                      _title :: !(Maybe String'),
                                      _icon_emoji_id :: !(Maybe Long'),
                                      _closed :: !(Maybe Bool),
                                      _hidden :: !(Maybe Bool)}
instance Data.Binary.Binary Method'Channels'editForumTopic
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {4108296581 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _channel_2 <- Data.Binary.get;
                                        _topic_id_3 <- Data.Binary.get;
                                        _title_4 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        _icon_emoji_id_5 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 1);
                                        _closed_6 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 2);
                                        _hidden_7 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 3);
                                        GHC.Base.pure (Method'Channels'editForumTopic _channel_2 _topic_id_3 _title_4 _icon_emoji_id_5 _closed_6 _hidden_7)}}};
           put to_be_encoded_8 = do {Data.Binary.Put.putWord32le 4108296581;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_8._hidden,
                                                              3),
                                                             (Data.Maybe.isJust to_be_encoded_8._closed,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_8._icon_emoji_id,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_8._title,
                                                              0)];
                                     Data.Binary.put to_be_encoded_8._channel;
                                     Data.Binary.put to_be_encoded_8._topic_id;
                                     Data.Binary.put to_be_encoded_8._title;
                                     Data.Binary.put to_be_encoded_8._icon_emoji_id;
                                     Data.Binary.put to_be_encoded_8._closed;
                                     Data.Binary.put to_be_encoded_8._hidden}}
instance TLFunctionʼ Method'Channels'editForumTopic Updates
data Method'Channels'updatePinnedForumTopic
    = Method'Channels'updatePinnedForumTopic {_channel :: !InputChannel,
                                              _topic_id :: !Int',
                                              _pinned :: !Bool}
instance Data.Binary.Binary Method'Channels'updatePinnedForumTopic
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1814925350 -> do {_channel_1 <- Data.Binary.get;
                                        _topic_id_2 <- Data.Binary.get;
                                        _pinned_3 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Channels'updatePinnedForumTopic _channel_1 _topic_id_2 _pinned_3)}}};
           put to_be_encoded_4 = do {Data.Binary.Put.putWord32le 1814925350;
                                     Data.Binary.put to_be_encoded_4._channel;
                                     Data.Binary.put to_be_encoded_4._topic_id;
                                     Data.Binary.put to_be_encoded_4._pinned}}
instance TLFunctionʼ Method'Channels'updatePinnedForumTopic Updates
data Method'Channels'deleteTopicHistory
    = Method'Channels'deleteTopicHistory {_channel :: !InputChannel,
                                          _top_msg_id :: !Int'}
instance Data.Binary.Binary Method'Channels'deleteTopicHistory
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {876830509 -> do {_channel_1 <- Data.Binary.get;
                                       _top_msg_id_2 <- Data.Binary.get;
                                       GHC.Base.pure (Method'Channels'deleteTopicHistory _channel_1 _top_msg_id_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 876830509;
                                     Data.Binary.put to_be_encoded_3._channel;
                                     Data.Binary.put to_be_encoded_3._top_msg_id}}
instance TLFunctionʼ Method'Channels'deleteTopicHistory
                     Messages'AffectedHistory
data Method'Channels'reorderPinnedForumTopics
    = Method'Channels'reorderPinnedForumTopics {_force :: !(Maybe True'),
                                                _channel :: !InputChannel,
                                                _order :: !(Vector Int')}
instance Data.Binary.Binary Method'Channels'reorderPinnedForumTopics
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {693150095 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                       _force_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                       _channel_3 <- Data.Binary.get;
                                       _order_4 <- Data.Binary.get;
                                       GHC.Base.pure (Method'Channels'reorderPinnedForumTopics _force_2 _channel_3 _order_4)}}};
           put to_be_encoded_5 = do {Data.Binary.Put.putWord32le 693150095;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_5._force,
                                                              0)];
                                     Data.Binary.put to_be_encoded_5._force;
                                     Data.Binary.put to_be_encoded_5._channel;
                                     Data.Binary.put to_be_encoded_5._order}}
instance TLFunctionʼ Method'Channels'reorderPinnedForumTopics
                     Updates
data Method'Channels'toggleAntiSpam
    = Method'Channels'toggleAntiSpam {_channel :: !InputChannel,
                                      _enabled :: !Bool}
instance Data.Binary.Binary Method'Channels'toggleAntiSpam
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1760814315 -> do {_channel_1 <- Data.Binary.get;
                                        _enabled_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Channels'toggleAntiSpam _channel_1 _enabled_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 1760814315;
                                     Data.Binary.put to_be_encoded_3._channel;
                                     Data.Binary.put to_be_encoded_3._enabled}}
instance TLFunctionʼ Method'Channels'toggleAntiSpam Updates
data Method'Channels'reportAntiSpamFalsePositive
    = Method'Channels'reportAntiSpamFalsePositive {_channel :: !InputChannel,
                                                   _msg_id :: !Int'}
instance Data.Binary.Binary Method'Channels'reportAntiSpamFalsePositive
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2823857811 -> do {_channel_1 <- Data.Binary.get;
                                        _msg_id_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Channels'reportAntiSpamFalsePositive _channel_1 _msg_id_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 2823857811;
                                     Data.Binary.put to_be_encoded_3._channel;
                                     Data.Binary.put to_be_encoded_3._msg_id}}
instance TLFunctionʼ Method'Channels'reportAntiSpamFalsePositive
                     Bool
data Method'Channels'toggleParticipantsHidden
    = Method'Channels'toggleParticipantsHidden {_channel :: !InputChannel,
                                                _enabled :: !Bool}
instance Data.Binary.Binary Method'Channels'toggleParticipantsHidden
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1785624660 -> do {_channel_1 <- Data.Binary.get;
                                        _enabled_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Channels'toggleParticipantsHidden _channel_1 _enabled_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 1785624660;
                                     Data.Binary.put to_be_encoded_3._channel;
                                     Data.Binary.put to_be_encoded_3._enabled}}
instance TLFunctionʼ Method'Channels'toggleParticipantsHidden
                     Updates
data Method'Channels'clickSponsoredMessage
    = Method'Channels'clickSponsoredMessage {_channel :: !InputChannel,
                                             _random_id :: !Bytes'}
instance Data.Binary.Binary Method'Channels'clickSponsoredMessage
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {414170259 -> do {_channel_1 <- Data.Binary.get;
                                       _random_id_2 <- Data.Binary.get;
                                       GHC.Base.pure (Method'Channels'clickSponsoredMessage _channel_1 _random_id_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 414170259;
                                     Data.Binary.put to_be_encoded_3._channel;
                                     Data.Binary.put to_be_encoded_3._random_id}}
instance TLFunctionʼ Method'Channels'clickSponsoredMessage Bool
data Method'Channels'updateColor
    = Method'Channels'updateColor {_for_profile :: !(Maybe True'),
                                   _channel :: !InputChannel,
                                   _color :: !(Maybe Int'),
                                   _background_emoji_id :: !(Maybe Long')}
instance Data.Binary.Binary Method'Channels'updateColor
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3635033713 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _for_profile_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 1);
                                        _channel_3 <- Data.Binary.get;
                                        _color_4 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 2);
                                        _background_emoji_id_5 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        GHC.Base.pure (Method'Channels'updateColor _for_profile_2 _channel_3 _color_4 _background_emoji_id_5)}}};
           put to_be_encoded_6 = do {Data.Binary.Put.putWord32le 3635033713;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_6._background_emoji_id,
                                                              0),
                                                             (Data.Maybe.isJust to_be_encoded_6._color,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_6._for_profile,
                                                              1)];
                                     Data.Binary.put to_be_encoded_6._for_profile;
                                     Data.Binary.put to_be_encoded_6._channel;
                                     Data.Binary.put to_be_encoded_6._color;
                                     Data.Binary.put to_be_encoded_6._background_emoji_id}}
instance TLFunctionʼ Method'Channels'updateColor Updates
data Method'Channels'toggleViewForumAsMessages
    = Method'Channels'toggleViewForumAsMessages {_channel :: !InputChannel,
                                                 _enabled :: !Bool}
instance Data.Binary.Binary Method'Channels'toggleViewForumAsMessages
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2537077525 -> do {_channel_1 <- Data.Binary.get;
                                        _enabled_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Channels'toggleViewForumAsMessages _channel_1 _enabled_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 2537077525;
                                     Data.Binary.put to_be_encoded_3._channel;
                                     Data.Binary.put to_be_encoded_3._enabled}}
instance TLFunctionʼ Method'Channels'toggleViewForumAsMessages
                     Updates
data Method'Channels'getChannelRecommendations
    = Method'Channels'getChannelRecommendations {_channel :: !InputChannel}
instance Data.Binary.Binary Method'Channels'getChannelRecommendations
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2209811863 -> do {_channel_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Channels'getChannelRecommendations _channel_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 2209811863;
                                     Data.Binary.put to_be_encoded_2._channel}}
instance TLFunctionʼ Method'Channels'getChannelRecommendations
                     Messages'Chats
data Method'Channels'updateEmojiStatus
    = Method'Channels'updateEmojiStatus {_channel :: !InputChannel,
                                         _emoji_status :: !EmojiStatus}
instance Data.Binary.Binary Method'Channels'updateEmojiStatus
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {4040418984 -> do {_channel_1 <- Data.Binary.get;
                                        _emoji_status_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Channels'updateEmojiStatus _channel_1 _emoji_status_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 4040418984;
                                     Data.Binary.put to_be_encoded_3._channel;
                                     Data.Binary.put to_be_encoded_3._emoji_status}}
instance TLFunctionʼ Method'Channels'updateEmojiStatus Updates
data Method'Bots'sendCustomRequest
    = Method'Bots'sendCustomRequest {_custom_method :: !String',
                                     _params :: !DataJSON}
instance Data.Binary.Binary Method'Bots'sendCustomRequest
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2854709741 -> do {_custom_method_1 <- Data.Binary.get;
                                        _params_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Bots'sendCustomRequest _custom_method_1 _params_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 2854709741;
                                     Data.Binary.put to_be_encoded_3._custom_method;
                                     Data.Binary.put to_be_encoded_3._params}}
instance TLFunctionʼ Method'Bots'sendCustomRequest DataJSON
data Method'Bots'answerWebhookJSONQuery
    = Method'Bots'answerWebhookJSONQuery {_query_id :: !Long',
                                          _data :: !DataJSON}
instance Data.Binary.Binary Method'Bots'answerWebhookJSONQuery
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3860938573 -> do {_query_id_1 <- Data.Binary.get;
                                        _data_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Bots'answerWebhookJSONQuery _query_id_1 _data_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 3860938573;
                                     Data.Binary.put to_be_encoded_3._query_id;
                                     Data.Binary.put to_be_encoded_3._data}}
instance TLFunctionʼ Method'Bots'answerWebhookJSONQuery Bool
data Method'Bots'setBotCommands
    = Method'Bots'setBotCommands {_scope :: !BotCommandScope,
                                  _lang_code :: !String',
                                  _commands :: !(Vector BotCommand)}
instance Data.Binary.Binary Method'Bots'setBotCommands
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {85399130 -> do {_scope_1 <- Data.Binary.get;
                                      _lang_code_2 <- Data.Binary.get;
                                      _commands_3 <- Data.Binary.get;
                                      GHC.Base.pure (Method'Bots'setBotCommands _scope_1 _lang_code_2 _commands_3)}}};
           put to_be_encoded_4 = do {Data.Binary.Put.putWord32le 85399130;
                                     Data.Binary.put to_be_encoded_4._scope;
                                     Data.Binary.put to_be_encoded_4._lang_code;
                                     Data.Binary.put to_be_encoded_4._commands}}
instance TLFunctionʼ Method'Bots'setBotCommands Bool
data Method'Bots'resetBotCommands
    = Method'Bots'resetBotCommands {_scope :: !BotCommandScope,
                                    _lang_code :: !String'}
instance Data.Binary.Binary Method'Bots'resetBotCommands
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1032708345 -> do {_scope_1 <- Data.Binary.get;
                                        _lang_code_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Bots'resetBotCommands _scope_1 _lang_code_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 1032708345;
                                     Data.Binary.put to_be_encoded_3._scope;
                                     Data.Binary.put to_be_encoded_3._lang_code}}
instance TLFunctionʼ Method'Bots'resetBotCommands Bool
data Method'Bots'getBotCommands
    = Method'Bots'getBotCommands {_scope :: !BotCommandScope,
                                  _lang_code :: !String'}
instance Data.Binary.Binary Method'Bots'getBotCommands
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3813412310 -> do {_scope_1 <- Data.Binary.get;
                                        _lang_code_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Bots'getBotCommands _scope_1 _lang_code_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 3813412310;
                                     Data.Binary.put to_be_encoded_3._scope;
                                     Data.Binary.put to_be_encoded_3._lang_code}}
instance TLFunctionʼ Method'Bots'getBotCommands (Vector BotCommand)
data Method'Bots'setBotMenuButton
    = Method'Bots'setBotMenuButton {_user_id :: !InputUser,
                                    _button :: !BotMenuButton}
instance Data.Binary.Binary Method'Bots'setBotMenuButton
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1157944655 -> do {_user_id_1 <- Data.Binary.get;
                                        _button_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Bots'setBotMenuButton _user_id_1 _button_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 1157944655;
                                     Data.Binary.put to_be_encoded_3._user_id;
                                     Data.Binary.put to_be_encoded_3._button}}
instance TLFunctionʼ Method'Bots'setBotMenuButton Bool
data Method'Bots'getBotMenuButton
    = Method'Bots'getBotMenuButton {_user_id :: !InputUser}
instance Data.Binary.Binary Method'Bots'getBotMenuButton
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2623597352 -> do {_user_id_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Bots'getBotMenuButton _user_id_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 2623597352;
                                     Data.Binary.put to_be_encoded_2._user_id}}
instance TLFunctionʼ Method'Bots'getBotMenuButton BotMenuButton
data Method'Bots'setBotBroadcastDefaultAdminRights
    = Method'Bots'setBotBroadcastDefaultAdminRights {_admin_rights :: !ChatAdminRights}
instance Data.Binary.Binary Method'Bots'setBotBroadcastDefaultAdminRights
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2021942497 -> do {_admin_rights_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Bots'setBotBroadcastDefaultAdminRights _admin_rights_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 2021942497;
                                     Data.Binary.put to_be_encoded_2._admin_rights}}
instance TLFunctionʼ Method'Bots'setBotBroadcastDefaultAdminRights
                     Bool
data Method'Bots'setBotGroupDefaultAdminRights
    = Method'Bots'setBotGroupDefaultAdminRights {_admin_rights :: !ChatAdminRights}
instance Data.Binary.Binary Method'Bots'setBotGroupDefaultAdminRights
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2455685610 -> do {_admin_rights_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Bots'setBotGroupDefaultAdminRights _admin_rights_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 2455685610;
                                     Data.Binary.put to_be_encoded_2._admin_rights}}
instance TLFunctionʼ Method'Bots'setBotGroupDefaultAdminRights Bool
data Method'Bots'setBotInfo
    = Method'Bots'setBotInfo {_bot :: !(Maybe InputUser),
                              _lang_code :: !String',
                              _name :: !(Maybe String'),
                              _about :: !(Maybe String'),
                              _description :: !(Maybe String')}
instance Data.Binary.Binary Method'Bots'setBotInfo
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {282013987 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                       _bot_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 2);
                                       _lang_code_3 <- Data.Binary.get;
                                       _name_4 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 3);
                                       _about_5 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                       _description_6 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 1);
                                       GHC.Base.pure (Method'Bots'setBotInfo _bot_2 _lang_code_3 _name_4 _about_5 _description_6)}}};
           put to_be_encoded_7 = do {Data.Binary.Put.putWord32le 282013987;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_7._description,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_7._about,
                                                              0),
                                                             (Data.Maybe.isJust to_be_encoded_7._name,
                                                              3),
                                                             (Data.Maybe.isJust to_be_encoded_7._bot,
                                                              2)];
                                     Data.Binary.put to_be_encoded_7._bot;
                                     Data.Binary.put to_be_encoded_7._lang_code;
                                     Data.Binary.put to_be_encoded_7._name;
                                     Data.Binary.put to_be_encoded_7._about;
                                     Data.Binary.put to_be_encoded_7._description}}
instance TLFunctionʼ Method'Bots'setBotInfo Bool
data Method'Bots'getBotInfo
    = Method'Bots'getBotInfo {_bot :: !(Maybe InputUser),
                              _lang_code :: !String'}
instance Data.Binary.Binary Method'Bots'getBotInfo
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3705214205 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _bot_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        _lang_code_3 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Bots'getBotInfo _bot_2 _lang_code_3)}}};
           put to_be_encoded_4 = do {Data.Binary.Put.putWord32le 3705214205;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_4._bot,
                                                              0)];
                                     Data.Binary.put to_be_encoded_4._bot;
                                     Data.Binary.put to_be_encoded_4._lang_code}}
instance TLFunctionʼ Method'Bots'getBotInfo Bots'BotInfo
data Method'Bots'reorderUsernames
    = Method'Bots'reorderUsernames {_bot :: !InputUser,
                                    _order :: !(Vector String')}
instance Data.Binary.Binary Method'Bots'reorderUsernames
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2533994946 -> do {_bot_1 <- Data.Binary.get;
                                        _order_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Bots'reorderUsernames _bot_1 _order_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 2533994946;
                                     Data.Binary.put to_be_encoded_3._bot;
                                     Data.Binary.put to_be_encoded_3._order}}
instance TLFunctionʼ Method'Bots'reorderUsernames Bool
data Method'Bots'toggleUsername
    = Method'Bots'toggleUsername {_bot :: !InputUser,
                                  _username :: !String',
                                  _active :: !Bool}
instance Data.Binary.Binary Method'Bots'toggleUsername
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {87861619 -> do {_bot_1 <- Data.Binary.get;
                                      _username_2 <- Data.Binary.get;
                                      _active_3 <- Data.Binary.get;
                                      GHC.Base.pure (Method'Bots'toggleUsername _bot_1 _username_2 _active_3)}}};
           put to_be_encoded_4 = do {Data.Binary.Put.putWord32le 87861619;
                                     Data.Binary.put to_be_encoded_4._bot;
                                     Data.Binary.put to_be_encoded_4._username;
                                     Data.Binary.put to_be_encoded_4._active}}
instance TLFunctionʼ Method'Bots'toggleUsername Bool
data Method'Bots'canSendMessage
    = Method'Bots'canSendMessage {_bot :: !InputUser}
instance Data.Binary.Binary Method'Bots'canSendMessage
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {324662502 -> do {_bot_1 <- Data.Binary.get;
                                       GHC.Base.pure (Method'Bots'canSendMessage _bot_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 324662502;
                                     Data.Binary.put to_be_encoded_2._bot}}
instance TLFunctionʼ Method'Bots'canSendMessage Bool
data Method'Bots'allowSendMessage
    = Method'Bots'allowSendMessage {_bot :: !InputUser}
instance Data.Binary.Binary Method'Bots'allowSendMessage
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {4046644207 -> do {_bot_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Bots'allowSendMessage _bot_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 4046644207;
                                     Data.Binary.put to_be_encoded_2._bot}}
instance TLFunctionʼ Method'Bots'allowSendMessage Updates
data Method'Bots'invokeWebViewCustomMethod
    = Method'Bots'invokeWebViewCustomMethod {_bot :: !InputUser,
                                             _custom_method :: !String',
                                             _params :: !DataJSON}
instance Data.Binary.Binary Method'Bots'invokeWebViewCustomMethod
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {142591463 -> do {_bot_1 <- Data.Binary.get;
                                       _custom_method_2 <- Data.Binary.get;
                                       _params_3 <- Data.Binary.get;
                                       GHC.Base.pure (Method'Bots'invokeWebViewCustomMethod _bot_1 _custom_method_2 _params_3)}}};
           put to_be_encoded_4 = do {Data.Binary.Put.putWord32le 142591463;
                                     Data.Binary.put to_be_encoded_4._bot;
                                     Data.Binary.put to_be_encoded_4._custom_method;
                                     Data.Binary.put to_be_encoded_4._params}}
instance TLFunctionʼ Method'Bots'invokeWebViewCustomMethod DataJSON
data Method'Payments'getPaymentForm
    = Method'Payments'getPaymentForm {_invoice :: !InputInvoice,
                                      _theme_params :: !(Maybe DataJSON)}
instance Data.Binary.Binary Method'Payments'getPaymentForm
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {924093883 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                       _invoice_2 <- Data.Binary.get;
                                       _theme_params_3 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                       GHC.Base.pure (Method'Payments'getPaymentForm _invoice_2 _theme_params_3)}}};
           put to_be_encoded_4 = do {Data.Binary.Put.putWord32le 924093883;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_4._theme_params,
                                                              0)];
                                     Data.Binary.put to_be_encoded_4._invoice;
                                     Data.Binary.put to_be_encoded_4._theme_params}}
instance TLFunctionʼ Method'Payments'getPaymentForm
                     Payments'PaymentForm
data Method'Payments'getPaymentReceipt
    = Method'Payments'getPaymentReceipt {_peer :: !InputPeer,
                                         _msg_id :: !Int'}
instance Data.Binary.Binary Method'Payments'getPaymentReceipt
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {611897804 -> do {_peer_1 <- Data.Binary.get;
                                       _msg_id_2 <- Data.Binary.get;
                                       GHC.Base.pure (Method'Payments'getPaymentReceipt _peer_1 _msg_id_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 611897804;
                                     Data.Binary.put to_be_encoded_3._peer;
                                     Data.Binary.put to_be_encoded_3._msg_id}}
instance TLFunctionʼ Method'Payments'getPaymentReceipt
                     Payments'PaymentReceipt
data Method'Payments'validateRequestedInfo
    = Method'Payments'validateRequestedInfo {_save :: !(Maybe True'),
                                             _invoice :: !InputInvoice,
                                             _info :: !PaymentRequestedInfo}
instance Data.Binary.Binary Method'Payments'validateRequestedInfo
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3066622251 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _save_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        _invoice_3 <- Data.Binary.get;
                                        _info_4 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Payments'validateRequestedInfo _save_2 _invoice_3 _info_4)}}};
           put to_be_encoded_5 = do {Data.Binary.Put.putWord32le 3066622251;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_5._save,
                                                              0)];
                                     Data.Binary.put to_be_encoded_5._save;
                                     Data.Binary.put to_be_encoded_5._invoice;
                                     Data.Binary.put to_be_encoded_5._info}}
instance TLFunctionʼ Method'Payments'validateRequestedInfo
                     Payments'ValidatedRequestedInfo
data Method'Payments'sendPaymentForm
    = Method'Payments'sendPaymentForm {_form_id :: !Long',
                                       _invoice :: !InputInvoice,
                                       _requested_info_id :: !(Maybe String'),
                                       _shipping_option_id :: !(Maybe String'),
                                       _credentials :: !InputPaymentCredentials,
                                       _tip_amount :: !(Maybe Long')}
instance Data.Binary.Binary Method'Payments'sendPaymentForm
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {755192367 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                       _form_id_2 <- Data.Binary.get;
                                       _invoice_3 <- Data.Binary.get;
                                       _requested_info_id_4 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                       _shipping_option_id_5 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 1);
                                       _credentials_6 <- Data.Binary.get;
                                       _tip_amount_7 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 2);
                                       GHC.Base.pure (Method'Payments'sendPaymentForm _form_id_2 _invoice_3 _requested_info_id_4 _shipping_option_id_5 _credentials_6 _tip_amount_7)}}};
           put to_be_encoded_8 = do {Data.Binary.Put.putWord32le 755192367;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_8._tip_amount,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_8._shipping_option_id,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_8._requested_info_id,
                                                              0)];
                                     Data.Binary.put to_be_encoded_8._form_id;
                                     Data.Binary.put to_be_encoded_8._invoice;
                                     Data.Binary.put to_be_encoded_8._requested_info_id;
                                     Data.Binary.put to_be_encoded_8._shipping_option_id;
                                     Data.Binary.put to_be_encoded_8._credentials;
                                     Data.Binary.put to_be_encoded_8._tip_amount}}
instance TLFunctionʼ Method'Payments'sendPaymentForm
                     Payments'PaymentResult
data Method'Payments'getSavedInfo = Method'Payments'getSavedInfo {}
instance Data.Binary.Binary Method'Payments'getSavedInfo
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {578650699 -> GHC.Base.pure Method'Payments'getSavedInfo}};
           put to_be_encoded_1 = do {Data.Binary.Put.putWord32le 578650699;
                                     GHC.Base.pure ()}}
instance TLFunctionʼ Method'Payments'getSavedInfo
                     Payments'SavedInfo
data Method'Payments'clearSavedInfo
    = Method'Payments'clearSavedInfo {_credentials :: !(Maybe True'),
                                      _info :: !(Maybe True')}
instance Data.Binary.Binary Method'Payments'clearSavedInfo
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3627905217 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _credentials_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        _info_3 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 1);
                                        GHC.Base.pure (Method'Payments'clearSavedInfo _credentials_2 _info_3)}}};
           put to_be_encoded_4 = do {Data.Binary.Put.putWord32le 3627905217;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_4._info,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_4._credentials,
                                                              0)];
                                     Data.Binary.put to_be_encoded_4._credentials;
                                     Data.Binary.put to_be_encoded_4._info}}
instance TLFunctionʼ Method'Payments'clearSavedInfo Bool
data Method'Payments'getBankCardData
    = Method'Payments'getBankCardData {_number :: !String'}
instance Data.Binary.Binary Method'Payments'getBankCardData
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {779736953 -> do {_number_1 <- Data.Binary.get;
                                       GHC.Base.pure (Method'Payments'getBankCardData _number_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 779736953;
                                     Data.Binary.put to_be_encoded_2._number}}
instance TLFunctionʼ Method'Payments'getBankCardData
                     Payments'BankCardData
data Method'Payments'exportInvoice
    = Method'Payments'exportInvoice {_invoice_media :: !InputMedia}
instance Data.Binary.Binary Method'Payments'exportInvoice
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {261206117 -> do {_invoice_media_1 <- Data.Binary.get;
                                       GHC.Base.pure (Method'Payments'exportInvoice _invoice_media_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 261206117;
                                     Data.Binary.put to_be_encoded_2._invoice_media}}
instance TLFunctionʼ Method'Payments'exportInvoice
                     Payments'ExportedInvoice
data Method'Payments'assignAppStoreTransaction
    = Method'Payments'assignAppStoreTransaction {_receipt :: !Bytes',
                                                 _purpose :: !InputStorePaymentPurpose}
instance Data.Binary.Binary Method'Payments'assignAppStoreTransaction
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2163045501 -> do {_receipt_1 <- Data.Binary.get;
                                        _purpose_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Payments'assignAppStoreTransaction _receipt_1 _purpose_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 2163045501;
                                     Data.Binary.put to_be_encoded_3._receipt;
                                     Data.Binary.put to_be_encoded_3._purpose}}
instance TLFunctionʼ Method'Payments'assignAppStoreTransaction
                     Updates
data Method'Payments'assignPlayMarketTransaction
    = Method'Payments'assignPlayMarketTransaction {_receipt :: !DataJSON,
                                                   _purpose :: !InputStorePaymentPurpose}
instance Data.Binary.Binary Method'Payments'assignPlayMarketTransaction
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3757920467 -> do {_receipt_1 <- Data.Binary.get;
                                        _purpose_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Payments'assignPlayMarketTransaction _receipt_1 _purpose_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 3757920467;
                                     Data.Binary.put to_be_encoded_3._receipt;
                                     Data.Binary.put to_be_encoded_3._purpose}}
instance TLFunctionʼ Method'Payments'assignPlayMarketTransaction
                     Updates
data Method'Payments'canPurchasePremium
    = Method'Payments'canPurchasePremium {_purpose :: !InputStorePaymentPurpose}
instance Data.Binary.Binary Method'Payments'canPurchasePremium
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2680266422 -> do {_purpose_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Payments'canPurchasePremium _purpose_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 2680266422;
                                     Data.Binary.put to_be_encoded_2._purpose}}
instance TLFunctionʼ Method'Payments'canPurchasePremium Bool
data Method'Payments'getPremiumGiftCodeOptions
    = Method'Payments'getPremiumGiftCodeOptions {_boost_peer :: !(Maybe InputPeer)}
instance Data.Binary.Binary Method'Payments'getPremiumGiftCodeOptions
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {660060756 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                       _boost_peer_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                       GHC.Base.pure (Method'Payments'getPremiumGiftCodeOptions _boost_peer_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 660060756;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_3._boost_peer,
                                                              0)];
                                     Data.Binary.put to_be_encoded_3._boost_peer}}
instance TLFunctionʼ Method'Payments'getPremiumGiftCodeOptions
                     (Vector PremiumGiftCodeOption)
data Method'Payments'checkGiftCode
    = Method'Payments'checkGiftCode {_slug :: !String'}
instance Data.Binary.Binary Method'Payments'checkGiftCode
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2387719361 -> do {_slug_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Payments'checkGiftCode _slug_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 2387719361;
                                     Data.Binary.put to_be_encoded_2._slug}}
instance TLFunctionʼ Method'Payments'checkGiftCode
                     Payments'CheckedGiftCode
data Method'Payments'applyGiftCode
    = Method'Payments'applyGiftCode {_slug :: !String'}
instance Data.Binary.Binary Method'Payments'applyGiftCode
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {4142032980 -> do {_slug_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Payments'applyGiftCode _slug_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 4142032980;
                                     Data.Binary.put to_be_encoded_2._slug}}
instance TLFunctionʼ Method'Payments'applyGiftCode Updates
data Method'Payments'getGiveawayInfo
    = Method'Payments'getGiveawayInfo {_peer :: !InputPeer,
                                       _msg_id :: !Int'}
instance Data.Binary.Binary Method'Payments'getGiveawayInfo
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {4095972389 -> do {_peer_1 <- Data.Binary.get;
                                        _msg_id_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Payments'getGiveawayInfo _peer_1 _msg_id_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 4095972389;
                                     Data.Binary.put to_be_encoded_3._peer;
                                     Data.Binary.put to_be_encoded_3._msg_id}}
instance TLFunctionʼ Method'Payments'getGiveawayInfo
                     Payments'GiveawayInfo
data Method'Payments'launchPrepaidGiveaway
    = Method'Payments'launchPrepaidGiveaway {_peer :: !InputPeer,
                                             _giveaway_id :: !Long',
                                             _purpose :: !InputStorePaymentPurpose}
instance Data.Binary.Binary Method'Payments'launchPrepaidGiveaway
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1609928480 -> do {_peer_1 <- Data.Binary.get;
                                        _giveaway_id_2 <- Data.Binary.get;
                                        _purpose_3 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Payments'launchPrepaidGiveaway _peer_1 _giveaway_id_2 _purpose_3)}}};
           put to_be_encoded_4 = do {Data.Binary.Put.putWord32le 1609928480;
                                     Data.Binary.put to_be_encoded_4._peer;
                                     Data.Binary.put to_be_encoded_4._giveaway_id;
                                     Data.Binary.put to_be_encoded_4._purpose}}
instance TLFunctionʼ Method'Payments'launchPrepaidGiveaway Updates
data Method'Stickers'createStickerSet
    = Method'Stickers'createStickerSet {_masks :: !(Maybe True'),
                                        _animated :: !(Maybe True'),
                                        _videos :: !(Maybe True'),
                                        _emojis :: !(Maybe True'),
                                        _text_color :: !(Maybe True'),
                                        _user_id :: !InputUser,
                                        _title :: !String',
                                        _short_name :: !String',
                                        _thumb :: !(Maybe InputDocument),
                                        _stickers :: !(Vector InputStickerSetItem),
                                        _software :: !(Maybe String')}
instance Data.Binary.Binary Method'Stickers'createStickerSet
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2418125671 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _masks_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        _animated_3 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 1);
                                        _videos_4 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 4);
                                        _emojis_5 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 5);
                                        _text_color_6 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 6);
                                        _user_id_7 <- Data.Binary.get;
                                        _title_8 <- Data.Binary.get;
                                        _short_name_9 <- Data.Binary.get;
                                        _thumb_10 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 2);
                                        _stickers_11 <- Data.Binary.get;
                                        _software_12 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 3);
                                        GHC.Base.pure (Method'Stickers'createStickerSet _masks_2 _animated_3 _videos_4 _emojis_5 _text_color_6 _user_id_7 _title_8 _short_name_9 _thumb_10 _stickers_11 _software_12)}}};
           put to_be_encoded_13 = do {Data.Binary.Put.putWord32le 2418125671;
                                      Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_13._software,
                                                               3),
                                                              (Data.Maybe.isJust to_be_encoded_13._thumb,
                                                               2),
                                                              (Data.Maybe.isJust to_be_encoded_13._text_color,
                                                               6),
                                                              (Data.Maybe.isJust to_be_encoded_13._emojis,
                                                               5),
                                                              (Data.Maybe.isJust to_be_encoded_13._videos,
                                                               4),
                                                              (Data.Maybe.isJust to_be_encoded_13._animated,
                                                               1),
                                                              (Data.Maybe.isJust to_be_encoded_13._masks,
                                                               0)];
                                      Data.Binary.put to_be_encoded_13._masks;
                                      Data.Binary.put to_be_encoded_13._animated;
                                      Data.Binary.put to_be_encoded_13._videos;
                                      Data.Binary.put to_be_encoded_13._emojis;
                                      Data.Binary.put to_be_encoded_13._text_color;
                                      Data.Binary.put to_be_encoded_13._user_id;
                                      Data.Binary.put to_be_encoded_13._title;
                                      Data.Binary.put to_be_encoded_13._short_name;
                                      Data.Binary.put to_be_encoded_13._thumb;
                                      Data.Binary.put to_be_encoded_13._stickers;
                                      Data.Binary.put to_be_encoded_13._software}}
instance TLFunctionʼ Method'Stickers'createStickerSet
                     Messages'StickerSet
data Method'Stickers'removeStickerFromSet
    = Method'Stickers'removeStickerFromSet {_sticker :: !InputDocument}
instance Data.Binary.Binary Method'Stickers'removeStickerFromSet
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {4151709521 -> do {_sticker_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Stickers'removeStickerFromSet _sticker_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 4151709521;
                                     Data.Binary.put to_be_encoded_2._sticker}}
instance TLFunctionʼ Method'Stickers'removeStickerFromSet
                     Messages'StickerSet
data Method'Stickers'changeStickerPosition
    = Method'Stickers'changeStickerPosition {_sticker :: !InputDocument,
                                             _position :: !Int'}
instance Data.Binary.Binary Method'Stickers'changeStickerPosition
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {4290172106 -> do {_sticker_1 <- Data.Binary.get;
                                        _position_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Stickers'changeStickerPosition _sticker_1 _position_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 4290172106;
                                     Data.Binary.put to_be_encoded_3._sticker;
                                     Data.Binary.put to_be_encoded_3._position}}
instance TLFunctionʼ Method'Stickers'changeStickerPosition
                     Messages'StickerSet
data Method'Stickers'addStickerToSet
    = Method'Stickers'addStickerToSet {_stickerset :: !InputStickerSet,
                                       _sticker :: !InputStickerSetItem}
instance Data.Binary.Binary Method'Stickers'addStickerToSet
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2253651646 -> do {_stickerset_1 <- Data.Binary.get;
                                        _sticker_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Stickers'addStickerToSet _stickerset_1 _sticker_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 2253651646;
                                     Data.Binary.put to_be_encoded_3._stickerset;
                                     Data.Binary.put to_be_encoded_3._sticker}}
instance TLFunctionʼ Method'Stickers'addStickerToSet
                     Messages'StickerSet
data Method'Stickers'setStickerSetThumb
    = Method'Stickers'setStickerSetThumb {_stickerset :: !InputStickerSet,
                                          _thumb :: !(Maybe InputDocument),
                                          _thumb_document_id :: !(Maybe Long')}
instance Data.Binary.Binary Method'Stickers'setStickerSetThumb
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2808763282 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _stickerset_2 <- Data.Binary.get;
                                        _thumb_3 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        _thumb_document_id_4 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 1);
                                        GHC.Base.pure (Method'Stickers'setStickerSetThumb _stickerset_2 _thumb_3 _thumb_document_id_4)}}};
           put to_be_encoded_5 = do {Data.Binary.Put.putWord32le 2808763282;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_5._thumb_document_id,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_5._thumb,
                                                              0)];
                                     Data.Binary.put to_be_encoded_5._stickerset;
                                     Data.Binary.put to_be_encoded_5._thumb;
                                     Data.Binary.put to_be_encoded_5._thumb_document_id}}
instance TLFunctionʼ Method'Stickers'setStickerSetThumb
                     Messages'StickerSet
data Method'Stickers'checkShortName
    = Method'Stickers'checkShortName {_short_name :: !String'}
instance Data.Binary.Binary Method'Stickers'checkShortName
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {676017721 -> do {_short_name_1 <- Data.Binary.get;
                                       GHC.Base.pure (Method'Stickers'checkShortName _short_name_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 676017721;
                                     Data.Binary.put to_be_encoded_2._short_name}}
instance TLFunctionʼ Method'Stickers'checkShortName Bool
data Method'Stickers'suggestShortName
    = Method'Stickers'suggestShortName {_title :: !String'}
instance Data.Binary.Binary Method'Stickers'suggestShortName
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1303364867 -> do {_title_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Stickers'suggestShortName _title_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 1303364867;
                                     Data.Binary.put to_be_encoded_2._title}}
instance TLFunctionʼ Method'Stickers'suggestShortName
                     Stickers'SuggestedShortName
data Method'Stickers'changeSticker
    = Method'Stickers'changeSticker {_sticker :: !InputDocument,
                                     _emoji :: !(Maybe String'),
                                     _mask_coords :: !(Maybe MaskCoords),
                                     _keywords :: !(Maybe String')}
instance Data.Binary.Binary Method'Stickers'changeSticker
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {4115889852 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _sticker_2 <- Data.Binary.get;
                                        _emoji_3 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        _mask_coords_4 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 1);
                                        _keywords_5 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 2);
                                        GHC.Base.pure (Method'Stickers'changeSticker _sticker_2 _emoji_3 _mask_coords_4 _keywords_5)}}};
           put to_be_encoded_6 = do {Data.Binary.Put.putWord32le 4115889852;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_6._keywords,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_6._mask_coords,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_6._emoji,
                                                              0)];
                                     Data.Binary.put to_be_encoded_6._sticker;
                                     Data.Binary.put to_be_encoded_6._emoji;
                                     Data.Binary.put to_be_encoded_6._mask_coords;
                                     Data.Binary.put to_be_encoded_6._keywords}}
instance TLFunctionʼ Method'Stickers'changeSticker
                     Messages'StickerSet
data Method'Stickers'renameStickerSet
    = Method'Stickers'renameStickerSet {_stickerset :: !InputStickerSet,
                                        _title :: !String'}
instance Data.Binary.Binary Method'Stickers'renameStickerSet
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {306912256 -> do {_stickerset_1 <- Data.Binary.get;
                                       _title_2 <- Data.Binary.get;
                                       GHC.Base.pure (Method'Stickers'renameStickerSet _stickerset_1 _title_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 306912256;
                                     Data.Binary.put to_be_encoded_3._stickerset;
                                     Data.Binary.put to_be_encoded_3._title}}
instance TLFunctionʼ Method'Stickers'renameStickerSet
                     Messages'StickerSet
data Method'Stickers'deleteStickerSet
    = Method'Stickers'deleteStickerSet {_stickerset :: !InputStickerSet}
instance Data.Binary.Binary Method'Stickers'deleteStickerSet
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2272281492 -> do {_stickerset_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Stickers'deleteStickerSet _stickerset_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 2272281492;
                                     Data.Binary.put to_be_encoded_2._stickerset}}
instance TLFunctionʼ Method'Stickers'deleteStickerSet Bool
data Method'Phone'getCallConfig = Method'Phone'getCallConfig {}
instance Data.Binary.Binary Method'Phone'getCallConfig
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1430593449 -> GHC.Base.pure Method'Phone'getCallConfig}};
           put to_be_encoded_1 = do {Data.Binary.Put.putWord32le 1430593449;
                                     GHC.Base.pure ()}}
instance TLFunctionʼ Method'Phone'getCallConfig DataJSON
data Method'Phone'requestCall
    = Method'Phone'requestCall {_video :: !(Maybe True'),
                                _user_id :: !InputUser,
                                _random_id :: !Int',
                                _g_a_hash :: !Bytes',
                                _protocol :: !PhoneCallProtocol}
instance Data.Binary.Binary Method'Phone'requestCall
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1124046573 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _video_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        _user_id_3 <- Data.Binary.get;
                                        _random_id_4 <- Data.Binary.get;
                                        _g_a_hash_5 <- Data.Binary.get;
                                        _protocol_6 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Phone'requestCall _video_2 _user_id_3 _random_id_4 _g_a_hash_5 _protocol_6)}}};
           put to_be_encoded_7 = do {Data.Binary.Put.putWord32le 1124046573;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_7._video,
                                                              0)];
                                     Data.Binary.put to_be_encoded_7._video;
                                     Data.Binary.put to_be_encoded_7._user_id;
                                     Data.Binary.put to_be_encoded_7._random_id;
                                     Data.Binary.put to_be_encoded_7._g_a_hash;
                                     Data.Binary.put to_be_encoded_7._protocol}}
instance TLFunctionʼ Method'Phone'requestCall Phone'PhoneCall
data Method'Phone'acceptCall
    = Method'Phone'acceptCall {_peer :: !InputPhoneCall,
                               _g_b :: !Bytes',
                               _protocol :: !PhoneCallProtocol}
instance Data.Binary.Binary Method'Phone'acceptCall
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1003664544 -> do {_peer_1 <- Data.Binary.get;
                                        _g_b_2 <- Data.Binary.get;
                                        _protocol_3 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Phone'acceptCall _peer_1 _g_b_2 _protocol_3)}}};
           put to_be_encoded_4 = do {Data.Binary.Put.putWord32le 1003664544;
                                     Data.Binary.put to_be_encoded_4._peer;
                                     Data.Binary.put to_be_encoded_4._g_b;
                                     Data.Binary.put to_be_encoded_4._protocol}}
instance TLFunctionʼ Method'Phone'acceptCall Phone'PhoneCall
data Method'Phone'confirmCall
    = Method'Phone'confirmCall {_peer :: !InputPhoneCall,
                                _g_a :: !Bytes',
                                _key_fingerprint :: !Long',
                                _protocol :: !PhoneCallProtocol}
instance Data.Binary.Binary Method'Phone'confirmCall
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {788404002 -> do {_peer_1 <- Data.Binary.get;
                                       _g_a_2 <- Data.Binary.get;
                                       _key_fingerprint_3 <- Data.Binary.get;
                                       _protocol_4 <- Data.Binary.get;
                                       GHC.Base.pure (Method'Phone'confirmCall _peer_1 _g_a_2 _key_fingerprint_3 _protocol_4)}}};
           put to_be_encoded_5 = do {Data.Binary.Put.putWord32le 788404002;
                                     Data.Binary.put to_be_encoded_5._peer;
                                     Data.Binary.put to_be_encoded_5._g_a;
                                     Data.Binary.put to_be_encoded_5._key_fingerprint;
                                     Data.Binary.put to_be_encoded_5._protocol}}
instance TLFunctionʼ Method'Phone'confirmCall Phone'PhoneCall
data Method'Phone'receivedCall
    = Method'Phone'receivedCall {_peer :: !InputPhoneCall}
instance Data.Binary.Binary Method'Phone'receivedCall
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {399855457 -> do {_peer_1 <- Data.Binary.get;
                                       GHC.Base.pure (Method'Phone'receivedCall _peer_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 399855457;
                                     Data.Binary.put to_be_encoded_2._peer}}
instance TLFunctionʼ Method'Phone'receivedCall Bool
data Method'Phone'discardCall
    = Method'Phone'discardCall {_video :: !(Maybe True'),
                                _peer :: !InputPhoneCall,
                                _duration :: !Int',
                                _reason :: !PhoneCallDiscardReason,
                                _connection_id :: !Long'}
instance Data.Binary.Binary Method'Phone'discardCall
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2999697856 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _video_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        _peer_3 <- Data.Binary.get;
                                        _duration_4 <- Data.Binary.get;
                                        _reason_5 <- Data.Binary.get;
                                        _connection_id_6 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Phone'discardCall _video_2 _peer_3 _duration_4 _reason_5 _connection_id_6)}}};
           put to_be_encoded_7 = do {Data.Binary.Put.putWord32le 2999697856;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_7._video,
                                                              0)];
                                     Data.Binary.put to_be_encoded_7._video;
                                     Data.Binary.put to_be_encoded_7._peer;
                                     Data.Binary.put to_be_encoded_7._duration;
                                     Data.Binary.put to_be_encoded_7._reason;
                                     Data.Binary.put to_be_encoded_7._connection_id}}
instance TLFunctionʼ Method'Phone'discardCall Updates
data Method'Phone'setCallRating
    = Method'Phone'setCallRating {_user_initiative :: !(Maybe True'),
                                  _peer :: !InputPhoneCall,
                                  _rating :: !Int',
                                  _comment :: !String'}
instance Data.Binary.Binary Method'Phone'setCallRating
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1508562471 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _user_initiative_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        _peer_3 <- Data.Binary.get;
                                        _rating_4 <- Data.Binary.get;
                                        _comment_5 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Phone'setCallRating _user_initiative_2 _peer_3 _rating_4 _comment_5)}}};
           put to_be_encoded_6 = do {Data.Binary.Put.putWord32le 1508562471;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_6._user_initiative,
                                                              0)];
                                     Data.Binary.put to_be_encoded_6._user_initiative;
                                     Data.Binary.put to_be_encoded_6._peer;
                                     Data.Binary.put to_be_encoded_6._rating;
                                     Data.Binary.put to_be_encoded_6._comment}}
instance TLFunctionʼ Method'Phone'setCallRating Updates
data Method'Phone'saveCallDebug
    = Method'Phone'saveCallDebug {_peer :: !InputPhoneCall,
                                  _debug :: !DataJSON}
instance Data.Binary.Binary Method'Phone'saveCallDebug
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {662363518 -> do {_peer_1 <- Data.Binary.get;
                                       _debug_2 <- Data.Binary.get;
                                       GHC.Base.pure (Method'Phone'saveCallDebug _peer_1 _debug_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 662363518;
                                     Data.Binary.put to_be_encoded_3._peer;
                                     Data.Binary.put to_be_encoded_3._debug}}
instance TLFunctionʼ Method'Phone'saveCallDebug Bool
data Method'Phone'sendSignalingData
    = Method'Phone'sendSignalingData {_peer :: !InputPhoneCall,
                                      _data :: !Bytes'}
instance Data.Binary.Binary Method'Phone'sendSignalingData
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {4286223235 -> do {_peer_1 <- Data.Binary.get;
                                        _data_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Phone'sendSignalingData _peer_1 _data_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 4286223235;
                                     Data.Binary.put to_be_encoded_3._peer;
                                     Data.Binary.put to_be_encoded_3._data}}
instance TLFunctionʼ Method'Phone'sendSignalingData Bool
data Method'Phone'createGroupCall
    = Method'Phone'createGroupCall {_rtmp_stream :: !(Maybe True'),
                                    _peer :: !InputPeer,
                                    _random_id :: !Int',
                                    _title :: !(Maybe String'),
                                    _schedule_date :: !(Maybe Int')}
instance Data.Binary.Binary Method'Phone'createGroupCall
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1221445336 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _rtmp_stream_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 2);
                                        _peer_3 <- Data.Binary.get;
                                        _random_id_4 <- Data.Binary.get;
                                        _title_5 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        _schedule_date_6 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 1);
                                        GHC.Base.pure (Method'Phone'createGroupCall _rtmp_stream_2 _peer_3 _random_id_4 _title_5 _schedule_date_6)}}};
           put to_be_encoded_7 = do {Data.Binary.Put.putWord32le 1221445336;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_7._schedule_date,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_7._title,
                                                              0),
                                                             (Data.Maybe.isJust to_be_encoded_7._rtmp_stream,
                                                              2)];
                                     Data.Binary.put to_be_encoded_7._rtmp_stream;
                                     Data.Binary.put to_be_encoded_7._peer;
                                     Data.Binary.put to_be_encoded_7._random_id;
                                     Data.Binary.put to_be_encoded_7._title;
                                     Data.Binary.put to_be_encoded_7._schedule_date}}
instance TLFunctionʼ Method'Phone'createGroupCall Updates
data Method'Phone'joinGroupCall
    = Method'Phone'joinGroupCall {_muted :: !(Maybe True'),
                                  _video_stopped :: !(Maybe True'),
                                  _call :: !InputGroupCall,
                                  _join_as :: !InputPeer,
                                  _invite_hash :: !(Maybe String'),
                                  _params :: !DataJSON}
instance Data.Binary.Binary Method'Phone'joinGroupCall
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2972909435 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _muted_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        _video_stopped_3 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 2);
                                        _call_4 <- Data.Binary.get;
                                        _join_as_5 <- Data.Binary.get;
                                        _invite_hash_6 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 1);
                                        _params_7 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Phone'joinGroupCall _muted_2 _video_stopped_3 _call_4 _join_as_5 _invite_hash_6 _params_7)}}};
           put to_be_encoded_8 = do {Data.Binary.Put.putWord32le 2972909435;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_8._invite_hash,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_8._video_stopped,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_8._muted,
                                                              0)];
                                     Data.Binary.put to_be_encoded_8._muted;
                                     Data.Binary.put to_be_encoded_8._video_stopped;
                                     Data.Binary.put to_be_encoded_8._call;
                                     Data.Binary.put to_be_encoded_8._join_as;
                                     Data.Binary.put to_be_encoded_8._invite_hash;
                                     Data.Binary.put to_be_encoded_8._params}}
instance TLFunctionʼ Method'Phone'joinGroupCall Updates
data Method'Phone'leaveGroupCall
    = Method'Phone'leaveGroupCall {_call :: !InputGroupCall,
                                   _source :: !Int'}
instance Data.Binary.Binary Method'Phone'leaveGroupCall
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1342404601 -> do {_call_1 <- Data.Binary.get;
                                        _source_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Phone'leaveGroupCall _call_1 _source_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 1342404601;
                                     Data.Binary.put to_be_encoded_3._call;
                                     Data.Binary.put to_be_encoded_3._source}}
instance TLFunctionʼ Method'Phone'leaveGroupCall Updates
data Method'Phone'inviteToGroupCall
    = Method'Phone'inviteToGroupCall {_call :: !InputGroupCall,
                                      _users :: !(Vector InputUser)}
instance Data.Binary.Binary Method'Phone'inviteToGroupCall
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2067345760 -> do {_call_1 <- Data.Binary.get;
                                        _users_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Phone'inviteToGroupCall _call_1 _users_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 2067345760;
                                     Data.Binary.put to_be_encoded_3._call;
                                     Data.Binary.put to_be_encoded_3._users}}
instance TLFunctionʼ Method'Phone'inviteToGroupCall Updates
data Method'Phone'discardGroupCall
    = Method'Phone'discardGroupCall {_call :: !InputGroupCall}
instance Data.Binary.Binary Method'Phone'discardGroupCall
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2054648117 -> do {_call_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Phone'discardGroupCall _call_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 2054648117;
                                     Data.Binary.put to_be_encoded_2._call}}
instance TLFunctionʼ Method'Phone'discardGroupCall Updates
data Method'Phone'toggleGroupCallSettings
    = Method'Phone'toggleGroupCallSettings {_reset_invite_hash :: !(Maybe True'),
                                            _call :: !InputGroupCall,
                                            _join_muted :: !(Maybe Bool)}
instance Data.Binary.Binary Method'Phone'toggleGroupCallSettings
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1958458429 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _reset_invite_hash_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 1);
                                        _call_3 <- Data.Binary.get;
                                        _join_muted_4 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        GHC.Base.pure (Method'Phone'toggleGroupCallSettings _reset_invite_hash_2 _call_3 _join_muted_4)}}};
           put to_be_encoded_5 = do {Data.Binary.Put.putWord32le 1958458429;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_5._join_muted,
                                                              0),
                                                             (Data.Maybe.isJust to_be_encoded_5._reset_invite_hash,
                                                              1)];
                                     Data.Binary.put to_be_encoded_5._reset_invite_hash;
                                     Data.Binary.put to_be_encoded_5._call;
                                     Data.Binary.put to_be_encoded_5._join_muted}}
instance TLFunctionʼ Method'Phone'toggleGroupCallSettings Updates
data Method'Phone'getGroupCall
    = Method'Phone'getGroupCall {_call :: !InputGroupCall,
                                 _limit :: !Int'}
instance Data.Binary.Binary Method'Phone'getGroupCall
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {68699611 -> do {_call_1 <- Data.Binary.get;
                                      _limit_2 <- Data.Binary.get;
                                      GHC.Base.pure (Method'Phone'getGroupCall _call_1 _limit_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 68699611;
                                     Data.Binary.put to_be_encoded_3._call;
                                     Data.Binary.put to_be_encoded_3._limit}}
instance TLFunctionʼ Method'Phone'getGroupCall Phone'GroupCall
data Method'Phone'getGroupParticipants
    = Method'Phone'getGroupParticipants {_call :: !InputGroupCall,
                                         _ids :: !(Vector InputPeer),
                                         _sources :: !(Vector Int'),
                                         _offset :: !String',
                                         _limit :: !Int'}
instance Data.Binary.Binary Method'Phone'getGroupParticipants
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3310934187 -> do {_call_1 <- Data.Binary.get;
                                        _ids_2 <- Data.Binary.get;
                                        _sources_3 <- Data.Binary.get;
                                        _offset_4 <- Data.Binary.get;
                                        _limit_5 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Phone'getGroupParticipants _call_1 _ids_2 _sources_3 _offset_4 _limit_5)}}};
           put to_be_encoded_6 = do {Data.Binary.Put.putWord32le 3310934187;
                                     Data.Binary.put to_be_encoded_6._call;
                                     Data.Binary.put to_be_encoded_6._ids;
                                     Data.Binary.put to_be_encoded_6._sources;
                                     Data.Binary.put to_be_encoded_6._offset;
                                     Data.Binary.put to_be_encoded_6._limit}}
instance TLFunctionʼ Method'Phone'getGroupParticipants
                     Phone'GroupParticipants
data Method'Phone'checkGroupCall
    = Method'Phone'checkGroupCall {_call :: !InputGroupCall,
                                   _sources :: !(Vector Int')}
instance Data.Binary.Binary Method'Phone'checkGroupCall
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3046963575 -> do {_call_1 <- Data.Binary.get;
                                        _sources_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Phone'checkGroupCall _call_1 _sources_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 3046963575;
                                     Data.Binary.put to_be_encoded_3._call;
                                     Data.Binary.put to_be_encoded_3._sources}}
instance TLFunctionʼ Method'Phone'checkGroupCall (Vector Int')
data Method'Phone'toggleGroupCallRecord
    = Method'Phone'toggleGroupCallRecord {_start :: !(Maybe True'),
                                          _video :: !(Maybe True'),
                                          _call :: !InputGroupCall,
                                          _title :: !(Maybe String'),
                                          _video_portrait :: !(Maybe Bool)}
instance Data.Binary.Binary Method'Phone'toggleGroupCallRecord
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {4045981448 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _start_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        _video_3 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 2);
                                        _call_4 <- Data.Binary.get;
                                        _title_5 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 1);
                                        _video_portrait_6 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 2);
                                        GHC.Base.pure (Method'Phone'toggleGroupCallRecord _start_2 _video_3 _call_4 _title_5 _video_portrait_6)}}};
           put to_be_encoded_7 = do {Data.Binary.Put.putWord32le 4045981448;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_7._video_portrait,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_7._title,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_7._video,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_7._start,
                                                              0)];
                                     Data.Binary.put to_be_encoded_7._start;
                                     Data.Binary.put to_be_encoded_7._video;
                                     Data.Binary.put to_be_encoded_7._call;
                                     Data.Binary.put to_be_encoded_7._title;
                                     Data.Binary.put to_be_encoded_7._video_portrait}}
instance TLFunctionʼ Method'Phone'toggleGroupCallRecord Updates
data Method'Phone'editGroupCallParticipant
    = Method'Phone'editGroupCallParticipant {_call :: !InputGroupCall,
                                             _participant :: !InputPeer,
                                             _muted :: !(Maybe Bool),
                                             _volume :: !(Maybe Int'),
                                             _raise_hand :: !(Maybe Bool),
                                             _video_stopped :: !(Maybe Bool),
                                             _video_paused :: !(Maybe Bool),
                                             _presentation_paused :: !(Maybe Bool)}
instance Data.Binary.Binary Method'Phone'editGroupCallParticipant
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2770811583 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _call_2 <- Data.Binary.get;
                                        _participant_3 <- Data.Binary.get;
                                        _muted_4 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        _volume_5 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 1);
                                        _raise_hand_6 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 2);
                                        _video_stopped_7 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 3);
                                        _video_paused_8 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 4);
                                        _presentation_paused_9 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 5);
                                        GHC.Base.pure (Method'Phone'editGroupCallParticipant _call_2 _participant_3 _muted_4 _volume_5 _raise_hand_6 _video_stopped_7 _video_paused_8 _presentation_paused_9)}}};
           put to_be_encoded_10 = do {Data.Binary.Put.putWord32le 2770811583;
                                      Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_10._presentation_paused,
                                                               5),
                                                              (Data.Maybe.isJust to_be_encoded_10._video_paused,
                                                               4),
                                                              (Data.Maybe.isJust to_be_encoded_10._video_stopped,
                                                               3),
                                                              (Data.Maybe.isJust to_be_encoded_10._raise_hand,
                                                               2),
                                                              (Data.Maybe.isJust to_be_encoded_10._volume,
                                                               1),
                                                              (Data.Maybe.isJust to_be_encoded_10._muted,
                                                               0)];
                                      Data.Binary.put to_be_encoded_10._call;
                                      Data.Binary.put to_be_encoded_10._participant;
                                      Data.Binary.put to_be_encoded_10._muted;
                                      Data.Binary.put to_be_encoded_10._volume;
                                      Data.Binary.put to_be_encoded_10._raise_hand;
                                      Data.Binary.put to_be_encoded_10._video_stopped;
                                      Data.Binary.put to_be_encoded_10._video_paused;
                                      Data.Binary.put to_be_encoded_10._presentation_paused}}
instance TLFunctionʼ Method'Phone'editGroupCallParticipant Updates
data Method'Phone'editGroupCallTitle
    = Method'Phone'editGroupCallTitle {_call :: !InputGroupCall,
                                       _title :: !String'}
instance Data.Binary.Binary Method'Phone'editGroupCallTitle
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {480685066 -> do {_call_1 <- Data.Binary.get;
                                       _title_2 <- Data.Binary.get;
                                       GHC.Base.pure (Method'Phone'editGroupCallTitle _call_1 _title_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 480685066;
                                     Data.Binary.put to_be_encoded_3._call;
                                     Data.Binary.put to_be_encoded_3._title}}
instance TLFunctionʼ Method'Phone'editGroupCallTitle Updates
data Method'Phone'getGroupCallJoinAs
    = Method'Phone'getGroupCallJoinAs {_peer :: !InputPeer}
instance Data.Binary.Binary Method'Phone'getGroupCallJoinAs
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {4017889594 -> do {_peer_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Phone'getGroupCallJoinAs _peer_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 4017889594;
                                     Data.Binary.put to_be_encoded_2._peer}}
instance TLFunctionʼ Method'Phone'getGroupCallJoinAs
                     Phone'JoinAsPeers
data Method'Phone'exportGroupCallInvite
    = Method'Phone'exportGroupCallInvite {_can_self_unmute :: !(Maybe True'),
                                          _call :: !InputGroupCall}
instance Data.Binary.Binary Method'Phone'exportGroupCallInvite
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3869926527 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _can_self_unmute_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        _call_3 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Phone'exportGroupCallInvite _can_self_unmute_2 _call_3)}}};
           put to_be_encoded_4 = do {Data.Binary.Put.putWord32le 3869926527;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_4._can_self_unmute,
                                                              0)];
                                     Data.Binary.put to_be_encoded_4._can_self_unmute;
                                     Data.Binary.put to_be_encoded_4._call}}
instance TLFunctionʼ Method'Phone'exportGroupCallInvite
                     Phone'ExportedGroupCallInvite
data Method'Phone'toggleGroupCallStartSubscription
    = Method'Phone'toggleGroupCallStartSubscription {_call :: !InputGroupCall,
                                                     _subscribed :: !Bool}
instance Data.Binary.Binary Method'Phone'toggleGroupCallStartSubscription
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {563885286 -> do {_call_1 <- Data.Binary.get;
                                       _subscribed_2 <- Data.Binary.get;
                                       GHC.Base.pure (Method'Phone'toggleGroupCallStartSubscription _call_1 _subscribed_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 563885286;
                                     Data.Binary.put to_be_encoded_3._call;
                                     Data.Binary.put to_be_encoded_3._subscribed}}
instance TLFunctionʼ Method'Phone'toggleGroupCallStartSubscription
                     Updates
data Method'Phone'startScheduledGroupCall
    = Method'Phone'startScheduledGroupCall {_call :: !InputGroupCall}
instance Data.Binary.Binary Method'Phone'startScheduledGroupCall
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1451287362 -> do {_call_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Phone'startScheduledGroupCall _call_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 1451287362;
                                     Data.Binary.put to_be_encoded_2._call}}
instance TLFunctionʼ Method'Phone'startScheduledGroupCall Updates
data Method'Phone'saveDefaultGroupCallJoinAs
    = Method'Phone'saveDefaultGroupCallJoinAs {_peer :: !InputPeer,
                                               _join_as :: !InputPeer}
instance Data.Binary.Binary Method'Phone'saveDefaultGroupCallJoinAs
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1465786252 -> do {_peer_1 <- Data.Binary.get;
                                        _join_as_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Phone'saveDefaultGroupCallJoinAs _peer_1 _join_as_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 1465786252;
                                     Data.Binary.put to_be_encoded_3._peer;
                                     Data.Binary.put to_be_encoded_3._join_as}}
instance TLFunctionʼ Method'Phone'saveDefaultGroupCallJoinAs Bool
data Method'Phone'joinGroupCallPresentation
    = Method'Phone'joinGroupCallPresentation {_call :: !InputGroupCall,
                                              _params :: !DataJSON}
instance Data.Binary.Binary Method'Phone'joinGroupCallPresentation
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3421137860 -> do {_call_1 <- Data.Binary.get;
                                        _params_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Phone'joinGroupCallPresentation _call_1 _params_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 3421137860;
                                     Data.Binary.put to_be_encoded_3._call;
                                     Data.Binary.put to_be_encoded_3._params}}
instance TLFunctionʼ Method'Phone'joinGroupCallPresentation Updates
data Method'Phone'leaveGroupCallPresentation
    = Method'Phone'leaveGroupCallPresentation {_call :: !InputGroupCall}
instance Data.Binary.Binary Method'Phone'leaveGroupCallPresentation
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {475058500 -> do {_call_1 <- Data.Binary.get;
                                       GHC.Base.pure (Method'Phone'leaveGroupCallPresentation _call_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 475058500;
                                     Data.Binary.put to_be_encoded_2._call}}
instance TLFunctionʼ Method'Phone'leaveGroupCallPresentation
                     Updates
data Method'Phone'getGroupCallStreamChannels
    = Method'Phone'getGroupCallStreamChannels {_call :: !InputGroupCall}
instance Data.Binary.Binary Method'Phone'getGroupCallStreamChannels
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {447879488 -> do {_call_1 <- Data.Binary.get;
                                       GHC.Base.pure (Method'Phone'getGroupCallStreamChannels _call_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 447879488;
                                     Data.Binary.put to_be_encoded_2._call}}
instance TLFunctionʼ Method'Phone'getGroupCallStreamChannels
                     Phone'GroupCallStreamChannels
data Method'Phone'getGroupCallStreamRtmpUrl
    = Method'Phone'getGroupCallStreamRtmpUrl {_peer :: !InputPeer,
                                              _revoke :: !Bool}
instance Data.Binary.Binary Method'Phone'getGroupCallStreamRtmpUrl
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3736316863 -> do {_peer_1 <- Data.Binary.get;
                                        _revoke_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Phone'getGroupCallStreamRtmpUrl _peer_1 _revoke_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 3736316863;
                                     Data.Binary.put to_be_encoded_3._peer;
                                     Data.Binary.put to_be_encoded_3._revoke}}
instance TLFunctionʼ Method'Phone'getGroupCallStreamRtmpUrl
                     Phone'GroupCallStreamRtmpUrl
data Method'Phone'saveCallLog
    = Method'Phone'saveCallLog {_peer :: !InputPhoneCall,
                                _file :: !InputFile}
instance Data.Binary.Binary Method'Phone'saveCallLog
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1092913030 -> do {_peer_1 <- Data.Binary.get;
                                        _file_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Phone'saveCallLog _peer_1 _file_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 1092913030;
                                     Data.Binary.put to_be_encoded_3._peer;
                                     Data.Binary.put to_be_encoded_3._file}}
instance TLFunctionʼ Method'Phone'saveCallLog Bool
data Method'Langpack'getLangPack
    = Method'Langpack'getLangPack {_lang_pack :: !String',
                                   _lang_code :: !String'}
instance Data.Binary.Binary Method'Langpack'getLangPack
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {4075959050 -> do {_lang_pack_1 <- Data.Binary.get;
                                        _lang_code_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Langpack'getLangPack _lang_pack_1 _lang_code_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 4075959050;
                                     Data.Binary.put to_be_encoded_3._lang_pack;
                                     Data.Binary.put to_be_encoded_3._lang_code}}
instance TLFunctionʼ Method'Langpack'getLangPack LangPackDifference
data Method'Langpack'getStrings
    = Method'Langpack'getStrings {_lang_pack :: !String',
                                  _lang_code :: !String',
                                  _keys :: !(Vector String')}
instance Data.Binary.Binary Method'Langpack'getStrings
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {4025104387 -> do {_lang_pack_1 <- Data.Binary.get;
                                        _lang_code_2 <- Data.Binary.get;
                                        _keys_3 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Langpack'getStrings _lang_pack_1 _lang_code_2 _keys_3)}}};
           put to_be_encoded_4 = do {Data.Binary.Put.putWord32le 4025104387;
                                     Data.Binary.put to_be_encoded_4._lang_pack;
                                     Data.Binary.put to_be_encoded_4._lang_code;
                                     Data.Binary.put to_be_encoded_4._keys}}
instance TLFunctionʼ Method'Langpack'getStrings
                     (Vector LangPackString)
data Method'Langpack'getDifference
    = Method'Langpack'getDifference {_lang_pack :: !String',
                                     _lang_code :: !String',
                                     _from_version :: !Int'}
instance Data.Binary.Binary Method'Langpack'getDifference
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3449309861 -> do {_lang_pack_1 <- Data.Binary.get;
                                        _lang_code_2 <- Data.Binary.get;
                                        _from_version_3 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Langpack'getDifference _lang_pack_1 _lang_code_2 _from_version_3)}}};
           put to_be_encoded_4 = do {Data.Binary.Put.putWord32le 3449309861;
                                     Data.Binary.put to_be_encoded_4._lang_pack;
                                     Data.Binary.put to_be_encoded_4._lang_code;
                                     Data.Binary.put to_be_encoded_4._from_version}}
instance TLFunctionʼ Method'Langpack'getDifference
                     LangPackDifference
data Method'Langpack'getLanguages
    = Method'Langpack'getLanguages {_lang_pack :: !String'}
instance Data.Binary.Binary Method'Langpack'getLanguages
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1120311183 -> do {_lang_pack_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Langpack'getLanguages _lang_pack_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 1120311183;
                                     Data.Binary.put to_be_encoded_2._lang_pack}}
instance TLFunctionʼ Method'Langpack'getLanguages
                     (Vector LangPackLanguage)
data Method'Langpack'getLanguage
    = Method'Langpack'getLanguage {_lang_pack :: !String',
                                   _lang_code :: !String'}
instance Data.Binary.Binary Method'Langpack'getLanguage
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1784243458 -> do {_lang_pack_1 <- Data.Binary.get;
                                        _lang_code_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Langpack'getLanguage _lang_pack_1 _lang_code_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 1784243458;
                                     Data.Binary.put to_be_encoded_3._lang_pack;
                                     Data.Binary.put to_be_encoded_3._lang_code}}
instance TLFunctionʼ Method'Langpack'getLanguage LangPackLanguage
data Method'Folders'editPeerFolders
    = Method'Folders'editPeerFolders {_folder_peers :: !(Vector InputFolderPeer)}
instance Data.Binary.Binary Method'Folders'editPeerFolders
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1749536939 -> do {_folder_peers_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Folders'editPeerFolders _folder_peers_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 1749536939;
                                     Data.Binary.put to_be_encoded_2._folder_peers}}
instance TLFunctionʼ Method'Folders'editPeerFolders Updates
data Method'Stats'getBroadcastStats
    = Method'Stats'getBroadcastStats {_dark :: !(Maybe True'),
                                      _channel :: !InputChannel}
instance Data.Binary.Binary Method'Stats'getBroadcastStats
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2873246746 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _dark_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        _channel_3 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Stats'getBroadcastStats _dark_2 _channel_3)}}};
           put to_be_encoded_4 = do {Data.Binary.Put.putWord32le 2873246746;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_4._dark,
                                                              0)];
                                     Data.Binary.put to_be_encoded_4._dark;
                                     Data.Binary.put to_be_encoded_4._channel}}
instance TLFunctionʼ Method'Stats'getBroadcastStats
                     Stats'BroadcastStats
data Method'Stats'loadAsyncGraph
    = Method'Stats'loadAsyncGraph {_token :: !String',
                                   _x :: !(Maybe Long')}
instance Data.Binary.Binary Method'Stats'loadAsyncGraph
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1646092192 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _token_2 <- Data.Binary.get;
                                        _x_3 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        GHC.Base.pure (Method'Stats'loadAsyncGraph _token_2 _x_3)}}};
           put to_be_encoded_4 = do {Data.Binary.Put.putWord32le 1646092192;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_4._x,
                                                              0)];
                                     Data.Binary.put to_be_encoded_4._token;
                                     Data.Binary.put to_be_encoded_4._x}}
instance TLFunctionʼ Method'Stats'loadAsyncGraph StatsGraph
data Method'Stats'getMegagroupStats
    = Method'Stats'getMegagroupStats {_dark :: !(Maybe True'),
                                      _channel :: !InputChannel}
instance Data.Binary.Binary Method'Stats'getMegagroupStats
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3705636359 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _dark_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        _channel_3 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Stats'getMegagroupStats _dark_2 _channel_3)}}};
           put to_be_encoded_4 = do {Data.Binary.Put.putWord32le 3705636359;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_4._dark,
                                                              0)];
                                     Data.Binary.put to_be_encoded_4._dark;
                                     Data.Binary.put to_be_encoded_4._channel}}
instance TLFunctionʼ Method'Stats'getMegagroupStats
                     Stats'MegagroupStats
data Method'Stats'getMessagePublicForwards
    = Method'Stats'getMessagePublicForwards {_channel :: !InputChannel,
                                             _msg_id :: !Int',
                                             _offset :: !String',
                                             _limit :: !Int'}
instance Data.Binary.Binary Method'Stats'getMessagePublicForwards
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1595212100 -> do {_channel_1 <- Data.Binary.get;
                                        _msg_id_2 <- Data.Binary.get;
                                        _offset_3 <- Data.Binary.get;
                                        _limit_4 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Stats'getMessagePublicForwards _channel_1 _msg_id_2 _offset_3 _limit_4)}}};
           put to_be_encoded_5 = do {Data.Binary.Put.putWord32le 1595212100;
                                     Data.Binary.put to_be_encoded_5._channel;
                                     Data.Binary.put to_be_encoded_5._msg_id;
                                     Data.Binary.put to_be_encoded_5._offset;
                                     Data.Binary.put to_be_encoded_5._limit}}
instance TLFunctionʼ Method'Stats'getMessagePublicForwards
                     Stats'PublicForwards
data Method'Stats'getMessageStats
    = Method'Stats'getMessageStats {_dark :: !(Maybe True'),
                                    _channel :: !InputChannel,
                                    _msg_id :: !Int'}
instance Data.Binary.Binary Method'Stats'getMessageStats
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3068175349 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _dark_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        _channel_3 <- Data.Binary.get;
                                        _msg_id_4 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Stats'getMessageStats _dark_2 _channel_3 _msg_id_4)}}};
           put to_be_encoded_5 = do {Data.Binary.Put.putWord32le 3068175349;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_5._dark,
                                                              0)];
                                     Data.Binary.put to_be_encoded_5._dark;
                                     Data.Binary.put to_be_encoded_5._channel;
                                     Data.Binary.put to_be_encoded_5._msg_id}}
instance TLFunctionʼ Method'Stats'getMessageStats
                     Stats'MessageStats
data Method'Stats'getStoryStats
    = Method'Stats'getStoryStats {_dark :: !(Maybe True'),
                                  _peer :: !InputPeer,
                                  _id :: !Int'}
instance Data.Binary.Binary Method'Stats'getStoryStats
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {927985472 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                       _dark_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                       _peer_3 <- Data.Binary.get;
                                       _id_4 <- Data.Binary.get;
                                       GHC.Base.pure (Method'Stats'getStoryStats _dark_2 _peer_3 _id_4)}}};
           put to_be_encoded_5 = do {Data.Binary.Put.putWord32le 927985472;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_5._dark,
                                                              0)];
                                     Data.Binary.put to_be_encoded_5._dark;
                                     Data.Binary.put to_be_encoded_5._peer;
                                     Data.Binary.put to_be_encoded_5._id}}
instance TLFunctionʼ Method'Stats'getStoryStats Stats'StoryStats
data Method'Stats'getStoryPublicForwards
    = Method'Stats'getStoryPublicForwards {_peer :: !InputPeer,
                                           _id :: !Int',
                                           _offset :: !String',
                                           _limit :: !Int'}
instance Data.Binary.Binary Method'Stats'getStoryPublicForwards
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2789441270 -> do {_peer_1 <- Data.Binary.get;
                                        _id_2 <- Data.Binary.get;
                                        _offset_3 <- Data.Binary.get;
                                        _limit_4 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Stats'getStoryPublicForwards _peer_1 _id_2 _offset_3 _limit_4)}}};
           put to_be_encoded_5 = do {Data.Binary.Put.putWord32le 2789441270;
                                     Data.Binary.put to_be_encoded_5._peer;
                                     Data.Binary.put to_be_encoded_5._id;
                                     Data.Binary.put to_be_encoded_5._offset;
                                     Data.Binary.put to_be_encoded_5._limit}}
instance TLFunctionʼ Method'Stats'getStoryPublicForwards
                     Stats'PublicForwards
data Method'Chatlists'exportChatlistInvite
    = Method'Chatlists'exportChatlistInvite {_chatlist :: !InputChatlist,
                                             _title :: !String',
                                             _peers :: !(Vector InputPeer)}
instance Data.Binary.Binary Method'Chatlists'exportChatlistInvite
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2222081934 -> do {_chatlist_1 <- Data.Binary.get;
                                        _title_2 <- Data.Binary.get;
                                        _peers_3 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Chatlists'exportChatlistInvite _chatlist_1 _title_2 _peers_3)}}};
           put to_be_encoded_4 = do {Data.Binary.Put.putWord32le 2222081934;
                                     Data.Binary.put to_be_encoded_4._chatlist;
                                     Data.Binary.put to_be_encoded_4._title;
                                     Data.Binary.put to_be_encoded_4._peers}}
instance TLFunctionʼ Method'Chatlists'exportChatlistInvite
                     Chatlists'ExportedChatlistInvite
data Method'Chatlists'deleteExportedInvite
    = Method'Chatlists'deleteExportedInvite {_chatlist :: !InputChatlist,
                                             _slug :: !String'}
instance Data.Binary.Binary Method'Chatlists'deleteExportedInvite
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1906072670 -> do {_chatlist_1 <- Data.Binary.get;
                                        _slug_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Chatlists'deleteExportedInvite _chatlist_1 _slug_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 1906072670;
                                     Data.Binary.put to_be_encoded_3._chatlist;
                                     Data.Binary.put to_be_encoded_3._slug}}
instance TLFunctionʼ Method'Chatlists'deleteExportedInvite Bool
data Method'Chatlists'editExportedInvite
    = Method'Chatlists'editExportedInvite {_chatlist :: !InputChatlist,
                                           _slug :: !String',
                                           _title :: !(Maybe String'),
                                           _peers :: !(Maybe (Vector InputPeer))}
instance Data.Binary.Binary Method'Chatlists'editExportedInvite
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1698543165 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _chatlist_2 <- Data.Binary.get;
                                        _slug_3 <- Data.Binary.get;
                                        _title_4 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 1);
                                        _peers_5 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 2);
                                        GHC.Base.pure (Method'Chatlists'editExportedInvite _chatlist_2 _slug_3 _title_4 _peers_5)}}};
           put to_be_encoded_6 = do {Data.Binary.Put.putWord32le 1698543165;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_6._peers,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_6._title,
                                                              1)];
                                     Data.Binary.put to_be_encoded_6._chatlist;
                                     Data.Binary.put to_be_encoded_6._slug;
                                     Data.Binary.put to_be_encoded_6._title;
                                     Data.Binary.put to_be_encoded_6._peers}}
instance TLFunctionʼ Method'Chatlists'editExportedInvite
                     ExportedChatlistInvite
data Method'Chatlists'getExportedInvites
    = Method'Chatlists'getExportedInvites {_chatlist :: !InputChatlist}
instance Data.Binary.Binary Method'Chatlists'getExportedInvites
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3456359043 -> do {_chatlist_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Chatlists'getExportedInvites _chatlist_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 3456359043;
                                     Data.Binary.put to_be_encoded_2._chatlist}}
instance TLFunctionʼ Method'Chatlists'getExportedInvites
                     Chatlists'ExportedInvites
data Method'Chatlists'checkChatlistInvite
    = Method'Chatlists'checkChatlistInvite {_slug :: !String'}
instance Data.Binary.Binary Method'Chatlists'checkChatlistInvite
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1103171583 -> do {_slug_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Chatlists'checkChatlistInvite _slug_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 1103171583;
                                     Data.Binary.put to_be_encoded_2._slug}}
instance TLFunctionʼ Method'Chatlists'checkChatlistInvite
                     Chatlists'ChatlistInvite
data Method'Chatlists'joinChatlistInvite
    = Method'Chatlists'joinChatlistInvite {_slug :: !String',
                                           _peers :: !(Vector InputPeer)}
instance Data.Binary.Binary Method'Chatlists'joinChatlistInvite
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2796675994 -> do {_slug_1 <- Data.Binary.get;
                                        _peers_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Chatlists'joinChatlistInvite _slug_1 _peers_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 2796675994;
                                     Data.Binary.put to_be_encoded_3._slug;
                                     Data.Binary.put to_be_encoded_3._peers}}
instance TLFunctionʼ Method'Chatlists'joinChatlistInvite Updates
data Method'Chatlists'getChatlistUpdates
    = Method'Chatlists'getChatlistUpdates {_chatlist :: !InputChatlist}
instance Data.Binary.Binary Method'Chatlists'getChatlistUpdates
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2302776609 -> do {_chatlist_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Chatlists'getChatlistUpdates _chatlist_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 2302776609;
                                     Data.Binary.put to_be_encoded_2._chatlist}}
instance TLFunctionʼ Method'Chatlists'getChatlistUpdates
                     Chatlists'ChatlistUpdates
data Method'Chatlists'joinChatlistUpdates
    = Method'Chatlists'joinChatlistUpdates {_chatlist :: !InputChatlist,
                                            _peers :: !(Vector InputPeer)}
instance Data.Binary.Binary Method'Chatlists'joinChatlistUpdates
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3767138549 -> do {_chatlist_1 <- Data.Binary.get;
                                        _peers_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Chatlists'joinChatlistUpdates _chatlist_1 _peers_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 3767138549;
                                     Data.Binary.put to_be_encoded_3._chatlist;
                                     Data.Binary.put to_be_encoded_3._peers}}
instance TLFunctionʼ Method'Chatlists'joinChatlistUpdates Updates
data Method'Chatlists'hideChatlistUpdates
    = Method'Chatlists'hideChatlistUpdates {_chatlist :: !InputChatlist}
instance Data.Binary.Binary Method'Chatlists'hideChatlistUpdates
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1726252795 -> do {_chatlist_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Chatlists'hideChatlistUpdates _chatlist_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 1726252795;
                                     Data.Binary.put to_be_encoded_2._chatlist}}
instance TLFunctionʼ Method'Chatlists'hideChatlistUpdates Bool
data Method'Chatlists'getLeaveChatlistSuggestions
    = Method'Chatlists'getLeaveChatlistSuggestions {_chatlist :: !InputChatlist}
instance Data.Binary.Binary Method'Chatlists'getLeaveChatlistSuggestions
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {4257011476 -> do {_chatlist_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Chatlists'getLeaveChatlistSuggestions _chatlist_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 4257011476;
                                     Data.Binary.put to_be_encoded_2._chatlist}}
instance TLFunctionʼ Method'Chatlists'getLeaveChatlistSuggestions
                     (Vector Peer)
data Method'Chatlists'leaveChatlist
    = Method'Chatlists'leaveChatlist {_chatlist :: !InputChatlist,
                                      _peers :: !(Vector InputPeer)}
instance Data.Binary.Binary Method'Chatlists'leaveChatlist
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1962598714 -> do {_chatlist_1 <- Data.Binary.get;
                                        _peers_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Chatlists'leaveChatlist _chatlist_1 _peers_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 1962598714;
                                     Data.Binary.put to_be_encoded_3._chatlist;
                                     Data.Binary.put to_be_encoded_3._peers}}
instance TLFunctionʼ Method'Chatlists'leaveChatlist Updates
data Method'Stories'canSendStory
    = Method'Stories'canSendStory {_peer :: !InputPeer}
instance Data.Binary.Binary Method'Stories'canSendStory
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3353337821 -> do {_peer_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Stories'canSendStory _peer_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 3353337821;
                                     Data.Binary.put to_be_encoded_2._peer}}
instance TLFunctionʼ Method'Stories'canSendStory Bool
data Method'Stories'sendStory
    = Method'Stories'sendStory {_pinned :: !(Maybe True'),
                                _noforwards :: !(Maybe True'),
                                _fwd_modified :: !(Maybe True'),
                                _peer :: !InputPeer,
                                _media :: !InputMedia,
                                _media_areas :: !(Maybe (Vector MediaArea)),
                                _caption :: !(Maybe String'),
                                _entities :: !(Maybe (Vector MessageEntity)),
                                _privacy_rules :: !(Vector InputPrivacyRule),
                                _random_id :: !Long',
                                _period :: !(Maybe Int'),
                                _fwd_from_id :: !(Maybe InputPeer),
                                _fwd_from_story :: !(Maybe Int')}
instance Data.Binary.Binary Method'Stories'sendStory
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3840305483 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _pinned_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 2);
                                        _noforwards_3 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 4);
                                        _fwd_modified_4 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 7);
                                        _peer_5 <- Data.Binary.get;
                                        _media_6 <- Data.Binary.get;
                                        _media_areas_7 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 5);
                                        _caption_8 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        _entities_9 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 1);
                                        _privacy_rules_10 <- Data.Binary.get;
                                        _random_id_11 <- Data.Binary.get;
                                        _period_12 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 3);
                                        _fwd_from_id_13 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 6);
                                        _fwd_from_story_14 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 6);
                                        GHC.Base.pure (Method'Stories'sendStory _pinned_2 _noforwards_3 _fwd_modified_4 _peer_5 _media_6 _media_areas_7 _caption_8 _entities_9 _privacy_rules_10 _random_id_11 _period_12 _fwd_from_id_13 _fwd_from_story_14)}}};
           put to_be_encoded_15 = do {Data.Binary.Put.putWord32le 3840305483;
                                      Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_15._fwd_from_story,
                                                               6),
                                                              (Data.Maybe.isJust to_be_encoded_15._fwd_from_id,
                                                               6),
                                                              (Data.Maybe.isJust to_be_encoded_15._period,
                                                               3),
                                                              (Data.Maybe.isJust to_be_encoded_15._entities,
                                                               1),
                                                              (Data.Maybe.isJust to_be_encoded_15._caption,
                                                               0),
                                                              (Data.Maybe.isJust to_be_encoded_15._media_areas,
                                                               5),
                                                              (Data.Maybe.isJust to_be_encoded_15._fwd_modified,
                                                               7),
                                                              (Data.Maybe.isJust to_be_encoded_15._noforwards,
                                                               4),
                                                              (Data.Maybe.isJust to_be_encoded_15._pinned,
                                                               2)];
                                      Data.Binary.put to_be_encoded_15._pinned;
                                      Data.Binary.put to_be_encoded_15._noforwards;
                                      Data.Binary.put to_be_encoded_15._fwd_modified;
                                      Data.Binary.put to_be_encoded_15._peer;
                                      Data.Binary.put to_be_encoded_15._media;
                                      Data.Binary.put to_be_encoded_15._media_areas;
                                      Data.Binary.put to_be_encoded_15._caption;
                                      Data.Binary.put to_be_encoded_15._entities;
                                      Data.Binary.put to_be_encoded_15._privacy_rules;
                                      Data.Binary.put to_be_encoded_15._random_id;
                                      Data.Binary.put to_be_encoded_15._period;
                                      Data.Binary.put to_be_encoded_15._fwd_from_id;
                                      Data.Binary.put to_be_encoded_15._fwd_from_story}}
instance TLFunctionʼ Method'Stories'sendStory Updates
data Method'Stories'editStory
    = Method'Stories'editStory {_peer :: !InputPeer,
                                _id :: !Int',
                                _media :: !(Maybe InputMedia),
                                _media_areas :: !(Maybe (Vector MediaArea)),
                                _caption :: !(Maybe String'),
                                _entities :: !(Maybe (Vector MessageEntity)),
                                _privacy_rules :: !(Maybe (Vector InputPrivacyRule))}
instance Data.Binary.Binary Method'Stories'editStory
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3045308998 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _peer_2 <- Data.Binary.get;
                                        _id_3 <- Data.Binary.get;
                                        _media_4 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        _media_areas_5 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 3);
                                        _caption_6 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 1);
                                        _entities_7 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 1);
                                        _privacy_rules_8 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 2);
                                        GHC.Base.pure (Method'Stories'editStory _peer_2 _id_3 _media_4 _media_areas_5 _caption_6 _entities_7 _privacy_rules_8)}}};
           put to_be_encoded_9 = do {Data.Binary.Put.putWord32le 3045308998;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_9._privacy_rules,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_9._entities,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_9._caption,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_9._media_areas,
                                                              3),
                                                             (Data.Maybe.isJust to_be_encoded_9._media,
                                                              0)];
                                     Data.Binary.put to_be_encoded_9._peer;
                                     Data.Binary.put to_be_encoded_9._id;
                                     Data.Binary.put to_be_encoded_9._media;
                                     Data.Binary.put to_be_encoded_9._media_areas;
                                     Data.Binary.put to_be_encoded_9._caption;
                                     Data.Binary.put to_be_encoded_9._entities;
                                     Data.Binary.put to_be_encoded_9._privacy_rules}}
instance TLFunctionʼ Method'Stories'editStory Updates
data Method'Stories'deleteStories
    = Method'Stories'deleteStories {_peer :: !InputPeer,
                                    _id :: !(Vector Int')}
instance Data.Binary.Binary Method'Stories'deleteStories
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2925124447 -> do {_peer_1 <- Data.Binary.get;
                                        _id_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Stories'deleteStories _peer_1 _id_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 2925124447;
                                     Data.Binary.put to_be_encoded_3._peer;
                                     Data.Binary.put to_be_encoded_3._id}}
instance TLFunctionʼ Method'Stories'deleteStories (Vector Int')
data Method'Stories'togglePinned
    = Method'Stories'togglePinned {_peer :: !InputPeer,
                                   _id :: !(Vector Int'),
                                   _pinned :: !Bool}
instance Data.Binary.Binary Method'Stories'togglePinned
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2591400431 -> do {_peer_1 <- Data.Binary.get;
                                        _id_2 <- Data.Binary.get;
                                        _pinned_3 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Stories'togglePinned _peer_1 _id_2 _pinned_3)}}};
           put to_be_encoded_4 = do {Data.Binary.Put.putWord32le 2591400431;
                                     Data.Binary.put to_be_encoded_4._peer;
                                     Data.Binary.put to_be_encoded_4._id;
                                     Data.Binary.put to_be_encoded_4._pinned}}
instance TLFunctionʼ Method'Stories'togglePinned (Vector Int')
data Method'Stories'getAllStories
    = Method'Stories'getAllStories {_next :: !(Maybe True'),
                                    _hidden :: !(Maybe True'),
                                    _state :: !(Maybe String')}
instance Data.Binary.Binary Method'Stories'getAllStories
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {4004566565 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _next_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 1);
                                        _hidden_3 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 2);
                                        _state_4 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        GHC.Base.pure (Method'Stories'getAllStories _next_2 _hidden_3 _state_4)}}};
           put to_be_encoded_5 = do {Data.Binary.Put.putWord32le 4004566565;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_5._state,
                                                              0),
                                                             (Data.Maybe.isJust to_be_encoded_5._hidden,
                                                              2),
                                                             (Data.Maybe.isJust to_be_encoded_5._next,
                                                              1)];
                                     Data.Binary.put to_be_encoded_5._next;
                                     Data.Binary.put to_be_encoded_5._hidden;
                                     Data.Binary.put to_be_encoded_5._state}}
instance TLFunctionʼ Method'Stories'getAllStories
                     Stories'AllStories
data Method'Stories'getPinnedStories
    = Method'Stories'getPinnedStories {_peer :: !InputPeer,
                                       _offset_id :: !Int',
                                       _limit :: !Int'}
instance Data.Binary.Binary Method'Stories'getPinnedStories
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1478600156 -> do {_peer_1 <- Data.Binary.get;
                                        _offset_id_2 <- Data.Binary.get;
                                        _limit_3 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Stories'getPinnedStories _peer_1 _offset_id_2 _limit_3)}}};
           put to_be_encoded_4 = do {Data.Binary.Put.putWord32le 1478600156;
                                     Data.Binary.put to_be_encoded_4._peer;
                                     Data.Binary.put to_be_encoded_4._offset_id;
                                     Data.Binary.put to_be_encoded_4._limit}}
instance TLFunctionʼ Method'Stories'getPinnedStories
                     Stories'Stories
data Method'Stories'getStoriesArchive
    = Method'Stories'getStoriesArchive {_peer :: !InputPeer,
                                        _offset_id :: !Int',
                                        _limit :: !Int'}
instance Data.Binary.Binary Method'Stories'getStoriesArchive
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3023380502 -> do {_peer_1 <- Data.Binary.get;
                                        _offset_id_2 <- Data.Binary.get;
                                        _limit_3 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Stories'getStoriesArchive _peer_1 _offset_id_2 _limit_3)}}};
           put to_be_encoded_4 = do {Data.Binary.Put.putWord32le 3023380502;
                                     Data.Binary.put to_be_encoded_4._peer;
                                     Data.Binary.put to_be_encoded_4._offset_id;
                                     Data.Binary.put to_be_encoded_4._limit}}
instance TLFunctionʼ Method'Stories'getStoriesArchive
                     Stories'Stories
data Method'Stories'getStoriesByID
    = Method'Stories'getStoriesByID {_peer :: !InputPeer,
                                     _id :: !(Vector Int')}
instance Data.Binary.Binary Method'Stories'getStoriesByID
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1467271796 -> do {_peer_1 <- Data.Binary.get;
                                        _id_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Stories'getStoriesByID _peer_1 _id_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 1467271796;
                                     Data.Binary.put to_be_encoded_3._peer;
                                     Data.Binary.put to_be_encoded_3._id}}
instance TLFunctionʼ Method'Stories'getStoriesByID Stories'Stories
data Method'Stories'toggleAllStoriesHidden
    = Method'Stories'toggleAllStoriesHidden {_hidden :: !Bool}
instance Data.Binary.Binary Method'Stories'toggleAllStoriesHidden
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2082822084 -> do {_hidden_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Stories'toggleAllStoriesHidden _hidden_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 2082822084;
                                     Data.Binary.put to_be_encoded_2._hidden}}
instance TLFunctionʼ Method'Stories'toggleAllStoriesHidden Bool
data Method'Stories'readStories
    = Method'Stories'readStories {_peer :: !InputPeer,
                                  _max_id :: !Int'}
instance Data.Binary.Binary Method'Stories'readStories
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2773932744 -> do {_peer_1 <- Data.Binary.get;
                                        _max_id_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Stories'readStories _peer_1 _max_id_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 2773932744;
                                     Data.Binary.put to_be_encoded_3._peer;
                                     Data.Binary.put to_be_encoded_3._max_id}}
instance TLFunctionʼ Method'Stories'readStories (Vector Int')
data Method'Stories'incrementStoryViews
    = Method'Stories'incrementStoryViews {_peer :: !InputPeer,
                                          _id :: !(Vector Int')}
instance Data.Binary.Binary Method'Stories'incrementStoryViews
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2986511099 -> do {_peer_1 <- Data.Binary.get;
                                        _id_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Stories'incrementStoryViews _peer_1 _id_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 2986511099;
                                     Data.Binary.put to_be_encoded_3._peer;
                                     Data.Binary.put to_be_encoded_3._id}}
instance TLFunctionʼ Method'Stories'incrementStoryViews Bool
data Method'Stories'getStoryViewsList
    = Method'Stories'getStoryViewsList {_just_contacts :: !(Maybe True'),
                                        _reactions_first :: !(Maybe True'),
                                        _forwards_first :: !(Maybe True'),
                                        _peer :: !InputPeer,
                                        _q :: !(Maybe String'),
                                        _id :: !Int',
                                        _offset :: !String',
                                        _limit :: !Int'}
instance Data.Binary.Binary Method'Stories'getStoryViewsList
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2127707223 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _just_contacts_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        _reactions_first_3 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 2);
                                        _forwards_first_4 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 3);
                                        _peer_5 <- Data.Binary.get;
                                        _q_6 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 1);
                                        _id_7 <- Data.Binary.get;
                                        _offset_8 <- Data.Binary.get;
                                        _limit_9 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Stories'getStoryViewsList _just_contacts_2 _reactions_first_3 _forwards_first_4 _peer_5 _q_6 _id_7 _offset_8 _limit_9)}}};
           put to_be_encoded_10 = do {Data.Binary.Put.putWord32le 2127707223;
                                      Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_10._q,
                                                               1),
                                                              (Data.Maybe.isJust to_be_encoded_10._forwards_first,
                                                               3),
                                                              (Data.Maybe.isJust to_be_encoded_10._reactions_first,
                                                               2),
                                                              (Data.Maybe.isJust to_be_encoded_10._just_contacts,
                                                               0)];
                                      Data.Binary.put to_be_encoded_10._just_contacts;
                                      Data.Binary.put to_be_encoded_10._reactions_first;
                                      Data.Binary.put to_be_encoded_10._forwards_first;
                                      Data.Binary.put to_be_encoded_10._peer;
                                      Data.Binary.put to_be_encoded_10._q;
                                      Data.Binary.put to_be_encoded_10._id;
                                      Data.Binary.put to_be_encoded_10._offset;
                                      Data.Binary.put to_be_encoded_10._limit}}
instance TLFunctionʼ Method'Stories'getStoryViewsList
                     Stories'StoryViewsList
data Method'Stories'getStoriesViews
    = Method'Stories'getStoriesViews {_peer :: !InputPeer,
                                      _id :: !(Vector Int')}
instance Data.Binary.Binary Method'Stories'getStoriesViews
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {685862088 -> do {_peer_1 <- Data.Binary.get;
                                       _id_2 <- Data.Binary.get;
                                       GHC.Base.pure (Method'Stories'getStoriesViews _peer_1 _id_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 685862088;
                                     Data.Binary.put to_be_encoded_3._peer;
                                     Data.Binary.put to_be_encoded_3._id}}
instance TLFunctionʼ Method'Stories'getStoriesViews
                     Stories'StoryViews
data Method'Stories'exportStoryLink
    = Method'Stories'exportStoryLink {_peer :: !InputPeer,
                                      _id :: !Int'}
instance Data.Binary.Binary Method'Stories'exportStoryLink
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2072899360 -> do {_peer_1 <- Data.Binary.get;
                                        _id_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Stories'exportStoryLink _peer_1 _id_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 2072899360;
                                     Data.Binary.put to_be_encoded_3._peer;
                                     Data.Binary.put to_be_encoded_3._id}}
instance TLFunctionʼ Method'Stories'exportStoryLink
                     ExportedStoryLink
data Method'Stories'report
    = Method'Stories'report {_peer :: !InputPeer,
                             _id :: !(Vector Int'),
                             _reason :: !ReportReason,
                             _message :: !String'}
instance Data.Binary.Binary Method'Stories'report
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {421788300 -> do {_peer_1 <- Data.Binary.get;
                                       _id_2 <- Data.Binary.get;
                                       _reason_3 <- Data.Binary.get;
                                       _message_4 <- Data.Binary.get;
                                       GHC.Base.pure (Method'Stories'report _peer_1 _id_2 _reason_3 _message_4)}}};
           put to_be_encoded_5 = do {Data.Binary.Put.putWord32le 421788300;
                                     Data.Binary.put to_be_encoded_5._peer;
                                     Data.Binary.put to_be_encoded_5._id;
                                     Data.Binary.put to_be_encoded_5._reason;
                                     Data.Binary.put to_be_encoded_5._message}}
instance TLFunctionʼ Method'Stories'report Bool
data Method'Stories'activateStealthMode
    = Method'Stories'activateStealthMode {_past :: !(Maybe True'),
                                          _future :: !(Maybe True')}
instance Data.Binary.Binary Method'Stories'activateStealthMode
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1471926630 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _past_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        _future_3 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 1);
                                        GHC.Base.pure (Method'Stories'activateStealthMode _past_2 _future_3)}}};
           put to_be_encoded_4 = do {Data.Binary.Put.putWord32le 1471926630;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_4._future,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_4._past,
                                                              0)];
                                     Data.Binary.put to_be_encoded_4._past;
                                     Data.Binary.put to_be_encoded_4._future}}
instance TLFunctionʼ Method'Stories'activateStealthMode Updates
data Method'Stories'sendReaction
    = Method'Stories'sendReaction {_add_to_recent :: !(Maybe True'),
                                   _peer :: !InputPeer,
                                   _story_id :: !Int',
                                   _reaction :: !Reaction}
instance Data.Binary.Binary Method'Stories'sendReaction
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2144810674 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _add_to_recent_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        _peer_3 <- Data.Binary.get;
                                        _story_id_4 <- Data.Binary.get;
                                        _reaction_5 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Stories'sendReaction _add_to_recent_2 _peer_3 _story_id_4 _reaction_5)}}};
           put to_be_encoded_6 = do {Data.Binary.Put.putWord32le 2144810674;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_6._add_to_recent,
                                                              0)];
                                     Data.Binary.put to_be_encoded_6._add_to_recent;
                                     Data.Binary.put to_be_encoded_6._peer;
                                     Data.Binary.put to_be_encoded_6._story_id;
                                     Data.Binary.put to_be_encoded_6._reaction}}
instance TLFunctionʼ Method'Stories'sendReaction Updates
data Method'Stories'getPeerStories
    = Method'Stories'getPeerStories {_peer :: !InputPeer}
instance Data.Binary.Binary Method'Stories'getPeerStories
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {743103056 -> do {_peer_1 <- Data.Binary.get;
                                       GHC.Base.pure (Method'Stories'getPeerStories _peer_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 743103056;
                                     Data.Binary.put to_be_encoded_2._peer}}
instance TLFunctionʼ Method'Stories'getPeerStories
                     Stories'PeerStories
data Method'Stories'getAllReadPeerStories
    = Method'Stories'getAllReadPeerStories {}
instance Data.Binary.Binary Method'Stories'getAllReadPeerStories
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2606426105 -> GHC.Base.pure Method'Stories'getAllReadPeerStories}};
           put to_be_encoded_1 = do {Data.Binary.Put.putWord32le 2606426105;
                                     GHC.Base.pure ()}}
instance TLFunctionʼ Method'Stories'getAllReadPeerStories Updates
data Method'Stories'getPeerMaxIDs
    = Method'Stories'getPeerMaxIDs {_id :: !(Vector InputPeer)}
instance Data.Binary.Binary Method'Stories'getPeerMaxIDs
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1398375363 -> do {_id_1 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Stories'getPeerMaxIDs _id_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 1398375363;
                                     Data.Binary.put to_be_encoded_2._id}}
instance TLFunctionʼ Method'Stories'getPeerMaxIDs (Vector Int')
data Method'Stories'getChatsToSend
    = Method'Stories'getChatsToSend {}
instance Data.Binary.Binary Method'Stories'getChatsToSend
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {2775223136 -> GHC.Base.pure Method'Stories'getChatsToSend}};
           put to_be_encoded_1 = do {Data.Binary.Put.putWord32le 2775223136;
                                     GHC.Base.pure ()}}
instance TLFunctionʼ Method'Stories'getChatsToSend Messages'Chats
data Method'Stories'togglePeerStoriesHidden
    = Method'Stories'togglePeerStoriesHidden {_peer :: !InputPeer,
                                              _hidden :: !Bool}
instance Data.Binary.Binary Method'Stories'togglePeerStoriesHidden
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3171161540 -> do {_peer_1 <- Data.Binary.get;
                                        _hidden_2 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Stories'togglePeerStoriesHidden _peer_1 _hidden_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 3171161540;
                                     Data.Binary.put to_be_encoded_3._peer;
                                     Data.Binary.put to_be_encoded_3._hidden}}
instance TLFunctionʼ Method'Stories'togglePeerStoriesHidden Bool
data Method'Stories'getStoryReactionsList
    = Method'Stories'getStoryReactionsList {_forwards_first :: !(Maybe True'),
                                            _peer :: !InputPeer,
                                            _id :: !Int',
                                            _reaction :: !(Maybe Reaction),
                                            _offset :: !(Maybe String'),
                                            _limit :: !Int'}
instance Data.Binary.Binary Method'Stories'getStoryReactionsList
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {3115485215 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _forwards_first_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 2);
                                        _peer_3 <- Data.Binary.get;
                                        _id_4 <- Data.Binary.get;
                                        _reaction_5 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        _offset_6 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 1);
                                        _limit_7 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Stories'getStoryReactionsList _forwards_first_2 _peer_3 _id_4 _reaction_5 _offset_6 _limit_7)}}};
           put to_be_encoded_8 = do {Data.Binary.Put.putWord32le 3115485215;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_8._offset,
                                                              1),
                                                             (Data.Maybe.isJust to_be_encoded_8._reaction,
                                                              0),
                                                             (Data.Maybe.isJust to_be_encoded_8._forwards_first,
                                                              2)];
                                     Data.Binary.put to_be_encoded_8._forwards_first;
                                     Data.Binary.put to_be_encoded_8._peer;
                                     Data.Binary.put to_be_encoded_8._id;
                                     Data.Binary.put to_be_encoded_8._reaction;
                                     Data.Binary.put to_be_encoded_8._offset;
                                     Data.Binary.put to_be_encoded_8._limit}}
instance TLFunctionʼ Method'Stories'getStoryReactionsList
                     Stories'StoryReactionsList
data Method'Premium'getBoostsList
    = Method'Premium'getBoostsList {_gifts :: !(Maybe True'),
                                    _peer :: !InputPeer,
                                    _offset :: !String',
                                    _limit :: !Int'}
instance Data.Binary.Binary Method'Premium'getBoostsList
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1626764896 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _gifts_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        _peer_3 <- Data.Binary.get;
                                        _offset_4 <- Data.Binary.get;
                                        _limit_5 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Premium'getBoostsList _gifts_2 _peer_3 _offset_4 _limit_5)}}};
           put to_be_encoded_6 = do {Data.Binary.Put.putWord32le 1626764896;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_6._gifts,
                                                              0)];
                                     Data.Binary.put to_be_encoded_6._gifts;
                                     Data.Binary.put to_be_encoded_6._peer;
                                     Data.Binary.put to_be_encoded_6._offset;
                                     Data.Binary.put to_be_encoded_6._limit}}
instance TLFunctionʼ Method'Premium'getBoostsList
                     Premium'BoostsList
data Method'Premium'getMyBoosts = Method'Premium'getMyBoosts {}
instance Data.Binary.Binary Method'Premium'getMyBoosts
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {199719754 -> GHC.Base.pure Method'Premium'getMyBoosts}};
           put to_be_encoded_1 = do {Data.Binary.Put.putWord32le 199719754;
                                     GHC.Base.pure ()}}
instance TLFunctionʼ Method'Premium'getMyBoosts Premium'MyBoosts
data Method'Premium'applyBoost
    = Method'Premium'applyBoost {_slots :: !(Maybe (Vector Int')),
                                 _peer :: !InputPeer}
instance Data.Binary.Binary Method'Premium'applyBoost
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {1803396934 -> do {_flags_1 <- Data.Binary.Get.getWord32le;
                                        _slots_2 <- Data.Binary.tlHandleOpt _flags_1 (GHC.Maybe.Just 0);
                                        _peer_3 <- Data.Binary.get;
                                        GHC.Base.pure (Method'Premium'applyBoost _slots_2 _peer_3)}}};
           put to_be_encoded_4 = do {Data.Binary.Put.putWord32le 1803396934;
                                     Data.Binary.encodeFlag [(Data.Maybe.isJust to_be_encoded_4._slots,
                                                              0)];
                                     Data.Binary.put to_be_encoded_4._slots;
                                     Data.Binary.put to_be_encoded_4._peer}}
instance TLFunctionʼ Method'Premium'applyBoost Premium'MyBoosts
data Method'Premium'getBoostsStatus
    = Method'Premium'getBoostsStatus {_peer :: !InputPeer}
instance Data.Binary.Binary Method'Premium'getBoostsStatus
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {70197089 -> do {_peer_1 <- Data.Binary.get;
                                      GHC.Base.pure (Method'Premium'getBoostsStatus _peer_1)}}};
           put to_be_encoded_2 = do {Data.Binary.Put.putWord32le 70197089;
                                     Data.Binary.put to_be_encoded_2._peer}}
instance TLFunctionʼ Method'Premium'getBoostsStatus
                     Premium'BoostsStatus
data Method'Premium'getUserBoosts
    = Method'Premium'getUserBoosts {_peer :: !InputPeer,
                                    _user_id :: !InputUser}
instance Data.Binary.Binary Method'Premium'getUserBoosts
    where {get = do {tmp_0 <- Data.Binary.Get.getWord32le;
                     case tmp_0 of
                     {965037343 -> do {_peer_1 <- Data.Binary.get;
                                       _user_id_2 <- Data.Binary.get;
                                       GHC.Base.pure (Method'Premium'getUserBoosts _peer_1 _user_id_2)}}};
           put to_be_encoded_3 = do {Data.Binary.Put.putWord32le 965037343;
                                     Data.Binary.put to_be_encoded_3._peer;
                                     Data.Binary.put to_be_encoded_3._user_id}}
instance TLFunctionʼ Method'Premium'getUserBoosts
                     Premium'BoostsList
